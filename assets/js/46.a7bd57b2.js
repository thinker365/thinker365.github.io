(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{679:function(e,t,n){"use strict";n.r(t);var s=n(35),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#第一章-数据结构和算法"}},[e._v("第一章：数据结构和算法")]),n("ul",[n("li",[n("a",{attrs:{href:"#_1-1-解压序列赋值给多个变量"}},[e._v("1.1 解压序列赋值给多个变量")])]),n("li",[n("a",{attrs:{href:"#_1-2-解压可迭代对象赋值给多个变量"}},[e._v("1.2 解压可迭代对象赋值给多个变量")])]),n("li",[n("a",{attrs:{href:"#_1-3-保留最后-n-个元素"}},[e._v("1.3 保留最后 N 个元素")])])])]),n("li",[n("a",{attrs:{href:"#第二章-字符串和文本"}},[e._v("第二章：字符串和文本")])]),n("li",[n("a",{attrs:{href:"#第三章-数字日期和时间"}},[e._v("第三章：数字日期和时间")])]),n("li",[n("a",{attrs:{href:"#第四章-迭代器与生成器"}},[e._v("第四章：迭代器与生成器")])]),n("li",[n("a",{attrs:{href:"#"}})]),n("li",[n("a",{attrs:{href:"#"}})]),n("li",[n("a",{attrs:{href:"#第五章-文件与-io"}},[e._v("第五章：文件与 IO")])]),n("li",[n("a",{attrs:{href:"#第六章-数据编码和处理"}},[e._v("第六章：数据编码和处理")])]),n("li",[n("a",{attrs:{href:"#第七章-函数"}},[e._v("第七章：函数")])]),n("li",[n("a",{attrs:{href:"#第八章-类与对象"}},[e._v("第八章：类与对象")]),n("ul",[n("li",[n("a",{attrs:{href:"#_8-1-改变对象的字符串显示"}},[e._v("8.1 改变对象的字符串显示")])])])]),n("li",[n("a",{attrs:{href:"#第九章-元编程"}},[e._v("第九章：元编程")]),n("ul",[n("li",[n("a",{attrs:{href:"#_9-1-在函数上添加包装器"}},[e._v("9.1 在函数上添加包装器")])]),n("li",[n("a",{attrs:{href:"#_9-2-创建装饰器时保留函数元信息"}},[e._v("9.2 创建装饰器时保留函数元信息")])]),n("li",[n("a",{attrs:{href:"#_9-3-解除一个装饰器"}},[e._v("9.3 解除一个装饰器")])]),n("li",[n("a",{attrs:{href:"#_9-4-定义一个带参数的装饰器"}},[e._v("9.4 定义一个带参数的装饰器")])]),n("li",[n("a",{attrs:{href:"#_9-5-可自定义属性的装饰器"}},[e._v("9.5 可自定义属性的装饰器")])]),n("li",[n("a",{attrs:{href:"#_9-6-带可选参数的装饰器"}},[e._v("9.6 带可选参数的装饰器")])]),n("li",[n("a",{attrs:{href:"#_9-7-利用装饰器强制函数上的类型检查"}},[e._v("9.7 利用装饰器强制函数上的类型检查")])])])]),n("li",[n("a",{attrs:{href:"#第十章-模块与包"}},[e._v("第十章：模块与包")])]),n("li",[n("a",{attrs:{href:"#第十一章-网络与-web-编程"}},[e._v("第十一章：网络与 Web 编程")])]),n("li",[n("a",{attrs:{href:"#第十二章-并发编程"}},[e._v("第十二章：并发编程")]),n("ul",[n("li",[n("a",{attrs:{href:"#_12-1-启动与停止线程"}},[e._v("12.1 启动与停止线程")])]),n("li",[n("a",{attrs:{href:"#_12-2-判断线程是否已经启动"}},[e._v("12.2 判断线程是否已经启动")])]),n("li",[n("a",{attrs:{href:"#_12-3-线程间通信"}},[e._v("12.3 线程间通信")])]),n("li",[n("a",{attrs:{href:"#_12-4-给关键部分加锁"}},[e._v("12.4 给关键部分加锁")])]),n("li",[n("a",{attrs:{href:"#_12-5-防止死锁的加锁机制"}},[e._v("12.5 防止死锁的加锁机制")])]),n("li",[n("a",{attrs:{href:"#_12-6-保存线程的状态信息"}},[e._v("12.6 保存线程的状态信息")])]),n("li",[n("a",{attrs:{href:"#_12-7-创建一个线程池"}},[e._v("12.7 创建一个线程池")])]),n("li",[n("a",{attrs:{href:"#_12-8-简单的并行编程"}},[e._v("12.8 简单的并行编程")])]),n("li",[n("a",{attrs:{href:"#_12-9-python-的全局锁问题"}},[e._v("12.9 Python 的全局锁问题")])]),n("li",[n("a",{attrs:{href:"#_12-10-定义一个-actor-任务"}},[e._v("12.10 定义一个 Actor 任务")])])])]),n("li",[n("a",{attrs:{href:"#def-parse-int-s-return-int-s-class-testconversion-unittest-testcase-def-test-bad-int-self-self-assertraises-valueerror-parse-int-n-a-如果你想测试异常的具体值-需要用到另外一种方法-import-errnoclass-testio-unittest-testcase-def-test-file-not-found-self-try-f-open-file-not-found-except-ioerror-as-e-self-assertequal-e-errno-errno-enoent-else-self-fail-ioerror-not-raised-讨论assertraises-方法为测试异常存在性提供了一个简便方法。一个常见的陷阱是手动去进行异常检测。比如-class-testconversion-unittest-testcase-def-test-bad-int-self-try-r-parse-int-n-a-except-valueerror-as-e-self-assertequal-type-e-valueerror-这种方法的问题在于它很容易遗漏其他情况-比如没有任何异常抛出的时候。那么你还得需要增加另外的检测过程-如下面这样-class-testconversion-unittest-testcase-def-test-bad-int-self-try-r-parse-int-n-a-except-valueerror-as-e-self-assertequal-type-e-valueerror-else-self-fail-valueerror-not-raised-assertraises-方法会处理所有细节-因此你应该使用它。assertraises-的一个缺点是它测不了异常具体的值是多少。为了测试异常值-可以使用-assertraisesregex-方法-它可同时测试异常的存在以及通过正则式匹配异常的字符串表示。例如-class-testconversion-unittest-testcase-def-test-bad-int-self-self-assertraisesregex-valueerror-invalid-literal-parse-int-n-a-assertraises-和-assertraisesregex-还有一个容易忽略的地方就是它们还能被当做上下文管理器使用-class-testconversion-unittest-testcase-def-test-bad-int-self-with-self-assertraisesregex-valueerror-invalid-literal-r-parse-int-n-a-但你的测试涉及到多个执行步骤的时候这种方法就很有用了。14-4-将测试输出用日志记录到文件中问题你希望将单元测试的输出写到到某个文件中去-而不是打印到标准输出。解决方案运行单元测试一个常见技术就是在测试文件底部加入下面这段代码片段-import-unittestclass-mytest-unittest-testcase-passif-name-main-unittest-main-这样的话测试文件就是可执行的-并且会将运行测试的结果打印到标准输出上。如果你想重定向输出-就需要像下面这样修改-main-函数-import-sysdef-main-out-sys-stderr-verbosity-2-loader-unittest-testloader-suite-loader-loadtestsfrommodule-sys-modules-name-unittest-texttestrunner-out-verbosity-verbosity-run-suite-if-name-main-with-open-testing-out-w-as-f-main-f-讨论本节感兴趣的部分并不是将测试结果重定向到一个文件中-而是通过这样做向你展示了-unittest-模块中一些值得关注的内部工作原理。unittest-模块首先会组装一个测试套件。这个测试套件包含了你定义的各种方法。一旦套件组装完成-它所包含的测试就可以被执行了。这-两-步-是-分-开-的-unittest-testloader-实-例-被-用-来-组-装-测-试-套-件。loadtestsfrommodule-是它定义的方法之一-用来收集测试用例。它会为-testcase类扫描某个模块并将其中的测试方法提取出来。如果你想进行细粒度的控制-可以使用-loadtestsfromtestcase-方法来从某个继承-testcase-的类中提取测试方法。texttestrunner-类是一个测试运行类的例子-这个类的主要用途是执行某个测试套件中包含的测试方法。这个类跟执行-unittest-main-函数所使用的测试运行器是一样的。不过-我们在这里对它进行了一些列底层配置-包括输出文件和提升级别。尽管本节例子代码很少-但是能指导你如何对-unittest-框架进行更进一步的自定义。要想自定义测试套件的装配方式-你可以对-testloader-类执行更多的操作。为了自定义测试运行-你可以构造一个自己的测试运行类来模拟-texttestrunner-的功能。而这些已经超出了本节的范围。unittest-模块的文档对底层实现原理有更深入的讲解-可以去看看。14-5-忽略或期望测试失败问题你想在单元测试中忽略或标记某些测试会按照预期运行失败。解决方案unittest-模块有装饰器可用来控制对指定测试方法的处理-例如-import-unittestimport-osimport-platformclass-tests-unittest-testcase-def-test-0-self-self-asserttrue-true-unittest-skip-skipped-test-def-test-1-self-self-fail-should-have-failed-unittest-skipif-os-name-posix-not-supported-on-unix-def-test-2-self-import-winreg-unittest-skipunless-platform-system-darwin-mac-specific-test-def-test-3-self-self-asserttrue-true-unittest-expectedfailuredef-test-4-self-self-assertequal-2-2-5-if-name-main-unittest-main-如果你在-mac-上运行这段代码-你会得到如下输出-bash-python3-testsample-py-vtest-0-main-tests-oktest-1-main-tests-skipped-skipped-test-test-2-main-tests-skipped-not-supported-on-unix-test-3-main-tests-oktest-4-main-tests-expected-failure"}},[e._v("def parse_int(s):\nreturn int(s)\nclass TestConversion(unittest.TestCase):\ndef testbadint(self):\nself.assertRaises(ValueError, parse_int, 'N/A')\n如果你想测试异常的具体值，需要用到另外一种方法：\nimport errno\nclass TestIO(unittest.TestCase):\ndef testfilenot_found(self):\ntry:f = open('/file/not/found')\nexcept IOError as e:\nself.assertEqual(e.errno, errno.ENOENT)\nelse:\nself.fail('IOError not raised')\n讨论\nassertRaises() 方法为测试异常存在性提供了一个简便方法。一个常见的陷阱是\n手动去进行异常检测。比如：\nclass TestConversion(unittest.TestCase):\ndef testbadint(self):\ntry:r = parse_int('N/A')\nexcept ValueError as e:\nself.assertEqual(type(e), ValueError)\n这种方法的问题在于它很容易遗漏其他情况，比如没有任何异常抛出的时候。那么\n你还得需要增加另外的检测过程，如下面这样：\nclass TestConversion(unittest.TestCase):\ndef testbadint(self):\ntry:r = parse_int('N/A')\nexcept ValueError as e:\nself.assertEqual(type(e), ValueError)\nelse:\nself.fail('ValueError not raised')\nassertRaises() 方法会处理所有细节，因此你应该使用它。\nassertRaises() 的一个缺点是它测不了异常具体的值是多少。为了测试异常值，\n可以使用 assertRaisesRegex() 方法，它可同时测试异常的存在以及通过正则式匹配\n异常的字符串表示。例如：\nclass TestConversion(unittest.TestCase):\ndef testbadint(self):\nself.assertRaisesRegex(ValueError, 'invalid literal .*',\nparse_int, 'N/A')\nassertRaises() 和 assertRaisesRegex() 还有一个容易忽略的地方就是它们还\n能被当做上下文管理器使用：\nclass TestConversion(unittest.TestCase):\ndef testbadint(self):\nwith self.assertRaisesRegex(ValueError, 'invalid literal .*'):\nr = parse_int('N/A')\n但你的测试涉及到多个执行步骤的时候这种方法就很有用了。\n14.4 将测试输出用日志记录到文件中\n问题\n你希望将单元测试的输出写到到某个文件中去，而不是打印到标准输出。\n解决方案\n运行单元测试一个常见技术就是在测试文件底部加入下面这段代码片段：\nimport unittest\nclass MyTest(unittest.TestCase):\npass\nif _name == 'main_':\nunittest.main()\n这样的话测试文件就是可执行的，并且会将运行测试的结果打印到标准输出上。如\n果你想重定向输出，就需要像下面这样修改 main() 函数：\nimport sys\ndef main(out=sys.stderr, verbosity=2):\nloader = unittest.TestLoader()\nsuite = loader.loadTestsFromModule(sys.modules[_name_])\nunittest.TextTestRunner(out,verbosity=verbosity).run(suite)\nif _name == 'main_':\nwith open('testing.out', 'w') as f:\nmain(f)\n讨论\n本节感兴趣的部分并不是将测试结果重定向到一个文件中，而是通过这样做向你\n展示了 unittest 模块中一些值得关注的内部工作原理。\nunittest 模块首先会组装一个测试套件。这个测试套件包含了你定义的各种方法。\n一旦套件组装完成，它所包含的测试就可以被执行了。\n这 两 步 是 分 开 的，unittest.TestLoader 实 例 被 用 来 组 装 测 试 套 件。\nloadTestsFromModule() 是它定义的方法之一，用来收集测试用例。它会为 TestCase\n类扫描某个模块并将其中的测试方法提取出来。如果你想进行细粒度的控制，可以\n使用 loadTestsFromTestCase() 方法来从某个继承 TestCase 的类中提取测试方法。\nTextTestRunner 类是一个测试运行类的例子，这个类的主要用途是执行某个测试套件\n中包含的测试方法。这个类跟执行 unittest.main() 函数所使用的测试运行器是一样\n的。不过，我们在这里对它进行了一些列底层配置，包括输出文件和提升级别。尽管本\n节例子代码很少，但是能指导你如何对 unittest 框架进行更进一步的自定义。要想自\n定义测试套件的装配方式，你可以对 TestLoader 类执行更多的操作。为了自定义测试\n运行，你可以构造一个自己的测试运行类来模拟 TextTestRunner 的功能。而这些已经\n超出了本节的范围。unittest 模块的文档对底层实现原理有更深入的讲解，可以去看\n看。\n14.5 忽略或期望测试失败\n问题\n你想在单元测试中忽略或标记某些测试会按照预期运行失败。\n解决方案\nunittest 模块有装饰器可用来控制对指定测试方法的处理，例如：\nimport unittest\nimport os\nimport platform\nclass Tests(unittest.TestCase):\ndef test_0(self):\nself.assertTrue(True)\n@unittest.skip('skipped test')\ndef test_1(self):\nself.fail('should have failed!')\n@unittest.skipIf(os.name=='posix', 'Not supported on Unix')\ndef test_2(self):\nimport winreg\n@unittest.skipUnless(platform.system() == 'Darwin', 'Mac specific test')\ndef test_3(self):\nself.assertTrue(True)\n@unittest.expectedFailure\ndef test_4(self):\nself.assertEqual(2+2, 5)\nif _name == 'main_':\nunittest.main()\n如果你在 Mac 上运行这段代码，你会得到如下输出：\nbash % python3 testsample.py -v\ntest0 (main_.Tests) ... ok\ntest1 (main_.Tests) ... skipped 'skipped test'\ntest2 (main_.Tests) ... skipped 'Not supported on Unix'\ntest3 (main_.Tests) ... ok\ntest4 (main_.Tests) ... expected failure")])])])]),n("p"),e._v(" "),n("h2",{attrs:{id:"第一章-数据结构和算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一章-数据结构和算法"}},[e._v("#")]),e._v(" 第一章：数据结构和算法")]),e._v(" "),n("h3",{attrs:{id:"_1-1-解压序列赋值给多个变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-解压序列赋值给多个变量"}},[e._v("#")]),e._v(" 1.1 解压序列赋值给多个变量")]),e._v(" "),n("p",[e._v("任何的序列（或者是可迭代对象）可以通过一个简单的赋值语句解压并赋值给多个变量。唯一的前提就是变量的数量必须跟序列元素的数量是一样的。")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" p "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" p\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" x "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" y "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" data "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'ACME'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("50")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("91.1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2012")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" shares"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" price"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" date "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" data\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" name\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'ACME'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" date\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2012")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" shares"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" price"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("year"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" mon"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" day"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" data\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" name\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'ACME'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" year\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2012")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" mon\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" day\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br")])]),n("p",[e._v("实际上，这种解压赋值可以用在任何可迭代对象上面，而不仅仅是列表或者元组。包括字符串，文件对象，迭代器和生成器。")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" s "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Hello'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" e "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" s\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" a\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'H'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" b\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'e'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" e\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'o'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("有时候，你可能只想解压一部分，丢弃其他的值。对于这种情况 Python 并没有提供特殊的语法。但是你可以使用任意变量名去占位，到时候丢掉这些变量就行了。")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" data "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'ACME'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("50")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("91.1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2012")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" _"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" shares"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" price"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" _ "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" data\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" shares\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("50")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" price\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("91.1")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("h3",{attrs:{id:"_1-2-解压可迭代对象赋值给多个变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-解压可迭代对象赋值给多个变量"}},[e._v("#")]),e._v(" 1.2 解压可迭代对象赋值给多个变量")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" record "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Dave'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'dave@example.com'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'773-555-1212'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'847-555-1212'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" email"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("phone_numbers "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" record\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" name\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Dave'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" email\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'dave@example.com'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" phone_numbers\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'773-555-1212'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'847-555-1212'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("ul",[n("li",[e._v("值得注意的是上面解压出的 phone_numbers 变量永远都是列表类型，不管解压的电话号码数量是多少（包括 0 个）。所以，任何使用到 phone_numbers 变量的代码就不需要做多余的类型检查去确认它是否是列表类型了。")]),e._v(" "),n("li",[e._v("星号表达式也能用在列表的开始部分。")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("trailing"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" current "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" trailing\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" current\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("ul",[n("li",[e._v("扩展的迭代解压语法是专门为解压不确定个数或任意个数元素的可迭代对象而设计的。通常，这些可迭代对象的元素结构有确定的规则（比如第 1 个元素后面都是电话号码），星号表达式让开发人员可以很容易的利用这些规则来解压出元素来。而不是通过一些比较复杂的手段去获取这些关联的元素值。")]),e._v(" "),n("li",[e._v("值得注意的是，星号表达式在迭代元素为可变长元组的序列时是很有用的。")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[e._v("records "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" \n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'foo'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'bar'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'hello'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'foo'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("do_foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'foo'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("do_bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'bar'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" records"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" tag "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'foo'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tdo_foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("elif")]),e._v(" tag "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'bar'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tdo_bar"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("p",[e._v("星号解压语法在字符串操作的时候也会很有用，比如字符串的分割。")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" line "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" uname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("fields"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" homedir"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" sh "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" line"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("split"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("':'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" uname\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'nobody'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" homedir\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/var/empty'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" sh\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/usr/bin/false'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("有时候，你想解压一些元素后丢弃它们，你不能简单就使用 * ，但是你可以使用一个普通的废弃名称，比如 _ 或者 ign （ignore）。")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" record "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'ACME'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("50")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("123.45")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("18")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2012")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("_"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("_"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" year"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" record\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" name\n"),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'ACME'")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" year\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2012")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("如果你够聪明的话，还能用这种分割语法去巧妙的实现递归算法。比如：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sum")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\thead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("tail "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" items\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" head "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("sum")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("tail"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" tail "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" head\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("sum")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("items"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("36")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("然后，由于语言层面的限制，递归并不是 Python 擅长的。因此，最后那个递归演示仅仅是个好奇的探索罢了，对这个不要太认真了。")]),e._v(" "),n("h3",{attrs:{id:"_1-3-保留最后-n-个元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-保留最后-n-个元素"}},[e._v("#")]),e._v(" 1.3 保留最后 N 个元素")]),e._v(" "),n("p",[e._v("保留有限历史记录正是 collections.deque 大显身手的时候。\nfrom collections import deque\ndef search(lines, pattern, history=5):\nprevious_lines = deque(maxlen=history)\nfor line in lines:\nif pattern in line:\nyield line, previous_lines\nprevious_lines.append(line)\n# Example use on a file\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nwith open(r'../../cookbook/somefile.txt') as f:\nfor line, prevlines in search(f, 'python', 5):\nfor pline in prevlines:\nprint(pline, end='')\nprint(line, end='')\nprint('-' * 20)\n讨论\n我们在写查询元素的代码时，通常会使用包含 yield 表达式的生成器函数，也就\n是我们上面示例代码中的那样。这样可以将搜索过程代码和使用搜索结果代码解耦。如\n果你还不清楚什么是生成器，请参看 4.3 节。\n使用 deque(maxlen=N) 构造函数会新建一个固定大小的队列。当新的元素加入并\n且这个队列已满的时候，最老的元素会自动被移除掉。\n代码示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("q = deque(maxlen=3)\nq.append(1)\nq.append(2)\nq.append(3)\nq\ndeque([1, 2, 3], maxlen=3)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("q.append(4)\nq\ndeque([2, 3, 4], maxlen=3)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("q.append(5)\nq\ndeque([3, 4, 5], maxlen=3)\n尽管你也可以手动在一个列表上实现这一的操作（比如增加、删除等等）。但是这\n里的队列方案会更加优雅并且运行得更快些。\n更一般的，deque 类可以被用在任何你只需要一个简单队列数据结构的场合。如果\n你不设置最大队列大小，那么就会得到一个无限大小队列，你可以在队列的两端执行添\n加和弹出元素的操作。\n代码示例：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("q = deque()\nq.append(1)\nq.append(2)\nq.append(3)\nq\ndeque([1, 2, 3])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("q.appendleft(4)\nq\ndeque([4, 1, 2, 3])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("q.pop()\n3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("q\ndeque([4, 1, 2])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("q.popleft()\n4\n在队列两端插入或删除元素时间复杂度都是 O(1) ，而在列表的开头插入或删除元\n素的时间复杂度为 O(N) 。\n1.4 查找最大或最小的 N 个元素\n问题\n怎样从一个集合中获得最大或者最小的 N 个元素列表？\n解决方案\nheapq 模块有两个函数：nlargest() 和 nsmallest() 可以完美解决这个问题。\nimport heapq\nnums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\nprint(heapq.nlargest(3, nums)) # Prints [42, 37, 23]\nprint(heapq.nsmallest(3, nums)) # Prints [-4, 1, 2]\n两个函数都能接受一个关键字参数，用于更复杂的数据结构中：\nportfolio = [ {'name': 'IBM', 'shares': 100, 'price': 91.1},\n{'name': 'AAPL', 'shares': 50, 'price': 543.22},\n{'name': 'FB', 'shares': 200, 'price': 21.09},\n{'name': 'HPQ', 'shares': 35, 'price': 31.75},\n{'name': 'YHOO', 'shares': 45, 'price': 16.35},\n{'name': 'ACME', 'shares': 75, 'price': 115.65} ]\ncheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])\nexpensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])\n译者注：上面代码在对每个元素进行对比的时候，会以 price 的值进行比较。\n讨论\n如果你想在一个集合中查找最小或最大的 N 个元素，并且 N 小于集合元素数量，\n那么这些函数提供了很好的性能。因为在底层实现里面，首先会先将集合数据进行堆排\n序后放入一个列表中：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\nimport heapq\nheap = list(nums)\nheapq.heapify(heap)\nheap\n[-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("堆数据结构最重要的特征是 heap[0] 永远是最小的元素。并且剩余的元素可以很\n容易的通过调用 heapq.heappop() 方法得到，该方法会先将第一个元素弹出来，然后\n用下一个最小的元素来取代被弹出元素（这种操作时间复杂度仅仅是 O(log N)，N 是\n堆大小）。比如，如果想要查找最小的 3 个元素，你可以这样做：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("heapq.heappop(heap)\n-4")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("heapq.heappop(heap)\n1")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("heapq.heappop(heap)\n2\n当要查找的元素个数相对比较小的时候，函数 nlargest() 和 nsmallest() 是很\n合适的。如果你仅仅想查找唯一的最小或最大（N=1）的元素的话，那么使用 min() 和\nmax() 函数会更快些。类似的，如果 N 的大小和集合大小接近的时候，通常先排序这个\n集合然后再使用切片操作会更快点（sorted(items)[:N] 或者是 sorted(items)[-N:]\n）。需要在正确场合使用函数 nlargest() 和 nsmallest() 才能发挥它们的优势（如果\nN 快接近集合大小了，那么使用排序操作会更好些）。\n尽管你没有必要一定使用这里的方法，但是堆数据结构的实现是一个很有趣并且\n值得你深入学习的东西。基本上只要是数据结构和算法书籍里面都会有提及到。heapq\n模块的官方文档里面也详细的介绍了堆数据结构底层的实现细节。\n1.5 实现一个优先级队列\n问题\n怎样实现一个按优先级排序的队列？并且在这个队列上面每次 pop 操作总是返回\n优先级最高的那个元素\n解决方案\n下面的类利用 heapq 模块实现了一个简单的优先级队列：\nimport heapq\nclass PriorityQueue:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._queue = []\nself._index = 0\ndef push(self, item, priority):\nheapq.heappush(self._queue, (-priority, self._index, item))\nself._index += 1\ndef pop(self):\nreturn heapq.heappop(self._queue)[-1]\n下面是它的使用方式：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("class Item:\n... def "),n("strong",[e._v("init")]),e._v("(self, name):\n... self.name = name\n... def "),n("strong",[e._v("repr")]),e._v("(self):\n... return 'Item({!r})'.format(self.name)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("q = PriorityQueue()\nq.push(Item('foo'), 1)\nq.push(Item('bar'), 5)\nq.push(Item('spam'), 4)\nq.push(Item('grok'), 1)\nq.pop()\nItem('bar')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("q.pop()\nItem('spam')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("q.pop()\nItem('foo')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("q.pop()\nItem('grok')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("仔细观察可以发现，第一个 pop() 操作返回优先级最高的元素。另外注意到如果\n两个有着相同优先级的元素（foo 和 grok ），pop 操作按照它们被插入到队列的顺序\n返回的。\n讨论\n这一小节我们主要关注 heapq 模块的使用。函数 heapq.heappush() 和 heapq.\nheappop() 分别在队列 _queue 上插入和删除第一个元素，并且队列 _queue 保证第一\n个元素拥有最高优先级（1.4 节已经讨论过这个问题）。heappop() 函数总是返回”最小\n的”的元素，这就是保证队列 pop 操作返回正确元素的关键。另外，由于 push 和 pop\n操作时间复杂度为 O(log N)，其中 N 是堆的大小，因此就算是 N 很大的时候它们运行\n速度也依旧很快。\n在上面代码中，队列包含了一个 (-priority, index, item) 的元组。优先级为负\n数的目的是使得元素按照优先级从高到低排序。这个跟普通的按优先级从低到高排序\n的堆排序恰巧相反。\nindex 变量的作用是保证同等优先级元素的正确排序。通过保存一个不断增加的\nindex 下标变量，可以确保元素按照它们插入的顺序排序。而且，index 变量也在相同\n优先级元素比较的时候起到重要作用。\n为了阐明这些，先假定 Item 实例是不支持排序的：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = Item('foo')\nb = Item('bar')\na < b\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: unorderable types: Item() < Item()")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你使用元组 (priority, item) ，只要两个元素的优先级不同就能比较。但是\n如果两个元素优先级一样的话，那么比较操作就会跟之前一样出错：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = (1, Item('foo'))\nb = (5, Item('bar'))\na < b\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c = (1, Item('grok'))\na < c\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: unorderable types: Item() < Item()")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("通过引入另外的 index 变量组成三元组 (priority, index, item) ，就能很好的\n避免上面的错误，因为不可能有两个元素有相同的 index 值。Python 在做元组比较时\n候，如果前面的比较已经可以确定结果了，后面的比较操作就不会发生了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = (1, 0, Item('foo'))\nb = (5, 1, Item('bar'))\nc = (1, 2, Item('grok'))\na < b\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a < c\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想在多个线程中使用同一个队列，那么你需要增加适当的锁和信号量机制。\n可以查看 12.3 小节的例子演示是怎样做的。\nheapq 模块的官方文档有更详细的例子程序以及对于堆理论及其实现的详细说明。\n1.6 字典中的键映射多个值\n问题\n怎样实现一个键对应多个值的字典（也叫 multidict）？\n解决方案\n一个字典就是一个键对应一个单值的映射。如果你想要一个键映射多个值，那么你\n就需要将这多个值放到另外的容器中，比如列表或者集合里面。比如，你可以像下面这\n样构造这样的字典：\nd = {'a' : [1, 2, 3],\n'b' : [4, 5] }e = {'a' : {1, 2, 3},\n'b' : {4, 5} }\n选择使用列表还是集合取决于你的实际需求。如果你想保持元素的插入顺序就应\n该使用列表，如果想去掉重复元素就使用集合（并且不关心元素的顺序问题）。\n你可以很方便的使用 collections 模块中的 defaultdict 来构造这样的字典。\ndefaultdict 的一个特征是它会自动初始化每个 key 刚开始对应的值，所以你只需要\n关注添加元素操作了。比如：\nfrom collections import defaultdict\nd = defaultdict(list)\nd['a'].append(1)\nd['a'].append(2)\nd['b'].append(4) d = defaultdict(set)\nd['a'].add(1)\nd['a'].add(2)\nd['b'].add(4)\n需要注意的是，defaultdict 会自动为将要访问的键（就算目前字典中并不存在\n这样的键）创建映射实体。如果你并不需要这样的特性，你可以在一个普通的字典上使\n用 setdefault() 方法来代替。比如：\nd = {} # A regular dictionary\nd.setdefault('a', []).append(1) d.setdefault('a', []).append(2) d.setdefault('b', []).append(4)\n但是很多程序员觉得 setdefault() 用起来有点别扭。因为每次调用都得创建一个\n新的初始值的实例（例子程序中的空列表 [] ）。\n讨论\n一般来讲，创建一个多值映射字典是很简单的。但是，如果你选择自己实现的话，\n那么对于值的初始化可能会有点麻烦，你可能会像下面这样来实现：\nd = {}\nfor key, value in pairs:\nif key not in d:\nd[key] = []\nd[key].append(value)\n如果使用 defaultdict 的话代码就更加简洁了：\nd = defaultdict(list)\nfor key, value in pairs:\nd[key].append(value)\n这一小节所讨论的问题跟数据处理中的记录归类问题有大的关联。可以参考 1.15\n小节的例子。\n1.7 字典排序\n问题\n你想创建一个字典，并且在迭代或序列化这个字典的时候能够控制元素的顺序。\n解决方案\n为 了 能 控 制 一 个 字 典 中 元 素 的 顺 序， 你 可 以 使 用 collections 模 块 中 的\nOrderedDict 类。在迭代操作的时候它会保持元素被插入时的顺序，示例如下：\nfrom collections import OrderedDict\nd = OrderedDict()\nd['foo'] = 1\nd['bar'] = 2\nd['spam'] = 3\nd['grok'] = 4")]),e._v(" "),n("h1",{attrs:{id:"outputs-foo-1-bar-2-spam-3-grok-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#outputs-foo-1-bar-2-spam-3-grok-4"}},[e._v("#")]),e._v(' Outputs "foo 1", "bar 2", "spam 3", "grok 4"')]),e._v(" "),n("p",[e._v("for key in d:\nprint(key, d[key])\n当你想要构建一个将来需要序列化或编码成其他格式的映射的时候，OrderedDict\n是非常有用的。比如，你想精确控制以 JSON 编码后字段的顺序，你可以先使用\nOrderedDict 来构建这样的数据：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('import json\njson.dumps(d)\n\'{"foo": 1, "bar": 2, "spam": 3, "grok": 4}\'')])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\nOrderedDict 内部维护着一个根据键插入顺序排序的双向链表。每次当一个新的\n元素插入进来的时候，它会被放到链表的尾部。对于一个已经存在的键的重复赋值不会\n改变键的顺序。\n需要注意的是，一个 OrderedDict 的大小是一个普通字典的两倍，因为它内部维\n护着另外一个链表。所以如果你要构建一个需要大量 OrderedDict 实例的数据结构的\n时候（比如读取 100,000 行 CSV 数据到一个 OrderedDict 列表中去），那么你就得仔\n细权衡一下是否使用 OrderedDict 带来的好处要大过额外内存消耗的影响。\n1.8 字典的运算\n问题\n怎样在数据字典中执行一些计算操作（比如求最小值、最大值、排序等等）？\n解决方案\n考虑下面的股票名和价格映射字典：\nprices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75\n}\n为了对字典值执行计算操作，通常需要使用 zip() 函数先将键和值反转过来。比\n如，下面是查找最小和最大股票价格和股票值的代码：\nmin_price = min(zip(prices.values(), prices.keys()))")]),e._v(" "),n("h1",{attrs:{id:"min-price-is-10-75-fb"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#min-price-is-10-75-fb"}},[e._v("#")]),e._v(" min_price is (10.75, 'FB')")]),e._v(" "),n("p",[e._v("max_price = max(zip(prices.values(), prices.keys()))")]),e._v(" "),n("h1",{attrs:{id:"max-price-is-612-78-aapl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#max-price-is-612-78-aapl"}},[e._v("#")]),e._v(" max_price is (612.78, 'AAPL')")]),e._v(" "),n("p",[e._v("类似的，可以使用 zip() 和 sorted() 函数来排列字典数据：\nprices_sorted = sorted(zip(prices.values(), prices.keys()))")]),e._v(" "),n("h1",{attrs:{id:"prices-sorted-is-10-75-fb-37-2-hpq"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prices-sorted-is-10-75-fb-37-2-hpq"}},[e._v("#")]),e._v(" prices_sorted is [(10.75, 'FB'), (37.2, 'HPQ'),")]),e._v(" "),n("h1",{attrs:{id:"_45-23-acme-205-55-ibm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_45-23-acme-205-55-ibm"}},[e._v("#")]),e._v(" (45.23, 'ACME'), (205.55, 'IBM'),")]),e._v(" "),n("h1",{attrs:{id:"_612-78-aapl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_612-78-aapl"}},[e._v("#")]),e._v(" (612.78, 'AAPL')]")]),e._v(" "),n("p",[e._v("执行这些计算的时候，需要注意的是 zip() 函数创建的是一个只能访问一次的迭\n代器。比如，下面的代码就会产生错误：\nprices_and_names = zip(prices.values(), prices.keys())\nprint(min(prices_and_names)) # OK\nprint(max(prices_and_names)) # ValueError: max() arg is an empty sequence\n讨论\n如果你在一个字典上执行普通的数学运算，你会发现它们仅仅作用于键，而不是\n值。比如：\nmin(prices) # Returns 'AAPL'\nmax(prices) # Returns 'IBM'\n这个结果并不是你想要的，因为你想要在字典的值集合上执行这些计算。或许你会\n尝试着使用字典的 values() 方法来解决这个问题：\nmin(prices.values()) # Returns 10.75\nmax(prices.values()) # Returns 612.78\n不幸的是，通常这个结果同样也不是你想要的。你可能还想要知道对应的键的信息\n（比如那种股票价格是最低的？）。\n你可以在 min() 和 max() 函数中提供 key 函数参数来获取最小值或最大值对应的\n键的信息。比如：\nmin(prices, key=lambda k: prices[k]) # Returns 'FB'\nmax(prices, key=lambda k: prices[k]) # Returns 'AAPL'\n但是，如果还想要得到最小值，你又得执行一次查找操作。比如：\nmin_value = prices[min(prices, key=lambda k: prices[k])]\n前面的 zip() 函数方案通过将字典”反转”为 (值，键) 元组序列来解决了上述问\n题。当比较两个元组的时候，值会先进行比较，然后才是键。这样的话你就能通过一条\n简单的语句就能很轻松的实现在字典上的求最值和排序操作了。\n需要注意的是在计算操作中使用到了 (值，键) 对。当多个实体拥有相同的值的时\n候，键会决定返回结果。比如，在执行 min() 和 max() 操作的时候，如果恰巧最小或\n最大值有重复的，那么拥有最小或最大键的实体会返回：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("prices = { 'AAA' : 45.23, 'ZZZ': 45.23 }\nmin(zip(prices.values(), prices.keys()))\n(45.23, 'AAA')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("max(zip(prices.values(), prices.keys()))\n(45.23, 'ZZZ')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("1.9 查找两字典的相同点\n问题\n怎样在两个字典中寻寻找相同点（比如相同的键、相同的值等等）？\n解决方案\n考虑下面两个字典：\na = {'x' : 1, 'y' : 2, 'z' : 3 }b = {'w' : 10, 'x' : 11, 'y' : 2 }\n为了寻找两个字典的相同点，可以简单的在两字典的 keys() 或者 items() 方法返\n回结果上执行集合操作。比如：")]),e._v(" "),n("h1",{attrs:{id:"find-keys-in-common"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#find-keys-in-common"}},[e._v("#")]),e._v(" Find keys in common")]),e._v(" "),n("p",[e._v("a.keys() & b.keys() # { 'x', 'y' }")]),e._v(" "),n("h1",{attrs:{id:"find-keys-in-a-that-are-not-in-b"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#find-keys-in-a-that-are-not-in-b"}},[e._v("#")]),e._v(" Find keys in a that are not in b")]),e._v(" "),n("p",[e._v("a.keys() - b.keys() # { 'z' }")]),e._v(" "),n("h1",{attrs:{id:"find-key-value-pairs-in-common"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#find-key-value-pairs-in-common"}},[e._v("#")]),e._v(" Find (key,value) pairs in common")]),e._v(" "),n("p",[e._v("a.items() & b.items() # { ('y', 2) }\n这些操作也可以用于修改或者过滤字典元素。比如，假如你想以现有字典构造一个\n排除几个指定键的新字典。下面利用字典推导来实现这样的需求：")]),e._v(" "),n("h1",{attrs:{id:"make-a-new-dictionary-with-certain-keys-removed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-new-dictionary-with-certain-keys-removed"}},[e._v("#")]),e._v(" Make a new dictionary with certain keys removed")]),e._v(" "),n("p",[e._v("c = {key:a[key] for key in a.keys() - {'z', 'w'}}")]),e._v(" "),n("h1",{attrs:{id:"c-is-x-1-y-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c-is-x-1-y-2"}},[e._v("#")]),e._v(" c is {'x': 1, 'y': 2}")]),e._v(" "),n("p",[e._v("讨论\n一个字典就是一个键集合与值集合的映射关系。字典的 keys() 方法返回一个展现\n键集合的键视图对象。键视图的一个很少被了解的特性就是它们也支持集合操作，比如\n集合并、交、差运算。所以，如果你想对集合的键执行一些普通的集合操作，可以直接\n使用键视图对象而不用先将它们转换成一个 set。\n字典的 items() 方法返回一个包含 (键，值) 对的元素视图对象。这个对象同样也\n支持集合操作，并且可以被用来查找两个字典有哪些相同的键值对。\n尽管字典的 values() 方法也是类似，但是它并不支持这里介绍的集合操作。某种\n程度上是因为值视图不能保证所有的值互不相同，这样会导致某些集合操作会出现问\n题。不过，如果你硬要在值上面执行这些集合操作的话，你可以先将值集合转换成 set，\n然后再执行集合运算就行了。\n1.10 删除序列相同元素并保持顺序\n问题\n怎样在一个序列上面保持元素顺序的同时消除重复的值？\n解决方案\n如果序列上的值都是 hashable 类型，那么可以很简单的利用集合或者生成器来解\n决这个问题。比如：\ndef dedupe(items):\nseen = set()\nfor item in items:\nif item not in seen:\nyield item\nseen.add(item)\n下面是使用上述函数的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = [1, 5, 2, 1, 9, 1, 5, 10]\nlist(dedupe(a))\n[1, 5, 2, 9, 10]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这个方法仅仅在序列中元素为 hashable 的时候才管用。如果你想消除元素不可哈\n希（比如 dict 类型）的序列中重复元素的话，你需要将上述代码稍微改变一下，就像\n这样：\ndef dedupe(items, key=None):\nseen = set()\nfor item in items:\nval = item if key is None else key(item)\nif val not in seen:\nyield item\nseen.add(val)\n这里的 key 参数指定了一个函数，将序列元素转换成 hashable 类型。下面是它的\n用法示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = [ {'x':1, 'y':2}, {'x':1, 'y':3}, {'x':1, 'y':2}, {'x':2, 'y':4}]\nlist(dedupe(a, key=lambda d: (d['x'],d['y'])))\n[{'x': 1, 'y': 2}, {'x': 1, 'y': 3}, {'x': 2, 'y': 4}]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("list(dedupe(a, key=lambda d: d['x']))\n[{'x': 1, 'y': 2}, {'x': 2, 'y': 4}]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想基于单个字段、属性或者某个更大的数据结构来消除重复元素，第二种方\n案同样可以胜任。\n讨论\n如果你仅仅就是想消除重复元素，通常可以简单的构造一个集合。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a\n[1, 5, 2, 1, 9, 1, 5, 10]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("set(a)\n{1, 2, 10, 5, 9}")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("然而，这种方法不能维护元素的顺序，生成的结果中的元素位置被打乱。而上面的\n方法可以避免这种情况。\n在本节中我们使用了生成器函数让我们的函数更加通用，不仅仅是局限于列表处\n理。比如，如果如果你想读取一个文件，消除重复行，你可以很容易像这样做：\nwith open(somefile,'r') as f:\nfor line in dedupe(f):\n...\n上述 key 函数参数模仿了 sorted() , min() 和 max() 等内置函数的相似功能。可\n以参考 1.8 和 1.13 小节了解更多。\n1.11 命名切片\n问题\n你的程序已经出现一大堆已无法直视的硬编码切片下标，然后你想清理下代码。\n解决方案\n假定你有一段代码要从一个记录字符串中几个固定位置提取出特定的数据字段\n（比如文件或类似格式）：")]),e._v(" "),n("h6",{attrs:{id:"_0123456789012345678901234567890123456789012345678901234567890"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_0123456789012345678901234567890123456789012345678901234567890"}},[e._v("#")]),e._v(" 0123456789012345678901234567890123456789012345678901234567890'")]),e._v(" "),n("p",[e._v("record = '....................100 .......513.25 ..........'\ncost = int(record[20:23]) * float(record[31:37])\n与其那样写，为什么不想这样命名切片呢：\nSHARES = slice(20, 23)\nPRICE = slice(31, 37)\ncost = int(record[SHARES]) * float(record[PRICE])\n第二种版本中，你避免了大量无法理解的硬编码下标，使得你的代码更加清晰可读\n了。\n讨论\n一般来讲，代码中如果出现大量的硬编码下标值会使得可读性和可维护性大大降\n低。比如，如果你回过来看看一年前你写的代码，你会摸着脑袋想那时候自己到底想干\n嘛啊。这里的解决方案是一个很简单的方法让你更加清晰的表达代码到底要做什么。\n内置的 slice() 函数创建了一个切片对象，可以被用在任何切片允许使用的地方。\n比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("items = [0, 1, 2, 3, 4, 5, 6]\na = slice(2, 4)\nitems[2:4]\n[2, 3]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("items[a]\n[2, 3]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("items[a] = [10,11]\nitems\n[0, 1, 10, 11, 4, 5, 6]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("del items[a]\nitems\n[0, 1, 4, 5, 6]\n如果你有一个切片对象 a，你可以分别调用它的 a.start , a.stop , a.step 属性\n来获取更多的信息。比如：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a = slice(5, 50, 2)\na.start\n5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a.stop\n50")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a.step\n2")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("另外，你还能通过调用切片的 indices(size) 方法将它映射到一个确定大小的序\n列上，这个方法返回一个三元组 (start, stop, step) ，所有值都会被合适的缩小以\n满足边界限制，从而使用的时候避免出现 IndexError 异常。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = 'HelloWorld'\na.indices(len(s))\n(5, 10, 2)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for i in range(*a.indices(len(s))):\n... print(s[i])\n...\nWr\nd")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("1.12 序列中出现次数最多的元素\n问题\n怎样找出一个序列中出现次数最多的元素呢？\n解决方案\ncollections.Counter 类就是专门为这类问题而设计的，它甚至有一个有用的\nmost_common() 方法直接给了你答案。\n为了演示，先假设你有一个单词列表并且想找出哪个单词出现频率最高。你可以这\n样做：\nwords = [ 'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes', 'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the', 'eyes', \"don't\", 'look', 'around', 'the', 'eyes', 'look', 'into', 'my', 'eyes', \"you're\", 'under' ]\nfrom collections import Counter\nword_counts = Counter(words)")]),e._v(" "),n("h1",{attrs:{id:"出现频率最高的-3-个单词"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#出现频率最高的-3-个单词"}},[e._v("#")]),e._v(" 出现频率最高的 3 个单词")]),e._v(" "),n("p",[e._v("top_three = word_counts.most_common(3)\nprint(top_three)")]),e._v(" "),n("h1",{attrs:{id:"outputs-eyes-8-the-5-look-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#outputs-eyes-8-the-5-look-4"}},[e._v("#")]),e._v(" Outputs [('eyes', 8), ('the', 5), ('look', 4)]")]),e._v(" "),n("p",[e._v("讨论\n作为输入，Counter 对象可以接受任意的由可哈希（hashable）元素构成的序列\n对象。在底层实现上，一个 Counter 对象就是一个字典，将元素映射到它出现的次数\n上。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("word_counts['not'] 1\nword_counts['eyes'] 8")])])])]),e._v(" "),n("p",[e._v("如果你想手动增加计数，可以简单的用加法：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("morewords = ['why','are','you','not','looking','in','my','eyes']\nfor word in morewords:\n... word_counts[word] += 1\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("word_counts['eyes'] 9")])])])]),e._v(" "),n("p",[e._v("或者你可以使用 update() 方法：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("word_counts.update(morewords)")])])])]),e._v(" "),n("p",[e._v("Counter 实例一个鲜为人知的特性是它们可以很容易的跟数学运算操作相结合。比\n如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = Counter(words)\nb = Counter(morewords)\na\nCounter({'eyes': 8, 'the': 5, 'look': 4, 'into': 3, 'my': 3, 'around': 2,\n\"you're\": 1, \"don't\": 1, 'under': 1, 'not': 1})")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b\nCounter({'eyes': 1, 'looking': 1, 'are': 1, 'in': 1, 'not': 1, 'you': 1,\n'my': 1, 'why': 1})")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"combine-counts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#combine-counts"}},[e._v("#")]),e._v(" Combine counts")]),e._v(" "),n("p",[e._v("c = a + b\nc\nCounter({'eyes': 9, 'the': 5, 'look': 4, 'my': 4, 'into': 3, 'not': 2,\n'around': 2, \"you're\": 1, \"don't\": 1, 'in': 1, 'why': 1,\n'looking': 1, 'are': 1, 'under': 1, 'you': 1})")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"subtract-counts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subtract-counts"}},[e._v("#")]),e._v(" Subtract counts")]),e._v(" "),n("p",[e._v("d = a - b\nd\nCounter({'eyes': 7, 'the': 5, 'look': 4, 'into': 3, 'my': 2, 'around': 2,\n\"you're\": 1, \"don't\": 1, 'under': 1})")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("毫无疑问，Counter 对象在几乎所有需要制表或者计数数据的场合是非常有用的\n工具。在解决这类问题的时候你应该优先选择它，而不是手动的利用字典去实现。\n1.13 通过某个关键字排序一个字典列表\n问题\n你有一个字典列表，你想根据某个或某几个字典字段来排序这个列表。\n解决方案\n通过使用 operator 模块的 itemgetter 函数，可以非常容易的排序这样的数据结\n构。假设你从数据库中检索出来网站会员信息列表，并且以下列的数据结构返回：\nrows = [ {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003},\n{'fname': 'David', 'lname': 'Beazley', 'uid': 1002},\n{'fname': 'John', 'lname': 'Cleese', 'uid': 1001},\n{'fname': 'Big', 'lname': 'Jones', 'uid': 1004} ]\n根据任意的字典字段来排序输入结果行是很容易实现的，代码示例：\nfrom operator import itemgetter\nrows_by_fname = sorted(rows, key=itemgetter('fname'))\nrows_by_uid = sorted(rows, key=itemgetter('uid'))\nprint(rows_by_fname)\nprint(rows_by_uid)\n代码的输出如下：\n[{'fname': 'Big', 'uid': 1004, 'lname': 'Jones'},\n{'fname': 'Brian', 'uid': 1003, 'lname': 'Jones'},\n{'fname': 'David', 'uid': 1002, 'lname': 'Beazley'},\n{'fname': 'John', 'uid': 1001, 'lname': 'Cleese'}]\n[{'fname': 'John', 'uid': 1001, 'lname': 'Cleese'},\n{'fname': 'David', 'uid': 1002, 'lname': 'Beazley'},\n{'fname': 'Brian', 'uid': 1003, 'lname': 'Jones'},\n{'fname': 'Big', 'uid': 1004, 'lname': 'Jones'}]\nitemgetter() 函数也支持多个 keys，比如下面的代码\nrows_by_lfname = sorted(rows, key=itemgetter('lname','fname'))\nprint(rows_by_lfname)\n会产生如下的输出：\n[{'fname': 'David', 'uid': 1002, 'lname': 'Beazley'},\n{'fname': 'John', 'uid': 1001, 'lname': 'Cleese'},\n{'fname': 'Big', 'uid': 1004, 'lname': 'Jones'},\n{'fname': 'Brian', 'uid': 1003, 'lname': 'Jones'}]\n讨论\n在上面例子中，rows 被传递给接受一个关键字参数的 sorted() 内置函数。这个\n参数是 callable 类型，并且从 rows 中接受一个单一元素，然后返回被用来排序的值。\nitemgetter() 函数就是负责创建这个 callable 对象的。\noperator.itemgetter() 函数有一个被 rows 中的记录用来查找值的索引参数。可\n以是一个字典键名称，一个整形值或者任何能够传入一个对象的 "),n("strong",[e._v("getitem")]),e._v("() 方法\n的值。如果你传入多个索引参数给 itemgetter() ，它生成的 callable 对象会返回一\n个包含所有元素值的元组，并且 sorted() 函数会根据这个元组中元素顺序去排序。但\n你想要同时在几个字段上面进行排序（比如通过姓和名来排序，也就是例子中的那样）\n的时候这种方法是很有用的。\nitemgetter() 有时候也可以用 lambda 表达式代替，比如：\nrows_by_fname = sorted(rows, key=lambda r: r['fname'])\nrows_by_lfname = sorted(rows, key=lambda r: (r['lname'],r['fname']))\n这种方案也不错。但是，使用 itemgetter() 方式会运行的稍微快点。因此，如果\n你对性能要求比较高的话就使用 itemgetter() 方式。\n最后，不要忘了这节中展示的技术也同样适用于 min() 和 max() 等函数。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("min(rows, key=itemgetter('uid'))\n{'fname': 'John', 'lname': 'Cleese', 'uid': 1001}")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("max(rows, key=itemgetter('uid'))\n{'fname': 'Big', 'lname': 'Jones', 'uid': 1004}")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("1.14 排序不支持原生比较的对象\n问题\n你想排序类型相同的对象，但是他们不支持原生的比较操作。\n解决方案\n内置的 sorted() 函数有一个关键字参数 key ，可以传入一个 callable 对象给\n它，这个 callable 对象对每个传入的对象返回一个值，这个值会被 sorted 用来排序\n这些对象。比如，如果你在应用程序里面有一个 User 实例序列，并且你希望通过他们\n的 user_id 属性进行排序，你可以提供一个以 User 实例作为输入并输出对应 user_id\n值的 callable 对象。比如：\nclass User:\ndef "),n("strong",[e._v("init")]),e._v("(self, user_id):\nself.user_id = user_id\ndef "),n("strong",[e._v("repr")]),e._v("(self):\nreturn 'User({})'.format(self.user_id)\ndef sort_notcompare():\nusers = [User(23), User(3), User(99)]\nprint(users)\nprint(sorted(users, key=lambda u: u.user_id))\n另外一种方式是使用 operator.attrgetter() 来代替 lambda 函数：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from operator import attrgetter\nsorted(users, key=attrgetter('user_id'))\n[User(3), User(23), User(99)]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n选择使 用 lambda 函数或者 是 attrgetter() 可能取决 于个人 喜好。但是，\nattrgetter() 函数通常会运行的快点，并且还能同时允许多个字段进行比较。这\n个跟 operator.itemgetter() 函数作用于字典类型很类似（参考 1.13 小节）。例如，\n如果 User 实例还有一个 first_name 和 last_name 属性，那么可以向下面这样排序：\nby_name = sorted(users, key=attrgetter('last_name', 'first_name'))\n同样需要注意的是，这一小节用到的技术同样适用于像 min() 和 max() 之类的函\n数。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("min(users, key=attrgetter('user_id'))\nUser(3)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("max(users, key=attrgetter('user_id'))\nUser(99)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("1.15 通过某个字段将记录分组\n问题\n你有一个字典或者实例的序列，然后你想根据某个特定的字段比如 date 来分组迭\n代访问。\n解决方案\nitertools.groupby() 函数对于这样的数据分组操作非常实用。为了演示，假设你\n已经有了下列的字典列表：\nrows = [ {'address': '5412 N CLARK', 'date': '07/01/2012'},\n{'address': '5148 N CLARK', 'date': '07/04/2012'},\n{'address': '5800 E 58TH', 'date': '07/02/2012'},\n{'address': '2122 N CLARK', 'date': '07/03/2012'},\n{'address': '5645 N RAVENSWOOD', 'date': '07/02/2012'},\n{'address': '1060 W ADDISON', 'date': '07/02/2012'},\n{'address': '4801 N BROADWAY', 'date': '07/01/2012'},\n{'address': '1039 W GRANVILLE', 'date': '07/04/2012'},\n]\n现在假设你想在按 date 分组后的数据块上进行迭代。为了这样做，你首先需要按\n照指定的字段 (这里就是 date ) 排序，然后调用 itertools.groupby() 函数：\nfrom operator import itemgetter\nfrom itertools import groupby")]),e._v(" "),n("h1",{attrs:{id:"sort-by-the-desired-field-first"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sort-by-the-desired-field-first"}},[e._v("#")]),e._v(" Sort by the desired field first")]),e._v(" "),n("p",[e._v("rows.sort(key=itemgetter('date'))")]),e._v(" "),n("h1",{attrs:{id:"iterate-in-groups"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#iterate-in-groups"}},[e._v("#")]),e._v(" Iterate in groups")]),e._v(" "),n("p",[e._v("for date, items in groupby(rows, key=itemgetter('date')):\nprint(date)\nfor i in items:\nprint(' ', i)\n运行结果：\n07/01/2012\n{'date': '07/01/2012', 'address': '5412 N CLARK'} {'date': '07/01/2012', 'address': '4801 N BROADWAY'}\n07/02/2012\n{'date': '07/02/2012', 'address': '5800 E 58TH'} {'date': '07/02/2012', 'address': '5645 N RAVENSWOOD'} {'date': '07/02/2012', 'address': '1060 W ADDISON'}\n07/03/2012\n{'date': '07/03/2012', 'address': '2122 N CLARK'}\n07/04/2012\n{'date': '07/04/2012', 'address': '5148 N CLARK'} {'date': '07/04/2012', 'address': '1039 W GRANVILLE'}\n讨论\ngroupby() 函数扫描整个序列并且查找连续相同值（或者根据指定 key 函数返回\n值相同）的元素序列。在每次迭代的时候，它会返回一个值和一个迭代器对象，这个迭\n代器对象可以生成元素值全部等于上面那个值的组中所有对象。\n一个非常重要的准备步骤是要根据指定的字段将数据排序。因为 groupby() 仅仅\n检查连续的元素，如果事先并没有排序完成的话，分组函数将得不到想要的结果。\n如果你仅仅只是想根据 date 字段将数据分组到一个大的数据结构中去，并且允许\n随机访问，那么你最好使用 defaultdict() 来构建一个多值字典，关于多值字典已经\n在 1.6 小节有过详细的介绍。比如：\nfrom collections import defaultdict\nrows_by_date = defaultdict(list)\nfor row in rows:\nrows_by_date[row['date']].append(row)\n这样的话你可以很轻松的就能对每个指定日期访问对应的记录：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for r in rows_by_date['07/01/2012']:\n... print(r)\n...\n{'date': '07/01/2012', 'address': '5412 N CLARK'}\n{'date': '07/01/2012', 'address': '4801 N BROADWAY'}")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在上面这个例子中，我们没有必要先将记录排序。因此，如果对内存占用不是很关\n心，这种方式会比先排序然后再通过 groupby() 函数迭代的方式运行得快一些。\n1.16 过滤序列元素\n问题\n你有一个数据序列，想利用一些规则从中提取出需要的值或者是缩短序列\n解决方案\n最简单的过滤序列元素的方法就是使用列表推导。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("mylist = [1, 4, -5, 10, -7, 2, 3, -1]\n[n for n in mylist if n > 0]\n[1, 4, 10, 2, 3]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("[n for n in mylist if n < 0]\n[-5, -7, -1]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("使用列表推导的一个潜在缺陷就是如果输入非常大的时候会产生一个非常大的结\n果集，占用大量内存。如果你对内存比较敏感，那么你可以使用生成器表达式迭代产生\n过滤的元素。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("pos = (n for n in mylist if n > 0)\npos\n<generator object "),n("genexpr",[e._v(" at 0x1006a0eb0>")])],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for x in pos:\n... print(x)\n...\n14\n10\n23")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("有时候，过滤规则比较复杂，不能简单的在列表推导或者生成器表达式中表达出\n来。比如，假设过滤的时候需要处理一些异常或者其他复杂情况。这时候你可以将过滤\n代码放到一个函数中，然后使用内建的 filter() 函数。示例如下：\nvalues = ['1', '2', '-3', '-', '4', 'N/A', '5']\ndef is_int(val):\ntry:x = int(val)\nreturn True\nexcept ValueError:\nreturn False\nivals = list(filter(is_int, values))\nprint(ivals)")]),e._v(" "),n("h1",{attrs:{id:"outputs-1-2-3-4-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#outputs-1-2-3-4-5"}},[e._v("#")]),e._v(" Outputs ['1', '2', '-3', '4', '5']")]),e._v(" "),n("p",[e._v("filter() 函数创建了一个迭代器，因此如果你想得到一个列表的话，就得像示例\n那样使用 list() 去转换。\n讨论\n列表推导和生成器表达式通常情况下是过滤数据最简单的方式。其实它们还能在\n过滤的时候转换数据。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("mylist = [1, 4, -5, 10, -7, 2, 3, -1]\nimport math\n[math.sqrt(n) for n in mylist if n > 0]\n[1.0, 2.0, 3.1622776601683795, 1.4142135623730951, 1.7320508075688772]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("过滤操作的一个变种就是将不符合条件的值用新的值代替，而不是丢弃它们。比\n如，在一列数据中你可能不仅想找到正数，而且还想将不是正数的数替换成指定的数。\n通过将过滤条件放到条件表达式中去，可以很容易的解决这个问题，就像这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("clip_neg = [n if n > 0 else 0 for n in mylist]\nclip_neg\n[1, 4, 0, 10, 0, 2, 3, 0]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("clip_pos = [n if n < 0 else 0 for n in mylist]\nclip_pos\n[0, 0, -5, 0, -7, 0, 0, -1]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("另外一个值得关注的过滤工具就是 itertools.compress() ，它以一个 iterable\n对象和一个相对应的 Boolean 选择器序列作为输入参数。然后输出 iterable 对象中对\n应选择器为 True 的元素。当你需要用另外一个相关联的序列来过滤某个序列的时候，\n这个函数是非常有用的。比如，假如现在你有下面两列数据：\naddresses = [ '5412 N CLARK', '5148 N CLARK', '5800 E 58TH', '2122 N CLARK', '5645 N RAVENSWOOD', '1060 W ADDISON', '4801 N BROADWAY', '1039 W GRANVILLE', ]\ncounts = [ 0, 3, 10, 4, 1, 7, 6, 1]\n现在你想将那些对应 count 值大于 5 的地址全部输出，那么你可以这样做：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from itertools import compress\nmore5 = [n > 5 for n in counts]\nmore5\n[False, False, True, False, False, True, True, False]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("list(compress(addresses, more5))\n['5800 E 58TH', '1060 W ADDISON', '4801 N BROADWAY']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这里的关键点在于先创建一个 Boolean 序列，指示哪些元素符合条件。然后\ncompress() 函数根据这个序列去选择输出对应位置为 True 的元素。\n和 filter() 函数类似，compress() 也是返回的一个迭代器。因此，如果你需要得\n到一个列表，那么你需要使用 list() 来将结果转换为列表类型。\n1.17 从字典中提取子集\n问题\n你想构造一个字典，它是另外一个字典的子集。\n解决方案\n最简单的方式是使用字典推导。比如：\nprices = { 'ACME': 45.23, 'AAPL': 612.78, 'IBM': 205.55, 'HPQ': 37.20, 'FB': 10.75\n}")]),e._v(" "),n("h1",{attrs:{id:"make-a-dictionary-of-all-prices-over-200"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-dictionary-of-all-prices-over-200"}},[e._v("#")]),e._v(" Make a dictionary of all prices over 200")]),e._v(" "),n("p",[e._v("p1 = {key: value for key, value in prices.items() if value > 200}")]),e._v(" "),n("h1",{attrs:{id:"make-a-dictionary-of-tech-stocks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-dictionary-of-tech-stocks"}},[e._v("#")]),e._v(" Make a dictionary of tech stocks")]),e._v(" "),n("p",[e._v("tech_names = {'AAPL', 'IBM', 'HPQ', 'MSFT'}\np2 = {key: value for key, value in prices.items() if key in tech_names}\n讨论\n大多数情况下字典推导能做到的，通过创建一个元组序列然后把它传给 dict() 函\n数也能实现。比如：\np1 = dict((key, value) for key, value in prices.items() if value > 200)\n但是，字典推导方式表意更清晰，并且实际上也会运行的更快些（在这个例子中，\n实际测试几乎比 dcit() 函数方式快整整一倍）。\n有时候完成同一件事会有多种方式。比如，第二个例子程序也可以像这样重写：")]),e._v(" "),n("h1",{attrs:{id:"make-a-dictionary-of-tech-stocks-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-dictionary-of-tech-stocks-2"}},[e._v("#")]),e._v(" Make a dictionary of tech stocks")]),e._v(" "),n("p",[e._v("tech_names = { 'AAPL', 'IBM', 'HPQ', 'MSFT' }\np2 = { key:prices[key] for key in prices.keys() & tech_names }\n但是，运行时间测试结果显示这种方案大概比第一种方案慢 1.6 倍。如果对程序运\n行性能要求比较高的话，需要花点时间去做计时测试。关于更多计时和性能测试，可以\n参考 14.13 小节。\n1.18 映射名称到序列元素\n问题\n你有一段通过下标访问列表或者元组中元素的代码，但是这样有时候会使得你的\n代码难以阅读，于是你想通过名称来访问元素。\n解决方案\ncollections.namedtuple() 函数通过使用一个普通的元组对象来帮你解决这个问\n题。这个函数实际上是一个返回 Python 中标准元组类型子类的一个工厂方法。你需要\n传递一个类型名和你需要的字段给它，然后它就会返回一个类，你可以初始化这个类，\n为你定义的字段传递值等。代码示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from collections import namedtuple\nSubscriber = namedtuple('Subscriber', ['addr', 'joined'])\nsub = Subscriber('jonesy@example.com', '2012-10-19')\nsub\nSubscriber(addr='jonesy@example.com', joined='2012-10-19')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sub.addr\n'jonesy@example.com'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sub.joined\n'2012-10-19'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("尽管 namedtuple 的实例看起来像一个普通的类实例，但是它跟元组类型是可交换\n的，支持所有的普通元组操作，比如索引和解压。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("len(sub)\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("addr, joined = sub\naddr\n'jonesy@example.com'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("joined\n'2012-10-19'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("命名元组的一个主要用途是将你的代码从下标操作中解脱出来。因此，如果你从数\n据库调用中返回了一个很大的元组列表，通过下标去操作其中的元素，当你在表中添加\n了新的列的时候你的代码可能就会出错了。但是如果你使用了命名元组，那么就不会有\n这样的顾虑。\n为了说明清楚，下面是使用普通元组的代码：\ndef compute_cost(records):\ntotal = 0.0\nfor rec in records:\ntotal += rec[1] * rec[2]\nreturn total\n下标操作通常会让代码表意不清晰，并且非常依赖记录的结构。下面是使用命名元\n组的版本：\nfrom collections import namedtuple\nStock = namedtuple('Stock', ['name', 'shares', 'price'])\ndef compute_cost(records):\ntotal = 0.0\nfor rec in records:\ns = Stock(*rec)\ntotal += s.shares * s.price\nreturn total\n讨论\n命名元组另一个用途就是作为字典的替代，因为字典存储需要更多的内存空间。如\n果你需要构建一个非常大的包含字典的数据结构，那么使用命名元组会更加高效。但是\n需要注意的是，不像字典那样，一个命名元组是不可更改的。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = Stock('ACME', 100, 123.45)\ns\nStock(name='ACME', shares=100, price=123.45)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('s.shares = 75\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nAttributeError: can't set attribute")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你真的需要改变属性的值，那么可以使用命名元组实例的 _replace() 方法，\n它会创建一个全新的命名元组并将对应的字段用新的值取代。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = s._replace(shares=75)\ns\nStock(name='ACME', shares=75, price=123.45)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("_replace() 方法还有一个很有用的特性就是当你的命名元组拥有可选或者缺失字\n段时候，它是一个非常方便的填充数据的方法。你可以先创建一个包含缺省值的原型元\n组，然后使用 _replace() 方法创建新的值被更新过的实例。比如：\nfrom collections import namedtuple\nStock = namedtuple('Stock', ['name', 'shares', 'price', 'date', 'time'])")]),e._v(" "),n("h1",{attrs:{id:"create-a-prototype-instance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-prototype-instance"}},[e._v("#")]),e._v(" Create a prototype instance")]),e._v(" "),n("p",[e._v("stock_prototype = Stock('', 0, 0.0, None, None)")]),e._v(" "),n("h1",{attrs:{id:"function-to-convert-a-dictionary-to-a-stock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#function-to-convert-a-dictionary-to-a-stock"}},[e._v("#")]),e._v(" Function to convert a dictionary to a Stock")]),e._v(" "),n("p",[e._v("def dict_to_stock(s):\nreturn stock_prototype._replace(**s)\n下面是它的使用方法：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = {'name': 'ACME', 'shares': 100, 'price': 123.45}\ndict_to_stock(a)\nStock(name='ACME', shares=100, price=123.45, date=None, time=None)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = {'name': 'ACME', 'shares': 100, 'price': 123.45, 'date': '12/17/2012'}\ndict_to_stock(b)\nStock(name='ACME', shares=100, price=123.45, date='12/17/2012', time=None)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后要说的是，如果你的目标是定义一个需要更新很多实例属性的高效数据结构，\n那么命名元组并不是你的最佳选择。这时候你应该考虑定义一个包含 "),n("strong",[e._v("slots")]),e._v(" 方法\n的类（参考 8.4 小节）。\n1.19 转换并同时计算数据\n问题\n你需要在数据序列上执行聚集函数（比如 sum() , min() , max() ），但是首先你需\n要先转换或者过滤数据\n解决方案\n一个非常优雅的方式去结合数据计算与转换就是使用一个生成器表达式参数。比\n如，如果你想计算平方和，可以像下面这样做：\nnums = [1, 2, 3, 4, 5] s = sum(x * x for x in nums)\n下面是更多的例子：")]),e._v(" "),n("h1",{attrs:{id:"determine-if-any-py-files-exist-in-a-directory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#determine-if-any-py-files-exist-in-a-directory"}},[e._v("#")]),e._v(" Determine if any .py files exist in a directory")]),e._v(" "),n("p",[e._v("import os\nfiles = os.listdir('dirname')\nif any(name.endswith('.py') for name in files):\nprint('There be python!')\nelse:\nprint('Sorry, no python.')")]),e._v(" "),n("h1",{attrs:{id:"output-a-tuple-as-csv"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#output-a-tuple-as-csv"}},[e._v("#")]),e._v(" Output a tuple as CSV")]),e._v(" "),n("p",[e._v("s = ('ACME', 50, 123.45)\nprint(','.join(str(x) for x in s))")]),e._v(" "),n("h1",{attrs:{id:"data-reduction-across-fields-of-a-data-structure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#data-reduction-across-fields-of-a-data-structure"}},[e._v("#")]),e._v(" Data reduction across fields of a data structure")]),e._v(" "),n("p",[e._v("portfolio = [ {'name':'GOOG', 'shares': 50},\n{'name':'YHOO', 'shares': 75},\n{'name':'AOL', 'shares': 20},\n{'name':'SCOX', 'shares': 65} ]\nmin_shares = min(s['shares'] for s in portfolio)\n讨论\n上面的示例向你演示了当生成器表达式作为一个单独参数传递给函数时候的巧妙\n语法（你并不需要多加一个括号）。比如，下面这些语句是等效的：\ns = sum((x * x for x in nums)) # 显示的传递一个生成器表达式对象\ns = sum(x * x for x in nums) # 更加优雅的实现方式，省略了括号\n使用一个生成器表达式作为参数会比先创建一个临时列表更加高效和优雅。比如，\n如果你不使用生成器表达式的话，你可能会考虑使用下面的实现方式：\nnums = [1, 2, 3, 4, 5] s = sum([x * x for x in nums])\n这种方式同样可以达到想要的效果，但是它会多一个步骤，先创建一个额外的列\n表。对于小型列表可能没什么关系，但是如果元素数量非常大的时候，它会创建一个巨\n大的仅仅被使用一次就被丢弃的临时数据结构。而生成器方案会以迭代的方式转换数\n据，因此更省内存。\n在使用一些聚集函数比如 min() 和 max() 的时候你可能更加倾向于使用生成器版\n本，它们接受的一个 key 关键字参数或许对你很有帮助。比如，在上面的证券例子中，\n你可能会考虑下面的实现版本：")]),e._v(" "),n("h1",{attrs:{id:"original-returns-20"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#original-returns-20"}},[e._v("#")]),e._v(" Original: Returns 20")]),e._v(" "),n("p",[e._v("min_shares = min(s['shares'] for s in portfolio)")]),e._v(" "),n("h1",{attrs:{id:"alternative-returns-name-aol-shares-20"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alternative-returns-name-aol-shares-20"}},[e._v("#")]),e._v(" Alternative: Returns {'name': 'AOL', 'shares': 20}")]),e._v(" "),n("p",[e._v("min_shares = min(portfolio, key=lambda s: s['shares'])\n1.20 合并多个字典或映射\n问题\n现在有多个字典或者映射，你想将它们从逻辑上合并为一个单一的映射后执行某\n些操作，比如查找值或者检查某些键是否存在。\n解决方案\n假如你有如下两个字典: a = {'x': 1, 'z': 3 } b = {'y': 2, 'z': 4 }\n现在假设你必须在两个字典中执行查找操作（比如先从 a 中找，如果找不到再在 b\n中找）。一个非常简单的解决方案就是使用 collections 模块中的 ChainMap 类。比如：\nfrom collections import ChainMap\nc = ChainMap(a,b)\nprint(c['x']) # Outputs 1 (from a)\nprint(c['y']) # Outputs 2 (from b)\nprint(c['z']) # Outputs 3 (from a)\n讨论\n一个 ChainMap 接受多个字典并将它们在逻辑上变为一个字典。然后，这些字典并\n不是真的合并在一起了，ChainMap 类只是在内部创建了一个容纳这些字典的列表并重\n新定义了一些常见的字典操作来遍历这个列表。大部分字典操作都是可以正常使用的，\n比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("len(c)\n3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("list(c.keys())\n['x', 'y', 'z']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("list(c.values())\n[1, 2, 3]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果出现重复键，那么第一次出现的映射值会被返回。因此，例子程序中的 c['z']\n总是会返回字典 a 中对应的值，而不是 b 中对应的值。\n对于字典的更新或删除操作总是影响的是列表中第一个字典。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c['z'] = 10\nc['w'] = 40\ndel c['x']\na\n{'w': 40, 'z': 10}")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("del c['y']\nTraceback (most recent call last):\n...\nKeyError: \"Key not found in the first mapping: 'y'\"")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("ChainMap 对于编程语言中的作用范围变量（比如 globals , locals 等）是非常有\n用的。事实上，有一些方法可以使它变得简单：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("values = ChainMap()\nvalues['x'] = 1")]),e._v(" "),n("h1",{attrs:{id:"add-a-new-mapping"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-a-new-mapping"}},[e._v("#")]),e._v(" Add a new mapping")]),e._v(" "),n("p",[e._v("values = values.new_child()\nvalues['x'] = 2")]),e._v(" "),n("h1",{attrs:{id:"add-a-new-mapping-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-a-new-mapping-2"}},[e._v("#")]),e._v(" Add a new mapping")]),e._v(" "),n("p",[e._v("values = values.new_child()\nvalues['x'] = 3\nvalues\nChainMap({'x': 3}, {'x': 2}, {'x': 1})")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("values['x'] 3")]),e._v(" "),n("h1",{attrs:{id:"discard-last-mapping"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#discard-last-mapping"}},[e._v("#")]),e._v(" Discard last mapping")]),e._v(" "),n("p",[e._v("values = values.parents\nvalues['x'] 2")]),e._v(" "),n("h1",{attrs:{id:"discard-last-mapping-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#discard-last-mapping-2"}},[e._v("#")]),e._v(" Discard last mapping")]),e._v(" "),n("p",[e._v("values = values.parents\nvalues['x'] 1\nvalues\nChainMap({'x': 1})")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("作为 ChainMap 的替代，你可能会考虑使用 update() 方法将两个字典合并。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = {'x': 1, 'z': 3 }\nb = {'y': 2, 'z': 4 }\nmerged = dict(b)\nmerged.update(a)\nmerged['x'] 1\nmerged['y'] 2\nmerged['z'] 3")])])])]),e._v(" "),n("p",[e._v("这样也能行得通，但是它需要你创建一个完全不同的字典对象（或者是破坏现有\n字典结构）。同时，如果原字典做了更新，这种改变不会反应到新的合并字典中去。比\n如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a['x'] = 13\nmerged['x'] 1\nChainMap 使用原来的字典，它自己不创建新的字典。所以它并不会产生上面所说\n的结果，比如：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a = {'x': 1, 'z': 3 }\nb = {'y': 2, 'z': 4 }\nmerged = ChainMap(a, b)\nmerged['x'] 1\na['x'] = 42\nmerged['x'] # Notice change to merged dicts\n42")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("h2",{attrs:{id:"第二章-字符串和文本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二章-字符串和文本"}},[e._v("#")]),e._v(" 第二章：字符串和文本")]),e._v(" "),n("p",[e._v("几乎所有有用的程序都会涉及到某些文本处理，不管是解析数据还是产生输出。这\n一章将重点关注文本的操作处理，比如提取字符串，搜索，替换以及解析等。大部分的\n问题都能简单的调用字符串的内建方法完成。但是，一些更为复杂的操作可能需要正则\n表达式或者强大的解析器，所有这些主题我们都会详细讲解。并且在操作 Unicode 时\n候碰到的一些棘手的问题在这里也会被提及到。\n2.1 使用多个界定符分割字符串\n问题\n你需要将一个字符串分割为多个字段，但是分隔符 (还有周围的空格) 并不是固定\n的。\n解决方案\nstring 对象的 split() 方法只适应于非常简单的字符串分割情形，它并不允许有\n多个分隔符或者是分隔符周围不确定的空格。当你需要更加灵活的切割字符串的时候，\n最好使用 re.split() 方法：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("line = 'asdf fjdk; afed, fjek,asdf, foo'\nimport re\nre.split(r'[;,\\s]\\s*', line)\n['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']\n讨论\n函数 re.split() 是非常实用的，因为它允许你为分隔符指定多个正则模式。比如，\n在上面的例子中，分隔符可以是逗号，分号或者是空格，并且后面紧跟着任意个的空\n格。只要这个模式被找到，那么匹配的分隔符两边的实体都会被当成是结果中的元素返\n回。返回结果为一个字段列表，这个跟 str.split() 返回值类型是一样的。\n当你使用 re.split() 函数时候，需要特别注意的是正则表达式中是否包含一个括\n号捕获分组。如果使用了捕获分组，那么被匹配的文本也将出现在结果列表中。比如，\n观察一下这段代码运行后的结果：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("fields = re.split(r'(;|,|\\s)\\s*', line)\nfields\n['asdf', ' ', 'fjdk', ';', 'afed', ',', 'fjek', ',', 'asdf', ',', 'foo']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("获取分割字符在某些情况下也是有用的。比如，你可能想保留分割字符串，用来在\n后面重新构造一个新的输出字符串：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("values = fields[::2]\ndelimiters = fields[1::2] + ['']\nvalues\n['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("delimiters\n[' ', ';', ',', ',', ',', '']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"reform-the-line-using-the-same-delimiters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reform-the-line-using-the-same-delimiters"}},[e._v("#")]),e._v(" Reform the line using the same delimiters")]),e._v(" "),n("p",[e._v("''.join(v+d for v,d in zip(values, delimiters))\n'asdf fjdk;afed,fjek,asdf,foo'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你不想保留分割字符串到结果列表中去，但仍然需要使用到括号来分组正则\n表达式的话，确保你的分组是非捕获分组，形如 (?:...) 。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("re.split(r'(?:,|;|\\s)\\s*', line)\n['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("2.2 字符串开头或结尾匹配\n问题\n你需要通过指定的文本模式去检查字符串的开头或者结尾，比如文件名后缀，URL\nScheme 等等。\n解决方案\n检查字符串开头或结尾的一个简单方法是使用 str.startswith() 或者是 str.\nendswith() 方法。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("filename = 'spam.txt'\nfilename.endswith('.txt')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("filename.startswith('file:')\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("url = 'http://www.python.org'\nurl.startswith('http:')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想检查多种匹配可能，只需要将所有的匹配项放入到一个元组中去，然后传\n给 startswith() 或者 endswith() 方法：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import os\nfilenames = os.listdir('.')\nfilenames\n[ 'Makefile', 'foo.c', 'bar.py', 'spam.c', 'spam.h' ]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("[name for name in filenames if name.endswith(('.c', '.h')) ]\n['foo.c', 'spam.c', 'spam.h'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("any(name.endswith('.py') for name in filenames)\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("下面是另一个例子：\nfrom urllib.request import urlopen\ndef read_data(name):\nif name.startswith(('http:', 'https:', 'ftp:')):\nreturn urlopen(name).read()\nelse:\nwith open(name) as f:\nreturn f.read()\n奇怪的是，这个方法中必须要输入一个元组作为参数。如果你恰巧有一个 list 或 者 set 类型的选择项，要确保传递参数前先调用 tuple() 将其转换为元组类型。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("choices = ['http:', 'ftp:']\nurl = 'http://www.python.org'\nurl.startswith(choices)\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: startswith first arg must be str or a tuple of str, not list")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("url.startswith(tuple(choices))\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\nstartswith() 和 endswith() 方法提供了一个非常方便的方式去做字符串开头和\n结尾的检查。类似的操作也可以使用切片来实现，但是代码看起来没有那么优雅。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("filename = 'spam.txt'\nfilename[-4:] == '.txt'\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("url = 'http://www.python.org'\nurl[:5] == 'http:' or url[:6] == 'https:' or url[:4] == 'ftp:'\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你可以能还想使用正则表达式去实现，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import re\nurl = 'http://www.python.org'\nre.match('http:|https:|ftp:', url)\n<_sre.SRE_Match object at 0x101253098>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这种方式也行得通，但是对于简单的匹配实在是有点小材大用了，本节中的方法更\n加简单并且运行会更快些。\n最后提一下，当和其他操作比如普通数据聚合相结合的时候 startswith() 和\nendswith() 方法是很不错的。比如，下面这个语句检查某个文件夹中是否存在指定的\n文件类型：\nif any(name.endswith(('.c', '.h')) for name in listdir(dirname)):\n...\n2.3 用 Shell 通配符匹配字符串\n问题\n你想使用 Unix Shell 中常用的通配符 (比如 "),n("em",[e._v(".py , Dat[0-9]")]),e._v(".csv 等) 去匹配文\n本字符串\n解决方案\nfnmatch 模块提供了两个函数——fnmatch() 和 fnmatchcase() ，可以用来实现\n这样的匹配。用法如下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from fnmatch import fnmatch, fnmatchcase\nfnmatch('foo.txt', '*.txt')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("fnmatch('foo.txt', '?oo.txt')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("fnmatch('Dat45.csv', 'Dat[0-9]*')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("names = ['Dat1.csv', 'Dat2.csv', 'config.ini', 'foo.py']\n[name for name in names if fnmatch(name, 'Dat*.csv')]\n['Dat1.csv', 'Dat2.csv']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("fnmatch() 函数使用底层操作系统的大小写敏感规则 (不同的系统是不一样的) 来\n匹配模式。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"on-os-x-mac"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#on-os-x-mac"}},[e._v("#")]),e._v(" On OS X (Mac)")]),e._v(" "),n("p",[e._v("fnmatch('foo.txt', '*.TXT')\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"on-windows"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#on-windows"}},[e._v("#")]),e._v(" On Windows")]),e._v(" "),n("p",[e._v("fnmatch('foo.txt', '*.TXT')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你对这个区别很在意，可以使用 fnmatchcase() 来代替。它完全使用你的模\n式大小写匹配。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("fnmatchcase('foo.txt', '*.TXT')\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这两个函数通常会被忽略的一个特性是在处理非文件名的字符串时候它们也是很\n有用的。比如，假设你有一个街道地址的列表数据：\naddresses = [ '5412 N CLARK ST', '1060 W ADDISON ST', '1039 W GRANVILLE AVE', '2122 N CLARK ST', '4802 N BROADWAY', ]\n你可以像这样写列表推导：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from fnmatch import fnmatchcase\n[addr for addr in addresses if fnmatchcase(addr, '* ST')]\n['5412 N CLARK ST', '1060 W ADDISON ST', '2122 N CLARK ST']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("[addr for addr in addresses if fnmatchcase(addr, '54[0-9][0-9] "),n("em",[e._v("CLARK")]),e._v("')]\n['5412 N CLARK ST']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\nfnmatch() 函数匹配能力介于简单的字符串方法和强大的正则表达式之间。如果在\n数据处理操作中只需要简单的通配符就能完成的时候，这通常是一个比较合理的方案。\n如果你的代码需要做文件名的匹配，最好使用 glob 模块。参考 5.13 小节。\n2.4 字符串匹配和搜索\n问题\n你想匹配或者搜索特定模式的文本\n解决方案\n如果你想匹配的是字面字符串，那么你通常只需要调用基本字符串方法就行，比如\nstr.find() , str.endswith() , str.startswith() 或者类似的方法：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("text = 'yeah, but no, but yeah, but no, but yeah'")]),e._v(" "),n("h1",{attrs:{id:"exact-match"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exact-match"}},[e._v("#")]),e._v(" Exact match")]),e._v(" "),n("p",[e._v("text == 'yeah'\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"match-at-start-or-end"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#match-at-start-or-end"}},[e._v("#")]),e._v(" Match at start or end")]),e._v(" "),n("p",[e._v("text.startswith('yeah')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("text.endswith('no')\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"search-for-the-location-of-the-first-occurrence"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#search-for-the-location-of-the-first-occurrence"}},[e._v("#")]),e._v(" Search for the location of the first occurrence")]),e._v(" "),n("p",[e._v("text.find('no')\n10")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对于复杂的匹配需要使用正则表达式和 re 模块。为了解释正则表达式的基本原理，\n假设你想匹配数字格式的日期字符串比如 11/27/2012 ，你可以这样做：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("text1 = '11/27/2012'\ntext2 = 'Nov 27, 2012'")]),e._v(" "),n("p",[e._v("import re")]),e._v(" "),n("h1",{attrs:{id:"simple-matching-d-means-match-one-or-more-digits"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simple-matching-d-means-match-one-or-more-digits"}},[e._v("#")]),e._v(" Simple matching: \\d+ means match one or more digits")]),e._v(" "),n("p",[e._v("if re.match(r'\\d+/\\d+/\\d+', text1):\n... print('yes')\n... else:\n... print('no')\n...\nyes")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("if re.match(r'\\d+/\\d+/\\d+', text2):\n... print('yes')\n... else:\n... print('no')\n...\nno")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想使用同一个模式去做多次匹配，你应该先将模式字符串预编译为模式对\n象。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("datepat = re.compile(r'\\d+/\\d+/\\d+')\nif datepat.match(text1):\n... print('yes')\n... else:\n... print('no')\n...\nyes")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("if datepat.match(text2):\n... print('yes')\n... else:\n... print('no')\n...\nno")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("match() 总是从字符串开始去匹配，如果你想查找字符串任意部分的模式出现位\n置，使用 findall() 方法去代替。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("text = 'Today is 11/27/2012. PyCon starts 3/13/2013.'\ndatepat.findall(text)\n['11/27/2012', '3/13/2013']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在定义正则式的时候，通常会利用括号去捕获分组。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("datepat = re.compile(r'(\\d+)/(\\d+)/(\\d+)')")])])])]),e._v(" "),n("p",[e._v("捕获分组可以使得后面的处理更加简单，因为可以分别将每个组的内容提取出来。\n比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("m = datepat.match('11/27/2012')\nm\n<_sre.SRE_Match object at 0x1005d2750>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"extract-the-contents-of-each-group"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#extract-the-contents-of-each-group"}},[e._v("#")]),e._v(" Extract the contents of each group")]),e._v(" "),n("p",[e._v("m.group(0)\n'11/27/2012'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m.group(1)\n'11'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m.group(2)\n'27'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m.group(3)\n'2012'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m.groups()\n('11', '27', '2012')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("month, day, year = m.groups()")]),e._v(" "),n("h1",{attrs:{id:"find-all-matches-notice-splitting-into-tuples"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#find-all-matches-notice-splitting-into-tuples"}},[e._v("#")]),e._v(" Find all matches (notice splitting into tuples)")]),e._v(" "),n("p",[e._v("text\n'Today is 11/27/2012. PyCon starts 3/13/2013.'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("datepat.findall(text)\n[('11', '27', '2012'), ('3', '13', '2013')]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for month, day, year in datepat.findall(text):\n... print('{}-{}-{}'.format(year, month, day))\n...\n2012-11-27\n2013-3-13")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("findall() 方法会搜索文本并以列表形式返回所有的匹配。如果你想以迭代方式返\n回匹配，可以使用 finditer() 方法来代替，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for m in datepat.finditer(text):\n... print(m.groups())\n...\n('11', '27', '2012')\n('3', '13', '2013')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n关于正则表达式理论的教程已经超出了本书的范围。不过，这一节阐述了使用 re\n模块进行匹配和搜索文本的最基本方法。核心步骤就是先使用 re.compile() 编译正则\n表达式字符串，然后使用 match() , findall() 或者 finditer() 等方法。\n当写正则式字符串的时候，相对普遍的做法是使用原始字符串比如 r'(\\d+)/\n(\\d+)/(\\d+)' 。这种字符串将不去解析反斜杠，这在正则表达式中是很有用的。如果\n不这样做的话，你必须使用两个反斜杠，类似 '(\\d+)/(\\d+)/(\\d+)' 。\n需要注意的是 match() 方法仅仅检查字符串的开始部分。它的匹配结果有可能并\n不是你期望的那样。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("m = datepat.match('11/27/2012abcdef')\nm\n<_sre.SRE_Match object at 0x1005d27e8>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m.group()\n'11/27/2012'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想精确匹配，确保你的正则表达式以 $ 结尾，就像这么这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("datepat = re.compile(r'(\\d+)/(\\d+)/(\\d+)$')\ndatepat.match('11/27/2012abcdef')\ndatepat.match('11/27/2012')\n<_sre.SRE_Match object at 0x1005d2750>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后，如果你仅仅是做一次简单的文本匹配/搜索操作的话，可以略过编译部分，\n直接使用 re 模块级别的函数。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("re.findall(r'(\\d+)/(\\d+)/(\\d+)', text)\n[('11', '27', '2012'), ('3', '13', '2013')]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("但是需要注意的是，如果你打算做大量的匹配和搜索操作的话，最好先编译正则表\n达式，然后再重复使用它。模块级别的函数会将最近编译过的模式缓存起来，因此并不\n会消耗太多的性能，但是如果使用预编译模式的话，你将会减少查找和一些额外的处理\n损耗。\n2.5 字符串搜索和替换\n问题\n你想在字符串中搜索和匹配指定的文本模式\n解决方案\n对于简单的字面模式，直接使用 str.replace() 方法即可，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("text = 'yeah, but no, but yeah, but no, but yeah'\ntext.replace('yeah', 'yep')\n'yep, but no, but yep, but no, but yep'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对于复杂的模式，请使用 re 模块中的 sub() 函数。为了说明这个，假设你想将形\n式为 11/27/2012 的日期字符串改成 2012-11-27 。示例如下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("text = 'Today is 11/27/2012. PyCon starts 3/13/2013.'\nimport re\nre.sub(r'(\\d+)/(\\d+)/(\\d+)', r'\\3-\\1-\\2', text)\n'Today is 2012-11-27. PyCon starts 2013-3-13.'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("sub() 函数中的第一个参数是被匹配的模式，第二个参数是替换模式。反斜杠数字\n比如 \\3 指向前面模式的捕获组号。\n如果你打算用相同的模式做多次替换，考虑先编译它来提升性能。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import re\ndatepat = re.compile(r'(\\d+)/(\\d+)/(\\d+)')\ndatepat.sub(r'\\3-\\1-\\2', text)\n'Today is 2012-11-27. PyCon starts 2013-3-13.'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对于更加复杂的替换，可以传递一个替换回调函数来代替，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from calendar import month_abbr\ndef change_date(m):\n... mon_name = month_abbr[int(m.group(1))]\n... return '{} {} {}'.format(m.group(2), mon_name, m.group(3))\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("datepat.sub(change_date, text)\n'Today is 27 Nov 2012. PyCon starts 13 Mar 2013.'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一个替换回调函数的参数是一个 match 对象，也就是 match() 或者 find() 返回\n的对象。使用 group() 方法来提取特定的匹配部分。回调函数最后返回替换字符串。\n如果除了替换后的结果外，你还想知道有多少替换发生了，可以使用 re.subn()\n来代替。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("newtext, n = datepat.subn(r'\\3-\\1-\\2', text)\nnewtext\n'Today is 2012-11-27. PyCon starts 2013-3-13.'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("n 2")])])])]),e._v(" "),n("p",[e._v("讨论\n关于正则表达式搜索和替换，上面演示的 sub() 方法基本已经涵盖了所有。其实\n最难的部分就是编写正则表达式模式，这个最好是留给读者自己去练习了。\n2.6 字符串忽略大小写的搜索替换\n问题\n你需要以忽略大小写的方式搜索与替换文本字符串\n解决方案\n为了在文本操作时忽略大小写，你需要在使用 re 模块的时候给这些操作提供\nre.IGNORECASE 标志参数。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("text = 'UPPER PYTHON, lower python, Mixed Python'\nre.findall('python', text, flags=re.IGNORECASE)\n['PYTHON', 'python', 'Python']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("re.sub('python', 'snake', text, flags=re.IGNORECASE)\n'UPPER snake, lower snake, Mixed snake'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后的那个例子揭示了一个小缺陷，替换字符串并不会自动跟被匹配字符串的大\n小写保持一致。为了修复这个，你可能需要一个辅助函数，就像下面的这样：\ndef matchcase(word):\ndef replace(m):\ntext = m.group()\nif text.isupper():\nreturn word.upper()\nelif text.islower():\nreturn word.lower()\nelif text[0].isupper():\nreturn word.capitalize()\nelse:\nreturn word\nreturn replace\n下面是使用上述函数的方法：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("re.sub('python', matchcase('snake'), text, flags=re.IGNORECASE)\n'UPPER SNAKE, lower snake, Mixed Snake'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("译者注：matchcase('snake') 返回了一个回调函数 (参数必须是 match 对象)，前\n面一节提到过，sub() 函数除了接受替换字符串外，还能接受一个回调函数。\n讨论\n对于一般的忽略大小写的匹配操作，简单的传递一个 re.IGNORECASE 标志参数就\n已经足够了。但是需要注意的是，这个对于某些需要大小写转换的 Unicode 匹配可能\n还不够，参考 2.10 小节了解更多细节。\n2.7 最短匹配模式\n问题\n你正在试着用正则表达式匹配某个文本模式，但是它找到的是模式的最长可能匹\n配。而你想修改它变成查找最短的可能匹配。\n解决方案\n这个问题一般出现在需要匹配一对分隔符之间的文本的时候 (比如引号包含的字符\n串)。为了说明清楚，考虑如下的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("str_pat = re.compile(r'\"(.*)\"')\ntext1 = 'Computer says \"no.\"'\nstr_pat.findall(text1)\n['no.']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('text2 = \'Computer says "no." Phone says "yes."\'\nstr_pat.findall(text2)\n[\'no." Phone says "yes.\']')])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在这个例子中，模式 r'\"(.*)\"' 的意图是匹配被双引号包含的文本。但是在正\n则表达式中 * 操作符是贪婪的，因此匹配操作会查找最长的可能匹配。于是在第二个\n例子中搜索 text2 的时候返回结果并不是我们想要的。\n为了修正这个问题，可以在模式中的 * 操作符后面加上? 修饰符，就像这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("str_pat = re.compile(r'\"(.*?)\"')\nstr_pat.findall(text2)\n['no.', 'yes.']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这样就使得匹配变成非贪婪模式，从而得到最短的匹配，也就是我们想要的结果。\n讨论\n这一节展示了在写包含点 (.) 字符的正则表达式的时候遇到的一些常见问题。在一\n个模式字符串中，点 (.) 匹配除了换行外的任何字符。然而，如果你将点 (.) 号放在开始\n与结束符 (比如引号) 之间的时候，那么匹配操作会查找符合模式的最长可能匹配。这\n样通常会导致很多中间的被开始与结束符包含的文本被忽略掉，并最终被包含在匹配\n结果字符串中返回。通过在 * 或者 + 这样的操作符后面添加一个 ? 可以强制匹配算法\n改成寻找最短的可能匹配。\n2.8 多行匹配模式\n问题\n你正在试着使用正则表达式去匹配一大块的文本，而你需要跨越多行去匹配。\n解决方案\n这个问题很典型的出现在当你用点 (.) 去匹配任意字符的时候，忘记了点 (.) 不能\n匹配换行符的事实。比如，假设你想试着去匹配 C 语言分割的注释：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("comment = re.compile(r'/*(."),n("em",[e._v("?)*/')\ntext1 = '/")]),e._v(" this is a comment "),n("em",[e._v("/'\ntext2 = '''/")]),e._v(" this is a\n... multiline comment */\n... '''")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("comment.findall(text1)\n[' this is a comment ']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("comment.findall(text2)\n[]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("为了修正这个问题，你可以修改模式字符串，增加对换行的支持。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("comment = re.compile(r'/*((?:.|\\n)*?)*/')\ncomment.findall(text2)\n[' this is a\\n multiline comment ']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在这个模式中，(?:.|\\n) 指定了一个非捕获组 (也就是它定义了一个仅仅用来做\n匹配，而不能通过单独捕获或者编号的组)。\n讨论\nre.compile() 函数接受一个标志参数叫 re.DOTALL ，在这里非常有用。它可以让\n正则表达式中的点 (.) 匹配包括换行符在内的任意字符。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("comment = re.compile(r'/*(.*?)*/', re.DOTALL)\ncomment.findall(text2)\n[' this is a\\n multiline comment ']\n对于简单的情况使用 re.DOTALL 标记参数工作的很好，但是如果模式非常复杂或\n者是为了构造字符串令牌而将多个模式合并起来 (2.18 节有详细描述)，这时候使用这\n个标记参数就可能出现一些问题。如果让你选择的话，最好还是定义自己的正则表达式\n模式，这样它可以在不需要额外的标记参数下也能工作的很好。\n2.9 将 Unicode 文本标准化\n问题\n你正在处理 Unicode 字符串，需要确保所有字符串在底层有相同的表示。\n解决方案\n在 Unicode 中，某些字符能够用多个合法的编码表示。为了说明，考虑下面的这个\n例子：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s1 = 'Spicy Jalape\\u00f1o'\ns2 = 'Spicy Jalapen\\u0303o'\ns1\n'Spicy Jalapeño'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s2\n'Spicy Jalapeño'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s1 == s2\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("len(s1)\n14")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("len(s2)\n15")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这里的文本”Spicy Jalapeño”使用了两种形式来表示。第一种使用整体字符”ñ”\n(U+00F1)，第二种使用拉丁字母”n”后面跟一个”~”的组合字符 (U+0303)。\n在需要比较字符串的程序中使用字符的多种表示会产生问题。为了修正这个问题，\n你可以使用 unicodedata 模块先将文本标准化：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import unicodedata\nt1 = unicodedata.normalize('NFC', s1)\nt2 = unicodedata.normalize('NFC', s2)\nt1 == t2\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(ascii(t1))\n'Spicy Jalape\\xf1o'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("t3 = unicodedata.normalize('NFD', s1)\nt4 = unicodedata.normalize('NFD', s2)\nt3 == t4\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(ascii(t3))\n'Spicy Jalapen\\u0303o'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("normalize() 第一个参数指定字符串标准化的方式。NFC 表示字符应该是整体组\n成 (比如可能的话就使用单一编码)，而 NFD 表示字符应该分解为多个组合字符表示。\nPython 同样支持扩展的标准化形式 NFKC 和 NFKD，它们在处理某些字符的时\n候增加了额外的兼容特性。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = '\\ufb01' # A single character\ns\n'￾'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("unicodedata.normalize('NFD', s)\n'￾'")])])])]),e._v(" "),n("h1",{attrs:{id:"notice-how-the-combined-letters-are-broken-apart-here"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notice-how-the-combined-letters-are-broken-apart-here"}},[e._v("#")]),e._v(" Notice how the combined letters are broken apart here")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("unicodedata.normalize('NFKD', s)\n'fi'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("unicodedata.normalize('NFKC', s)\n'fi'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n标准化对于任何需要以一致的方式处理 Unicode 文本的程序都是非常重要的。当\n处理来自用户输入的字符串而你很难去控制编码的时候尤其如此。\n在清理和过滤文本的时候字符的标准化也是很重要的。比如，假设你想清除掉一些\n文本上面的变音符的时候 (可能是为了搜索和匹配)：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("t1 = unicodedata.normalize('NFD', s1)\n''.join(c for c in t1 if not unicodedata.combining(c))\n'Spicy Jalapeno'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后一个例子展示了 unicodedata 模块的另一个重要方面，也就是测试字符类的\n工具函数。combining() 函数可以测试一个字符是否为和音字符。在这个模块中还有其\n他函数用于查找字符类别，测试是否为数字字符等等。\nUnicode 显然是一个很大的主题。如果想更深入的了解关于标准化方面的信息，请\n看考 Unicode 官网中关于这部分的说明 Ned Batchelder 在 他的网站 上对 Python 的\nUnicode 处理问题也有一个很好的介绍。\n2.10 在正则式中使用 Unicode\n问题\n你正在使用正则表达式处理文本，但是关注的是 Unicode 字符处理。\n解决方案\n默认情况下 re 模块已经对一些 Unicode 字符类有了基本的支持。比如，\\d 已经\n匹配任意的 unicode 数字字符了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import re\nnum = re.compile('\\d+')")]),e._v(" "),n("h1",{attrs:{id:"ascii-digits"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ascii-digits"}},[e._v("#")]),e._v(" ASCII digits")]),e._v(" "),n("p",[e._v("num.match('123')\n<_sre.SRE_Match object at 0x1007d9ed0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"arabic-digits"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arabic-digits"}},[e._v("#")]),e._v(" Arabic digits")]),e._v(" "),n("p",[e._v("num.match('\\u0661\\u0662\\u0663')\n<_sre.SRE_Match object at 0x101234030>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想在模式中包含指定的 Unicode 字符，你可以使用 Unicode 字符对应的转\n义序列 (比如 \\uFFF 或者 \\UFFFFFFF )。比如，下面是一个匹配几个不同阿拉伯编码页\n面中所有字符的正则表达式：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("arabic = re.compile('[\\u0600-\\u06ff\\u0750-\\u077f\\u08a0-\\u08ff]+')")])])])]),e._v(" "),n("p",[e._v("当执行匹配和搜索操作的时候，最好是先标准化并且清理所有文本为标准化格式\n(参考 2.9 小节)。但是同样也应该注意一些特殊情况，比如在忽略大小写匹配和大小写\n转换时的行为。")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("pat = re.compile('stra\\u00dfe', re.IGNORECASE)\ns = 'straße'\npat.match(s) # Matches\n<_sre.SRE_Match object at 0x10069d370>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("pat.match(s.upper()) # Doesn't match\ns.upper() # Case folds\n'STRASSE'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n混合使用 Unicode 和正则表达式通常会让你抓狂。如果你真的打算这样做的话，最\n好考虑下安装第三方正则式库，它们会为 Unicode 的大小写转换和其他大量有趣特性\n提供全面的支持，包括模糊匹配。\n2.11 删除字符串中不需要的字符\n问题\n你想去掉文本字符串开头，结尾或者中间不想要的字符，比如空白。\n解决方案\nstrip() 方法能用于删除开始或结尾的字符。lstrip() 和 rstrip() 分别从左和\n从右执行删除操作。默认情况下，这些方法会去除空白字符，但是你也可以指定其他字\n符。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"whitespace-stripping"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#whitespace-stripping"}},[e._v("#")]),e._v(" Whitespace stripping")]),e._v(" "),n("p",[e._v("s = ' hello world \\n'\ns.strip()\n'hello world'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.lstrip()\n'hello world \\n'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.rstrip()\n' hello world'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"character-stripping"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#character-stripping"}},[e._v("#")]),e._v(" Character stripping")]),e._v(" "),n("p",[e._v("t = '-----hello====='\nt.lstrip('-')\n'hello====='")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("t.strip('-=')\n'hello'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n这些 strip() 方法在读取和清理数据以备后续处理的时候是经常会被用到的。比\n如，你可以用它们来去掉空格，引号和完成其他任务。\n但是需要注意的是去除操作不会对字符串的中间的文本产生任何影响。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = ' hello world \\n'\ns = s.strip()\ns\n'hello world'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想处理中间的空格，那么你需要求助其他技术。比如使用 replace() 方法\n或者是用正则表达式替换。示例如下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s.replace(' ', '')\n'helloworld'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import re\nre.sub('\\s+', ' ', s)\n'hello world'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("通常情况下你想将字符串 strip 操作和其他迭代操作相结合，比如从文件中读取\n多行数据。如果是这样的话，那么生成器表达式就可以大显身手了。比如：\nwith open(filename) as f:\nlines = (line.strip() for line in f)\nfor line in lines:\nprint(line)\n在这里，表达式 lines = (line.strip() for line in f) 执行数据转换操作。这\n种方式非常高效，因为它不需要预先读取所有数据放到一个临时的列表中去。它仅仅只\n是创建一个生成器，并且每次返回行之前会先执行 strip 操作。\n对于更高阶的 strip，你可能需要使用 translate() 方法。请参阅下一节了解更多\n关于字符串清理的内容。\n2.12 审查清理文本字符串\n问题\n一些无聊的幼稚黑客在你的网站页面表单中输入文本”pýtĥöñ”，然后你想将这些\n字符清理掉。\n解决方案\n文本清理问题会涉及到包括文本解析与数据处理等一系列问题。在非常简单的情\n形下，你可能会选择使用字符串函数 (比如 str.upper() 和 str.lower() ) 将文本转为\n标准格式。使用 str.replace() 或者 re.sub() 的简单替换操作能删除或者改变指定\n的字符序列。你同样还可以使用 2.9 小节的 unicodedata.normalize() 函数将 unicode\n文本标准化。\n然后，有时候你可能还想在清理操作上更进一步。比如，你可能想消除整个区间上\n的字符或者去除变音符。为了这样做，你可以使用经常会被忽视的 str.translate()\n方法。为了演示，假设你现在有下面这个凌乱的字符串：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = 'pýtĥöñ\\fis\\tawesome\\r\\n'\ns\n'pýtĥöñ\\x0cis\\tawesome\\r\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("第一步是清理空白字符。为了这样做，先创建一个小的转换表格然后使用\ntranslate() 方法：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("remap = {\n... ord('\\t') : ' ',\n... ord('\\f') : ' ',\n... ord('\\r') : None # Deleted\n... }")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a = s.translate(remap)\na\n'pýtĥöñ is awesome\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("正如你看的那样，空白字符 \\t 和 \\f 已经被重新映射到一个空格。回车字符 r 直\n接被删除。\n你可以以这个表格为基础进一步构建更大的表格。比如，让我们删除所有的和音\n符：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import unicodedata\nimport sys\ncmb_chrs = dict.fromkeys(c for c in range(sys.maxunicode)\n... if unicodedata.combining(chr(c)))\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = unicodedata.normalize('NFD', a)\nb\n'pýtĥöñ is awesome\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b.translate(cmb_chrs)\n'python is awesome\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("上面例子中，通过使用 dict.fromkeys() 方法构造一个字典，每个 Unicode 和音\n符作为键，对应的值全部为 None 。\n然后使用 unicodedata.normalize() 将原始输入标准化为分解形式字符。然后再\n调用 translate 函数删除所有重音符。同样的技术也可以被用来删除其他类型的字符\n(比如控制字符等)。\n作为另一个例子，这里构造一个将所有 Unicode 数字字符映射到对应的 ASCII 字\n符上的表格：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("digitmap = { c: ord('0') + unicodedata.digit(chr(c))\n... for c in range(sys.maxunicode)\n... if unicodedata.category(chr(c)) == 'Nd' }\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("len(digitmap)\n460")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"arabic-digits-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arabic-digits-2"}},[e._v("#")]),e._v(" Arabic digits")]),e._v(" "),n("p",[e._v("x = '\\u0661\\u0662\\u0663'\nx.translate(digitmap)\n'123'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("另一种清理文本的技术涉及到 I/O 解码与编码函数。这里的思路是先对文本做一\n些初步的清理，然后再结合 encode() 或者 decode() 操作来清除或修改它。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a\n'pýtĥöñ is awesome\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = unicodedata.normalize('NFD', a)\nb.encode('ascii', 'ignore').decode('ascii')\n'python is awesome\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这里的标准化操作将原来的文本分解为单独的和音符。接下来的 ASCII 编码/解码\n只是简单的一下子丢弃掉那些字符。当然，这种方法仅仅只在最后的目标就是获取到文\n本对应 ACSII 表示的时候生效。\n讨论\n文本字符清理一个最主要的问题应该是运行的性能。一般来讲，代码越简单运行越\n快。对于简单的替换操作，str.replace() 方法通常是最快的，甚至在你需要多次调用\n的时候。比如，为了清理空白字符，你可以这样做：\ndef clean_spaces(s):\ns = s.replace('\\r', '') s = s.replace('\\t', ' ') s = s.replace('\\f', ' ')\nreturn s\n如果你去测试的话，你就会发现这种方式会比使用 translate() 或者正则表达式\n要快很多。\n另一方面，如果你需要执行任何复杂字符对字符的重新映射或者删除操作的话，\ntanslate() 方法会非常的快。\n从大的方面来讲，对于你的应用程序来说性能是你不得不去自己研究的东西。不幸\n的是，我们不可能给你建议一个特定的技术，使它能够适应所有的情况。因此实际情况\n中需要你自己去尝试不同的方法并评估它。\n尽管这一节集中讨论的是文本，但是类似的技术也可以适用于字节，包括简单的替\n换，转换和正则表达式。\n2.13 字符串对齐\n问题\n你想通过某种对齐方式来格式化字符串\n解决方案\n对于基本的字符串对齐操作，可以使用字符串的 ljust() , rjust() 和 center()\n方法。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("text = 'Hello World'\ntext.ljust(20)\n'Hello World '")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("text.rjust(20) ' Hello World'\ntext.center(20)\n' Hello World '")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("所有这些方法都能接受一个可选的填充字符。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("text.rjust(20,'=')\n'=========Hello World'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("text.center(20,'*')\n'"),n("strong",[n("strong",[e._v("Hello World")])]),e._v("*'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("函数 format() 同样可以用来很容易的对齐字符串。你要做的就是使用 <,> 或者 ^\n字符后面紧跟一个指定的宽度。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("format(text, '>20') ' Hello World'\nformat(text, '<20')\n'Hello World '")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(text, '^20')\n' Hello World '")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想指定一个非空格的填充字符，将它写到对齐字符的前面即可：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("format(text, '=>20s')\n'=========Hello World'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(text, '*^20s')\n'"),n("strong",[n("strong",[e._v("Hello World")])]),e._v("*'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("当格式化多个值的时候，这些格式代码也可以被用在 format() 方法中。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("'{:>10s} {:>10s}'.format('Hello', 'World')\n' Hello World'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("format() 函数的一个好处是它不仅适用于字符串。它可以用来格式化任何值，使\n得它非常的通用。比如，你可以用它来格式化数字：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 1.2345\nformat(x, '>10')\n' 1.2345'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(x, '^10.2f')\n' 1.23 '")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n在老的代码中，你经常会看到被用来格式化文本的 % 操作符。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("'%-20s' % text\n'Hello World '")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("'%20s' % text\n' Hello World'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("但是，在新版本代码中，你应该优先选择 format() 函数或者方法。format() 要比\n% 操作符的功能更为强大。并且 format() 也比使用 ljust() , rjust() 或 center() 方\n法更通用，因为它可以用来格式化任意对象，而不仅仅是字符串。\n如果想要完全了解 format() 函数的有用特性，请参考 在线 Python 文档\n2.14 合并拼接字符串\n问题\n你想将几个小的字符串合并为一个大的字符串\n解决方案\n如果你想要合并的字符串是在一个序列或者 iterable 中，那么最快的方式就是使\n用 join() 方法。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("parts = ['Is', 'Chicago', 'Not', 'Chicago?']\n' '.join(parts)\n'Is Chicago Not Chicago?'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("','.join(parts)\n'Is,Chicago,Not,Chicago?'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("''.join(parts)\n'IsChicagoNotChicago?'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("初看起来，这种语法看上去会比较怪，但是 join() 被指定为字符串的一个方法。\n这样做的部分原因是你想去连接的对象可能来自各种不同的数据序列 (比如列表，元\n组，字典，文件，集合或生成器等)，如果在所有这些对象上都定义一个 join() 方法明\n显是冗余的。因此你只需要指定你想要的分割字符串并调用他的 join() 方法去将文本\n片段组合起来。\n如果你仅仅只是合并少数几个字符串，使用加号 (+) 通常已经足够了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = 'Is Chicago'\nb = 'Not Chicago?'\na + ' ' + b\n'Is Chicago Not Chicago?'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("加号 (+) 操作符在作为一些复杂字符串格式化的替代方案的时候通常也工作的很\n好，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("print('{} {}'.format(a,b))\nIs Chicago Not Chicago?")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(a + ' ' + b)\nIs Chicago Not Chicago?")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想在源码中将两个字面字符串合并起来，你只需要简单的将它们放到一起，\n不需要用加号 (+)。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = 'Hello' 'World'\na\n'HelloWorld'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n字符串合并可能看上去并不需要用一整节来讨论。但是不应该小看这个问题，程序\n员通常在字符串格式化的时候因为选择不当而给应用程序带来严重性能损失。\n最重要的需要引起注意的是，当我们使用加号 (+) 操作符去连接大量的字符串的\n时候是非常低效率的，因为加号连接会引起内存复制以及垃圾回收操作。特别的，你永\n远都不应像下面这样写字符串连接代码：\ns = ''\nfor p in parts:\ns += p\n这种写法会比使用 join() 方法运行的要慢一些，因为每一次执行 += 操作的时候\n会创建一个新的字符串对象。你最好是先收集所有的字符串片段然后再将它们连接起\n来。\n一个相对比较聪明的技巧是利用生成器表达式 (参考 1.19 小节) 转换数据为字符串\n的同时合并字符串，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("data = ['ACME', 50, 91.1]\n','.join(str(d) for d in data)\n'ACME,50,91.1'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("同样还得注意不必要的字符串连接操作。有时候程序员在没有必要做连接操作的\n时候仍然多此一举。比如在打印的时候：\nprint(a + ':' + b + ':' + c) # Ugly\nprint(':'.join([a, b, c])) # Still ugly\nprint(a, b, c, sep='😂 # Better\n当混合使用 I/O 操作和字符串连接操作的时候，有时候需要仔细研究你的程序。比\n如，考虑下面的两端代码片段：")]),e._v(" "),n("h1",{attrs:{id:"version-1-string-concatenation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#version-1-string-concatenation"}},[e._v("#")]),e._v(" Version 1 (string concatenation)")]),e._v(" "),n("p",[e._v("f.write(chunk1 + chunk2)")]),e._v(" "),n("h1",{attrs:{id:"version-2-separate-i-o-operations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#version-2-separate-i-o-operations"}},[e._v("#")]),e._v(" Version 2 (separate I/O operations)")]),e._v(" "),n("p",[e._v("f.write(chunk1)\nf.write(chunk2)\n如果两个字符串很小，那么第一个版本性能会更好些，因为 I/O 系统调用天生就\n慢。另外一方面，如果两个字符串很大，那么第二个版本可能会更加高效，因为它避免\n了创建一个很大的临时结果并且要复制大量的内存块数据。还是那句话，有时候是需要\n根据你的应用程序特点来决定应该使用哪种方案。\n最后谈一下，如果你准备编写构建大量小字符串的输出代码，你最好考虑下使用生\n成器函数，利用 yield 语句产生输出片段。比如：\ndef sample():\nyield 'Is'\nyield 'Chicago'\nyield 'Not'\nyield 'Chicago?'\n这种方法一个有趣的方面是它并没有对输出片段到底要怎样组织做出假设。例如，\n你可以简单的使用 join() 方法将这些片段合并起来：\ntext = ''.join(sample())\n或者你也可以将字符串片段重定向到 I/O：\nfor part in sample():\nf.write(part)\n再或者你还可以写出一些结合 I/O 操作的混合方案：\ndef combine(source, maxsize):\nparts = []\nsize = 0\nfor part in source:\nparts.append(part)\nsize += len(part)\nif size > maxsize:\nyield ''.join(parts)\nparts = []\nsize = 0\nyield ''.join(parts)")]),e._v(" "),n("h1",{attrs:{id:"结合文件操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结合文件操作"}},[e._v("#")]),e._v(" 结合文件操作")]),e._v(" "),n("p",[e._v("with open('filename', 'w') as f:\nfor part in combine(sample(), 32768):\nf.write(part)\n这里的关键点在于原始的生成器函数并不需要知道使用细节，它只负责生成字符\n串片段就行了。\n2.15 字符串中插入变量\n问题\n你想创建一个内嵌变量的字符串，变量被它的值所表示的字符串替换掉。\n解决方案\nPython 并没有对在字符串中简单替换变量值提供直接的支持。但是通过使用字符\n串的 format() 方法来解决这个问题。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = '{name} has {n} messages.'\ns.format(name='Guido', n=37)\n'Guido has 37 messages.'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("或者，如果要被替换的变量能在变量域中找到，那么你可以结合使用 format_map()\n和 vars() 。就像下面这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("name = 'Guido'\nn = 37\ns.format_map(vars())\n'Guido has 37 messages.'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("vars() 还有一个有意思的特性就是它也适用于对象实例。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("class Info:\n... def "),n("strong",[e._v("init")]),e._v("(self, name, n):\n... self.name = name\n... self.n = n\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a = Info('Guido',37)\ns.format_map(vars(a))\n'Guido has 37 messages.'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("format 和 format_map() 的一个缺陷就是它们并不能很好的处理变量缺失的情况，\n比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s.format(name='Guido')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nKeyError: 'n'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一种避免这种错误的方法是另外定义一个含有 "),n("strong",[e._v("missing")]),e._v('() 方法的字典对象，\n就像下面这样：\nclass safesub(dict):\n""" 防止 key 找不到"""\ndef '),n("strong",[e._v("missing")]),e._v("(self, key):\nreturn '{' + key + '}'\n现在你可以利用这个类包装输入后传递给 format_map() ：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("del n # Make sure n is undefined\ns.format_map(safesub(vars()))\n'Guido has {n} messages.'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你发现自己在代码中频繁的执行这些步骤，你可以将变量替换步骤用一个工\n具函数封装起来。就像下面这样：\nimport sys\ndef sub(text):\nreturn text.format_map(safesub(sys._getframe(1).f_locals))\n现在你可以像下面这样写了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("name = 'Guido'\nn = 37\nprint(sub('Hello {name}'))\nHello Guido")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(sub('You have {n} messages.'))\nYou have 37 messages.")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(sub('Your favorite color is {color}'))\nYour favorite color is {color}")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n多年以来由于 Python 缺乏对变量替换的内置支持而导致了各种不同的解决方案。\n作为本节中展示的一个可能的解决方案，你可以有时候会看到像下面这样的字符串格\n式化代码：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("name = 'Guido'\nn = 37\n'%(name) has %(n) messages.' % vars()\n'Guido has 37 messages.'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你可能还会看到字符串模板的使用：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import string\ns = string.Template('$name has $n messages.')\ns.substitute(vars())\n'Guido has 37 messages.'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("然而，format() 和 format_map() 相比较上面这些方案而已更加先进，因此应该\n被优先选择。使用 format() 方法还有一个好处就是你可以获得对字符串格式化的所有\n支持 (对齐，填充，数字格式化等待)，而这些特性是使用像模板字符串之类的方案不可\n能获得的。\n本机还部分介绍了一些高级特性。映射或者字典类中鲜为人知的 "),n("strong",[e._v("missing")]),e._v('()\n方法可以让你定义如何处理缺失的值。在 SafeSub 类中，这个方法被定义为对缺失的\n值返回一个占位符。你可以发现缺失的值会出现在结果字符串中 (在调试的时候可能很\n有用)，而不是产生一个 KeyError 异常。\nsub() 函数使用 sys._getframe(1) 返回调用者的栈帧。可以从中访问属性\nf_locals 来获得局部变量。毫无疑问绝大部分情况下在代码中去直接操作栈帧应\n该是不推荐的。但是，对于像字符串替换工具函数而言它是非常有用的。另外，值得注\n意的是 f_locals 是一个复制调用函数的本地变量的字典。尽管你可以改变 f_locals\n的内容，但是这个修改对于后面的变量访问没有任何影响。所以，虽说访问一个栈帧看\n上去很邪恶，但是对它的任何操作不会覆盖和改变调用者本地变量的值。\n2.16 以指定列宽格式化字符串\n问题\n你有一些长字符串，想以指定的列宽将它们重新格式化。\n解决方案\n使用 textwrap 模块来格式化字符串的输出。比如，假如你有下列的长字符串：\ns = "Look into my eyes, look into my eyes, the eyes, the eyes, '),n("br"),e._v("\nthe eyes, not around the eyes, don't look around the eyes, "),n("br"),e._v("\nlook into my eyes, you're under.\"\n下面演示使用 textwrap 格式化字符串的多种方式：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import textwrap\nprint(textwrap.fill(s, 70))\nLook into my eyes, look into my eyes, the eyes, the eyes, the eyes,\nnot around the eyes, don't look around the eyes, look into my eyes,\nyou're under.")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(textwrap.fill(s, 40))\nLook into my eyes, look into my eyes,\nthe eyes, the eyes, the eyes, not around\nthe eyes, don't look around the eyes,\nlook into my eyes, you're under.")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(textwrap.fill(s, 40, initial_indent=' '))\nLook into my eyes, look into my\neyes, the eyes, the eyes, the eyes, not\naround the eyes, don't look around the\neyes, look into my eyes, you're under.")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(textwrap.fill(s, 40, subsequent_indent=' '))\nLook into my eyes, look into my eyes,\nthe eyes, the eyes, the eyes, not\naround the eyes, don't look around\nthe eyes, look into my eyes, you're\nunder.\n讨论\ntextwrap 模块对于字符串打印是非常有用的，特别是当你希望输出自动匹配终端\n大小的时候。你可以使用 os.get_terminal_size() 方法来获取终端的大小尺寸。比如：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import os\nos.get_terminal_size().columns\n80")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("fill() 方 法 接 受 一 些 其 他 可 选 参 数 来 控 制 tab， 语 句 结 尾 等。参 阅 tex￾twrap.TextWrapper 文档 获取更多内容。\n2.17 在字符串中处理 html 和 xml\n问题\n你想将 HTML 或者 XML 实体如 &entity; 或 &#code; 替换为对应的文本。再者，\n你需要转换文本中特定的字符 (比如 <, >, 或 &)。\n解决方案\n如果你想替换文本字符串中的‘<’或者‘>’，使用 html.escape() 函数可以很\n容易的完成。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = 'Elements are written as \""),n("tag",[e._v("text")]),e._v('".\'\nimport html\nprint(s)\nElements are written as "'),n("tag",[e._v("text")]),e._v('".')],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('print(html.escape(s))\nElements are written as "<tag>text</tag>".')])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"disable-escaping-of-quotes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#disable-escaping-of-quotes"}},[e._v("#")]),e._v(" Disable escaping of quotes")]),e._v(" "),n("p",[e._v('print(html.escape(s, quote=False))\nElements are written as "<tag>text</tag>".')])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你正在处理的是 ASCII 文本，并且想将非 ASCII 文本对应的编码实体嵌入进\n去，可以给某些 I/O 函数传递参数 errors='xmlcharrefreplace' 来达到这个目。比\n如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = 'Spicy Jalapeño'\ns.encode('ascii', errors='xmlcharrefreplace')\nb'Spicy Jalapeño'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("为了替换文本中的编码实体，你需要使用另外一种方法。如果你正在处理 HTML\n或者 XML 文本，试着先使用一个合适的 HTML 或者 XML 解析器。通常情况下，这\n些工具会自动替换这些编码值，你无需担心。\n有时候，如果你接收到了一些含有编码值的原始文本，需要手动去做替换，通常你\n只需要使用 HTML 或者 XML 解析器的一些相关工具函数/方法即可。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = 'Spicy \"Jalapeño&quot.'\nfrom html.parser import HTMLParser\np = HTMLParser()\np.unescape(s)\n'Spicy \"Jalapeño\".'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("t = 'The prompt is >>>'\nfrom xml.sax.saxutils import unescape\nunescape(t)\n'The prompt is >>>'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n在生成 HTML 或者 XML 文本的时候，如果正确的转换特殊标记字符是一个很容\n易被忽视的细节。特别是当你使用 print() 函数或者其他字符串格式化来产生输出的\n时候。使用像 html.escape() 的工具函数可以很容易的解决这类问题。\n如果你想以其他方式处理文本，还有一些其他的工具函数比如 xml.sax.saxutils.\nunescapge() 可以帮助你。然而，你应该先调研清楚怎样使用一个合适的解析器。比\n如，如果你在处理 HTML 或 XML 文本，使用某个解析模块比如 html.parse 或 xml.\netree.ElementTree 已经帮你自动处理了相关的替换细节。\n2.18 字符串令牌解析\n问题\n你有一个字符串，想从左至右将其解析为一个令牌流。\n解决方案\n假如你有下面这样一个文本字符串：\ntext = 'foo = 23 + 42 * 10'\n为了令牌化字符串，你不仅需要匹配模式，还得指定模式的类型。比如，你可能想\n将字符串像下面这样转换为序列对：\ntokens = [('NAME', 'foo'), ('EQ','='), ('NUM', '23'), ('PLUS','+'),\n('NUM', '42'), ('TIMES', '"),n("em",[e._v("'), ('NUM', '10')]\n为了执行这样的切分，第一步就是像下面这样利用命名捕获组的正则表达式来定\n义所有可能的令牌，包括空格：\nimport re\nNAME = r'(?P"),n("NAME",[e._v("[a-zA-Z_][a-zA-Z_0-9]")])],1),e._v(")'\nNUM = r'(?P"),n("NUM",[e._v("\\d+)'\nPLUS = r'(?P"),n("PLUS",[e._v("+)'\nTIMES = r'(?P"),n("TIMES",[e._v("*)'\nEQ = r'(?P"),n("EQ",[e._v("=)'\nWS = r'(?P"),n("WS",[e._v("\\s+)'\nmaster_pat = re.compile('|'.join([NAME, NUM, PLUS, TIMES, EQ, WS]))\n在上面的模式中，?P"),n("TOKENNAME",[e._v(" 用于给一个模式命名，供后面使用。\n下一步，为了令牌化，使用模式对象很少被人知道的 scanner() 方法。这个方法\n会创建一个 scanner 对象，在这个对象上不断的调用 match() 方法会一步步的扫描目\n标文本，每步一个匹配。下面是演示一个 scanner 对象如何工作的交互式例子：")])],1)],1)],1)],1)],1)],1),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("scanner = master_pat.scanner('foo = 42')\nscanner.match()\n<_sre.SRE_Match object at 0x100677738>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("_.lastgroup, _.group()\n('NAME', 'foo')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("scanner.match()\n<_sre.SRE_Match object at 0x100677738>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("_.lastgroup, _.group()\n('WS', ' ')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("scanner.match()\n<_sre.SRE_Match object at 0x100677738>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("_.lastgroup, _.group()\n('EQ', '=')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("scanner.match()\n<_sre.SRE_Match object at 0x100677738>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("_.lastgroup, _.group()\n('WS', ' ')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("scanner.match()\n<_sre.SRE_Match object at 0x100677738>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("_.lastgroup, _.group()\n('NUM', '42')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("scanner.match()")])])])]),e._v(" "),n("p",[e._v("实际使用这种技术的时候，可以很容易的像下面这样将上述代码打包到一个生成\n器中：\ndef generate_tokens(pat, text):\nToken = namedtuple('Token', ['type', 'value'])\nscanner = pat.scanner(text)\nfor m in iter(scanner.match, None):\nyield Token(m.lastgroup, m.group())")]),e._v(" "),n("h1",{attrs:{id:"example-use"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("for tok in generate_tokens(master_pat, 'foo = 42'):\nprint(tok)")]),e._v(" "),n("h1",{attrs:{id:"produces-output"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#produces-output"}},[e._v("#")]),e._v(" Produces output")]),e._v(" "),n("h1",{attrs:{id:"token-type-name-value-foo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-type-name-value-foo"}},[e._v("#")]),e._v(" Token(type='NAME', value='foo')")]),e._v(" "),n("h1",{attrs:{id:"token-type-ws-value"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-type-ws-value"}},[e._v("#")]),e._v(" Token(type='WS', value=' ')")]),e._v(" "),n("h1",{attrs:{id:"token-type-eq-value"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-type-eq-value"}},[e._v("#")]),e._v(" Token(type='EQ', value='=')")]),e._v(" "),n("h1",{attrs:{id:"token-type-ws-value-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-type-ws-value-2"}},[e._v("#")]),e._v(" Token(type='WS', value=' ')")]),e._v(" "),n("h1",{attrs:{id:"token-type-num-value-42"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-type-num-value-42"}},[e._v("#")]),e._v(" Token(type='NUM', value='42')")]),e._v(" "),n("p",[e._v("如果你想过滤令牌流，你可以定义更多的生成器函数或者使用一个生成器表达式。\n比如，下面演示怎样过滤所有的空白令牌：\ntokens = (tok for tok in generate_tokens(master_pat, text)\nif tok.type != 'WS')\nfor tok in tokens:\nprint(tok)\n讨论\n通常来讲令牌化是很多高级文本解析与处理的第一步。为了使用上面的扫描方法，\n你需要记住这里一些重要的几点。第一点就是你必须确认你使用正则表达式指定了所\n有输入中可能出现的文本序列。如果有任何不可匹配的文本出现了，扫描就会直接停\n止。这也是为什么上面例子中必须指定空白字符令牌的原因。\n令牌的顺序也是有影响的。re 模块会按照指定好的顺序去做匹配。因此，如果一\n个模式恰好是另一个更长模式的子字符串，那么你需要确定长模式写在前面。比如：\nLT = r'(?P"),n("LT",[e._v("<)'\nLE = r'(?P"),n("LE",[e._v("<=)'\nEQ = r'(?P"),n("EQ",[e._v("=)'\nmaster_pat = re.compile('|'.join([LE, LT, EQ])) # Correct")])],1)],1)],1),e._v(" "),n("h1",{attrs:{id:"master-pat-re-compile-join-lt-le-eq-incorrect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#master-pat-re-compile-join-lt-le-eq-incorrect"}},[e._v("#")]),e._v(" master_pat = re.compile('|'.join([LT, LE, EQ])) # Incorrect")]),e._v(" "),n("p",[e._v("第二个模式是错的，因为它会将文本 <= 匹配为令牌 LT 紧跟着 EQ，而不是单独\n的令牌 LE，这个并不是我们想要的结果。\n最后，你需要留意下子字符串形式的模式。比如，假设你有如下两个模式：\nPRINT = r'(?P"),n("PRINT",[e._v("print)'\nNAME = r'(?P"),n("NAME",[e._v("[a-zA-Z_][a-zA-Z_0-9]*)'\nmaster_pat = re.compile('|'.join([PRINT, NAME]))\nfor tok in generate_tokens(master_pat, 'printer'):\nprint(tok)")])],1)],1),e._v(" "),n("h1",{attrs:{id:"outputs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#outputs"}},[e._v("#")]),e._v(" Outputs :")]),e._v(" "),n("h1",{attrs:{id:"token-type-print-value-print"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-type-print-value-print"}},[e._v("#")]),e._v(" Token(type='PRINT', value='print')")]),e._v(" "),n("h1",{attrs:{id:"token-type-name-value-er"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-type-name-value-er"}},[e._v("#")]),e._v(" Token(type='NAME', value='er')")]),e._v(" "),n("p",[e._v("关于更高阶的令牌化技术，你可能需要查看 PyParsing 或者 PLY 包。一个调用\nPLY 的例子在下一节会有演示。\n2.19 实现一个简单的递归下降分析器\n问题\n你想根据一组语法规则解析文本并执行命令，或者构造一个代表输入的抽象语法\n树。如果语法非常简单，你可以自己写这个解析器，而不是使用一些框架。\n解决方案\n在这个问题中，我们集中讨论根据特殊语法去解析文本的问题。为了这样做，你首\n先要以 BNF 或者 EBNF 形式指定一个标准语法。比如，一个简单数学表达式语法可能\n像下面这样：\nexpr ::= expr + term\n| expr - term\n| term\nterm ::= term * factor\n| term / factor\n| factor\nfactor ::= ( expr )\n| NUM\n或者，以 EBNF 形式：\nexpr ::= term { (+|-) term }*\nterm ::= factor { ("),n("em",[e._v("|/) factor }")]),e._v("\nfactor ::= ( expr )\n| NUM\n在 EBNF 中，被包含在 {...}* 中的规则是可选的。"),n("em",[e._v("代表 0 次或多次重复 (跟正\n则表达式中意义是一样的)。\n现在，如果你对 BNF 的工作机制还不是很明白的话，就把它当做是一组左右符号\n可相互替换的规则。一般来讲，解析的原理就是你利用 BNF 完成多个替换和扩展以匹\n配输入文本和语法规则。为了演示，假设你正在解析形如 3 + 4 * 5 的表达式。这个\n表达式先要通过使用 2.18 节中介绍的技术分解为一组令牌流。结果可能是像下列这样\n的令牌序列：\nNUM + NUM * NUM\n在此基础上，解析动作会试着去通过替换操作匹配语法到输入令牌：\nexpr\nexpr ::= term { (+|-) term }")]),e._v("\nexpr ::= factor { ("),n("em",[e._v("|/) factor }")]),e._v(" { (+|-) term }*\nexpr ::= NUM { ("),n("em",[e._v("|/) factor }")]),e._v(" { (+|-) term }*\nexpr ::= NUM { (+|-) term }*\nexpr ::= NUM + term { (+|-) term }*\nexpr ::= NUM + factor { ("),n("em",[e._v("|/) factor }")]),e._v(" { (+|-) term }*\nexpr ::= NUM + NUM { ("),n("em",[e._v("|/) factor}")]),e._v(" { (+|-) term }*\nexpr ::= NUM + NUM * factor { ("),n("em",[e._v("|/) factor }")]),e._v(" { (+|-) term }*\nexpr ::= NUM + NUM * NUM { ("),n("em",[e._v("|/) factor }")]),e._v(" { (+|-) term }*\nexpr ::= NUM + NUM * NUM { (+|-) term }*\nexpr ::= NUM + NUM * NUM\n下面所有的解析步骤可能需要花点时间弄明白，但是它们原理都是查找输入并试\n着去匹配语法规则。第一个输入令牌是 NUM，因此替换首先会匹配那个部分。一旦匹\n配成功，就会进入下一个令牌 +，以此类推。当已经确定不能匹配下一个令牌的时候，\n右边的部分 (比如 { ("),n("em",[e._v("/) factor }")]),e._v(" ) 就会被清理掉。在一个成功的解析中，整个右\n边部分会完全展开来匹配输入令牌流。\n有了前面的知识背景，下面我们举一个简单示例来展示如何构建一个递归下降表\n达式求值程序：\n#!/usr/bin/env python")]),e._v(" "),n("h1",{attrs:{id:"encoding-utf-8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#encoding-utf-8"}},[e._v("#")]),e._v(" -"),n("em",[e._v("- encoding: utf-8 -")]),e._v("-")]),e._v(" "),n("p",[e._v('"""\nTopic: 下降解析器\nDesc :\n"""\nimport re\nimport collections')]),e._v(" "),n("h1",{attrs:{id:"token-specification"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-specification"}},[e._v("#")]),e._v(" Token specification")]),e._v(" "),n("p",[e._v("NUM = r'(?P"),n("NUM",[e._v("\\d+)'\nPLUS = r'(?P"),n("PLUS",[e._v("+)'\nMINUS = r'(?P"),n("MINUS",[e._v("-)'\nTIMES = r'(?P"),n("TIMES",[e._v("*)'\nDIVIDE = r'(?P"),n("DIVIDE",[e._v("/)'\nLPAREN = r'(?P"),n("LPAREN",[e._v("()'\nRPAREN = r'(?P"),n("RPAREN",[e._v("))'\nWS = r'(?P"),n("WS",[e._v("\\s+)'\nmaster_pat = re.compile('|'.join([NUM, PLUS, MINUS, TIMES,\nDIVIDE, LPAREN, RPAREN, WS]))")])],1)],1)],1)],1)],1)],1)],1)],1),e._v(" "),n("h1",{attrs:{id:"tokenizer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tokenizer"}},[e._v("#")]),e._v(" Tokenizer")]),e._v(" "),n("p",[e._v("Token = collections.namedtuple('Token', ['type', 'value'])\ndef generate_tokens(text):\nscanner = master_pat.scanner(text)\nfor m in iter(scanner.match, None):\ntok = Token(m.lastgroup, m.group())\nif tok.type != 'WS':\nyield tok")]),e._v(" "),n("h1",{attrs:{id:"parser"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parser"}},[e._v("#")]),e._v(" Parser")]),e._v(" "),n("p",[e._v("class ExpressionEvaluator:\n'''\nImplementation of a recursive descent parser. Each method\nimplements a single grammar rule. Use the ._accept() method\nto test and accept the current lookahead token. Use the ._expect()\nmethod to exactly match and discard the next token on on the input\n(or raise a SyntaxError if it doesn't match).\n'''\ndef parse(self, text):\nself.tokens = generate_tokens(text)\nself.tok = None # Last symbol consumed\nself.nexttok = None # Next symbol tokenized\nself._advance() # Load first lookahead token\nreturn self.expr()\ndef _advance(self):\n'Advance one token ahead'\nself.tok, self.nexttok = self.nexttok, next(self.tokens, None)\ndef _accept(self, toktype):\n'Test and consume the next token if it matches toktype'\nif self.nexttok and self.nexttok.type == toktype:\nself._advance()\nreturn True\nelse:\nreturn False\ndef _expect(self, toktype):\n'Consume next token if it matches toktype or raise SyntaxError'\nif not self._accept(toktype):\nraise SyntaxError('Expected ' + toktype)")]),e._v(" "),n("h1",{attrs:{id:"grammar-rules-follow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#grammar-rules-follow"}},[e._v("#")]),e._v(" Grammar rules follow")]),e._v(" "),n("p",[e._v("def expr(self):\n\"expression ::= term { ('+'|'-') term }"),n("em",[e._v("\"\nexprval = self.term()\nwhile self._accept('PLUS') or self._accept('MINUS'):\nop = self.tok.type\nright = self.term()\nif op == 'PLUS':\nexprval += right\nelif op == 'MINUS':\nexprval -= right\nreturn exprval\ndef term(self):\n\"term ::= factor { ('")]),e._v("'|'/') factor }*\"\ntermval = self.factor()\nwhile self._accept('TIMES') or self._accept('DIVIDE'):\nop = self.tok.type\nright = self.factor()\nif op == 'TIMES':\ntermval *= right\nelif op == 'DIVIDE':\ntermval /= right\nreturn termval\ndef factor(self):\n\"factor ::= NUM | ( expr )\"\nif self._accept('NUM'):\nreturn int(self.tok.value)\nelif self._accept('LPAREN'):\nexprval = self.expr()\nself._expect('RPAREN')\nreturn exprval\nelse:\nraise SyntaxError('Expected NUMBER or LPAREN')\ndef descent_parser():\ne = ExpressionEvaluator()\nprint(e.parse('2'))\nprint(e.parse('2 + 3'))\nprint(e.parse('2 + 3 * 4'))\nprint(e.parse('2 + (3 + 4) * 5'))")]),e._v(" "),n("h1",{attrs:{id:"print-e-parse-2-3-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#print-e-parse-2-3-4"}},[e._v("#")]),e._v(" print(e.parse('2 + (3 + * 4)'))")]),e._v(" "),n("h1",{attrs:{id:"traceback-most-recent-call-last"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#traceback-most-recent-call-last"}},[e._v("#")]),e._v(" Traceback (most recent call last):")]),e._v(" "),n("h1",{attrs:{id:"file-line-1-in"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-line-1-in"}},[e._v("#")]),e._v(' File "'),n("stdin",[e._v('", line 1, in '),n("module")],1)],1),e._v(" "),n("h1",{attrs:{id:"file-exprparse-py-line-40-in-parse"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-exprparse-py-line-40-in-parse"}},[e._v("#")]),e._v(' File "exprparse.py", line 40, in parse')]),e._v(" "),n("h1",{attrs:{id:"return-self-expr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#return-self-expr"}},[e._v("#")]),e._v(" return self.expr()")]),e._v(" "),n("h1",{attrs:{id:"file-exprparse-py-line-67-in-expr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-exprparse-py-line-67-in-expr"}},[e._v("#")]),e._v(' File "exprparse.py", line 67, in expr')]),e._v(" "),n("h1",{attrs:{id:"right-self-term"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#right-self-term"}},[e._v("#")]),e._v(" right = self.term()")]),e._v(" "),n("h1",{attrs:{id:"file-exprparse-py-line-77-in-term"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-exprparse-py-line-77-in-term"}},[e._v("#")]),e._v(' File "exprparse.py", line 77, in term')]),e._v(" "),n("h1",{attrs:{id:"termval-self-factor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#termval-self-factor"}},[e._v("#")]),e._v(" termval = self.factor()")]),e._v(" "),n("h1",{attrs:{id:"file-exprparse-py-line-93-in-factor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-exprparse-py-line-93-in-factor"}},[e._v("#")]),e._v(' File "exprparse.py", line 93, in factor')]),e._v(" "),n("h1",{attrs:{id:"exprval-self-expr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exprval-self-expr"}},[e._v("#")]),e._v(" exprval = self.expr()")]),e._v(" "),n("h1",{attrs:{id:"file-exprparse-py-line-67-in-expr-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-exprparse-py-line-67-in-expr-2"}},[e._v("#")]),e._v(' File "exprparse.py", line 67, in expr')]),e._v(" "),n("h1",{attrs:{id:"right-self-term-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#right-self-term-2"}},[e._v("#")]),e._v(" right = self.term()")]),e._v(" "),n("h1",{attrs:{id:"file-exprparse-py-line-77-in-term-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-exprparse-py-line-77-in-term-2"}},[e._v("#")]),e._v(' File "exprparse.py", line 77, in term')]),e._v(" "),n("h1",{attrs:{id:"termval-self-factor-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#termval-self-factor-2"}},[e._v("#")]),e._v(" termval = self.factor()")]),e._v(" "),n("h1",{attrs:{id:"file-exprparse-py-line-97-in-factor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-exprparse-py-line-97-in-factor"}},[e._v("#")]),e._v(' File "exprparse.py", line 97, in factor')]),e._v(" "),n("h1",{attrs:{id:"raise-syntaxerror-expected-number-or-lparen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#raise-syntaxerror-expected-number-or-lparen"}},[e._v("#")]),e._v(' raise SyntaxError("Expected NUMBER or LPAREN")')]),e._v(" "),n("h1",{attrs:{id:"syntaxerror-expected-number-or-lparen"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#syntaxerror-expected-number-or-lparen"}},[e._v("#")]),e._v(" SyntaxError: Expected NUMBER or LPAREN")]),e._v(" "),n("p",[e._v("if "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\ndescent_parser()\n讨论\n文本解析是一个很大的主题，一般会占用学生学习编译课程时刚开始的三周时间。\n如果你在找寻关于语法，解析算法等相关的背景知识的话，你应该去看一下编译器书\n籍。很显然，关于这方面的内容太多，不可能在这里全部展开。\n尽管如此，编写一个递归下降解析器的整体思路是比较简单的。开始的时候，你先\n获得所有的语法规则，然后将其转换为一个函数或者方法。因此如果你的语法类似这\n样：\nexpr ::= term { ('+'|'-') term }*\nterm ::= factor { ('"),n("em",[e._v("'|'/') factor }")]),e._v("\nfactor ::= '(' expr ')' | NUM\n你应该首先将它们转换成一组像下面这样的方法：\nclass ExpressionEvaluator: ...\ndef expr(self):\n...\ndef term(self):\n...\ndef factor(self):\n...\n每个方法要完成的任务很简单 - 它必须从左至右遍历语法规则的每一部分，处理\n每个令牌。从某种意义上讲，方法的目的就是要么处理完语法规则，要么产生一个语法\n错误。为了这样做，需采用下面的这些实现方法：\n• 如果规则中的下个符号是另外一个语法规则的名字 (比如 term 或 factor)，就简单\n的调用同名的方法即可。这就是该算法中”下降”的由来 - 控制下降到另一个语\n法规则中去。有时候规则会调用已经执行的方法 (比如，在 factor ::= '('expr\n')' 中对 expr 的调用)。这就是算法中”递归”的由来。\n• 如果规则中下一个符号是个特殊符号 (比如 ()，你得查找下一个令牌并确认是一\n个精确匹配)。如果不匹配，就产生一个语法错误。这一节中的 _expect() 方法就\n是用来做这一步的。\n• 如果规则中下一个符号为一些可能的选择项 (比如 + 或 -)，你必须对每一种可\n能情况检查下一个令牌，只有当它匹配一个的时候才能继续。这也是本节示例中\n_accept() 方法的目的。它相当于 _expect() 方法的弱化版本，因为如果一个匹\n配找到了它会继续，但是如果没找到，它不会产生错误而是回滚 (允许后续的检\n查继续进行)。 • 对于有重复部分的规则 (比如在规则表达式 ::= term { ('+'|'-') term }* 中)，\n重复动作通过一个 while 循环来实现。循环主体会收集或处理所有的重复元素直\n到没有其他元素可以找到。\n• 一旦整个语法规则处理完成，每个方法会返回某种结果给调用者。这就是在解析\n过程中值是怎样累加的原理。比如，在表达式求值程序中，返回值代表表达式解\n析后的部分结果。最后所有值会在最顶层的语法规则方法中合并起来。\n尽管向你演示的是一个简单的例子，递归下降解析器可以用来实现非常复杂的解\n析。比如，Python 语言本身就是通过一个递归下降解析器去解释的。如果你对此感兴\n趣，你可以通过查看 Python 源码文件 Grammar/Grammar 来研究下底层语法机制。看\n完你会发现，通过手动方式去实现一个解析器其实会有很多的局限和不足之处。\n其中一个局限就是它们不能被用于包含任何左递归的语法规则中。比如，加入你需\n要翻译下面这样一个规则：\nitems ::= items ',' item\n| item\n为了这样做，你可能会像下面这样使用 items() 方法：\ndef items(self):\nitemsval = self.items()\nif itemsval and self._accept(','):\nitemsval.append(self.item())\nelse:\nitemsval = [ self.item() ]\n唯一的问题是这个方法根本不能工作，事实上，它会产生一个无限递归错误。\n关于语法规则本身你可能也会碰到一些棘手的问题。比如，你可能想知道下面这个\n简单扼语法是否表述得当：\nexpr ::= factor { ('+'|'-'|'"),n("em",[e._v("'|'/') factor }")]),e._v("\nfactor ::= '(' expression ')' | NUM\n这个语法看上去没啥问题，但是它却不能察觉到标准四则运算中的运算符优先级。\n比如，表达式 \"3 + 4 * 5\" 会得到 35 而不是期望的 23. 分开使用”expr”和”term”\n规则可以让它正确的工作。\n对于复杂的语法，你最好是选择某个解析工具比如 PyParsing 或者是 PLY。下面\n是使用 PLY 来重写表达式求值程序的代码：\nfrom ply.lex import lex\nfrom ply.yacc import yacc")]),e._v(" "),n("h1",{attrs:{id:"token-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-list"}},[e._v("#")]),e._v(" Token list")]),e._v(" "),n("p",[e._v("tokens = [ 'NUM', 'PLUS', 'MINUS', 'TIMES', 'DIVIDE', 'LPAREN', 'RPAREN' ]")]),e._v(" "),n("h1",{attrs:{id:"ignored-characters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ignored-characters"}},[e._v("#")]),e._v(" Ignored characters")]),e._v(" "),n("p",[e._v("t_ignore = ' \\t\\n'")]),e._v(" "),n("h1",{attrs:{id:"token-specifications-as-regexs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-specifications-as-regexs"}},[e._v("#")]),e._v(" Token specifications (as regexs)")]),e._v(" "),n("p",[e._v("t_PLUS = r'+'\nt_MINUS = r'-'\nt_TIMES = r'*'\nt_DIVIDE = r'/'\nt_LPAREN = r'('\nt_RPAREN = r')'")]),e._v(" "),n("h1",{attrs:{id:"token-processing-functions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#token-processing-functions"}},[e._v("#")]),e._v(" Token processing functions")]),e._v(" "),n("p",[e._v("def t_NUM(t):\nr'\\d+' t.value = int(t.value)\nreturn t")]),e._v(" "),n("h1",{attrs:{id:"error-handler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#error-handler"}},[e._v("#")]),e._v(" Error handler")]),e._v(" "),n("p",[e._v("def t_error(t):\nprint('Bad character: {!r}'.format(t.value[0]))\nt.skip(1)")]),e._v(" "),n("h1",{attrs:{id:"build-the-lexer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#build-the-lexer"}},[e._v("#")]),e._v(" Build the lexer")]),e._v(" "),n("p",[e._v("lexer = lex()")]),e._v(" "),n("h1",{attrs:{id:"grammar-rules-and-handler-functions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#grammar-rules-and-handler-functions"}},[e._v("#")]),e._v(" Grammar rules and handler functions")]),e._v(" "),n("p",[e._v("def p_expr(p):\n'''\nexpr : expr PLUS term\n| expr MINUS term\n'''\nif p[2] == '+':\np[0] = p[1] + p[3]\nelif p[2] == '-':\np[0] = p[1] - p[3]\ndef p_expr_term(p):\n'''\nexpr : term\n'''\np[0] = p[1]\ndef p_term(p):\n'''\nterm : term TIMES factor\n| term DIVIDE factor\n'''\nif p[2] == '*':\np[0] = p[1] * p[3]\nelif p[2] == '/':\np[0] = p[1] / p[3]\ndef p_term_factor(p):\n'''\nterm : factor\n'''\np[0] = p[1]\ndef p_factor(p):\n'''\nfactor : NUM\n'''\np[0] = p[1]\ndef p_factor_group(p):\n'''\nfactor : LPAREN expr RPAREN\n'''\np[0] = p[2]\ndef p_error(p):\nprint('Syntax error')\nparser = yacc()\n这个程序中，所有代码都位于一个比较高的层次。你只需要为令牌写正则表达式和\n规则匹配时的高阶处理函数即可。而实际的运行解析器，接受令牌等等底层动作已经被\n库函数实现了。\n下面是一个怎样使用得到的解析对象的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("parser.parse('2') 2\nparser.parse('2+3') 5\nparser.parse('2+(3+4)*5')\n37")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想在你的编程过程中来点挑战和刺激，编写解析器和编译器是个不错的选\n择。再次，一本编译器的书籍会包含很多底层的理论知识。不过很多好的资源也可以在\n网上找到。Python 自己的 ast 模块也值得去看一下。\n2.20 字节字符串上的字符串操作\n问题\n你想在字节字符串上执行普通的文本操作 (比如移除，搜索和替换)。\n解决方案\n字节字符串同样也支持大部分和文本字符串一样的内置操作。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("data = b'Hello World'\ndata[0:5]\nb'Hello'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("data.startswith(b'Hello')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("data.split()\n[b'Hello', b'World']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("data.replace(b'Hello', b'Hello Cruel')\nb'Hello Cruel World'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这些操作同样也适用于字节数组。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("data = bytearray(b'Hello World')\ndata[0:5]\nbytearray(b'Hello')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("data.startswith(b'Hello')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("data.split()\n[bytearray(b'Hello'), bytearray(b'World')]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("data.replace(b'Hello', b'Hello Cruel')\nbytearray(b'Hello Cruel World')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你可以使用正则表达式匹配字节字符串，但是正则表达式本身必须也是字节串。比\n如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("data = b'FOO:BAR,SPAM'\nimport re\nre.split('[:,]',data)\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "/usr/local/lib/python3.3/re.py", line 191, in split\nreturn _compile(pattern, flags).split(string, maxsplit)\nTypeError: can\'t use a string pattern on a bytes-like object')])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("re.split(b'[:,]',data) # Notice: pattern as bytes\n[b'FOO', b'BAR', b'SPAM']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n大多数情况下，在文本字符串上的操作均可用于字节字符串。然而，这里也有一些\n需要注意的不同点。首先，字节字符串的索引操作返回整数而不是单独字符。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = 'Hello World' # Text string\na[0]\n'H'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a[1]\n'e'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = b'Hello World' # Byte string\nb[0]\n72")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b[1]\n101")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这种语义上的区别会对于处理面向字节的字符数据有影响。\n第二点，字节字符串不会提供一个美观的字符串表示，也不能很好的打印出来，除\n非它们先被解码为一个文本字符串。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = b'Hello World'\nprint(s)\nb'Hello World' # Observe b'...'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(s.decode('ascii'))\nHello World")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("类似的，也不存在任何适用于字节字符串的格式化操作：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("b'%10s %10d %10.2f' % (b'ACME', 100, 490.1)\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: unsupported operand type(s) for %: 'bytes' and 'tuple'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b'{} {} {}'.format(b'ACME', 100, 490.1)\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nAttributeError: 'bytes' object has no attribute 'format'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想格式化字节字符串，你得先使用标准的文本字符串，然后将其编码为字节\n字符串。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("'{:10s} {:10d} {:10.2f}'.format('ACME', 100, 490.1).encode('ascii')\nb'ACME 100 490.10'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后需要注意的是，使用字节字符串可能会改变一些操作的语义，特别是那些跟文\n件系统有关的操作。比如，如果你使用一个编码为字节的文件名，而不是一个普通的文\n本字符串，会禁用文件名的编码/解码。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"write-a-utf-8-filename"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#write-a-utf-8-filename"}},[e._v("#")]),e._v(" Write a UTF-8 filename")]),e._v(" "),n("p",[e._v("with open('jalape\\xf1o.txt', 'w') as f:\n... f.write('spicy')\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"get-a-directory-listing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-a-directory-listing"}},[e._v("#")]),e._v(" Get a directory listing")]),e._v(" "),n("p",[e._v("import os\nos.listdir('.') # Text string (names are decoded)\n['jalapeño.txt']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("os.listdir(b'.') # Byte string (names left as bytes)\n[b'jalapen\\xcc\\x83o.txt']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("注意例子中的最后部分给目录名传递一个字节字符串是怎样导致结果中文件名以\n未解码字节返回的。在目录中的文件名包含原始的 UTF-8 编码。参考 5.15 小节获取更\n多文件名相关的内容。\n最后提一点，一些程序员为了提升程序执行的速度会倾向于使用字节字符串而\n不是文本字符串。尽管操作字节字符串确实会比文本更加高效 (因为处理文本固有的\nUnicode 相关开销)。这样做通常会导致非常杂乱的代码。你会经常发现字节字符串并不\n能和 Python 的其他部分工作的很好，并且你还得手动处理所有的编码/解码操作。坦\n白讲，如果你在处理文本的话，就直接在程序中使用普通的文本字符串而不是字节字符\n串。不做死就不会死！")]),e._v(" "),n("h2",{attrs:{id:"第三章-数字日期和时间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三章-数字日期和时间"}},[e._v("#")]),e._v(" 第三章：数字日期和时间")]),e._v(" "),n("p",[e._v("在 Python 中执行整数和浮点数的数学运算时很简单的。尽管如此，如果你需要执\n行分数、数组或者是日期和时间的运算的话，就得做更多的工作了。本章集中讨论的就\n是这些主题。\n3.1 数字的四舍五入\n问题\n你想对浮点数执行指定精度的舍入运算。\n解决方案\n对于简单的舍入运算，使用内置的 round(value, ndigits) 函数即可。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("round(1.23, 1)\n1.2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("round(1.27, 1)\n1.3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("round(-1.27, 1)\n-1.3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("round(1.25361,3)\n1.254")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("当一个值刚好在两个边界的中间的时候，round 函数返回离它最近的偶数。也就是\n说，对 1.5 或者 2.5 的舍入运算都会得到 2。\n传给 round() 函数的 ndigits 参数可以是负数，这种情况下，舍入运算会作用在\n十位、百位、千位等上面。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = 1627731\nround(a, -1)\n1627730")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("round(a, -2)\n1627700")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("round(a, -3)\n1628000")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n不要将舍入和格式化输出搞混淆了。如果你的目的只是简单的输出一定宽度的数，\n你不需要使用 round() 函数。而仅仅只需要在格式化的时候指定精度即可。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 1.23456\nformat(x, '0.2f')\n'1.23'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(x, '0.3f')\n'1.235'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("'value is {:0.3f}'.format(x)\n'value is 1.235'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("同样，不要试着去舍入浮点值来”修正”表面上看起来正确的问题。比如，你可能\n倾向于这样做：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = 2.1\nb = 4.2\nc = a + b\nc\n6.300000000000001")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('c = round(c, 2) # "Fix" result (???)\nc\n6.3')])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对于大多数使用到浮点的程序，没有必要也不推荐这样做。尽管在计算的时候会有\n一点点小的误差，但是这些小的误差是能被理解与容忍的。如果不能允许这样的小误差\n(比如涉及到金融领域)，那么就得考虑使用 decimal 模块了，下一节我们会详细讨论。\n3.2 执行精确的浮点数运算\n问题\n你需要对浮点数执行精确的计算操作，并且不希望有任何小误差的出现。\n解决方案\n浮点数的一个普遍问题是它们并不能精确的表示十进制数。并且，即使是最简单的\n数学运算也会产生小的误差，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = 4.2\nb = 2.1\na + b\n6.300000000000001")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("(a + b) == 6.3\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这些错误是由底层 CPU 和 IEEE 754 标准通过自己的浮点单位去执行算术时的特\n征。由于 Python 的浮点数据类型使用底层表示存储数据，因此你没办法去避免这样的\n误差。\n如果你想更加精确 (并能容忍一定的性能损耗)，你可以使用 decimal 模块：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from decimal import Decimal\na = Decimal('4.2')\nb = Decimal('2.1')\na + b\nDecimal('6.3')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(a + b)\n6.3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("(a + b) == Decimal('6.3')\nTrue\n初看起来，上面的代码好像有点奇怪，比如我们用字符串来表示数字。然而，Decimal\n对象会像普通浮点数一样的工作 (支持所有的常用数学运算)。如果你打印它们或者在\n字符串格式化函数中使用它们，看起来跟普通数字没什么两样。\ndecimal 模块的一个主要特征是允许你控制计算的每一方面，包括数字位数和四\n舍五入运算。为了这样做，你先得创建一个本地上下文并更改它的设置，比如：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("from decimal import localcontext\na = Decimal('1.3')\nb = Decimal('1.7')\nprint(a / b)\n0.7647058823529411764705882353")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("with localcontext() as ctx:\n... ctx.prec = 3\n... print(a / b)\n...\n0.765")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("with localcontext() as ctx:\n... ctx.prec = 50\n... print(a / b)\n...\n0.76470588235294117647058823529411764705882352941176")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\ndecimal 模块实现了 IBM 的”通用小数运算规范”。不用说，有很多的配置选项这\n本书没有提到。\nPython 新手会倾向于使用 decimal 模块来处理浮点数的精确运算。然而，先理解\n你的应用程序目的是非常重要的。如果你是在做科学计算或工程领域的计算、电脑绘\n图，或者是科学领域的大多数运算，那么使用普通的浮点类型是比较普遍的做法。其中\n一个原因是，在真实世界中很少会要求精确到普通浮点数能提供的 17 位精度。因此，\n计算过程中的那么一点点的误差是被允许的。第二点就是，原生的浮点数计算要快的\n多-有时候你在执行大量运算的时候速度也是非常重要的。\n即便如此，你却不能完全忽略误差。数学家花了大量时间去研究各类算法，有些处\n理误差会比其他方法更好。你也得注意下减法删除以及大数和小数的加分运算所带来\n的影响。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("nums = [1.23e+18, 1, -1.23e+18]\nsum(nums) # Notice how 1 disappears\n0.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("上面的错误可以利用 math.fsum() 所提供的更精确计算能力来解决：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import math\nmath.fsum(nums)\n1.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("然而，对于其他的算法，你应该仔细研究它并理解它的误差产生来源。\n总的来说，decimal 模块主要用在涉及到金融的领域。在这类程序中，哪怕是一点\n小小的误差在计算过程中蔓延都是不允许的。因此，decimal 模块为解决这类问题提供\n了方法。当 Python 和数据库打交道的时候也通常会遇到 Decimal 对象，并且，通常也\n是在处理金融数据的时候。\n3.3 数字的格式化输出\n问题\n你需要将数字格式化后输出，并控制数字的位数、对齐、千位分隔符和其他的细节。\n解决方案\n格式化输出单个数字的时候，可以使用内置的 format() 函数，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 1234.56789")]),e._v(" "),n("h1",{attrs:{id:"two-decimal-places-of-accuracy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#two-decimal-places-of-accuracy"}},[e._v("#")]),e._v(" Two decimal places of accuracy")]),e._v(" "),n("p",[e._v("format(x, '0.2f')\n'1234.57'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"right-justified-in-10-chars-one-digit-accuracy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#right-justified-in-10-chars-one-digit-accuracy"}},[e._v("#")]),e._v(" Right justified in 10 chars, one-digit accuracy")]),e._v(" "),n("p",[e._v("format(x, '>10.1f')\n' 1234.6'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"left-justified"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#left-justified"}},[e._v("#")]),e._v(" Left justified")]),e._v(" "),n("p",[e._v("format(x, '<10.1f')\n'1234.6 '")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"centered"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#centered"}},[e._v("#")]),e._v(" Centered")]),e._v(" "),n("p",[e._v("format(x, '^10.1f')\n' 1234.6 '")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"inclusion-of-thousands-separator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inclusion-of-thousands-separator"}},[e._v("#")]),e._v(" Inclusion of thousands separator")]),e._v(" "),n("p",[e._v("format(x, ',')\n'1,234.56789'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(x, '0,.1f')\n'1,234.6'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想使用指数记法，将 f 改成 e 或者 E(取决于指数输出的大小写形式)。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("format(x, 'e')\n'1.234568e+03'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(x, '0.2E')\n'1.23E+03'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("同时指定宽度和精度的一般形式是 '[<>^]?width[,]?(.digits)?' ，其中 width\n和 digits 为整数，？代表可选部分。同样的格式也被用在字符串的 format() 方法中。\n比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("'The value is {:0,.2f}'.format(x)\n'The value is 1,234.57'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n数字格式化输出通常是比较简单的。上面演示的技术同时适用于浮点数和 decimal\n模块中的 Decimal 数字对象。\n当指定数字的位数后，结果值会根据 round() 函数同样的规则进行四舍五入后返\n回。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x\n1234.56789")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(x, '0.1f')\n'1234.6'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(-x, '0.1f')\n'-1234.6'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("包含千位符的格式化跟本地化没有关系。如果你需要根据地区来显示千位符，你\n需要自己去调查下 locale 模块中的函数了。你同样也可以使用字符串的 translate()\n方法来交换千位符。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("swap_separators = { ord('.'):',', ord(','):'.' }\nformat(x, ',').translate(swap_separators)\n'1.234,56789'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在很多 Python 代码中会看到使用% 来格式化数字的，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("'%0.2f' % x\n'1234.57'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("'%10.1f' % x\n' 1234.6'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("'%-10.1f' % x\n'1234.6 '")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这种格式化方法也是可行的，不过比更加先进的 format() 要差一点。比如，在使\n用% 操作符格式化数字的时候，一些特性 (添加千位符) 并不能被支持。\n3.4 二八十六进制整数\n问题\n你需要转换或者输出使用二进制，八进制或十六进制表示的整数。\n解决方案\n为了将整数转换为二进制、八进制或十六进制的文本串，可以分别使用 bin() ,\noct() 或 hex() 函数：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 1234\nbin(x)\n'0b10011010010'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("oct(x)\n'0o2322'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("hex(x)\n'0x4d2'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("另外，如果你不想输出 0b , 0o 或者 0x 的前缀的话，可以使用 format() 函数。比\n如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("format(x, 'b')\n'10011010010'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(x, 'o')\n'2322'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(x, 'x')\n'4d2'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("整数是有符号的，所以如果你在处理负数的话，输出结果会包含一个负号。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = -1234\nformat(x, 'b')\n'-10011010010'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(x, 'x')\n'-4d2'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想产生一个无符号值，你需要增加一个指示最大位长度的值。比如为了显示\n32 位的值，可以像下面这样写：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = -1234\nformat(2**32 + x, 'b')\n'11111111111111111111101100101110'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(2**32 + x, 'x')\n'fffffb2e'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("为了以不同的进制转换整数字符串，简单的使用带有进制的 int() 函数即可：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("int('4d2', 16)\n1234")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("int('10011010010', 2)\n1234")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n大多数情况下处理二进制、八进制和十六进制整数是很简单的。只要记住这些转换\n属于整数和其对应的文本表示之间的转换即可。永远只有一种整数类型。\n最后，使用八进制的程序员有一点需要注意下。Python 指定八进制数的语法跟其\n他语言稍有不同。比如，如果你像下面这样指定八进制，会出现语法错误：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import os\nos.chmod('script.py', 0755)\nFile \""),n("stdin",[e._v("\", line 1\nos.chmod('script.py', 0755)\n^\nSyntaxError: invalid token")])],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("需确保八进制数的前缀是 0o ，就像下面这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("os.chmod('script.py', 0o755)")])])])]),e._v(" "),n("p",[e._v("3.5 字节到大整数的打包与解包\n问题\n你有一个字节字符串并想将它解压成一个整数。或者，你需要将一个大整数转换为\n一个字节字符串。\n解决方案\n假设你的程序需要处理一个拥有 128 位长的 16 个元素的字节字符串。比如：\ndata = b'\\x00\\x124V\\x00x\\x90\\xab\\x00\\xcd\\xef\\x01\\x00#\\x004'\n为了将 bytes 解析为整数，使用 int.from_bytes() 方法，并像下面这样指定字节\n顺序：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("len(data)\n16")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("int.from_bytes(data, 'little')\n69120565665751139577663547927094891008")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("int.from_bytes(data, 'big')\n94522842520747284487117727783387188")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("为了将一个大整数转换为一个字节字符串，使用 int.to_bytes() 方法，并像下面\n这样指定字节数和字节顺序：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 94522842520747284487117727783387188\nx.to_bytes(16, 'big')\nb'\\x00\\x124V\\x00x\\x90\\xab\\x00\\xcd\\xef\\x01\\x00#\\x004'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x.to_bytes(16, 'little')\nb'4\\x00#\\x00\\x01\\xef\\xcd\\x00\\xab\\x90x\\x00V4\\x12\\x00'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n大整数和字节字符串之间的转换操作并不常见。然而，在一些应用领域有时候也会\n出现，比如密码学或者网络。例如，IPv6 网络地址使用一个 128 位的整数表示。如果\n你要从一个数据记录中提取这样的值的时候，你就会面对这样的问题。\n作为一种替代方案，你可能想使用 6.11 小节中所介绍的 struct 模块来解压字节。\n这样也行得通，不过利用 struct 模块来解压对于整数的大小是有限制的。因此，你可\n能想解压多个字节串并将结果合并为最终的结果，就像下面这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("data\nb'\\x00\\x124V\\x00x\\x90\\xab\\x00\\xcd\\xef\\x01\\x00#\\x004'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import struct\nhi, lo = struct.unpack('>QQ', data)\n(hi << 64) + lo\n94522842520747284487117727783387188")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("字节顺序规则 (little 或 big) 仅仅指定了构建整数时的字节的低位高位排列方式。\n我们从下面精心构造的 16 进制数的表示中可以很容易的看出来：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 0x01020304\nx.to_bytes(4, 'big')\nb'\\x01\\x02\\x03\\x04'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x.to_bytes(4, 'little')\nb'\\x04\\x03\\x02\\x01'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你试着将一个整数打包为字节字符串，那么它就不合适了，你会得到一个错\n误。如果需要的话，你可以使用 int.bit_length() 方法来决定需要多少字节位来存储\n这个值。")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 523 ** 23\nx\n335381300113661875107536852714019056160355655333978849017944067")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x.to_bytes(16, 'little')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nOverflowError: int too big to convert")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x.bit_length()\n208")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("nbytes, rem = divmod(x.bit_length(), 8)\nif rem:\n... nbytes += 1\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x.to_bytes(nbytes, 'little')\nb'\\x03X\\xf1\\x82iT\\x96\\xac\\xc7c\\x16\\xf3\\xb9\\xcf...\\xd0'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("3.6 复数的数学运算\n问题\n你写的最新的网络认证方案代码遇到了一个难题，并且你唯一的解决办法就是使\n用复数空间。再或者是你仅仅需要使用复数来执行一些计算操作。\n解决方案\n复数可以用使用函数 complex(real, imag) 或者是带有后缀 j 的浮点数来指定。\n比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = complex(2, 4)\nb = 3 - 5j\na\n(2+4j)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b\n(3-5j)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对应的实部、虚部和共轭复数可以很容易的获取。就像下面这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a.real\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a.imag\n4.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a.conjugate()\n(2-4j)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("另外，所有常见的数学运算都可以工作：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a + b\n(5-1j)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a * b\n(26+2j)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a / b\n(-0.4117647058823529+0.6470588235294118j)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("abs(a)\n4.47213595499958")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果要执行其他的复数函数比如正弦、余弦或平方根，使用 cmath 模块：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import cmath\ncmath.sin(a)\n(24.83130584894638-11.356612711218174j)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cmath.cos(a)\n(-11.36423470640106-24.814651485634187j)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cmath.exp(a)\n(-4.829809383269385-5.5920560936409816j)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\nPython 中大部分与数学相关的模块都能处理复数。比如如果你使用 numpy ，可以\n很容易的构造一个复数数组并在这个数组上执行各种操作：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import numpy as np\na = np.array([2+3j, 4+5j, 6-7j, 8+9j])\na\narray([ 2.+3.j, 4.+5.j, 6.-7.j, 8.+9.j])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a + 2\narray([ 4.+3.j, 6.+5.j, 8.-7.j, 10.+9.j])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("np.sin(a)\narray([ 9.15449915 -4.16890696j, -56.16227422 -48.50245524j,\n-153.20827755-526.47684926j, 4008.42651446-589.49948373j])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("Python 的标准数学函数确实情况下并不能产生复数值，因此你的代码中不可能会\n出现复数返回值。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('import math\nmath.sqrt(-1)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nValueError: math domain error")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想生成一个复数返回结果，你必须显示的使用 cmath 模块，或者在某个支\n持复数的库中声明复数类型的使用。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import cmath\ncmath.sqrt(-1)\n1j")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("3.7 无穷大与 NaN\n问题\n你想创建或测试正无穷、负无穷或 NaN(非数字) 的浮点数。\n解决方案\nPython 并没有特殊的语法来表示这些特殊的浮点值，但是可以使用 float() 来创\n建它们。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = float('inf')\nb = float('-inf')\nc = float('nan')\na\ninf")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b\n-inf")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c\nnan")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("为了测试这些值的存在，使用 math.isinf() 和 math.isnan() 函数。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("math.isinf(a)\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("math.isnan(c)\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n想了解更多这些特殊浮点值的信息，可以参考 IEEE 754 规范。然而，也有一些地\n方需要你特别注意，特别是跟比较和操作符相关的时候。\n无穷大数在执行数学计算的时候会传播，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = float('inf')\na + 45\ninf")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a * 10\ninf")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("10 / a\n0.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("但是有些操作时未定义的并会返回一个 NaN 结果。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = float('inf')\na/a\nnan")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = float('-inf')\na + b\nnan")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("NaN 值会在所有操作中传播，而不会产生异常。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = float('nan')\nc + 23\nnan")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c / 2\nnan")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c * 2\nnan")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("math.sqrt(c)\nnan")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("NaN 值的一个特别的地方时它们之间的比较操作总是返回 False。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = float('nan')\nd = float('nan')\nc == d\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c is d\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("由于这个原因，测试一个 NaN 值得唯一安全的方法就是使用 math.isnan() ，也\n就是上面演示的那样。\n有时候程序员想改变 Python 默认行为，在返回无穷大或 NaN 结果的操作中抛出\n异常。fpectl 模块可以用来改变这种行为，但是它在标准的 Python 构建中并没有被\n启用，它是平台相关的，并且针对的是专家级程序员。可以参考在线的 Python 文档获\n取更多的细节。\n3.8 分数运算\n问题\n你进入时间机器，突然发现你正在做小学家庭作业，并涉及到分数计算问题。或者\n你可能需要写代码去计算在你的木工工厂中的测量值。\n解决方案\nfractions 模块可以被用来执行包含分数的数学运算。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from fractions import Fraction\na = Fraction(5, 4)\nb = Fraction(7, 16)\nprint(a + b)\n27/16")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(a * b)\n35/64")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"getting-numerator-denominator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getting-numerator-denominator"}},[e._v("#")]),e._v(" Getting numerator/denominator")]),e._v(" "),n("p",[e._v("c = a * b\nc.numerator\n35")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.denominator\n64")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"converting-to-a-float"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#converting-to-a-float"}},[e._v("#")]),e._v(" Converting to a float")]),e._v(" "),n("p",[e._v("float(c)\n0.546875")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"limiting-the-denominator-of-a-value"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#limiting-the-denominator-of-a-value"}},[e._v("#")]),e._v(" Limiting the denominator of a value")]),e._v(" "),n("p",[e._v("print(c.limit_denominator(8))\n4/7")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"converting-a-float-to-a-fraction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#converting-a-float-to-a-fraction"}},[e._v("#")]),e._v(" Converting a float to a fraction")]),e._v(" "),n("p",[e._v("x = 3.75\ny = Fraction(*x.as_integer_ratio())\ny\nFraction(15, 4)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n在大多数程序中一般不会出现分数的计算问题，但是有时候还是需要用到的。比\n如，在一个允许接受分数形式的测试单位并以分数形式执行运算的程序中，直接使用分\n数可以减少手动转换为小数或浮点数的工作。\n3.9 大型数组运算\n问题\n你需要在大数据集 (比如数组或网格) 上面执行计算。\n解决方案\n涉及到数组的重量级运算操作，可以使用 NumPy 库。NumPy 的一个主要特征是它\n会给 Python 提供一个数组对象，相比标准的 Python 列表而已更适合用来做数学运算。\n下面是一个简单的小例子，向你展示标准列表对象和 NumPy 数组对象之间的差别：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"python-lists"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#python-lists"}},[e._v("#")]),e._v(" Python lists")]),e._v(" "),n("p",[e._v("x = [1, 2, 3, 4]\ny = [5, 6, 7, 8]\nx * 2\n[1, 2, 3, 4, 1, 2, 3, 4]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('x + 10\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nTypeError: can only concatenate list (not "int") to list')])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x + y\n[1, 2, 3, 4, 5, 6, 7, 8]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"numpy-arrays"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#numpy-arrays"}},[e._v("#")]),e._v(" Numpy arrays")]),e._v(" "),n("p",[e._v("import numpy as np\nax = np.array([1, 2, 3, 4])\nay = np.array([5, 6, 7, 8])\nax * 2\narray([2, 4, 6, 8])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("ax + 10\narray([11, 12, 13, 14])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("ax + ay\narray([ 6, 8, 10, 12])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("ax * ay\narray([ 5, 12, 21, 32])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("正如所见，两种方案中数组的基本数学运算结果并不相同。特别的，NumPy 中的标\n量运算 (比如 ax * 2 或 ax + 10 ) 会作用在每一个元素上。另外，当两个操作数都是\n数组的时候执行元素对等位置计算，并最终生成一个新的数组。\n对整个数组中所有元素同时执行数学运算可以使得作用在整个数组上的函数运算\n简单而又快速。比如，如果你想计算多项式的值，可以这样做：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def f(x):\n... return 3"),n("em",[e._v("x**2 - 2")]),e._v("x + 7\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("f(ax)\narray([ 8, 15, 28, 47])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("NumPy 还为数组操作提供了大量的通用函数，这些函数可以作为 math 模块中类似\n函数的替代。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("np.sqrt(ax)\narray([ 1. , 1.41421356, 1.73205081, 2. ])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("np.cos(ax)\narray([ 0.54030231, -0.41614684, -0.9899925 , -0.65364362])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("使用这些通用函数要比循环数组并使用 math 模块中的函数执行计算要快的多。因\n此，只要有可能的话尽量选择 NumPy 的数组方案。\n底层实现中，NumPy 数组使用了 C 或者 Fortran 语言的机制分配内存。也就是说，\n它们是一个非常大的连续的并由同类型数据组成的内存区域。所以，你可以构造一个比\n普通 Python 列表大的多的数组。比如，如果你想构造一个 10,000*10,000 的浮点数二\n维网格，很轻松：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("grid = np.zeros(shape=(10000,10000), dtype=float)\ngrid\narray([[ 0., 0., 0., ..., 0., 0., 0.],\n[ 0., 0., 0., ..., 0., 0., 0.],\n[ 0., 0., 0., ..., 0., 0., 0.],\n...,\n[ 0., 0., 0., ..., 0., 0., 0.],\n[ 0., 0., 0., ..., 0., 0., 0.],\n[ 0., 0., 0., ..., 0., 0., 0.]])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("所有的普通操作还是会同时作用在所有元素上：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("grid += 10\ngrid\narray([[ 10., 10., 10., ..., 10., 10., 10.],\n[ 10., 10., 10., ..., 10., 10., 10.],\n[ 10., 10., 10., ..., 10., 10., 10.],\n...,\n[ 10., 10., 10., ..., 10., 10., 10.],\n[ 10., 10., 10., ..., 10., 10., 10.],\n[ 10., 10., 10., ..., 10., 10., 10.]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("np.sin(grid)\narray([[-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,\n-0.54402111, -0.54402111],\n[-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,\n-0.54402111, -0.54402111],\n[-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,\n-0.54402111, -0.54402111],\n...,\n[-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,\n-0.54402111, -0.54402111],\n[-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,\n-0.54402111, -0.54402111],\n[-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,\n-0.54402111, -0.54402111]])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("关于 NumPy 有一点需要特别的主意，那就是它扩展 Python 列表的索引功能 - 特别\n是对于多维数组。为了说明清楚，先构造一个简单的二维数组并试着做些试验：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\na\narray([[ 1, 2, 3, 4],\n[ 5, 6, 7, 8],\n[ 9, 10, 11, 12]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"select-row-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select-row-1"}},[e._v("#")]),e._v(" Select row 1")]),e._v(" "),n("p",[e._v("a[1]\narray([5, 6, 7, 8])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"select-column-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select-column-1"}},[e._v("#")]),e._v(" Select column 1")]),e._v(" "),n("p",[e._v("a[:,1]\narray([ 2, 6, 10])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"select-a-subregion-and-change-it"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select-a-subregion-and-change-it"}},[e._v("#")]),e._v(" Select a subregion and change it")]),e._v(" "),n("p",[e._v("a[1:3, 1:3]\narray([[ 6, 7],\n[10, 11]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a[1:3, 1:3] += 10\na\narray([[ 1, 2, 3, 4],\n[ 5, 16, 17, 8],\n[ 9, 20, 21, 12]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"broadcast-a-row-vector-across-an-operation-on-all-rows"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#broadcast-a-row-vector-across-an-operation-on-all-rows"}},[e._v("#")]),e._v(" Broadcast a row vector across an operation on all rows")]),e._v(" "),n("p",[e._v("a + [100, 101, 102, 103]\narray([[101, 103, 105, 107],\n[105, 117, 119, 111],\n[109, 121, 123, 115]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a\narray([[ 1, 2, 3, 4],\n[ 5, 16, 17, 8],\n[ 9, 20, 21, 12]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"conditional-assignment-on-an-array"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conditional-assignment-on-an-array"}},[e._v("#")]),e._v(" Conditional assignment on an array")]),e._v(" "),n("p",[e._v("np.where(a < 10, a, 10)\narray([[ 1, 2, 3, 4],\n[ 5, 10, 10, 8],\n[ 9, 10, 10, 10]])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\nNumPy 是 Python 领域中很多科学与工程库的基础，同时也是被广泛使用的最大最\n复杂的模块。即便如此，在刚开始的时候通过一些简单的例子和玩具程序也能帮我们完\n成一些有趣的事情。\n通常我们导入 NumPy 模块的时候会使用语句 import numpy as np 。这样的话你\n就不用再你的程序里面一遍遍的敲入 numpy ，只需要输入 np 就行了，节省了不少时间。\n如果想获取更多的信息，你当然得去 NumPy 官网逛逛了，网址是：http://www.\nnumpy.org\n3.10 矩阵与线性代数运算\n问题\n你需要执行矩阵和线性代数运算，比如矩阵乘法、寻找行列式、求解线性方程组等\n等。\n解决方案\nNumPy 库有一个矩阵对象可以用来解决这个问题。\n矩阵类似于 3.9 小节中数组对象，但是遵循线性代数的计算规则。下面的一个例子\n展示了矩阵的一些基本特性：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import numpy as np\nm = np.matrix([[1,-2,3],[0,4,5],[7,8,-9]])\nm\nmatrix([[ 1, -2, 3],\n[ 0, 4, 5],\n[ 7, 8, -9]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"return-transpose"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#return-transpose"}},[e._v("#")]),e._v(" Return transpose")]),e._v(" "),n("p",[e._v("m.T\nmatrix([[ 1, 0, 7],\n[-2, 4, 8],\n[ 3, 5, -9]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"return-inverse"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#return-inverse"}},[e._v("#")]),e._v(" Return inverse")]),e._v(" "),n("p",[e._v("m.I\nmatrix([[ 0.33043478, -0.02608696, 0.09565217],\n[-0.15217391, 0.13043478, 0.02173913],\n[ 0.12173913, 0.09565217, -0.0173913 ]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"create-a-vector-and-multiply"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-vector-and-multiply"}},[e._v("#")]),e._v(" Create a vector and multiply")]),e._v(" "),n("p",[e._v("v = np.matrix([[2],[3],[4]])\nv\nmatrix([[2],\n[3],\n[4]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m * v\nmatrix([[ 8],\n[32],\n[ 2]])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("可以在 numpy.linalg 子包中找到更多的操作函数，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import numpy.linalg")]),e._v(" "),n("h1",{attrs:{id:"determinant"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#determinant"}},[e._v("#")]),e._v(" Determinant")]),e._v(" "),n("p",[e._v("numpy.linalg.det(m)\n-229.99999999999983")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"eigenvalues"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eigenvalues"}},[e._v("#")]),e._v(" Eigenvalues")]),e._v(" "),n("p",[e._v("numpy.linalg.eigvals(m)\narray([-13.11474312, 2.75956154, 6.35518158])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"solve-for-x-in-mx-v"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#solve-for-x-in-mx-v"}},[e._v("#")]),e._v(" Solve for x in mx = v")]),e._v(" "),n("p",[e._v("x = numpy.linalg.solve(m, v)\nx\nmatrix([[ 0.96521739],\n[ 0.17391304],\n[ 0.46086957]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m * x\nmatrix([[ 2.],\n[ 3.],\n[ 4.]])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("v\nmatrix([[2],\n[3],\n[4]])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n很显然线性代数是个非常大的主题，已经超出了本书能讨论的范围。但是，如\n果你需要操作数组和向量的话，NumPy 是一个不错的入口点。可以访问 NumPy 官网\nhttp://www.numpy.org 获取更多信息。\n3.11 随机选择\n问题\n你想从一个序列中随机抽取若干元素，或者想生成几个随机数。\n解决方案\nrandom 模块有大量的函数用来产生随机数和随机选择元素。比如，要想从一个序\n列中随机的抽取一个元素，可以使用 random.choice() ：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import random\nvalues = [1, 2, 3, 4, 5, 6]\nrandom.choice(values)\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("random.choice(values)\n3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("random.choice(values)\n1")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("random.choice(values)\n4")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("random.choice(values)\n6")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("为了提取出 N 个不同元素的样本用来做进一步的操作，可以使用 random.sample()\n：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("random.sample(values, 2)\n[6, 2]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("random.sample(values, 2)\n[4, 3]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("random.sample(values, 3)\n[4, 3, 1]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("random.sample(values, 3)\n[5, 4, 1]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你仅仅只是想打乱序列中元素的顺序，可以使用 random.shuffle() ：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("random.shuffle(values)\nvalues\n[2, 4, 6, 5, 3, 1]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("random.shuffle(values)\nvalues\n[3, 5, 2, 1, 6, 4]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("生成随机整数，请使用 random.randint() ：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("random.randint(0,10) 2\nrandom.randint(0,10) 5\nrandom.randint(0,10) 0\nrandom.randint(0,10) 7\nrandom.randint(0,10)\n10")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("random.randint(0,10) 3")])])])]),e._v(" "),n("p",[e._v("为了生成 0 到 1 范围内均匀分布的浮点数，使用 random.random() ：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("random.random()\n0.9406677561675867")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("random.random()\n0.133129581343897")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("random.random()\n0.4144991136919316")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果要获取 N 位随机位 (二进制) 的整数，使用 random.getrandbits() ：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("random.getrandbits(200)\n335837000776573622800628485064121869519521710558559406913275")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\nrandom 模块使用 Mersenne Twister 算法来计算生成随机数。这是一个确定性算\n法，但是你可以通过 random.seed() 函数修改初始化种子。比如：\nrandom.seed() # Seed based on system time or os.urandom()\nrandom.seed(12345) # Seed based on integer given\nrandom.seed(b'bytedata') # Seed based on byte data\n除了上述介绍的功能，random 模块还包含基于均匀分布、高斯分布和其他分布的\n随机数生成函数。比如，random.uniform() 计算均匀分布随机数，random.gauss() 计\n算正态分布随机数。对于其他的分布情况请参考在线文档。\n在 random 模块中的函数不应该用在和密码学相关的程序中。如果你确实需要类似\n的功能，可以使用 ssl 模块中相应的函数。比如，ssl.RAND_bytes() 可以用来生成一\n个安全的随机字节序列。\n3.12 基本的日期与时间转换\n问题\n你需要执行简单的时间转换，比如天到秒，小时到分钟等的转换。\n解决方案\n为了执行不同时间单位的转换和计算，请使用 datetime 模块。比如，为了表示一\n个时间段，可以创建一个 timedelta 实例，就像下面这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from datetime import timedelta\na = timedelta(days=2, hours=6)\nb = timedelta(hours=4.5)\nc = a + b\nc.days\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.seconds\n37800")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.seconds / 3600\n10.5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.total_seconds() / 3600\n58.5")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想表示指定的日期和时间，先创建一个 datetime 实例然后使用标准的数学\n运算来操作它们。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from datetime import datetime\na = datetime(2012, 9, 23)\nprint(a + timedelta(days=10))\n2012-10-03 00:00:00")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = datetime(2012, 12, 21)\nd = b - a\nd.days\n89")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("now = datetime.today()\nprint(now)\n2012-12-21 14:54:43.094063")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(now + timedelta(minutes=10))\n2012-12-21 15:04:43.094063")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在计算的时候，需要注意的是 datetime 会自动处理闰年。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = datetime(2012, 3, 1)\nb = datetime(2012, 2, 28)\na - b\ndatetime.timedelta(2)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("(a - b).days\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c = datetime(2013, 3, 1)\nd = datetime(2013, 2, 28)\n(c - d).days\n1")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n对大多数基本的日期和时间处理问题，datetime 模块已经足够了。如果你需要执\n行更加复杂的日期操作，比如处理时区，模糊时间范围，节假日计算等等，可以考虑使\n用 dateutil 模块\n许多类似的时间计算可以使用 dateutil.relativedelta() 函数代替。但是，有一\n点需要注意的就是，它会在处理月份 (还有它们的天数差距) 的时候填充间隙。看例子\n最清楚：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('a = datetime(2012, 9, 23)\na + timedelta(months=1)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: 'months' is an invalid keyword argument for this function")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("from dateutil.relativedelta import relativedelta\na + relativedelta(months=+1)\ndatetime.datetime(2012, 10, 23, 0, 0)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a + relativedelta(months=+4)\ndatetime.datetime(2013, 1, 23, 0, 0)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"time-between-two-dates"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#time-between-two-dates"}},[e._v("#")]),e._v(" Time between two dates")]),e._v(" "),n("p",[e._v("b = datetime(2012, 12, 21)\nd = b - a\nd\ndatetime.timedelta(89)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("d = relativedelta(b, a)\nd\nrelativedelta(months=+2, days=+28)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("d.months\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("d.days\n28")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("3.13 计算最后一个周五的日期\n问题\n你需要查找星期中某一天最后出现的日期，比如星期五。\n解决方案\nPython 的 datetime 模块中有工具函数和类可以帮助你执行这样的计算。下面是\n对类似这样的问题的一个通用解决方案：\n#!/usr/bin/env python")]),e._v(" "),n("h1",{attrs:{id:"encoding-utf-8-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#encoding-utf-8-2"}},[e._v("#")]),e._v(" -"),n("em",[e._v("- encoding: utf-8 -")]),e._v("-")]),e._v(" "),n("p",[e._v("\"\"\"\nTopic: 最后的周五\nDesc :\n\"\"\"\nfrom datetime import datetime, timedelta\nweekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\ndef get_previous_byday(dayname, start_date=None):\nif start_date is None:\nstart_date = datetime.today()\nday_num = start_date.weekday()\nday_num_target = weekdays.index(dayname)\ndays_ago = (7 + day_num - day_num_target) % 7\nif days_ago == 0:\ndays_ago = 7\ntarget_date = start_date - timedelta(days=days_ago)\nreturn target_date\n在交互式解释器中使用如下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("datetime.today() # For reference\ndatetime.datetime(2012, 8, 28, 22, 4, 30, 263076)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("get_previous_byday('Monday')\ndatetime.datetime(2012, 8, 27, 22, 3, 57, 29045)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("get_previous_byday('Tuesday') # Previous week, not today\ndatetime.datetime(2012, 8, 21, 22, 4, 12, 629771)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("get_previous_byday('Friday')\ndatetime.datetime(2012, 8, 24, 22, 5, 9, 911393)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("可选的 start_date 参数可以由另外一个 datetime 实例来提供。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("get_previous_byday('Sunday', datetime(2012, 12, 21))\ndatetime.datetime(2012, 12, 16, 0, 0)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n上面的算法原理是这样的：先将开始日期和目标日期映射到星期数组的位置上 (星\n期一索引为 0)，然后通过模运算计算出目标日期要经过多少天才能到达开始日期。然\n后用开始日期减去那个时间差即得到结果日期。\n如果你要像这样执行大量的日期计算的话，你最好安装第三方包 python-dateutil\n来代替。比如，下面是是使用 dateutil 模块中的 relativedelta() 函数执行同样的计\n算：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from datetime import datetime\nfrom dateutil.relativedelta import relativedelta\nfrom dateutil.rrule import *\nd = datetime.now()\nprint(d)\n2012-12-23 16:31:52.718111")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"next-friday"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#next-friday"}},[e._v("#")]),e._v(" Next Friday")]),e._v(" "),n("p",[e._v("print(d + relativedelta(weekday=FR))\n2012-12-28 16:31:52.718111")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"last-friday"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#last-friday"}},[e._v("#")]),e._v(" Last Friday")]),e._v(" "),n("p",[e._v("print(d + relativedelta(weekday=FR(-1)))\n2012-12-21 16:31:52.718111")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("3.14 计算当前月份的日期范围\n问题\n你的代码需要在当前月份中循环每一天，想找到一个计算这个日期范围的高效方\n法。\n解决方案\n在这样的日期上循环并需要事先构造一个包含所有日期的列表。你可以先计算出\n开始日期和结束日期，然后在你步进的时候使用 datetime.timedelta 对象递增这个日\n期变量即可。\n下面是一个接受任意 datetime 对象并返回一个由当前月份开始日和下个月开始日\n组成的元组对象。\nfrom datetime import datetime, date, timedelta\nimport calendar\ndef get_month_range(start_date=None):\nif start_date is None:\nstart_date = date.today().replace(day=1)\n_, days_in_month = calendar.monthrange(start_date.year, start_date.month)\nend_date = start_date + timedelta(days=days_in_month)\nreturn (start_date, end_date)\n有了这个就可以很容易的在返回的日期范围上面做循环操作了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a_day = timedelta(days=1)\nfirst_day, last_day = get_month_range()\nwhile first_day < last_day:\n... print(first_day)\n... first_day += a_day\n...\n2012-08-01\n2012-08-02\n2012-08-03\n2012-08-04\n2012-08-05\n2012-08-06\n2012-08-07\n2012-08-08\n2012-08-09\n#... and so on...\n讨论\n上面的代码先计算出一个对应月份第一天的日期。一个快速的方法就是使用 date\n或 datetime 对象的 replace() 方法简单的将 days 属性设置成 1 即可。replace() 方\n法一个好处就是它会创建和你开始传入对象类型相同的对象。所以，如果输入参数是一\n个 date 实例，那么结果也是一个 date 实例。同样的，如果输入是一个 datetime 实\n例，那么你得到的就是一个 datetime 实例。\n然后，使用 calendar.monthrange() 函数来找出该月的总天数。任何时候只要你\n想获得日历信息，那么 calendar 模块就非常有用了。monthrange() 函数会返回包含\n星期和该月天数的元组。\n一旦该月的天数已知了，那么结束日期就可以通过在开始日期上面加上这个天数\n获得。有个需要注意的是结束日期并不包含在这个日期范围内 (事实上它是下个月的开\n始日期)。这个和 Python 的 slice 与 range 操作行为保持一致，同样也不包含结尾。\n为了在日期范围上循环，要使用到标准的数学和比较操作。比如，可以利用\ntimedelta 实例来递增日期，小于号 < 用来检查一个日期是否在结束日期之前。\n理想情况下，如果能为日期迭代创建一个同内置的 range() 函数一样的函数就好\n了。幸运的是，可以使用一个生成器来很容易的实现这个目标：\ndef date_range(start, stop, step):\nwhile start < stop:\nyield start\nstart += step\n下面是使用这个生成器的例子：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for d in date_range(datetime(2012, 9, 1), datetime(2012,10,1),\ntimedelta(hours=6)):\n... print(d)\n...\n2012-09-01 00:00:00\n2012-09-01 06:00:00\n2012-09-01 12:00:00\n2012-09-01 18:00:00\n2012-09-02 00:00:00\n2012-09-02 06:00:00\n...")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这种实现之所以这么简单，还得归功于 Python 中的日期和时间能够使用标准的数\n学和比较操作符来进行运算。\n3.15 字符串转换为日期\n问题\n你的应用程序接受字符串格式的输入，但是你想将它们转换为 datetime 对象以便\n在上面执行非字符串操作。\n解决方案\n使用 Python 的标准模块 datetime 可以很容易的解决这个问题。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from datetime import datetime\ntext = '2012-09-20'\ny = datetime.strptime(text, '%Y-%m-%d')\nz = datetime.now()\ndiff = z - y\ndiff\ndatetime.timedelta(3, 77824, 177393)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\ndatetime.strptime() 方法支持很多的格式化代码，比如 %Y 代表 4 位数年份，%m\n代表两位数月份。还有一点值得注意的是这些格式化占位符也可以反过来使用，将日期\n输出为指定的格式字符串形式。\n比如，假设你的代码中生成了一个 datetime 对象，你想将它格式化为漂亮易读形\n式后放在自动生成的信件或者报告的顶部：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("z\ndatetime.datetime(2012, 9, 23, 21, 37, 4, 177393)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("nice_z = datetime.strftime(z, '%A %B %d, %Y')\nnice_z\n'Sunday September 23, 2012'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("还有一点需要注意的是，strptime() 的性能要比你想象中的差很多，因为它是使\n用纯 Python 实现，并且必须处理所有的系统本地设置。如果你要在代码中需要解析大\n量的日期并且已经知道了日期字符串的确切格式，可以自己实现一套解析方案来获取\n更好的性能。比如，如果你已经知道所以日期格式是 YYYY-MM-DD ，你可以像下面这样\n实现一个解析函数：\nfrom datetime import datetime\ndef parse_ymd(s):\nyear_s, mon_s, day_s = s.split('-')\nreturn datetime(int(year_s), int(mon_s), int(day_s))\n实际测试中，这个函数比 datetime.strptime() 快 7 倍多。如果你要处理大量的\n涉及到日期的数据的话，那么最好考虑下这个方案！\n3.16 结合时区的日期操作\n问题\n你有一个安排在 2012 年 12 月 21 日早上 9:30 的电话会议，地点在芝加哥。而你\n的朋友在印度的班加罗尔，那么他应该在当地时间几点参加这个会议呢？\n解决方案\n对几乎所有涉及到时区的问题，你都应该使用 pytz 模块。这个包提供了 Olson 时\n区数据库，它是时区信息的事实上的标准，在很多语言和操作系统里面都可以找到。\npytz 模块一个主要用途是将 datetime 库创建的简单日期对象本地化。比如，下\n面如何表示一个芝加哥时间的示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from datetime import datetime\nfrom pytz import timezone\nd = datetime(2012, 12, 21, 9, 30, 0)\nprint(d)\n2012-12-21 09:30:00")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"localize-the-date-for-chicago"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#localize-the-date-for-chicago"}},[e._v("#")]),e._v(" Localize the date for Chicago")]),e._v(" "),n("p",[e._v("central = timezone('US/Central')\nloc_d = central.localize(d)\nprint(loc_d)\n2012-12-21 09:30:00-06:00")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一旦日期被本地化了，它就可以转换为其他时区的时间了。为了得到班加罗尔对应\n的时间，你可以这样做：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"convert-to-bangalore-time"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#convert-to-bangalore-time"}},[e._v("#")]),e._v(" Convert to Bangalore time")]),e._v(" "),n("p",[e._v("bang_d = loc_d.astimezone(timezone('Asia/Kolkata'))\nprint(bang_d)\n2012-12-21 21:00:00+05:30")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你打算在本地化日期上执行计算，你需要特别注意夏令时转换和其他细节。比\n如，在 2013 年，美国标准夏令时时间开始于本地时间 3 月 13 日凌晨 2:00(在那时，时\n间向前跳过一小时)。如果你正在执行本地计算，你会得到一个错误。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("d = datetime(2013, 3, 10, 1, 45)\nloc_d = central.localize(d)\nprint(loc_d)\n2013-03-10 01:45:00-06:00")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("later = loc_d + timedelta(minutes=30)\nprint(later)\n2013-03-10 02:15:00-06:00 # WRONG! WRONG!")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("结果错误是因为它并没有考虑在本地时间中有一小时的跳跃。为了修正这个错误，\n可以使用时区对象 normalize() 方法。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from datetime import timedelta\nlater = central.normalize(loc_d + timedelta(minutes=30))\nprint(later)\n2013-03-10 03:15:00-05:00")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n为了不让你被这些东东弄的晕头转向，处理本地化日期的通常的策略先将所有日\n期转换为 UTC 时间，并用它来执行所有的中间存储和操作。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("print(loc_d)\n2013-03-10 01:45:00-06:00")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("utc_d = loc_d.astimezone(pytz.utc)\nprint(utc_d)\n2013-03-10 07:45:00+00:00")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一旦转换为 UTC，你就不用去担心跟夏令时相关的问题了。因此，你可以跟之前\n一样放心的执行常见的日期计算。当你想将输出变为本地时间的时候，使用合适的时区\n去转换下就行了。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("later_utc = utc_d + timedelta(minutes=30)\nprint(later_utc.astimezone(central))\n2013-03-10 03:15:00-05:00")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("当涉及到时区操作的时候，有个问题就是我们如何得到时区的名称。比如，在这个\n例子中，我们如何知道“Asia/Kolkata”就是印度对应的时区名呢？为了查找，可以使\n用 ISO 3166 国家代码作为关键字去查阅字典 pytz.country_timezones 。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("pytz.country_timezones['IN']\n['Asia/Kolkata']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("注：当你阅读到这里的时候，有可能 pytz 模块已经不再建议使用了，因为 PEP431\n提出了更先进的时区支持。但是这里谈到的很多问题还是有参考价值的 (比如使用 UTC\n日期的建议等)。")]),e._v(" "),n("h2",{attrs:{id:"第四章-迭代器与生成器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第四章-迭代器与生成器"}},[e._v("#")]),e._v(" 第四章：迭代器与生成器")]),e._v(" "),n("p",[e._v("迭代是 Python 最强大的功能之一。初看起来，你可能会简单的认为迭代只不过是\n处理序列中元素的一种方法。然而，绝非仅仅就是如此，还有很多你可能不知道的，比\n如创建你自己的迭代器对象，在 itertools 模块中使用有用的迭代模式，构造生成器函\n数等等。这一章目的就是向你展示跟迭代有关的各种常见问题。\n4.1 手动遍历迭代器\n问题\n你想遍历一个可迭代对象中的所有元素，但是却不想使用 for 循环。\n解决方案\n为了手动的遍历可迭代对象，使用 next() 函数并在代码中捕获 StopIteration 异\n常。比如，下面的例子手动读取一个文件中的所有行：\ndef manual_iter():\nwith open('/etc/passwd') as f:\ntry:\nwhile True:\nline = next(f)\nprint(line, end='')\nexcept StopIteration:\npass\n通常来讲，StopIteration 用来指示迭代的结尾。然而，如果你手动使用上面演示\n的 next() 函数的话，你还可以通过返回一个指定值来标记结尾，比如 None 。下面是\n示例：\nwith open('/etc/passwd') as f:\nwhile True:\nline = next(f, None)\nif line is None:\nbreak\nprint(line, end='')\n讨论\n大多数情况下，我们会使用 for 循环语句用来遍历一个可迭代对象。但是，偶尔也\n需要对迭代做更加精确的控制，这时候了解底层迭代机制就显得尤为重要了。\n下面的交互示例向我们演示了迭代期间所发生的基本细节：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("items = [1, 2, 3]")]),e._v(" "),n("h1",{attrs:{id:"get-the-iterator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-the-iterator"}},[e._v("#")]),e._v(" Get the iterator")]),e._v(" "),n("p",[e._v("it = iter(items) # Invokes items."),n("strong",[e._v("iter")]),e._v("()")]),e._v(" "),n("h1",{attrs:{id:"run-the-iterator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-the-iterator"}},[e._v("#")]),e._v(" Run the iterator")]),e._v(" "),n("p",[e._v("next(it) # Invokes it."),n("strong",[e._v("next")]),e._v("()\n1")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("next(it)\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("next(it)\n3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('next(it)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nStopIteration")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("本章接下来几小节会更深入的讲解迭代相关技术，前提是你先要理解基本的迭代\n协议机制。所以确保你已经把这章的内容牢牢记在心中。\n4.2 代理迭代\n问题\n你构建了一个自定义容器对象，里面包含有列表、元组或其他可迭代对象。你想直\n接在你的这个新容器对象上执行迭代操作。\n解决方案\n实际上你只需要定义一个 "),n("strong",[e._v("iter")]),e._v("() 方法，将迭代操作代理到容器内部的对象上\n去。比如：\nclass Node:\ndef "),n("strong",[e._v("init")]),e._v("(self, value):\nself._value = value\nself._children = []\ndef "),n("strong",[e._v("repr")]),e._v("(self):\nreturn 'Node({!r})'.format(self._value)\ndef add_child(self, node):\nself._children.append(node)\ndef "),n("strong",[e._v("iter")]),e._v("(self):\nreturn iter(self._children)")]),e._v(" "),n("h1",{attrs:{id:"example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("if "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nroot = Node(0)\nchild1 = Node(1)\nchild2 = Node(2)\nroot.add_child(child1)\nroot.add_child(child2)")]),e._v(" "),n("h1",{attrs:{id:"outputs-node-1-node-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#outputs-node-1-node-2"}},[e._v("#")]),e._v(" Outputs Node(1), Node(2)")]),e._v(" "),n("p",[e._v("for ch in root:\nprint(ch)\n在上面代码中，"),n("strong",[e._v("iter")]),e._v("() 方法只是简单的将迭代请求传递给内部的 _children\n属性。\n讨论\nPython 的迭代器协议需要 "),n("strong",[e._v("iter")]),e._v("() 方法返回一个实现了 "),n("strong",[e._v("next")]),e._v("() 方法的\n迭代器对象。如果你只是迭代遍历其他容器的内容，你无须担心底层是怎样实现的。你\n所要做的只是传递迭代请求既可。\n这里的 iter() 函数的使用简化了代码，iter(s) 只是简单的通过调用 s.\n"),n("strong",[e._v("iter")]),e._v("() 方法来返回对应的迭代器对象，就跟 len(s) 会调用 s."),n("strong",[e._v("len")]),e._v("() 原理\n是一样的。\n4.3 使用生成器创建新的迭代模式\n问题\n你想实现一个自定义迭代模式，跟普通的内置函数比如 range() , reversed() 不\n一样。\n解决方案\n如果你想实现一种新的迭代模式，使用一个生成器函数来定义它。下面是一个生产\n某个范围内浮点数的生成器：\ndef frange(start, stop, increment):\nx = start\nwhile x < stop:\nyield x x += increment\n为了使用这个函数，你可以用 for 循环迭代它或者使用其他接受一个可迭代对象的\n函数 (比如 sum() , list() 等)。示例如下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for n in frange(0, 4, 0.5):\n... print(n)\n...\n0\n0.5\n1.0\n1.5\n2.0\n2.5\n3.0\n3.5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("list(frange(0, 1, 0.125))\n[0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n一个函数中需要有一个 yield 语句即可将其转换为一个生成器。跟普通函数不同\n的是，生成器只能用于迭代操作。下面是一个实验，向你展示这样的函数底层工作机制：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def countdown(n):\n... print('Starting to count from', n)\n... while n > 0:\n... yield n\n... n -= 1\n... print('Done!')\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"create-the-generator-notice-no-output-appears"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-the-generator-notice-no-output-appears"}},[e._v("#")]),e._v(" Create the generator, notice no output appears")]),e._v(" "),n("p",[e._v("c = countdown(3)\nc\n<generator object countdown at 0x1006a0af0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"run-to-first-yield-and-emit-a-value"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-to-first-yield-and-emit-a-value"}},[e._v("#")]),e._v(" Run to first yield and emit a value")]),e._v(" "),n("p",[e._v("next(c)\nStarting to count from 3\n3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"run-to-the-next-yield"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-to-the-next-yield"}},[e._v("#")]),e._v(" Run to the next yield")]),e._v(" "),n("p",[e._v("next(c)\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"run-to-next-yield"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-to-next-yield"}},[e._v("#")]),e._v(" Run to next yield")]),e._v(" "),n("p",[e._v("next(c)\n1")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"run-to-next-yield-iteration-stops"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-to-next-yield-iteration-stops"}},[e._v("#")]),e._v(" Run to next yield (iteration stops)")]),e._v(" "),n("p",[e._v('next(c)\nDone!\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nStopIteration")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一个生成器函数主要特征是它只会回应在迭代中使用到的 next 操作。一旦生成器\n函数返回退出，迭代终止。我们在迭代中通常使用的 for 语句会自动处理这些细节，所\n以你无需担心。\n4.4 实现迭代器协议\n问题\n你想构建一个能支持迭代操作的自定义对象，并希望找到一个能实现迭代协议的\n简单方法。\n解决方案\n目前为止，在一个对象上实现迭代最简单的方式是使用一个生成器函数。在 4.2 小\n节中，使用 Node 类来表示树形数据结构。你可能想实现一个以深度优先方式遍历树形\n节点的生成器。下面是代码示例：\nclass Node:\ndef "),n("strong",[e._v("init")]),e._v("(self, value):\nself._value = value\nself._children = []\ndef "),n("strong",[e._v("repr")]),e._v("(self):\nreturn 'Node({!r})'.format(self._value)\ndef add_child(self, node):\nself._children.append(node)\ndef "),n("strong",[e._v("iter")]),e._v("(self):\nreturn iter(self._children)\ndef depth_first(self):\nyield self\nfor c in self:\nyield from c.depth_first()")]),e._v(" "),n("h1",{attrs:{id:"example-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-2"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("if "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nroot = Node(0)\nchild1 = Node(1)\nchild2 = Node(2)\nroot.add_child(child1)\nroot.add_child(child2)\nchild1.add_child(Node(3))\nchild1.add_child(Node(4))\nchild2.add_child(Node(5))\nfor ch in root.depth_first():\nprint(ch)")]),e._v(" "),n("h1",{attrs:{id:"outputs-node-0-node-1-node-3-node-4-node-2-node-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#outputs-node-0-node-1-node-3-node-4-node-2-node-5"}},[e._v("#")]),e._v(" Outputs Node(0), Node(1), Node(3), Node(4), Node(2), Node(5)")]),e._v(" "),n("p",[e._v("在这段代码中，depth_first() 方法简单直观。它首先返回自己本身并迭代每一个\n子节点并通过调用子节点的 depth_first() 方法 (使用 yield from 语句) 返回对应元\n素。\n讨论\nPython 的迭代协议要求一个 "),n("strong",[e._v("iter")]),e._v("() 方法返回一个特殊的迭代器对象，这个\n迭代器对象实现了 "),n("strong",[e._v("next")]),e._v("() 方法并通过 StopIteration 异常标识迭代的完成。但\n是，实现这些通常会比较繁琐。下面我们演示下这种方式，如何使用一个关联迭代器类\n重新实现 depth_first() 方法：\nclass Node2:\ndef "),n("strong",[e._v("init")]),e._v("(self, value):\nself._value = value\nself._children = []\ndef "),n("strong",[e._v("repr")]),e._v("(self):\nreturn 'Node({!r})'.format(self._value)\ndef add_child(self, node):\nself._children.append(node)\ndef "),n("strong",[e._v("iter")]),e._v("(self):\nreturn iter(self._children)\ndef depth_first(self):\nreturn DepthFirstIterator(self)\nclass DepthFirstIterator(object):\n'''\nDepth-first traversal\n'''\ndef "),n("strong",[e._v("init")]),e._v("(self, start_node):\nself._node = start_node\nself._children_iter = None\nself._child_iter = None\ndef "),n("strong",[e._v("iter")]),e._v("(self):\nreturn self\ndef "),n("strong",[e._v("next")]),e._v("(self):")]),e._v(" "),n("h1",{attrs:{id:"return-myself-if-just-started-create-an-iterator-for-children"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#return-myself-if-just-started-create-an-iterator-for-children"}},[e._v("#")]),e._v(" Return myself if just started; create an iterator for children")]),e._v(" "),n("p",[e._v("if self._children_iter is None:\nself._children_iter = iter(self._node)\nreturn self._node")]),e._v(" "),n("h1",{attrs:{id:"if-processing-a-child-return-its-next-item"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#if-processing-a-child-return-its-next-item"}},[e._v("#")]),e._v(" If processing a child, return its next item")]),e._v(" "),n("p",[e._v("elif self._child_iter:\ntry:\nnextchild = next(self._child_iter)\nreturn nextchild\nexcept StopIteration:\nself._child_iter = None\nreturn next(self)")]),e._v(" "),n("h1",{attrs:{id:"advance-to-the-next-child-and-start-its-iteration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#advance-to-the-next-child-and-start-its-iteration"}},[e._v("#")]),e._v(" Advance to the next child and start its iteration")]),e._v(" "),n("p",[e._v("else:\nself._child_iter = next(self._children_iter).depth_first()\nreturn next(self)\nDepthFirstIterator 类和上面使用生成器的版本工作原理类似，但是它写起来很\n繁琐，因为迭代器必须在迭代处理过程中维护大量的状态信息。坦白来讲，没人愿意写\n这么晦涩的代码。将你的迭代器定义为一个生成器后一切迎刃而解。\n4.5 反向迭代\n问题\n你想反方向迭代一个序列\n解决方案\n使用内置的 reversed() 函数，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = [1, 2, 3, 4]\nfor x in reversed(a):\n... print(x)\n...\n4321\n反向迭代仅仅当对象的大小可预先确定或者对象实现了 "),n("strong",[e._v("reversed")]),e._v("() 的特殊\n方法时才能生效。如果两者都不符合，那你必须先将对象转换为一个列表才行，比如：")])])])]),e._v(" "),n("h1",{attrs:{id:"print-a-file-backwards"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#print-a-file-backwards"}},[e._v("#")]),e._v(" Print a file backwards")]),e._v(" "),n("p",[e._v("f = open('somefile')\nfor line in reversed(list(f)):\nprint(line, end='')\n要注意的是如果可迭代对象元素很多的话，将其预先转换为一个列表要消耗大量\n的内存。\n讨论\n很多程序员并不知道可以通过在自定义类上实现 "),n("strong",[e._v("reversed")]),e._v("() 方法来实现反\n向迭代。比如：\nclass Countdown:\ndef "),n("strong",[e._v("init")]),e._v("(self, start):\nself.start = start")]),e._v(" "),n("h1",{attrs:{id:"forward-iterator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#forward-iterator"}},[e._v("#")]),e._v(" Forward iterator")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("iter")]),e._v("(self):\nn = self.start\nwhile n > 0:\nyield n n -= 1")]),e._v(" "),n("h1",{attrs:{id:"reverse-iterator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reverse-iterator"}},[e._v("#")]),e._v(" Reverse iterator")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("reversed")]),e._v("(self):\nn = 1\nwhile n <= self.start:\nyield n n += 1\nfor rr in reversed(Countdown(30)):\nprint(rr)\nfor rr in Countdown(30):\nprint(rr)\n定义一个反向迭代器可以使得代码非常的高效，因为它不再需要将数据填充到一\n个列表中然后再去反向迭代这个列表。\n4.6 带有外部状态的生成器函数\n问题\n你想定义一个生成器函数，但是它会调用某个你想暴露给用户使用的外部状态值。\n解决方案\n如果你想让你的生成器暴露外部状态给用户，别忘了你可以简单的将它实现为一\n个类，然后把生成器函数放到 "),n("strong",[e._v("iter")]),e._v("() 方法中过去。比如：\nfrom collections import deque\nclass linehistory:\ndef "),n("strong",[e._v("init")]),e._v("(self, lines, histlen=3):\nself.lines = lines\nself.history = deque(maxlen=histlen)\ndef "),n("strong",[e._v("iter")]),e._v("(self):\nfor lineno, line in enumerate(self.lines, 1):\nself.history.append((lineno, line))\nyield line\ndef clear(self):\nself.history.clear()\n为了使用这个类，你可以将它当做是一个普通的生成器函数。然而，由于可以创建\n一个实例对象，于是你可以访问内部属性值，比如 history 属性或者是 clear() 方法。\n代码示例如下：\nwith open('somefile.txt') as f:\nlines = linehistory(f)\nfor line in lines:\nif 'python' in line:\nfor lineno, hline in lines.history:\nprint('{}:{}'.format(lineno, hline), end='')\n讨论\n关于生成器，很容易掉进函数无所不能的陷阱。如果生成器函数需要跟你的程序其\n他部分打交道的话 (比如暴露属性值，允许通过方法调用来控制等等)，可能会导致你\n的代码异常的复杂。如果是这种情况的话，可以考虑使用上面介绍的定义类的方式。在\n"),n("strong",[e._v("iter")]),e._v("() 方法中定义你的生成器不会改变你任何的算法逻辑。由于它是类的一部分，\n所以允许你定义各种属性和方法来供用户使用。\n一个需要注意的小地方是，如果你在迭代操作时不使用 for 循环语句，那么你得先\n调用 iter() 函数。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = open('somefile.txt')\nlines = linehistory(f)\nnext(lines)\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: 'linehistory' object is not an iterator")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"call-iter-first-then-start-iterating"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call-iter-first-then-start-iterating"}},[e._v("#")]),e._v(" Call iter() first, then start iterating")]),e._v(" "),n("p",[e._v("it = iter(lines)\nnext(it)\n'hello world\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("next(it)\n'this is a test\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("4.7 迭代器切片\n问题\n你想得到一个由迭代器生成的切片对象，但是标准切片操作并不能做到。\n解决方案\n函数 itertools.islice() 正好适用于在迭代器和生成器上做切片操作。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def count(n):\n... while True:\n... yield n\n... n += 1\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('c = count(0)\nc[10:20]\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: 'generator' object is not subscriptable")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"now-using-islice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#now-using-islice"}},[e._v("#")]),e._v(" Now using islice()")]),e._v(" "),n("p",[e._v("import itertools\nfor x in itertools.islice(c, 10, 20):\n... print(x)\n...\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n迭代器和生成器不能使用标准的切片操作，因为它们的长度事先我们并不知道 (并\n且也没有实现索引)。函数 islice() 返回一个可以生成指定元素的迭代器，它通过遍\n历并丢弃直到切片开始索引位置的所有元素。然后才开始一个个的返回元素，并直到切\n片结束索引位置。\n这里要着重强调的一点是 islice() 会消耗掉传入的迭代器中的数据。必须考虑到\n迭代器是不可逆的这个事实。所以如果你需要之后再次访问这个迭代器的话，那你就得\n先将它里面的数据放入一个列表中。\n4.8 跳过可迭代对象的开始部分\n问题\n你想遍历一个可迭代对象，但是它开始的某些元素你并不感兴趣，想跳过它们。\n解决方案\nitertools 模块中有一些函数可以完成这个任务。首先介绍的是 itertools.\ndropwhile() 函数。使用时，你给它传递一个函数对象和一个可迭代对象。它会返\n回一个迭代器对象，丢弃原有序列中直到函数返回 Flase 之前的所有元素，然后返回后\n面所有元素。\n为了演示，假定你在读取一个开始部分是几行注释的源文件。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("with open('/etc/passwd') as f:\n... for line in f:\n... print(line, end='')\n...")])])])]),e._v(" "),n("h2",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),n("h1",{attrs:{id:"user-database"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#user-database"}},[e._v("#")]),e._v(" User Database")]),e._v(" "),n("h1",{attrs:{id:"-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")])]),e._v(" "),n("h1",{attrs:{id:"note-that-this-file-is-consulted-directly-only-when-the-system-is-running"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#note-that-this-file-is-consulted-directly-only-when-the-system-is-running"}},[e._v("#")]),e._v(" Note that this file is consulted directly only when the system is running")]),e._v(" "),n("h1",{attrs:{id:"in-single-user-mode-at-other-times-this-information-is-provided-by"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#in-single-user-mode-at-other-times-this-information-is-provided-by"}},[e._v("#")]),e._v(" in single-user mode. At other times, this information is provided by")]),e._v(" "),n("h1",{attrs:{id:"open-directory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#open-directory"}},[e._v("#")]),e._v(" Open Directory.")]),e._v(" "),n("p",[e._v("...")]),e._v(" "),n("h2",{attrs:{id:"-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[e._v("#")])]),e._v(" "),n("p",[e._v("nobody:"),n("em",[e._v(":-2:-2:Unprivileged User:/var/empty:/usr/bin/false\nroot:")]),e._v(":0:0:System Administrator:/var/root:/bin/sh\n...")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想跳过开始部分的注释行的话，可以这样做：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from itertools import dropwhile\nwith open('/etc/passwd') as f:\n... for line in dropwhile(lambda line: line.startswith('#'), f):\n... print(line, end='')\n...\nnobody:"),n("em",[e._v(":-2:-2:Unprivileged User:/var/empty:/usr/bin/false\nroot:")]),e._v(":0:0:System Administrator:/var/root:/bin/sh\n...")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这个例子是基于根据某个测试函数跳过开始的元素。如果你已经明确知道了要跳\n过的元素的个数的话，那么可以使用 itertools.islice() 来代替。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from itertools import islice\nitems = ['a', 'b', 'c', 1, 4, 10, 15]\nfor x in islice(items, 3, None):\n... print(x)\n...\n14\n10\n15")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在这个例子中，islice() 函数最后那个 None 参数指定了你要获取从第 3 个到最\n后的所有元素，如果 None 和 3 的位置对调，意思就是仅仅获取前三个元素恰恰相反，\n(这个跟切片的相反操作 [3:] 和 [:3] 原理是一样的)。\n讨论\n函数 dropwhile() 和 islice() 其实就是两个帮助函数，为的就是避免写出下面\n这种冗余代码：\nwith open('/etc/passwd') as f:")]),e._v(" "),n("h1",{attrs:{id:"skip-over-initial-comments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#skip-over-initial-comments"}},[e._v("#")]),e._v(" Skip over initial comments")]),e._v(" "),n("p",[e._v("while True:\nline = next(f, '')\nif not line.startswith('#'):\nbreak")]),e._v(" "),n("h1",{attrs:{id:"process-remaining-lines"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-remaining-lines"}},[e._v("#")]),e._v(" Process remaining lines")]),e._v(" "),n("p",[e._v("while line:")]),e._v(" "),n("h1",{attrs:{id:"replace-with-useful-processing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#replace-with-useful-processing"}},[e._v("#")]),e._v(" Replace with useful processing")]),e._v(" "),n("p",[e._v("print(line, end='')\nline = next(f, None)\n跳过一个可迭代对象的开始部分跟通常的过滤是不同的。比如，上述代码的第一个\n部分可能会这样重写：\nwith open('/etc/passwd') as f:\nlines = (line for line in f if not line.startswith('#'))\nfor line in lines:\nprint(line, end='')\n这样写确实可以跳过开始部分的注释行，但是同样也会跳过文件中其他所有的注\n释行。换句话讲，我们的解决方案是仅仅跳过开始部分满足测试条件的行，在那以后，\n所有的元素不再进行测试和过滤了。\n最后需要着重强调的一点是，本节的方案适用于所有可迭代对象，包括那些事先不\n能确定大小的，比如生成器，文件及其类似的对象。\n4.9 排列组合的迭代\n问题\n你想迭代遍历一个集合中元素的所有可能的排列或组合\n解决方案\nitertools 模 块 提 供 了 三 个 函 数 来 解 决 这 类 问 题。其 中 一 个 是 itertools.\npermutations() ，它接受一个集合并产生一个元组序列，每个元组由集合中所有\n元素的一个可能排列组成。也就是说通过打乱集合中元素排列顺序生成一个元组，比\n如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("items = ['a', 'b', 'c']\nfrom itertools import permutations\nfor p in permutations(items):\n... print(p)\n...\n('a', 'b', 'c')\n('a', 'c', 'b')\n('b', 'a', 'c')\n('b', 'c', 'a')\n('c', 'a', 'b')\n('c', 'b', 'a')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想得到指定长度的所有排列，你可以传递一个可选的长度参数。就像这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for p in permutations(items, 2):\n... print(p)\n...\n('a', 'b')\n('a', 'c')\n('b', 'a')\n('b', 'c')\n('c', 'a')\n('c', 'b')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("使用 itertools.combinations() 可得到输入集合中元素的所有的组合。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from itertools import combinations\nfor c in combinations(items, 3):\n... print(c)\n...\n('a', 'b', 'c')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for c in combinations(items, 2):\n... print(c)\n...\n('a', 'b')\n('a', 'c')\n('b', 'c')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for c in combinations(items, 1):\n... print(c)\n...\n('a',)\n('b',)\n('c',)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对于 combinations() 来讲，元素的顺序已经不重要了。也就是说，组合 ('a',\n'b') 跟 ('b', 'a') 其实是一样的 (最终只会输出其中一个)。\n在 计 算 组 合 的 时 候， 一 旦 元 素 被 选 取 就 会 从 候 选 中 剔 除 掉 (比 如 如 果 元\n素’a’ 已 经 被 选 取 了， 那 么 接 下 来 就 不 会 再 考 虑 它 了)。而 函 数 itertools.\ncombinations_with_replacement() 允许同一个元素被选择多次，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for c in combinations_with_replacement(items, 3):\n... print(c)\n...\n('a', 'a', 'a')\n('a', 'a', 'b')\n('a', 'a', 'c')\n('a', 'b', 'b')\n('a', 'b', 'c')\n('a', 'c', 'c')\n('b', 'b', 'b')\n('b', 'b', 'c')\n('b', 'c', 'c')\n('c', 'c', 'c')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n这一小节我们向你展示的仅仅是 itertools 模块的一部分功能。尽管你也可以自\n己手动实现排列组合算法，但是这样做得要花点脑力。当我们碰到看上去有些复杂的迭\n代问题时，最好可以先去看看 itertools 模块。如果这个问题很普遍，那么很有可能会在\n里面找到解决方案！\n4.10 序列上索引值迭代\n问题\n你想在迭代一个序列的同时跟踪正在被处理的元素索引。\n解决方案\n内置的 enumerate() 函数可以很好的解决这个问题：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("my_list = ['a', 'b', 'c']\nfor idx, val in enumerate(my_list):\n... print(idx, val)\n...\n0 a\n1 b\n2 c\n为了按传统行号输出 (行号从 1 开始)，你可以传递一个开始参数：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("my_list = ['a', 'b', 'c']\nfor idx, val in enumerate(my_list, 1):\n... print(idx, val)\n...\n1 a\n2 b\n3 c\n这种情况在你遍历文件时想在错误消息中使用行号定位时候非常有用：\ndef parse_data(filename):\nwith open(filename, 'rt') as f:\nfor lineno, line in enumerate(f, 1):\nfields = line.split()\ntry:\ncount = int(fields[1])\n...\nexcept ValueError as e:\nprint('Line {}: Parse error: {}'.format(lineno, e))\nenumerate() 对于跟踪某些值在列表中出现的位置是很有用的。所以，如果你想将\n一个文件中出现的单词映射到它出现的行号上去，可以很容易的利用 enumerate() 来\n完成：\nword_summary = defaultdict(list)\nwith open('myfile.txt', 'r') as f:\nlines = f.readlines()\nfor idx, line in enumerate(lines):")])])])]),e._v(" "),n("h1",{attrs:{id:"create-a-list-of-words-in-current-line"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-list-of-words-in-current-line"}},[e._v("#")]),e._v(" Create a list of words in current line")]),e._v(" "),n("p",[e._v("words = [w.strip().lower() for w in line.split()]\nfor word in words:\nword_summary[word].append(idx)\n如果你处理完文件后打印 word_summary ，会发现它是一个字典 (准确来讲是一个\ndefaultdict )，对于每个单词有一个 key ，每个 key 对应的值是一个由这个单词出现\n的行号组成的列表。如果某个单词在一行中出现过两次，那么这个行号也会出现两次，\n同时也可以作为文本的一个简单统计。\n讨论\n当你想额外定义一个计数变量的时候，使用 enumerate() 函数会更加简单。你可\n能会像下面这样写代码：\nlineno = 1\nfor line in f:")]),e._v(" "),n("h1",{attrs:{id:"process-line"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-line"}},[e._v("#")]),e._v(" Process line")]),e._v(" "),n("p",[e._v("...\nlineno += 1\n但是如果使用 enumerate() 函数来代替就显得更加优雅了：\nfor lineno, line in enumerate(f):")]),e._v(" "),n("h1",{attrs:{id:"process-line-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-line-2"}},[e._v("#")]),e._v(" Process line")]),e._v(" "),n("p",[e._v("...\nenumerate() 函数返回的是一个 enumerate 对象实例，它是一个迭代器，返回连\n续的包含一个计数和一个值的元组，元组中的值通过在传入序列上调用 next() 返回。\n还有一点可能并不很重要，但是也值得注意，有时候当你在一个已经解压后的元组\n序列上使用 enumerate() 函数时很容易调入陷阱。你得像下面正确的方式这样写：\ndata = [ (1, 2), (3, 4), (5, 6), (7, 8) ]")]),e._v(" "),n("h1",{attrs:{id:"correct"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#correct"}},[e._v("#")]),e._v(" Correct!")]),e._v(" "),n("p",[e._v("for n, (x, y) in enumerate(data):\n...")]),e._v(" "),n("h1",{attrs:{id:"error"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#error"}},[e._v("#")]),e._v(" Error!")]),e._v(" "),n("p",[e._v("for n, x, y in enumerate(data):\n...\n4.11 同时迭代多个序列\n问题\n你想同时迭代多个序列，每次分别从一个序列中取一个元素。\n解决方案\n为了同时迭代多个序列，使用 zip() 函数。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("xpts = [1, 5, 4, 2, 10, 7]\nypts = [101, 78, 37, 15, 62, 99]\nfor x, y in zip(xpts, ypts):\n... print(x,y)\n...\n1 101\n5 78\n4 37\n2 15\n10 62\n7 99")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("zip(a, b) 会生成一个可返回元组 (x, y) 的迭代器，其中 x 来自 a，y 来自 b。一\n旦其中某个序列到底结尾，迭代宣告结束。因此迭代长度跟参数中最短序列长度一致。")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = [1, 2, 3]\nb = ['w', 'x', 'y', 'z']\nfor i in zip(a,b):\n... print(i)\n...\n(1, 'w')\n(2, 'x')\n(3, 'y')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果这个不是你想要的效果，那么还可以使用 itertools.zip_longest() 函数来\n代替。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from itertools import zip_longest\nfor i in zip_longest(a,b):\n... print(i)\n...\n(1, 'w')\n(2, 'x')\n(3, 'y')\n(None, 'z')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for i in zip_longest(a, b, fillvalue=0):\n... print(i)\n...\n(1, 'w')\n(2, 'x')\n(3, 'y')\n(0, 'z')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n当你想成对处理数据的时候 zip() 函数是很有用的。比如，假设你头列表和一个\n值列表，就像下面这样：\nheaders = ['name', 'shares', 'price']\nvalues = ['ACME', 100, 490.1]\n使用 zip() 可以让你将它们打包并生成一个字典：\ns = dict(zip(headers,values))\n或者你也可以像下面这样产生输出：\nfor name, val in zip(headers, values):\nprint(name, '=', val)\n虽然不常见，但是 zip() 可以接受多于两个的序列的参数。这时候所生成的结果\n元组中元素个数跟输入序列个数一样。比如;")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = [1, 2, 3]\nb = [10, 11, 12]\nc = ['x','y','z']\nfor i in zip(a, b, c):\n... print(i)\n...\n(1, 10, 'x')\n(2, 11, 'y')\n(3, 12, 'z')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后强调一点就是，zip() 会创建一个迭代器来作为结果返回。如果你需要将结对\n的值存储在列表中，要使用 list() 函数。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("zip(a, b)\n<zip object at 0x1007001b8>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("list(zip(a, b))\n[(1, 10), (2, 11), (3, 12)]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("4.12 不同集合上元素的迭代\n问题\n你想在多个对象执行相同的操作，但是这些对象在不同的容器中，你希望代码在不\n失可读性的情况下避免写重复的循环。\n解决方案\nitertools.chain() 方法可以用来简化这个任务。它接受一个可迭代对象列表作\n为输入，并返回一个迭代器，有效的屏蔽掉在多个容器中迭代细节。为了演示清楚，考\n虑下面这个例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from itertools import chain\na = [1, 2, 3, 4]\nb = ['x', 'y', 'z']\nfor x in chain(a, b):\n... print(x)\n...\n1234xyz")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("使用 chain() 的一个常见场景是当你想对不同的集合中所有元素执行某些操作的\n时候。比如：")]),e._v(" "),n("h1",{attrs:{id:"various-working-sets-of-items"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#various-working-sets-of-items"}},[e._v("#")]),e._v(" Various working sets of items")]),e._v(" "),n("p",[e._v("active_items = set()\ninactive_items = set()")]),e._v(" "),n("h1",{attrs:{id:"iterate-over-all-items"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#iterate-over-all-items"}},[e._v("#")]),e._v(" Iterate over all items")]),e._v(" "),n("p",[e._v("for item in chain(active_items, inactive_items):")]),e._v(" "),n("h1",{attrs:{id:"process-item"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-item"}},[e._v("#")]),e._v(" Process item")]),e._v(" "),n("p",[e._v("这种解决方案要比像下面这样使用两个单独的循环更加优雅，\nfor item in active_items:")]),e._v(" "),n("h1",{attrs:{id:"process-item-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-item-2"}},[e._v("#")]),e._v(" Process item")]),e._v(" "),n("p",[e._v("...\nfor item in inactive_items:")]),e._v(" "),n("h1",{attrs:{id:"process-item-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-item-3"}},[e._v("#")]),e._v(" Process item")]),e._v(" "),n("p",[e._v("...\n讨论\nitertools.chain() 接受一个或多个可迭代对象最为输入参数。然后创建一个迭\n代器，依次连续的返回每个可迭代对象中的元素。这种方式要比先将序列合并再迭代要\n高效的多。比如：")]),e._v(" "),n("h1",{attrs:{id:"inefficent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inefficent"}},[e._v("#")]),e._v(" Inefficent")]),e._v(" "),n("p",[e._v("for x in a + b:\n...")]),e._v(" "),n("h1",{attrs:{id:"better"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#better"}},[e._v("#")]),e._v(" Better")]),e._v(" "),n("p",[e._v("for x in chain(a, b):\n...\n第一种方案中，a + b 操作会创建一个全新的序列并要求 a 和 b 的类型一致。\nchian() 不会有这一步，所以如果输入序列非常大的时候会很省内存。并且当可迭代对\n象类型不一样的时候 chain() 同样可以很好的工作。\n4.13 创建数据处理管道\n问题\n你想以数据管道 (类似 Unix 管道) 的方式迭代处理数据。比如，你有个大量的数据\n需要处理，但是不能将它们一次性放入内存中。\n解决方案\n生成器函数是一个实现管道机制的好办法。为了演示，假定你要处理一个非常大的\n日志文件目录：\nfoo/\naccess-log-012007.gz\naccess-log-022007.gz\naccess-log-032007.gz\n...\naccess-log-012008\nbar/\naccess-log-092007.bz2\n...\naccess-log-022008\n假设每个日志文件包含这样的数据：\n124.115.6.12 - - [10/Jul/2012:00:18:50 -0500] \"GET /robots.txt ...\" 200 71\n210.212.209.67 - - [10/Jul/2012:00:18:51 -0500] \"GET /ply/ ...\" 200 11875\n210.212.209.67 - - [10/Jul/2012:00:18:51 -0500] \"GET /favicon.ico ...\" 404 369\n61.135.216.105 - - [10/Jul/2012:00:20:04 -0500] \"GET /blog/atom.xml ...\" 304 - ...\n为了处理这些文件，你可以定义一个由多个执行特定任务独立任务的简单生成器\n函数组成的容器。就像这样：\nimport os\nimport fnmatch\nimport gzip\nimport bz2\nimport re\ndef gen_find(filepat, top):\n'''\nFind all filenames in a directory tree that match a shell wildcard pattern\n'''\nfor path, dirlist, filelist in os.walk(top):\nfor name in fnmatch.filter(filelist, filepat):\nyield os.path.join(path,name)\ndef gen_opener(filenames):\n'''\nOpen a sequence of filenames one at a time producing a file object.\nThe file is closed immediately when proceeding to the next iteration.\n'''\nfor filename in filenames:\nif filename.endswith('.gz'):\nf = gzip.open(filename, 'rt')\nelif filename.endswith('.bz2'):\nf = bz2.open(filename, 'rt')\nelse:f = open(filename, 'rt')\nyield f f.close()\ndef gen_concatenate(iterators):\n'''\nChain a sequence of iterators together into a single sequence.\n'''\nfor it in iterators:\nyield from it\ndef gen_grep(pattern, lines):\n'''\nLook for a regex pattern in a sequence of lines\n'''\npat = re.compile(pattern)\nfor line in lines:\nif pat.search(line):\nyield line\n现在你可以很容易的将这些函数连起来创建一个处理管道。比如，为了查找包含单\n词 python 的所有日志行，你可以这样做：\nlognames = gen_find('access-log*', 'www')\nfiles = gen_opener(lognames)\nlines = gen_concatenate(files)\npylines = gen_grep('(?i)python', lines)\nfor line in pylines:\nprint(line)\n如果将来的时候你想扩展管道，你甚至可以在生成器表达式中包装数据。比如，下\n面这个版本计算出传输的字节数并计算其总和。\nlognames = gen_find('access-log*', 'www')\nfiles = gen_opener(lognames)\nlines = gen_concatenate(files)\npylines = gen_grep('(?i)python', lines)\nbytecolumn = (line.rsplit(None,1)[1] for line in pylines)\nbytes = (int(x) for x in bytecolumn if x != '-')\nprint('Total', sum(bytes))\n讨论\n以管道方式处理数据可以用来解决各类其他问题，包括解析，读取实时数据，定时\n轮询等。\n为了理解上述代码，重点是要明白 yield 语句作为数据的生产者而 for 循环语句\n作为数据的消费者。当这些生成器被连在一起后，每个 yield 会将一个单独的数据元\n素传递给迭代处理管道的下一阶段。在例子最后部分，sum() 函数是最终的程序驱动\n者，每次从生成器管道中提取出一个元素。\n这种方式一个非常好的特点是每个生成器函数很小并且都是独立的。这样的话就\n很容易编写和维护它们了。很多时候，这些函数如果比较通用的话可以在其他场景重复\n使用。并且最终将这些组件组合起来的代码看上去非常简单，也很容易理解。\n使用这种方式的内存效率也不得不提。上述代码即便是在一个超大型文件目录中\n也能工作的很好。事实上，由于使用了迭代方式处理，代码运行过程中只需要很小很小\n的内存。\n在调用 gen_concatenate() 函数的时候你可能会有些不太明白。这个函数的目的\n是将输入序列拼接成一个很长的行序列。itertools.chain() 函数同样有类似的功能，\n但是它需要将所有可迭代对象最为参数传入。在上面这个例子中，你可能会写类似这样\n的语句 lines = itertools.chain(*files) ，这将导致 gen_opener() 生成器被提前\n全部消费掉。但由于 gen_opener() 生成器每次生成一个打开过的文件，等到下一个迭\n代步骤时文件就关闭了，因此 chain() 在这里不能这样使用。上面的方案可以避免这\n种情况。\ngen_concatenate() 函数中出现过 yield from 语句，它将 yield 操作代理到父\n生成器上去。语句 yield from it 简单的返回生成器 it 所产生的所有值。关于这个我\n们在 4.14 小节会有更进一步的描述。\n最后还有一点需要注意的是，管道方式并不是万能的。有时候你想立即处理所有数\n据。然而，即便是这种情况，使用生成器管道也可以将这类问题从逻辑上变为工作流的\n处理方式。\nDavid Beazley 在他的 Generator Tricks for Systems Programmers 教程中对于这种\n技术有非常深入的讲解。可以参考这个教程获取更多的信息。\n4.14 展开嵌套的序列\n问题\n你想将一个多层嵌套的序列展开成一个单层列表\n解决方案\n可以写一个包含 yield from 语句的递归生成器来轻松解决这个问题。比如：\nfrom collections import Iterable\ndef flatten(items, ignore_types=(str, bytes)):\nfor x in items:\nif isinstance(x, Iterable) and not isinstance(x, ignore_types):\nyield from flatten(x)\nelse:\nyield x\nitems = [1, 2, [3, 4, [5, 6], 7], 8]")]),e._v(" "),n("h1",{attrs:{id:"produces-1-2-3-4-5-6-7-8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#produces-1-2-3-4-5-6-7-8"}},[e._v("#")]),e._v(" Produces 1 2 3 4 5 6 7 8")]),e._v(" "),n("p",[e._v("for x in flatten(items):\nprint(x)\n在上面代码中，isinstance(x, Iterable) 检查某个元素是否是可迭代的。如果是\n的话，yield from 就会返回所有子例程的值。最终返回结果就是一个没有嵌套的简单\n序列了。\n额外的参数 ignore_types 和检测语句 isinstance(x, ignore_types) 用来将字\n符串和字节排除在可迭代对象外，防止将它们再展开成单个的字符。这样的话字符串数\n组就能最终返回我们所期望的结果了。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("items = ['Dave', 'Paula', ['Thomas', 'Lewis']]\nfor x in flatten(items):\n... print(x)\n...\nDave\nPaula\nThomas\nLewis")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n语句 yield from 在你想在生成器中调用其他生成器作为子例程的时候非常有用。\n如果你不使用它的话，那么就必须写额外的 for 循环了。比如：\ndef flatten(items, ignore_types=(str, bytes)):\nfor x in items:\nif isinstance(x, Iterable) and not isinstance(x, ignore_types):\nfor i in flatten(x):\nyield i\nelse:\nyield x\n尽管只改了一点点，但是 yield from 语句看上去感觉更好，并且也使得代码更简\n洁清爽。\n之前提到的对于字符串和字节的额外检查是为了防止将它们再展开成单个字符。如\n果还有其他你不想展开的类型，修改参数 ignore_types 即可。\n最后要注意的一点是，yield from 在涉及到基于协程和生成器的并发编程中扮演\n着更加重要的角色。可以参考 12.12 小节查看另外一个例子。\n4.15 顺序迭代合并后的排序迭代对象\n问题\n你有一系列排序序列，想将它们合并后得到一个排序序列并在上面迭代遍历。\n解决方案\nheapq.merge() 函数可以帮你解决这个问题。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import heapq\na = [1, 4, 7, 10]\nb = [2, 5, 6, 11]\nfor c in heapq.merge(a, b):\n... print(c)\n...\n124567\n10\n11\n讨论\nheapq.merge 可迭代特性意味着它不会立马读取所有序列。这就意味着你可以在\n非常长的序列中使用它，而不会有太大的开销。比如，下面是一个例子来演示如何合并\n两个排序文件：\nwith open('sorted_file_1', 'rt') as file1, "),n("br"),e._v("\nopen('sorted_file_2', 'rt') as file2, "),n("br"),e._v("\nopen('merged_file', 'wt') as outf:\nfor line in heapq.merge(file1, file2):\noutf.write(line)\n有一点要强调的是 heapq.merge() 需要所有输入序列必须是排过序的。特别的，\n它并不会预先读取所有数据到堆栈中或者预先排序，也不会对输入做任何的排序检测。\n它仅仅是检查所有序列的开始部分并返回最小的那个，这个过程一直会持续直到所有\n输入序列中的元素都被遍历完。\n4.16 迭代器代替 while 无限循环\n问题\n你在代码中使用 while 循环来迭代处理数据，因为它需要调用某个函数或者和一\n般迭代模式不同的测试条件。能不能用迭代器来重写这个循环呢？\n解决方案\n一个常见的 IO 操作程序可能会想下面这样：\nCHUNKSIZE = 8192\ndef reader(s):\nwhile True:\ndata = s.recv(CHUNKSIZE)\nif data == b'':\nbreak\nprocess_data(data)\n这种代码通常可以使用 iter() 来代替，如下所示：\ndef reader2(s):\nfor chunk in iter(lambda: s.recv(CHUNKSIZE), b''):\npass")])])])]),e._v(" "),n("h1",{attrs:{id:"process-data-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-data-data"}},[e._v("#")]),e._v(" process_data(data)")]),e._v(" "),n("p",[e._v("如果你怀疑它到底能不能正常工作，可以试验下一个简单的例子。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sys\nf = open('/etc/passwd')\nfor chunk in iter(lambda: f.read(10), ''):\n... n = sys.stdout.write(chunk)\n...\nnobody:"),n("em",[e._v(":-2:-2:Unprivileged User:/var/empty:/usr/bin/false\nroot:")]),e._v(":0:0:System Administrator:/var/root:/bin/sh\ndaemon:"),n("em",[e._v(":1:1:System Services:/var/root:/usr/bin/false\n_uucp:")]),e._v(":4:4:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico\n...")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\niter 函数一个鲜为人知的特性是它接受一个可选的 callable 对象和一个标记 (结 尾) 值作为输入参数。当以这种方式使用的时候，它会创建一个迭代器，这个迭代器会\n不断调用 callable 对象直到返回值和标记值相等为止。\n这种特殊的方法对于一些特定的会被重复调用的函数很有效果，比如涉及到 I/O\n调用的函数。举例来讲，如果你想从套接字或文件中以数据块的方式读取数据，通常\n你得要不断重复的执行 read() 或 recv() ，并在后面紧跟一个文件结尾测试来决定是\n否终止。这节中的方案使用一个简单的 iter() 调用就可以将两者结合起来了。其中\nlambda 函数参数是为了创建一个无参的 callable 对象，并为 recv 或 read() 方法提\n供了 size 参数。")]),e._v(" "),n("h2",{attrs:{id:"第五章-文件与-io"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第五章-文件与-io"}},[e._v("#")]),e._v(" 第五章：文件与 IO")]),e._v(" "),n("p",[e._v("所有程序都要处理输入和输出。这一章将涵盖处理不同类型的文件，包括文本和二\n进制文件，文件编码和其他相关的内容。对文件名和目录的操作也会涉及到。\n5.1 读写文本数据\n问题\n你需要读写各种不同编码的文本数据，比如 ASCII，UTF-8 或 UTF-16 编码等。\n解决方案\n使用带有 rt 模式的 open() 函数读取文本文件。如下所示：")]),e._v(" "),n("h1",{attrs:{id:"read-the-entire-file-as-a-single-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#read-the-entire-file-as-a-single-string"}},[e._v("#")]),e._v(" Read the entire file as a single string")]),e._v(" "),n("p",[e._v("with open('somefile.txt', 'rt') as f:\ndata = f.read()")]),e._v(" "),n("h1",{attrs:{id:"iterate-over-the-lines-of-the-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#iterate-over-the-lines-of-the-file"}},[e._v("#")]),e._v(" Iterate over the lines of the file")]),e._v(" "),n("p",[e._v("with open('somefile.txt', 'rt') as f:\nfor line in f:")]),e._v(" "),n("h1",{attrs:{id:"process-line-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-line-3"}},[e._v("#")]),e._v(" process line")]),e._v(" "),n("p",[e._v("...\n类似的，为了写入一个文本文件，使用带有 wt 模式的 open() 函数，如果之前文\n件内容存在则清除并覆盖掉。如下所示：")]),e._v(" "),n("h1",{attrs:{id:"write-chunks-of-text-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#write-chunks-of-text-data"}},[e._v("#")]),e._v(" Write chunks of text data")]),e._v(" "),n("p",[e._v("with open('somefile.txt', 'wt') as f:\nf.write(text1)\nf.write(text2)\n...")]),e._v(" "),n("h1",{attrs:{id:"redirected-print-statement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redirected-print-statement"}},[e._v("#")]),e._v(" Redirected print statement")]),e._v(" "),n("p",[e._v("with open('somefile.txt', 'wt') as f:\nprint(line1, file=f)\nprint(line2, file=f)\n...\n如果是在已存在文件中添加内容，使用模式为 at 的 open() 函数。\n文件的读写操作默认使用系统编码，可以通过调用 sys.getdefaultencoding() 来\n得到。在大多数机器上面都是 utf-8 编码。如果你已经知道你要读写的文本是其他编码\n方式，那么可以通过传递一个可选的 encoding 参数给 open() 函数。如下所示：\nwith open('somefile.txt', 'rt', encoding='latin-1') as f:\n...\nPython 支持非常多的文本编码。几个常见的编码是 ascii, latin-1, utf-8 和 utf-16。 在 web 应用程序中通常都使用的是 UTF-8。ascii 对应从 U+0000 到 U+007F 范围内\n的 7 位字符。latin-1 是字节 0-255 到 U+0000 至 U+00FF 范围内 Unicode 字符的直\n接映射。当读取一个未知编码的文本时使用 latin-1 编码永远不会产生解码错误。使用\nlatin-1 编码读取一个文件的时候也许不能产生完全正确的文本解码数据，但是它也能\n从中提取出足够多的有用数据。同时，如果你之后将数据回写回去，原先的数据还是会\n保留的。\n讨论\n读写文本文件一般来讲是比较简单的。但是也几点是需要注意的。首先，在例子\n程序中的 with 语句给被使用到的文件创建了一个上下文环境，但 with 控制块结束时，\n文件会自动关闭。你也可以不使用 with 语句，但是这时候你就必须记得手动关闭文件：\nf = open('somefile.txt', 'rt')\ndata = f.read()\nf.close()\n另外一个问题是关于换行符的识别问题，在 Unix 和 Windows 中是不一样的 (分别\n是 \\n 和 \\r\\n )。默认情况下，Python 会以统一模式处理换行符。这种模式下，在读\n取文本的时候，Python 可以识别所有的普通换行符并将其转换为单个 \\n 字符。类似\n的，在输出时会将换行符 \\n 转换为系统默认的换行符。如果你不希望这种默认的处理\n方式，可以给 open() 函数传入参数 newline='' ，就像下面这样：")]),e._v(" "),n("h1",{attrs:{id:"read-with-disabled-newline-translation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#read-with-disabled-newline-translation"}},[e._v("#")]),e._v(" Read with disabled newline translation")]),e._v(" "),n("p",[e._v("with open('somefile.txt', 'rt', newline='') as f:\n...\n为了说明两者之间的差异，下面我在 Unix 机器上面读取一个 Windows 上面的文\n本文件，里面的内容是 hello world!\\r\\n ：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"newline-translation-enabled-the-default"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#newline-translation-enabled-the-default"}},[e._v("#")]),e._v(" Newline translation enabled (the default)")]),e._v(" "),n("p",[e._v("f = open('hello.txt', 'rt')\nf.read()\n'hello world!\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"newline-translation-disabled"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#newline-translation-disabled"}},[e._v("#")]),e._v(" Newline translation disabled")]),e._v(" "),n("p",[e._v("g = open('hello.txt', 'rt', newline='')\ng.read()\n'hello world!\\r\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后一个问题就是文本文件中可能出现的编码错误。但你读取或者写入一个文本\n文件时，你可能会遇到一个编码或者解码错误。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = open('sample.txt', 'rt', encoding='ascii')\nf.read()\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFile \"/usr/local/lib/python3.3/encodings/ascii.py\", line 26, in decode\nreturn codecs.ascii_decode(input, self.errors)[0]\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position\n12: ordinal not in range(128)")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果出现这个错误，通常表示你读取文本时指定的编码不正确。你最好仔细阅读说\n明并确认你的文件编码是正确的 (比如使用 UTF-8 而不是 Latin-1 编码或其他)。如果\n编码错误还是存在的话，你可以给 open() 函数传递一个可选的 errors 参数来处理这\n些错误。下面是一些处理常见错误的方法：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"replace-bad-chars-with-unicode-u-fffd-replacement-char"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#replace-bad-chars-with-unicode-u-fffd-replacement-char"}},[e._v("#")]),e._v(" Replace bad chars with Unicode U+fffd replacement char")]),e._v(" "),n("p",[e._v("f = open('sample.txt', 'rt', encoding='ascii', errors='replace')\nf.read()\n'Spicy Jalape?o!'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"ignore-bad-chars-entirely"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ignore-bad-chars-entirely"}},[e._v("#")]),e._v(" Ignore bad chars entirely")]),e._v(" "),n("p",[e._v("g = open('sample.txt', 'rt', encoding='ascii', errors='ignore')\ng.read()\n'Spicy Jalapeo!'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你经常使用 errors 参数来处理编码错误，可能会让你的生活变得很糟糕。对\n于文本处理的首要原则是确保你总是使用的是正确编码。当模棱两可的时候，就使用默\n认的设置 (通常都是 UTF-8)。\n5.2 打印输出至文件中\n问题\n你想将 print() 函数的输出重定向到一个文件中去。\n解决方案\n在 print() 函数中指定 file 关键字参数，像下面这样：\nwith open('d:/work/test.txt', 'wt') as f:\nprint('Hello World!', file=f)\n讨论\n关于输出重定向到文件中就这些了。但是有一点要注意的就是文件必须是以文本\n模式打开。如果文件是二进制模式的话，打印就会出错。\n5.3 使用其他分隔符或行终止符打印\n问题\n你想使用 print() 函数输出数据，但是想改变默认的分隔符或者行尾符。\n解决方案\n可以使用在 print() 函数中使用 sep 和 end 关键字参数，以你想要的方式输出。\n比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("print('ACME', 50, 91.5)\nACME 50 91.5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print('ACME', 50, 91.5, sep=',')\nACME,50,91.5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print('ACME', 50, 91.5, sep=',', end='!!\\n')\nACME,50,91.5!!")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("使用 end 参数也可以在输出中禁止换行。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for i in range(5):\n... print(i)\n...\n01234")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for i in range(5):\n... print(i, end=' ')\n...\n0 1 2 3 4 >>>\n讨论\n当你想使用非空格分隔符来输出数据的时候，给 print() 函数传递一个 sep 参数\n是最简单的方案。有时候你会看到一些程序员会使用 str.join() 来完成同样的事情。\n比如：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(','.join(('ACME','50','91.5')))\nACME,50,91.5")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("str.join() 的问题在于它仅仅适用于字符串。这意味着你通常需要执行另外一些\n转换才能让它正常工作。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("row = ('ACME', 50, 91.5)\nprint(','.join(row))\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: sequence item 1: expected str instance, int found")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(','.join(str(x) for x in row))\nACME,50,91.5")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你当然可以不用那么麻烦，只需要像下面这样写：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("print(*row, sep=',')\nACME,50,91.5")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("5.4 读写字节数据\n问题\n你想读写二进制文件，比如图片，声音文件等等。\n解决方案\n使用模式为 rb 或 wb 的 open() 函数来读取或写入二进制数据。比如：")]),e._v(" "),n("h1",{attrs:{id:"read-the-entire-file-as-a-single-byte-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#read-the-entire-file-as-a-single-byte-string"}},[e._v("#")]),e._v(" Read the entire file as a single byte string")]),e._v(" "),n("p",[e._v("with open('somefile.bin', 'rb') as f:\ndata = f.read()")]),e._v(" "),n("h1",{attrs:{id:"write-binary-data-to-a-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#write-binary-data-to-a-file"}},[e._v("#")]),e._v(" Write binary data to a file")]),e._v(" "),n("p",[e._v("with open('somefile.bin', 'wb') as f:\nf.write(b'Hello World')\n在读取二进制数据时，需要指明的是所有返回的数据都是字节字符串格式的，而不\n是文本字符串。类似的，在写入的时候，必须保证参数是以字节形式对外暴露数据的对\n象 (比如字节字符串，字节数组对象等)。\n讨论\n在读取二进制数据的时候，字节字符串和文本字符串的语义差异可能会导致一个\n潜在的陷阱。特别需要注意的是，索引和迭代动作返回的是字节的值而不是字节字符\n串。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"text-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#text-string"}},[e._v("#")]),e._v(" Text string")]),e._v(" "),n("p",[e._v("t = 'Hello World'\nt[0]\n'H'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for c in t:\n... print(c)\n...\nHello\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"byte-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#byte-string"}},[e._v("#")]),e._v(" Byte string")]),e._v(" "),n("p",[e._v("b = b'Hello World'\nb[0]\n72")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for c in b:\n... print(c)\n...\n72\n101\n108\n108\n111\n...")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想从二进制模式的文件中读取或写入文本数据，必须确保要进行解码和编\n码操作。比如：\nwith open('somefile.bin', 'rb') as f:\ndata = f.read(16)\ntext = data.decode('utf-8')\nwith open('somefile.bin', 'wb') as f:\ntext = 'Hello World' f.write(text.encode('utf-8'))\n二进制 I/O 还有一个鲜为人知的特性就是数组和 C 结构体类型能直接被写入，而\n不需要中间转换为自己对象。比如：\nimport array\nnums = array.array('i', [1, 2, 3, 4])\nwith open('data.bin','wb') as f:\nf.write(nums)\n这个适用于任何实现了被称之为”缓冲接口”的对象，这种对象会直接暴露其底层\n的内存缓冲区给能处理它的操作。二进制数据的写入就是这类操作之一。\n很多对象还允许通过使用文件对象的 readinto() 方法直接读取二进制数据到其底\n层的内存中去。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import array\na = array.array('i', [0, 0, 0, 0, 0, 0, 0, 0])\nwith open('data.bin', 'rb') as f:\n... f.readinto(a)\n...\n16")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a\narray('i', [1, 2, 3, 4, 0, 0, 0, 0])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("但是使用这种技术的时候需要格外小心，因为它通常具有平台相关性，并且可能会\n依赖字长和字节顺序 (高位优先和低位优先)。可以查看 5.9 小节中另外一个读取二进制\n数据到可修改缓冲区的例子。\n5.5 文件不存在才能写入\n问题\n你想像一个文件中写入数据，但是前提必须是这个文件在文件系统上不存在。也就\n是不允许覆盖已存在的文件内容。\n解决方案\n可以在 open() 函数中使用 x 模式来代替 w 模式的方法来解决这个问题。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("with open('somefile', 'wt') as f:\n... f.write('Hello\\n')\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("with open('somefile', 'xt') as f:\n... f.write('Hello\\n')\n...\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFileExistsError: [Errno 17] File exists: 'somefile'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果文件是二进制的，使用 xb 来代替 xt\n讨论\n这一小节演示了在写文件时通常会遇到的一个问题的完美解决方案 (不小心覆盖一\n个已存在的文件)。一个替代方案是先测试这个文件是否存在，像下面这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import os\nif not os.path.exists('somefile'):\n... with open('somefile', 'wt') as f:\n... f.write('Hello\\n')\n... else:\n... print('File already exists!')\n...\nFile already exists!")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("显而易见，使用 x 文件模式更加简单。要注意的是 x 模式是一个 Python3 对 open()\n函数特有的扩展。在 Python 的旧版本或者是 Python 实现的底层 C 函数库中都是没有\n这个模式的。\n5.6 字符串的 I/O 操作\n问题\n你想使用操作类文件对象的程序来操作文本或二进制字符串。\n解决方案\n使用 io.StringIO() 和 io.BytesIO() 类来创建类文件对象操作字符串数据。比\n如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = io.StringIO()\ns.write('Hello World\\n')\n12")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print('This is a test', file=s)\n15")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"get-all-of-the-data-written-so-far"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-all-of-the-data-written-so-far"}},[e._v("#")]),e._v(" Get all of the data written so far")]),e._v(" "),n("p",[e._v("s.getvalue()\n'Hello World\\nThis is a test\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"wrap-a-file-interface-around-an-existing-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wrap-a-file-interface-around-an-existing-string"}},[e._v("#")]),e._v(" Wrap a file interface around an existing string")]),e._v(" "),n("p",[e._v("s = io.StringIO('Hello\\nWorld\\n')\ns.read(4)\n'Hell'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.read()\n'o\\nWorld\\n'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("io.StringIO 只能用于文本。如果你要操作二进制数据，要使用 io.BytesIO 类来\n代替。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = io.BytesIO()\ns.write(b'binary data')\ns.getvalue()\nb'binary data'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n当你想模拟一个普通的文件的时候 StringIO 和 BytesIO 类是很有用的。比如，在\n单元测试中，你可以使用 StringIO 来创建一个包含测试数据的类文件对象，这个对象\n可以被传给某个参数为普通文件对象的函数。\n需要注意的是，StringIO 和 BytesIO 实例并没有正确的整数类型的文件描述符。\n因此，它们不能在那些需要使用真实的系统级文件如文件，管道或者是套接字的程序中\n使用。\n5.7 读写压缩文件\n问题\n你想读写一个 gzip 或 bz2 格式的压缩文件。\n解决方案\ngzip 和 bz2 模块可以很容易的处理这些文件。两个模块都为 open() 函数提供了\n另外的实现来解决这个问题。比如，为了以文本形式读取压缩文件，可以这样做：")]),e._v(" "),n("h1",{attrs:{id:"gzip-compression"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gzip-compression"}},[e._v("#")]),e._v(" gzip compression")]),e._v(" "),n("p",[e._v("import gzip\nwith gzip.open('somefile.gz', 'rt') as f:\ntext = f.read()")]),e._v(" "),n("h1",{attrs:{id:"bz2-compression"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bz2-compression"}},[e._v("#")]),e._v(" bz2 compression")]),e._v(" "),n("p",[e._v("import bz2\nwith bz2.open('somefile.bz2', 'rt') as f:\ntext = f.read()\n类似的，为了写入压缩数据，可以这样做：")]),e._v(" "),n("h1",{attrs:{id:"gzip-compression-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gzip-compression-2"}},[e._v("#")]),e._v(" gzip compression")]),e._v(" "),n("p",[e._v("import gzip\nwith gzip.open('somefile.gz', 'wt') as f:\nf.write(text)")]),e._v(" "),n("h1",{attrs:{id:"bz2-compression-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bz2-compression-2"}},[e._v("#")]),e._v(" bz2 compression")]),e._v(" "),n("p",[e._v("import bz2\nwith bz2.open('somefile.bz2', 'wt') as f:\nf.write(text)\n如上，所有的 I/O 操作都使用文本模式并执行 Unicode 的编码/解码。类似的，如\n果你想操作二进制数据，使用 rb 或者 wb 文件模式即可。\n讨论\n大部分情况下读写压缩数据都是很简单的。但是要注意的是选择一个正确的文件\n模式是非常重要的。如果你不指定模式，那么默认的就是二进制模式，如果这时候程\n序想要接受的是文本数据，那么就会出错。gzip.open() 和 bz2.open() 接受跟内置的\nopen() 函数一样的参数，包括 encoding，errors，newline 等等。\n当写入压缩数据时，可以使用 compresslevel 这个可选的关键字参数来指定一个\n压缩级别。比如：\nwith gzip.open('somefile.gz', 'wt', compresslevel=5) as f:\nf.write(text)\n默认的等级是 9，也是最高的压缩等级。等级越低性能越好，但是数据压缩程度也\n越低。\n最后一点，gzip.open() 和 bz2.open() 还有一个很少被知道的特性，它们可以作\n用在一个已存在并以二进制模式打开的文件上。比如，下面代码是可行的：\nimport gzip\nf = open('somefile.gz', 'rb')\nwith gzip.open(f, 'rt') as g:\ntext = g.read()\n这样就允许 gzip 和 bz2 模块可以工作在许多类文件对象上，比如套接字，管道和\n内存中文件等。\n5.8 固定大小记录的文件迭代\n问题\n你想在一个固定长度记录或者数据块的集合上迭代，而不是在一个文件中一行一\n行的迭代。\n解决方案\n通过下面这个小技巧使用 iter 和 functools.partial() 函数：\nfrom functools import partial\nRECORD_SIZE = 32\nwith open('somefile.data', 'rb') as f:\nrecords = iter(partial(f.read, RECORD_SIZE), b'')\nfor r in records:\n...\n这个例子中的 records 对象是一个可迭代对象，它会不断的产生固定大小的数据\n块，直到文件末尾。要注意的是如果总记录大小不是块大小的整数倍的话，最后一个返\n回元素的字节数会比期望值少。\n讨论\niter() 函数有一个鲜为人知的特性就是，如果你给它传递一个可调用对象和一个\n标记值，它会创建一个迭代器。这个迭代器会一直调用传入的可调用对象直到它返回标\n记值为止，这时候迭代终止。\n在例子中，functools.partial 用来创建一个每次被调用时从文件中读取固定数\n目字节的可调用对象。标记值 b'' 就是当到达文件结尾时的返回值。\n最后再提一点，上面的例子中的文件时以二进制模式打开的。如果是读取固定大小\n的记录，这通常是最普遍的情况。而对于文本文件，一行一行的读取 (默认的迭代行为)\n更普遍点。\n5.9 读取二进制数据到可变缓冲区中\n问题\n你想直接读取二进制数据到一个可变缓冲区中，而不需要做任何的中间复制操作。\n或者你想原地修改数据并将它写回到一个文件中去。\n解决方案\n为了读取数据到一个可变数组中，使用文件对象的 readinto() 方法。比如：\nimport os.path\ndef read_into_buffer(filename):\nbuf = bytearray(os.path.getsize(filename))\nwith open(filename, 'rb') as f:\nf.readinto(buf)\nreturn buf\n下面是一个演示这个函数使用方法的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"write-a-sample-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#write-a-sample-file"}},[e._v("#")]),e._v(" Write a sample file")]),e._v(" "),n("p",[e._v("with open('sample.bin', 'wb') as f:\n... f.write(b'Hello World')\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("buf = read_into_buffer('sample.bin')\nbuf\nbytearray(b'Hello World')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("buf[0:5] = b'Hallo'\nbuf\nbytearray(b'Hallo World')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("with open('newsample.bin', 'wb') as f:\n... f.write(buf)\n...\n11")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n文件对象的 readinto() 方法能被用来为预先分配内存的数组填充数据，甚至包括\n由 array 模块或 numpy 库创建的数组。和普通 read() 方法不同的是，readinto() 填\n充已存在的缓冲区而不是为新对象重新分配内存再返回它们。因此，你可以使用它来避\n免大量的内存分配操作。比如，如果你读取一个由相同大小的记录组成的二进制文件\n时，你可以像下面这样写：\nrecord_size = 32 # Size of each record (adjust value)\nbuf = bytearray(record_size)\nwith open('somefile', 'rb') as f:\nwhile True: n = f.readinto(buf)\nif n < record_size:\nbreak")]),e._v(" "),n("h1",{attrs:{id:"use-the-contents-of-buf"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#use-the-contents-of-buf"}},[e._v("#")]),e._v(" Use the contents of buf")]),e._v(" "),n("p",[e._v("...\n另外有一个有趣特性就是 memoryview ，它可以通过零复制的方式对已存在的缓冲\n区执行切片操作，甚至还能修改它的内容。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("buf\nbytearray(b'Hello World')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m1 = memoryview(buf)\nm2 = m1[-5:]\nm2\n<memory at 0x100681390>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m2[:] = b'WORLD'\nbuf\nbytearray(b'Hello WORLD')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("使用 f.readinto() 时需要注意的是，你必须检查它的返回值，也就是实际读取的\n字节数。\n如果字节数小于缓冲区大小，表明数据被截断或者被破坏了 (比如你期望每次读取\n指定数量的字节)。\n最后，留心观察其他函数库和模块中和 into 相关的函数 (比如 recv_into() ，\npack_into() 等)。Python 的很多其他部分已经能支持直接的 I/O 或数据访问操作，这\n些操作可被用来填充或修改数组和缓冲区内容。\n关于解析二进制结构和 memoryviews 使用方法的更高级例子，请参考 6.12 小节。\n5.10 内存映射的二进制文件\n问题\n你想内存映射一个二进制文件到一个可变字节数组中，目的可能是为了随机访问\n它的内容或者是原地做些修改。\n解决方案\n使用 mmap 模块来内存映射文件。下面是一个工具函数，向你演示了如何打开一个\n文件并以一种便捷方式内存映射这个文件。\nimport os\nimport mmap\ndef memory_map(filename, access=mmap.ACCESS_WRITE):\nsize = os.path.getsize(filename)\nfd = os.open(filename, os.O_RDWR)\nreturn mmap.mmap(fd, size, access=access)\n为了使用这个函数，你需要有一个已创建并且内容不为空的文件。下面是一个例\n子，教你怎样初始创建一个文件并将其内容扩充到指定大小：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("size = 1000000\nwith open('data', 'wb') as f:\n... f.seek(size-1)\n... f.write(b'\\x00')\n...")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("下面是一个利用 memory_map() 函数类内存映射文件内容的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("m = memory_map('data')\nlen(m)\n1000000")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m[0:10]\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m[0] 0")]),e._v(" "),n("h1",{attrs:{id:"reassign-a-slice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reassign-a-slice"}},[e._v("#")]),e._v(" Reassign a slice")]),e._v(" "),n("p",[e._v("m[0:11] = b'Hello World'\nm.close()")]),e._v(" "),n("h1",{attrs:{id:"verify-that-changes-were-made"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#verify-that-changes-were-made"}},[e._v("#")]),e._v(" Verify that changes were made")]),e._v(" "),n("p",[e._v("with open('data', 'rb') as f:\n... print(f.read(11))\n...\nb'Hello World'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("mmap() 返回的 mmap 对象同样也可以作为一个上下文管理器来使用，这时候底层\n的文件会被自动关闭。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("with memory_map('data') as m:\n... print(len(m))\n... print(m[0:10])\n...\n1000000\nb'Hello World'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m.closed\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("默认情况下，memeory_map() 函数打开的文件同时支持读和写操作。任何的修改\n内容都会复制回原来的文件中。如果需要只读的访问模式，可以给参数 access 赋值为\nmmap.ACCESS_READ 。比如：\nm = memory_map(filename, mmap.ACCESS_READ)\n如果你想在本地修改数据，但是又不想将修改写回到原始文件中，可以使用 mmap.\nACCESS_COPY ： m = memory_map(filename, mmap.ACCESS_COPY)\n讨论\n为了随机访问文件的内容，使用 mmap 将文件映射到内存中是一个高效和优雅的方\n法。例如，你无需打开一个文件并执行大量的 seek() ，read() ，write() 调用，只需\n要简单的映射文件并使用切片操作访问数据即可。\n一般来讲，mmap() 所暴露的内存看上去就是一个二进制数组对象。但是，你可以\n使用一个内存视图来解析其中的数据。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("m = memory_map('data')")]),e._v(" "),n("h1",{attrs:{id:"memoryview-of-unsigned-integers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#memoryview-of-unsigned-integers"}},[e._v("#")]),e._v(" Memoryview of unsigned integers")]),e._v(" "),n("p",[e._v("v = memoryview(m).cast('I')\nv[0] = 7\nm[0:4]\nb'\\x07\\x00\\x00\\x00'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m[0:4] = b'\\x07\\x01\\x00\\x00'\nv[0]\n263")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("需要强调的一点是，内存映射一个文件并不会导致整个文件被读取到内存中。也就\n是说，文件并没有被复制到内存缓存或数组中。相反，操作系统仅仅为文件内容保留了\n一段虚拟内存。当你访问文件的不同区域时，这些区域的内容才根据需要被读取并映射\n到内存区域中。而那些从没被访问到的部分还是留在磁盘上。所有这些过程是透明的，\n在幕后完成！\n如果多个 Python 解释器内存映射同一个文件，得到的 mmap 对象能够被用来在解\n释器直接交换数据。也就是说，所有解释器都能同时读写数据，并且其中一个解释器所\n做的修改会自动呈现在其他解释器中。很明显，这里需要考虑同步的问题。但是这种方\n法有时候可以用来在管道或套接字间传递数据。\n这一小节中函数尽量写得很通用，同时适用于 Unix 和 Windows 平台。要注意的\n是使用 mmap() 函数时会在底层有一些平台的差异性。另外，还有一些选项可以用来创\n建匿名的内存映射区域。如果你对这个感兴趣，确保你仔细研读了 Python 文档中 这方\n面的内容 。\n5.11 文件路径名的操作\n问题\n你需要使用路径名来获取文件名，目录名，绝对路径等等。\n解决方案\n使用 os.path 模块中的函数来操作路径名。下面是一个交互式例子来演示一些关\n键的特性：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import os\npath = '/Users/beazley/Data/data.csv'")]),e._v(" "),n("h1",{attrs:{id:"get-the-last-component-of-the-path"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-the-last-component-of-the-path"}},[e._v("#")]),e._v(" Get the last component of the path")]),e._v(" "),n("p",[e._v("os.path.basename(path)\n'data.csv'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"get-the-directory-name"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-the-directory-name"}},[e._v("#")]),e._v(" Get the directory name")]),e._v(" "),n("p",[e._v("os.path.dirname(path)\n'/Users/beazley/Data'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"join-path-components-together"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#join-path-components-together"}},[e._v("#")]),e._v(" Join path components together")]),e._v(" "),n("p",[e._v("os.path.join('tmp', 'data', os.path.basename(path))\n'tmp/data/data.csv'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"expand-the-user-s-home-directory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#expand-the-user-s-home-directory"}},[e._v("#")]),e._v(" Expand the user's home directory")]),e._v(" "),n("p",[e._v("path = '~/Data/data.csv'\nos.path.expanduser(path)\n'/Users/beazley/Data/data.csv'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"split-the-file-extension"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#split-the-file-extension"}},[e._v("#")]),e._v(" Split the file extension")]),e._v(" "),n("p",[e._v("os.path.splitext(path)\n('~/Data/data', '.csv')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n对于任何的文件名的操作，你都应该使用 os.path 模块，而不是使用标准字符串\n操作来构造自己的代码。特别是为了可移植性考虑的时候更应如此，因为 os.path 模\n块知道 Unix 和 Windows 系统之间的差异并且能够可靠地处理类似 Data/data.csv 和\nData\\data.csv 这样的文件名。其次，你真的不应该浪费时间去重复造轮子。通常最好\n是直接使用已经为你准备好的功能。\n要注意的是 os.path 还有更多的功能在这里并没有列举出来。可以查阅官方文档\n来获取更多与文件测试，符号链接等相关的函数说明。\n5.12 测试文件是否存在\n问题\n你想测试一个文件或目录是否存在。\n解决方案\n使用 os.path 模块来测试一个文件或目录是否存在。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import os\nos.path.exists('/etc/passwd')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("os.path.exists('/tmp/spam')\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你还能进一步测试这个文件时什么类型的。在下面这些测试中，如果测试的文件不\n存在的时候，结果都会返回 False：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"is-a-regular-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#is-a-regular-file"}},[e._v("#")]),e._v(" Is a regular file")]),e._v(" "),n("p",[e._v("os.path.isfile('/etc/passwd')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"is-a-directory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#is-a-directory"}},[e._v("#")]),e._v(" Is a directory")]),e._v(" "),n("p",[e._v("os.path.isdir('/etc/passwd')\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"is-a-symbolic-link"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#is-a-symbolic-link"}},[e._v("#")]),e._v(" Is a symbolic link")]),e._v(" "),n("p",[e._v("os.path.islink('/usr/local/bin/python3')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"get-the-file-linked-to"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-the-file-linked-to"}},[e._v("#")]),e._v(" Get the file linked to")]),e._v(" "),n("p",[e._v("os.path.realpath('/usr/local/bin/python3')\n'/usr/local/bin/python3.3'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你还想获取元数据 (比如文件大小或者是修改日期)，也可以使用 os.path 模\n块来解决：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("os.path.getsize('/etc/passwd')\n3669")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("os.path.getmtime('/etc/passwd')\n1272478234.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import time\ntime.ctime(os.path.getmtime('/etc/passwd'))\n'Wed Apr 28 13:10:34 2010'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n使用 os.path 来进行文件测试是很简单的。在写这些脚本时，可能唯一需要注意\n的就是你需要考虑文件权限的问题，特别是在获取元数据时候。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("os.path.getsize('/Users/guido/Desktop/foo.txt')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFile \"/usr/local/lib/python3.3/genericpath.py\", line 49, in getsize\nreturn os.stat(filename).st_size\nPermissionError: [Errno 13] Permission denied: '/Users/guido/Desktop/foo.txt'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("5.13 获取文件夹中的文件列表\n问题\n你想获取文件系统中某个目录下的所有文件列表。\n解决方案\n使用 os.listdir() 函数来获取某个目录中的文件列表：\nimport os\nnames = os.listdir('somedir')\n结果会返回目录中所有文件列表，包括所有文件，子目录，符号链接等等。如果你\n需要通过某种方式过滤数据，可以考虑结合 os.path 库中的一些函数来使用列表推导。\n比如：\nimport os.path")]),e._v(" "),n("h1",{attrs:{id:"get-all-regular-files"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-all-regular-files"}},[e._v("#")]),e._v(" Get all regular files")]),e._v(" "),n("p",[e._v("names = [name for name in os.listdir('somedir')\nif os.path.isfile(os.path.join('somedir', name))]")]),e._v(" "),n("h1",{attrs:{id:"get-all-dirs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-all-dirs"}},[e._v("#")]),e._v(" Get all dirs")]),e._v(" "),n("p",[e._v("dirnames = [name for name in os.listdir('somedir')\nif os.path.isdir(os.path.join('somedir', name))]\n字符串的 startswith() 和 endswith() 方法对于过滤一个目录的内容也是很有用\n的。比如：\npyfiles = [name for name in os.listdir('somedir')\nif name.endswith('.py')]\n对于文件名的匹配，你可能会考虑使用 glob 或 fnmatch 模块。比如：\nimport glob\npyfiles = glob.glob('somedir/"),n("em",[e._v(".py')\nfrom fnmatch import fnmatch\npyfiles = [name for name in os.listdir('somedir')\nif fnmatch(name, '")]),e._v(".py')]\n讨论\n获取目录中的列表是很容易的，但是其返回结果只是目录中实体名列表而已。如\n果你还想获取其他的元信息，比如文件大小，修改时间等等，你或许还需要使用到\nos.path 模块中的函数或着 os.stat() 函数来收集数据。比如：")]),e._v(" "),n("h1",{attrs:{id:"example-of-getting-a-directory-listing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-of-getting-a-directory-listing"}},[e._v("#")]),e._v(" Example of getting a directory listing")]),e._v(" "),n("p",[e._v("import os\nimport os.path\nimport glob\npyfiles = glob.glob('*.py')")]),e._v(" "),n("h1",{attrs:{id:"get-file-sizes-and-modification-dates"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-file-sizes-and-modification-dates"}},[e._v("#")]),e._v(" Get file sizes and modification dates")]),e._v(" "),n("p",[e._v("name_sz_date = [(name, os.path.getsize(name), os.path.getmtime(name))\nfor name in pyfiles]\nfor name, size, mtime in name_sz_date:\nprint(name, size, mtime)")]),e._v(" "),n("h1",{attrs:{id:"alternative-get-file-metadata"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alternative-get-file-metadata"}},[e._v("#")]),e._v(" Alternative: Get file metadata")]),e._v(" "),n("p",[e._v("file_metadata = [(name, os.stat(name)) for name in pyfiles]\nfor name, meta in file_metadata:\nprint(name, meta.st_size, meta.st_mtime)\n最后还有一点要注意的就是，有时候在处理文件名编码问题时候可能会出现一些\n问题。通常来讲，函数 os.listdir() 返回的实体列表会根据系统默认的文件名编码来\n解码。但是有时候也会碰到一些不能正常解码的文件名。关于文件名的处理问题，在\n5.14 和 5.15 小节有更详细的讲解。\n5.14 忽略文件名编码\n问题\n你想使用原始文件名执行文件的 I/O 操作，也就是说文件名并没有经过系统默认\n编码去解码或编码过。\n解决方案\n默认情况下，所有的文件名都会根据 sys.getfilesystemencoding() 返回的文本\n编码来编码或解码。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("sys.getfilesystemencoding()\n'utf-8'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果因为某种原因你想忽略这种编码，可以使用一个原始字节字符串来指定一个\n文件名即可。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"wrte-a-file-using-a-unicode-filename"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wrte-a-file-using-a-unicode-filename"}},[e._v("#")]),e._v(" Wrte a file using a unicode filename")]),e._v(" "),n("p",[e._v("with open('jalape\\xf1o.txt', 'w') as f:\n... f.write('Spicy!')\n...\n6")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"directory-listing-decoded"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#directory-listing-decoded"}},[e._v("#")]),e._v(" Directory listing (decoded)")]),e._v(" "),n("p",[e._v("import os\nos.listdir('.')\n['jalapeño.txt']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"directory-listing-raw"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#directory-listing-raw"}},[e._v("#")]),e._v(" Directory listing (raw)")]),e._v(" "),n("p",[e._v("os.listdir(b'.') # Note: byte string\n[b'jalapen\\xcc\\x83o.txt']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"open-file-with-raw-filename"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#open-file-with-raw-filename"}},[e._v("#")]),e._v(" Open file with raw filename")]),e._v(" "),n("p",[e._v("with open(b'jalapen\\xcc\\x83o.txt') as f:\n... print(f.read())\n...\nSpicy!")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("正如你所见，在最后两个操作中，当你给文件相关函数如 open() 和 os.listdir()\n传递字节字符串时，文件名的处理方式会稍有不同。\n讨论\n通常来讲，你不需要担心文件名的编码和解码，普通的文件名操作应该就没问题\n了。但是，有些操作系统允许用户通过偶然或恶意方式去创建名字不符合默认编码的文\n件。这些文件名可能会神秘地中断那些需要处理大量文件的 Python 程序。\n读取目录并通过原始未解码方式处理文件名可以有效的避免这样的问题，尽管这\n样会带来一定的编程难度。\n关于打印不可解码的文件名，请参考 5.15 小节。\n5.15 打印不合法的文件名\n问题\n你的程序获取了一个目录中的文件名列表，但是当它试着去打印文件名的时候\n程序崩溃，出现了 UnicodeEncodeError 异常和一条奇怪的消息——surrogates not\nallowed 。\n解决方案\n当打印未知的文件名时，使用下面的方法可以避免这样的错误：\ndef bad_filename(filename):\nreturn repr(filename)[1:-1]\ntry:\nprint(filename)\nexcept UnicodeEncodeError:\nprint(bad_filename(filename))\n讨论\n这一小节讨论的是在编写必须处理文件系统的程序时一个不太常见但又很棘手的\n问题。默认情况下，Python 假定所有文件名都已经根据 sys.getfilesystemencoding()\n的值编码过了。但是，有一些文件系统并没有强制要求这样做，因此允许创建文件名没\n有正确编码的文件。这种情况不太常见，但是总会有些用户冒险这样做或者是无意之\n中这样做了 ( 可能是在一个有缺陷的代码中给 open() 函数传递了一个不合规范的文件\n名)。\n当执行类似 os.listdir() 这样的函数时，这些不合规范的文件名就会让 Python\n陷入困境。一方面，它不能仅仅只是丢弃这些不合格的名字。而另一方面，它又不能将\n这些文件名转换为正确的文本字符串。Python 对这个问题的解决方案是从文件名中获\n取未解码的字节值比如 \\xhh 并将它映射成 Unicode 字符 \\udchh 表示的所谓的”代理\n编码”。下面一个例子演示了当一个不合格目录列表中含有一个文件名为 bäd.txt(使用\nLatin-1 而不是 UTF-8 编码) 时的样子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import os\nfiles = os.listdir('.')\nfiles\n['spam.py', 'b\\udce4d.txt', 'foo.txt']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你有代码需要操作文件名或者将文件名传递给 open() 这样的函数，一切都能\n正常工作。只有当你想要输出文件名时才会碰到些麻烦 (比如打印输出到屏幕或日志文\n件等)。特别的，当你想打印上面的文件名列表时，你的程序就会崩溃：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('for name in files:\n... print(name)\n...\nspam.py\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 2, in '),n("module",[e._v("\nUnicodeEncodeError: 'utf-8' codec can't encode character '\\udce4' in\nposition 1: surrogates not allowed")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("程序崩溃的原因就是字符 \\udce4 是一个非法的 Unicode 字符。它其实是一个被\n称为代理字符对的双字符组合的后半部分。由于缺少了前半部分，因此它是个非法的\nUnicode。所以，唯一能成功输出的方法就是当遇到不合法文件名时采取相应的补救措\n施。比如可以将上述代码修改如下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for name in files:\n... try:\n... print(name)\n... except UnicodeEncodeError:\n... print(bad_filename(name))\n...\nspam.py\nb\\udce4d.txt\nfoo.txt")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在 bad_filename() 函数中怎样处置取决于你自己。另外一个选择就是通过某种方\n式重新编码，示例如下：\ndef bad_filename(filename):\ntemp = filename.encode(sys.getfilesystemencoding(), errors= , →'surrogateescape')\nreturn temp.decode('latin-1')\n译者注:\nsurrogateescape:\n这种是 Python 在绝大部分面向 OS 的 API 中所使用的错误处理器，\n它能以一种优雅的方式处理由操作系统提供的数据的编码问题。\n在解码出错时会将出错字节存储到一个很少被使用到的 Unicode 编码范围内。\n在编码时将那些隐藏值又还原回原先解码失败的字节序列。\n它不仅对于 OS API 非常有用，也能很容易的处理其他情况下的编码错误。\n使用这个版本产生的输出如下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for name in files:\n... try:\n... print(name)\n... except UnicodeEncodeError:\n... print(bad_filename(name))\n...\nspam.py\nbäd.txt\nfoo.txt")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这一小节主题可能会被大部分读者所忽略。但是如果你在编写依赖文件名和文件\n系统的关键任务程序时，就必须得考虑到这个。否则你可能会在某个周末被叫到办公室\n去调试一些令人费解的错误。\n5.16 增加或改变已打开文件的编码\n问题\n你想在不关闭一个已打开的文件前提下增加或改变它的 Unicode 编码。\n解决方案\n如果你想给一个以二进制模式打开的文件添加 Unicode 编码/解码方式，可以使用\nio.TextIOWrapper() 对象包装它。比如：\nimport urllib.request\nimport io\nu = urllib.request.urlopen('http://www.python.org') f = io.TextIOWrapper(u, encoding='utf-8')\ntext = f.read()\n如果你想修改一个已经打开的文本模式的文件的编码方式，可以先使用 detach()\n方法移除掉已存在的文本编码层，并使用新的编码方式代替。下面是一个在 sys.stdout\n上修改编码方式的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sys\nsys.stdout.encoding\n'UTF-8'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding='latin-1')\nsys.stdout.encoding\n'latin-1'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这样做可能会中断你的终端，这里仅仅是为了演示而已。\n讨论\nI/O 系统由一系列的层次构建而成。你可以试着运行下面这个操作一个文本文件的\n例子来查看这种层次：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = open('sample.txt','w')\nf\n<_io.TextIOWrapper name='sample.txt' mode='w' encoding='UTF-8'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("f.buffer\n<_io.BufferedWriter name='sample.txt'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("f.buffer.raw\n<_io.FileIO name='sample.txt' mode='wb'>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在这个例子中，io.TextIOWrapper 是一个编码和解码 Unicode 的文本处理层，io.\nBufferedWriter 是一个处理二进制数据的带缓冲的 I/O 层，io.FileIO 是一个表示操\n作系统底层文件描述符的原始文件。增加或改变文本编码会涉及增加或改变最上面的\nio.TextIOWrapper 层。\n一般来讲，像上面例子这样通过访问属性值来直接操作不同的层是很不安全的。例\n如，如果你试着使用下面这样的技术改变编码看看会发生什么：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f\n<_io.TextIOWrapper name='sample.txt' mode='w' encoding='UTF-8'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("f = io.TextIOWrapper(f.buffer, encoding='latin-1')\nf\n<_io.TextIOWrapper name='sample.txt' encoding='latin-1'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("f.write('Hello')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nValueError: I/O operation on closed file.")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("结果出错了，因为 f 的原始值已经被破坏了并关闭了底层的文件。\ndetach() 方法会断开文件的最顶层并返回第二层，之后最顶层就没什么用了。例\n如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = open('sample.txt', 'w')\nf\n<_io.TextIOWrapper name='sample.txt' mode='w' encoding='UTF-8'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = f.detach()\nb\n<_io.BufferedWriter name='sample.txt'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("f.write('hello')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nValueError: underlying buffer has been detached")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一旦断开最顶层后，你就可以给返回结果添加一个新的最顶层。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = io.TextIOWrapper(b, encoding='latin-1')\nf\n<_io.TextIOWrapper name='sample.txt' encoding='latin-1'>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("尽管已经向你演示了改变编码的方法，但是你还可以利用这种技术来改变文件行\n处理、错误机制以及文件处理的其他方面。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding='ascii',\n... errors='xmlcharrefreplace')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print('Jalape\\u00f1o')\nJalapeño")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("注意下最后输出中的非 ASCII 字符 ñ 是如何被 ñ 取代的。\n5.17 将字节写入文本文件\n问题\n你想在文本模式打开的文件中写入原始的字节数据。\n解决方案\n将字节数据直接写入文件的缓冲区即可，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sys\nsys.stdout.write(b'Hello\\n')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: must be str, not bytes")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sys.stdout.buffer.write(b'Hello\\n')\nHello\n5")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("类似的，能够通过读取文本文件的 buffer 属性来读取二进制数据。\n讨论\nI/O 系统以层级结构的形式构建而成。文本文件是通过在一个拥有缓冲的二进制模\n式文件上增加一个 Unicode 编码/解码层来创建。buffer 属性指向对应的底层文件。如\n果你直接访问它的话就会绕过文本编码/解码层。\n本小节例子展示的 sys.stdout 可能看起来有点特殊。默认情况下，sys.stdout 总\n是以文本模式打开的。但是如果你在写一个需要打印二进制数据到标准输出的脚本的\n话，你可以使用上面演示的技术来绕过文本编码层。\n5.18 将文件描述符包装成文件对象\n问题\n你有一个对应于操作系统上一个已打开的 I/O 通道 (比如文件、管道、套接字等)\n的整型文件描述符，你想将它包装成一个更高层的 Python 文件对象。\n解决方案\n一个文件描述符和一个打开的普通文件是不一样的。文件描述符仅仅是一个由操\n作系统指定的整数，用来指代某个系统的 I/O 通道。如果你碰巧有这么一个文件描述\n符，你可以通过使用 open() 函数来将其包装为一个 Python 的文件对象。你仅仅只需\n要使用这个整数值的文件描述符作为第一个参数来代替文件名即可。例如：")]),e._v(" "),n("h1",{attrs:{id:"open-a-low-level-file-descriptor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#open-a-low-level-file-descriptor"}},[e._v("#")]),e._v(" Open a low-level file descriptor")]),e._v(" "),n("p",[e._v("import os\nfd = os.open('somefile.txt', os.O_WRONLY | os.O_CREAT)")]),e._v(" "),n("h1",{attrs:{id:"turn-into-a-proper-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#turn-into-a-proper-file"}},[e._v("#")]),e._v(" Turn into a proper file")]),e._v(" "),n("p",[e._v("f = open(fd, 'wt') f.write('hello world\\n') f.close()\n当高层的文件对象被关闭或者破坏的时候，底层的文件描述符也会被关闭。如果这\n个并不是你想要的结果，你可以给 open() 函数传递一个可选的 colsefd=False 。比\n如：")]),e._v(" "),n("h1",{attrs:{id:"create-a-file-object-but-don-t-close-underlying-fd-when-done"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-file-object-but-don-t-close-underlying-fd-when-done"}},[e._v("#")]),e._v(" Create a file object, but don't close underlying fd when done")]),e._v(" "),n("p",[e._v("f = open(fd, 'wt', closefd=False) ...\n讨论\n在 Unix 系统中，这种包装文件描述符的技术可以很方便的将一个类文件接口作用\n于一个以不同方式打开的 I/O 通道上，如管道、套接字等。举例来讲，下面是一个操\n作管道的例子：\nfrom socket import socket, AF_INET, SOCK_STREAM\ndef echo_client(client_sock, addr):\nprint('Got connection from', addr)")]),e._v(" "),n("h1",{attrs:{id:"make-text-mode-file-wrappers-for-socket-reading-writing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-text-mode-file-wrappers-for-socket-reading-writing"}},[e._v("#")]),e._v(" Make text-mode file wrappers for socket reading/writing")]),e._v(" "),n("p",[e._v("client_in = open(client_sock.fileno(), 'rt', encoding='latin-1',\nclosefd=False)\nclient_out = open(client_sock.fileno(), 'wt', encoding='latin-1',\nclosefd=False)")]),e._v(" "),n("h1",{attrs:{id:"echo-lines-back-to-the-client-using-file-i-o"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#echo-lines-back-to-the-client-using-file-i-o"}},[e._v("#")]),e._v(" Echo lines back to the client using file I/O")]),e._v(" "),n("p",[e._v("for line in client_in:\nclient_out.write(line)\nclient_out.flush()\nclient_sock.close()\ndef echo_server(address):\nsock = socket(AF_INET, SOCK_STREAM)\nsock.bind(address)\nsock.listen(1)\nwhile True:\nclient, addr = sock.accept()\necho_client(client, addr)\n需要重点强调的一点是，上面的例子仅仅是为了演示内置的 open() 函数的一个特\n性，并且也只适用于基于 Unix 的系统。如果你想将一个类文件接口作用在一个套接字\n并希望你的代码可以跨平台，请使用套接字对象的 makefile() 方法。但是如果不考虑\n可移植性的话，那上面的解决方案会比使用 makefile() 性能更好一点。\n你也可以使用这种技术来构造一个别名，允许以不同于第一次打开文件的方式使\n用它。例如，下面演示如何创建一个文件对象，它允许你输出二进制数据到标准输出\n(通常以文本模式打开)：\nimport sys")]),e._v(" "),n("h1",{attrs:{id:"create-a-binary-mode-file-for-stdout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-binary-mode-file-for-stdout"}},[e._v("#")]),e._v(" Create a binary-mode file for stdout")]),e._v(" "),n("p",[e._v("bstdout = open(sys.stdout.fileno(), 'wb', closefd=False)\nbstdout.write(b'Hello World\\n')\nbstdout.flush()\n尽管可以将一个已存在的文件描述符包装成一个正常的文件对象，但是要注意的\n是并不是所有的文件模式都被支持，并且某些类型的文件描述符可能会有副作用 (特别\n是涉及到错误处理、文件结尾条件等等的时候)。在不同的操作系统上这种行为也是不\n一样，特别的，上面的例子都不能在非 Unix 系统上运行。我说了这么多，意思就是让\n你充分测试自己的实现代码，确保它能按照期望工作。\n5.19 创建临时文件和文件夹\n问题\n你需要在程序执行时创建一个临时文件或目录，并希望使用完之后可以自动销毁\n掉。\n解决方案\ntempfile 模块中有很多的函数可以完成这任务。为了创建一个匿名的临时文件，\n可以使用 tempfile.TemporaryFile ：\nfrom tempfile import TemporaryFile\nwith TemporaryFile('w+t') as f:")]),e._v(" "),n("h1",{attrs:{id:"read-write-to-the-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#read-write-to-the-file"}},[e._v("#")]),e._v(" Read/write to the file")]),e._v(" "),n("p",[e._v("f.write('Hello World\\n') f.write('Testing\\n')")]),e._v(" "),n("h1",{attrs:{id:"seek-back-to-beginning-and-read-the-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#seek-back-to-beginning-and-read-the-data"}},[e._v("#")]),e._v(" Seek back to beginning and read the data")]),e._v(" "),n("p",[e._v("f.seek(0)\ndata = f.read()")]),e._v(" "),n("h1",{attrs:{id:"temporary-file-is-destroyed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#temporary-file-is-destroyed"}},[e._v("#")]),e._v(" Temporary file is destroyed")]),e._v(" "),n("p",[e._v("或者，如果你喜欢，你还可以像这样使用临时文件：\nf = TemporaryFile('w+t')")]),e._v(" "),n("h1",{attrs:{id:"use-the-temporary-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#use-the-temporary-file"}},[e._v("#")]),e._v(" Use the temporary file")]),e._v(" "),n("p",[e._v("... f.close()")]),e._v(" "),n("h1",{attrs:{id:"file-is-destroyed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-is-destroyed"}},[e._v("#")]),e._v(" File is destroyed")]),e._v(" "),n("p",[e._v("TemporaryFile() 的第一个参数是文件模式，通常来讲文本模式使用 w+t ，二进\n制模式使用 w+b 。这个模式同时支持读和写操作，在这里是很有用的，因为当你关闭\n文件去改变模式的时候，文件实际上已经不存在了。TemporaryFile() 另外还支持跟内\n置的 open() 函数一样的参数。比如：\nwith TemporaryFile('w+t', encoding='utf-8', errors='ignore') as f:\n...\n在大多数 Unix 系统上，通过 TemporaryFile() 创建的文件都是匿名的，甚至连目\n录都没有。如果你想打破这个限制，可以使用 NamedTemporaryFile() 来代替。比如：\nfrom tempfile import NamedTemporaryFile\nwith NamedTemporaryFile('w+t') as f:\nprint('filename is:', f.name)\n...")]),e._v(" "),n("h1",{attrs:{id:"file-automatically-destroyed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-automatically-destroyed"}},[e._v("#")]),e._v(" File automatically destroyed")]),e._v(" "),n("p",[e._v("这里，被打开文件的 f.name 属性包含了该临时文件的文件名。当你需要将文件\n名传递给其他代码来打开这个文件的时候，这个就很有用了。和 TemporaryFile() 一\n样，结果文件关闭时会被自动删除掉。如果你不想这么做，可以传递一个关键字参数\ndelete=False 即可。比如：\nwith NamedTemporaryFile('w+t', delete=False) as f:\nprint('filename is:', f.name)\n...\n为了创建一个临时目录，可以使用 tempfile.TemporaryDirectory() 。比如：\nfrom tempfile import TemporaryDirectory\nwith TemporaryDirectory() as dirname:\nprint('dirname is:', dirname)")]),e._v(" "),n("h1",{attrs:{id:"use-the-directory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#use-the-directory"}},[e._v("#")]),e._v(" Use the directory")]),e._v(" "),n("p",[e._v("...")]),e._v(" "),n("h1",{attrs:{id:"directory-and-all-contents-destroyed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#directory-and-all-contents-destroyed"}},[e._v("#")]),e._v(" Directory and all contents destroyed")]),e._v(" "),n("p",[e._v("讨论\nTemporaryFile() 、NamedTemporaryFile() 和 TemporaryDirectory() 函数应该\n是处理临时文件目录的最简单的方式了，因为它们会自动处理所有的创建和清理步骤。\n在一个更低的级别，你可以使用 mkstemp() 和 mkdtemp() 来创建临时文件和目录。比\n如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import tempfile\ntempfile.mkstemp()\n(3, '/var/folders/7W/7WZl5sfZEF0pljrEB1UMWE+++TI/-Tmp-/tmp7fefhv')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("tempfile.mkdtemp()\n'/var/folders/7W/7WZl5sfZEF0pljrEB1UMWE+++TI/-Tmp-/tmp5wvcv6'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("但是，这些函数并不会做进一步的管理了。例如，函数 mkstemp() 仅仅就返回一\n个原始的 OS 文件描述符，你需要自己将它转换为一个真正的文件对象。同样你还需要\n自己清理这些文件。\n通常来讲，临时文件在系统默认的位置被创建，比如 /var/tmp 或类似的地方。为\n了获取真实的位置，可以使用 tempfile.gettempdir() 函数。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("tempfile.gettempdir()\n'/var/folders/7W/7WZl5sfZEF0pljrEB1UMWE+++TI/-Tmp-'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("所有和临时文件相关的函数都允许你通过使用关键字参数 prefix 、suffix 和 dir\n来自定义目录以及命名规则。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = NamedTemporaryFile(prefix='mytemp', suffix='.txt', dir='/tmp')\nf.name\n'/tmp/mytemp8ee899.txt'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后还有一点，尽可能以最安全的方式使用 tempfile 模块来创建临时文件。包括\n仅给当前用户授权访问以及在文件创建过程中采取措施避免竞态条件。要注意的是不\n同的平台可能会不一样。因此你最好阅读 官方文档 来了解更多的细节。\n5.20 与串行端口的数据通信\n问题\n你想通过串行端口读写数据，典型场景就是和一些硬件设备打交道 (比如一个机器\n人或传感器)。\n解决方案\n尽管你可以通过使用 Python 内置的 I/O 模块来完成这个任务，但对于串行通信\n最好的选择是使用 pySerial 包 。这个包的使用非常简单，先安装 pySerial，使用类似下\n面这样的代码就能很容易的打开一个串行端口：\nimport serial\nser = serial.Serial('/dev/tty.usbmodem641', # Device name varies\nbaudrate=9600,\nbytesize=8,\nparity='N',\nstopbits=1)\n设备名对于不同的设备和操作系统是不一样的。比如，在 Windows 系统上，你可\n以使用 0, 1 等表示的一个设备来打开通信端口”COM0”和”COM1”。一旦端口打开，\n那就可以使用 read()，readline() 和 write() 函数读写数据了。例如：\nser.write(b'G1 X50 Y50\\r\\n')\nresp = ser.readline()\n大多数情况下，简单的串口通信从此变得十分简单。\n讨论\n尽管表面上看起来很简单，其实串口通信有时候也是挺麻烦的。推荐你使用第三\n方包如 pySerial 的一个原因是它提供了对高级特性的支持 (比如超时，控制流，缓冲\n区刷新，握手协议等等)。举个例子，如果你想启用 RTS-CTS 握手协议，你只需要给\nSerial() 传递一个 rtscts=True 的参数即可。其官方文档非常完善，因此我在这里极\n力推荐这个包。\n时刻记住所有涉及到串口的 I/O 都是二进制模式的。因此，确保你的代码使用的\n是字节而不是文本 (或有时候执行文本的编码/解码操作)。另外当你需要创建二进制编\n码的指令或数据包的时候，struct 模块也是非常有用的。\n5.21 序列化 Python 对象\n问题\n你需要将一个 Python 对象序列化为一个字节流，以便将它保存到一个文件、存储\n到数据库或者通过网络传输它。\n解决方案\n对于序列化最普遍的做法就是使用 pickle 模块。为了将一个对象保存到一个文件\n中，可以这样做：\nimport pickle\ndata = ... # Some Python object\nf = open('somefile', 'wb')\npickle.dump(data, f)\n为了将一个对象转储为一个字符串，可以使用 pickle.dumps() ： s = pickle.dumps(data)\n为了从字节流中恢复一个对象，使用 picle.load() 或 pickle.loads() 函数。比\n如：")]),e._v(" "),n("h1",{attrs:{id:"restore-from-a-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#restore-from-a-file"}},[e._v("#")]),e._v(" Restore from a file")]),e._v(" "),n("p",[e._v("f = open('somefile', 'rb')\ndata = pickle.load(f)")]),e._v(" "),n("h1",{attrs:{id:"restore-from-a-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#restore-from-a-string"}},[e._v("#")]),e._v(" Restore from a string")]),e._v(" "),n("p",[e._v("data = pickle.loads(s)\n讨论\n对于大多数应用程序来讲，dump() 和 load() 函数的使用就是你有效使用 pickle\n模块所需的全部了。它可适用于绝大部分 Python 数据类型和用户自定义类的对象实\n例。如果你碰到某个库可以让你在数据库中保存/恢复 Python 对象或者是通过网络传\n输对象的话，那么很有可能这个库的底层就使用了 pickle 模块。\npickle 是一种 Python 特有的自描述的数据编码。通过自描述，被序列化后的数\n据包含每个对象开始和结束以及它的类型信息。因此，你无需担心对象记录的定义，它\n总是能工作。举个例子，如果要处理多个对象，你可以这样做：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import pickle\nf = open('somedata', 'wb')\npickle.dump([1, 2, 3, 4], f)\npickle.dump('hello', f)\npickle.dump({'Apple', 'Pear', 'Banana'}, f)\nf.close()\nf = open('somedata', 'rb')\npickle.load(f)\n[1, 2, 3, 4]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("pickle.load(f)\n'hello'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("pickle.load(f)\n{'Apple', 'Pear', 'Banana'}")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你还能序列化函数，类，还有接口，但是结果数据仅仅将它们的名称编码成对应的\n代码对象。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import math\nimport pickle.\npickle.dumps(math.cos)\nb'\\x80\\x03cmath\\ncos\\nq\\x00.'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("当数据反序列化回来的时候，会先假定所有的源数据时可用的。模块、类和函数会\n自动按需导入进来。对于 Python 数据被不同机器上的解析器所共享的应用程序而言，\n数据的保存可能会有问题，因为所有的机器都必须访问同一个源代码。\n注\n千万不要对不信任的数据使用 pickle.load()。\npickle 在加载时有一个副作用就是它会自动加载相应模块并构造实例对象。\n但是某个坏人如果知道 pickle 的工作原理，\n他就可以创建一个恶意的数据导致 Python 执行随意指定的系统命令。\n因此，一定要保证 pickle 只在相互之间可以认证对方的解析器的内部使用。\n有些类型的对象是不能被序列化的。这些通常是那些依赖外部系统状态的对象，\n比如打开的文件，网络连接，线程，进程，栈帧等等。用户自定义类可以通过提供\n"),n("strong",[e._v("getstate")]),e._v("() 和 "),n("strong",[e._v("setstate")]),e._v("() 方法来绕过这些限制。如果定义了这两个方法，\npickle.dump() 就会调用 "),n("strong",[e._v("getstate")]),e._v("() 获取序列化的对象。类似的，"),n("strong",[e._v("setstate")]),e._v("()\n在反序列化时被调用。为了演示这个工作原理，下面是一个在内部定义了一个线程但仍\n然可以序列化和反序列化的类：")]),e._v(" "),n("h1",{attrs:{id:"countdown-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#countdown-py"}},[e._v("#")]),e._v(" countdown.py")]),e._v(" "),n("p",[e._v("import time\nimport threading\nclass Countdown:\ndef "),n("strong",[e._v("init")]),e._v("(self, n):\nself.n = n\nself.thr = threading.Thread(target=self.run)\nself.thr.daemon = True\nself.thr.start()\ndef run(self):\nwhile self.n > 0:\nprint('T-minus', self.n)\nself.n -= 1\ntime.sleep(5)\ndef "),n("strong",[e._v("getstate")]),e._v("(self):\nreturn self.n\ndef "),n("strong",[e._v("setstate")]),e._v("(self, n):\nself."),n("strong",[e._v("init")]),e._v("(n)\n试着运行下面的序列化试验代码：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import countdown\nc = countdown.Countdown(30)\nT-minus 30\nT-minus 29\nT-minus 28\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"after-a-few-moments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#after-a-few-moments"}},[e._v("#")]),e._v(" After a few moments")]),e._v(" "),n("p",[e._v("f = open('cstate.p', 'wb')\nimport pickle\npickle.dump(c, f)\nf.close()\n然后退出 Python 解析器并重启后再试验下：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("f = open('cstate.p', 'rb')\npickle.load(f)\ncountdown.Countdown object at 0x10069e2d0>\nT-minus 19\nT-minus 18\n...\n你可以看到线程又奇迹般的重生了，从你第一次序列化它的地方又恢复过来。\npickle 对于大型的数据结构比如使用 array 或 numpy 模块创建的二进制数组效率\n并不是一个高效的编码方式。如果你需要移动大量的数组数据，你最好是先在一个文\n件中将其保存为数组数据块或使用更高级的标准编码方式如 HDF5 (需要第三方库的支\n持)。\n由于 pickle 是 Python 特有的并且附着在源码上，所有如果需要长期存储数据的\n时候不应该选用它。例如，如果源码变动了，你所有的存储数据可能会被破坏并且变得\n不可读取。坦白来讲，对于在数据库和存档文件中存储数据时，你最好使用更加标准的\n数据编码格式如 XML，CSV 或 JSON。这些编码格式更标准，可以被不同的语言支持，\n并且也能很好的适应源码变更。\n最后一点要注意的是 pickle 有大量的配置选项和一些棘手的问题。对于最常见的\n使用场景，你不需要去担心这个，但是如果你要在一个重要的程序中使用 pickle 去做\n序列化的话，最好去查阅一下 官方文档 。")])])])]),e._v(" "),n("h2",{attrs:{id:"第六章-数据编码和处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第六章-数据编码和处理"}},[e._v("#")]),e._v(" 第六章：数据编码和处理")]),e._v(" "),n("p",[e._v('这一章主要讨论使用 Python 处理各种不同方式编码的数据，比如 CSV 文件，\nJSON，XML 和二进制包装记录。和数据结构那一章不同的是，这章不会讨论特殊的算\n法问题，而是关注于怎样获取和存储这些格式的数据。\n6.1 读写 CSV 数据\n问题\n你想读写一个 CSV 格式的文件。\n解决方案\n对于大多数的 CSV 格式的数据读写问题，都可以使用 csv 库。例如：假设你在一\n个名叫 stocks.csv 文件中有一些股票市场数据，就像这样：\nSymbol,Price,Date,Time,Change,Volume\n"AA",39.48,"6/11/2007","9:36am",-0.18,181800\n"AIG",71.38,"6/11/2007","9:36am",-0.15,195500\n"AXP",62.58,"6/11/2007","9:36am",-0.46,935000\n"BA",98.31,"6/11/2007","9:36am",+0.12,104800\n"C",53.08,"6/11/2007","9:36am",-0.25,360900\n"CAT",78.29,"6/11/2007","9:36am",-0.23,225400\n下面向你展示如何将这些数据读取为一个元组的序列：\nimport csv\nwith open(\'stocks.csv\') as f:\nf_csv = csv.reader(f)\nheaders = next(f_csv)\nfor row in f_csv:')]),e._v(" "),n("h1",{attrs:{id:"process-row"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-row"}},[e._v("#")]),e._v(" Process row")]),e._v(" "),n("p",[e._v("...\n在上面的代码中，row 会是一个列表。因此，为了访问某个字段，你需要使用下标，\n如 row[0] 访问 Symbol，row[4] 访问 Change。\n由于这种下标访问通常会引起混淆，你可以考虑使用命名元组。例如：\nfrom collections import namedtuple\nwith open('stock.csv') as f:\nf_csv = csv.reader(f)\nheadings = next(f_csv)\nRow = namedtuple('Row', headings)\nfor r in f_csv:\nrow = Row(*r)")]),e._v(" "),n("h1",{attrs:{id:"process-row-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-row-2"}},[e._v("#")]),e._v(" Process row")]),e._v(" "),n("p",[e._v("...\n它允许你使用列名如 row.Symbol 和 row.Change 代替下标访问。需要注意的是这\n个只有在列名是合法的 Python 标识符的时候才生效。如果不是的话，你可能需要修改\n下原始的列名 (如将非标识符字符替换成下划线之类的)。\n另外一个选择就是将数据读取到一个字典序列中去。可以这样做：\nimport csv\nwith open('stocks.csv') as f:\nf_csv = csv.DictReader(f)\nfor row in f_csv:")]),e._v(" "),n("h1",{attrs:{id:"process-row-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-row-3"}},[e._v("#")]),e._v(" process row")]),e._v(" "),n("p",[e._v("...\n在这个版本中，你可以使用列名去访问每一行的数据了。比如，row['Symbol'] 或 者 row['Change']\n为了写入 CSV 数据，你仍然可以使用 csv 模块，不过这时候先创建一个 writer\n对象。例如:\nheaders = ['Symbol','Price','Date','Time','Change','Volume']\nrows = [('AA', 39.48, '6/11/2007', '9:36am', -0.18, 181800),\n('AIG', 71.38, '6/11/2007', '9:36am', -0.15, 195500),\n('AXP', 62.58, '6/11/2007', '9:36am', -0.46, 935000),\n]\nwith open('stocks.csv','w') as f:\nf_csv = csv.writer(f)\nf_csv.writerow(headers)\nf_csv.writerows(rows)\n如果你有一个字典序列的数据，可以像这样做：\nheaders = ['Symbol', 'Price', 'Date', 'Time', 'Change', 'Volume']\nrows = [{'Symbol':'AA', 'Price':39.48, 'Date':'6/11/2007', 'Time':'9:36am', 'Change':-0.18, 'Volume':181800},\n{'Symbol':'AIG', 'Price': 71.38, 'Date':'6/11/2007', 'Time':'9:36am', 'Change':-0.15, 'Volume': 195500},\n{'Symbol':'AXP', 'Price': 62.58, 'Date':'6/11/2007', 'Time':'9:36am', 'Change':-0.46, 'Volume': 935000},\n]\nwith open('stocks.csv','w') as f:\nf_csv = csv.DictWriter(f, headers)\nf_csv.writeheader()\nf_csv.writerows(rows)\n讨论\n你应该总是优先选择 csv 模块分割或解析 CSV 数据。例如，你可能会像编写类似\n下面这样的代码：\nwith open('stocks.csv') as f:\nfor line in f:\nrow = line.split(',')")]),e._v(" "),n("h1",{attrs:{id:"process-row-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-row-4"}},[e._v("#")]),e._v(" process row")]),e._v(" "),n("p",[e._v("...\n使用这种方式的一个缺点就是你仍然需要去处理一些棘手的细节问题。比如，如果\n某些字段值被引号包围，你不得不去除这些引号。另外，如果一个被引号包围的字段碰\n巧含有一个逗号，那么程序就会因为产生一个错误大小的行而出错。\n默认情况下，csv 库可识别 Microsoft Excel 所使用的 CSV 编码规则。这或许也是\n最常见的形式，并且也会给你带来最好的兼容性。然而，如果你查看 csv 的文档，就会\n发现有很多种方法将它应用到其他编码格式上 (如修改分割字符等)。例如，如果你想\n读取以 tab 分割的数据，可以这样做：")]),e._v(" "),n("h1",{attrs:{id:"example-of-reading-tab-separated-values"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-of-reading-tab-separated-values"}},[e._v("#")]),e._v(" Example of reading tab-separated values")]),e._v(" "),n("p",[e._v("with open('stock.tsv') as f:\nf_tsv = csv.reader(f, delimiter='\\t')\nfor row in f_tsv:")]),e._v(" "),n("h1",{attrs:{id:"process-row-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-row-5"}},[e._v("#")]),e._v(" Process row")]),e._v(" "),n("p",[e._v("...\n如果你正在读取 CSV 数据并将它们转换为命名元组，需要注意对列名进行合法性\n认证。例如，一个 CSV 格式文件有一个包含非法标识符的列头行，类似下面这样：\nStreet Address,Num-Premises,Latitude,Longitude 5412 N CLARK,10,41.980262,-87.\n,\n→668452\n这样最终会导致在创建一个命名元组时产生一个 ValueError 异常而失败。为了解\n决这问题，你可能不得不先去修正列标题。例如，可以像下面这样在非法标识符上使用\n一个正则表达式替换：\nimport re\nwith open('stock.csv') as f:\nf_csv = csv.reader(f)\nheaders = [ re.sub('[^a-zA-Z_]', '_', h) for h in next(f_csv) ]\nRow = namedtuple('Row', headers)\nfor r in f_csv:\nrow = Row(*r)")]),e._v(" "),n("h1",{attrs:{id:"process-row-6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-row-6"}},[e._v("#")]),e._v(" Process row")]),e._v(" "),n("p",[e._v("...\n还有重要的一点需要强调的是，csv 产生的数据都是字符串类型的，它不会做任何\n其他类型的转换。如果你需要做这样的类型转换，你必须自己手动去实现。下面是一个\n在 CSV 数据上执行其他类型转换的例子：\ncol_types = [str, float, str, str, float, int]\nwith open('stocks.csv') as f:\nf_csv = csv.reader(f)\nheaders = next(f_csv)\nfor row in f_csv:")]),e._v(" "),n("h1",{attrs:{id:"apply-conversions-to-the-row-items"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#apply-conversions-to-the-row-items"}},[e._v("#")]),e._v(" Apply conversions to the row items")]),e._v(" "),n("p",[e._v("row = tuple(convert(value) for convert, value in zip(col_types, row))\n...\n另外，下面是一个转换字典中特定字段的例子：\nprint('Reading as dicts with type conversion')\nfield_types = [ ('Price', float),\n('Change', float),\n('Volume', int) ]\nwith open('stocks.csv') as f:\nfor row in csv.DictReader(f):\nrow.update((key, conversion(row[key]))\nfor key, conversion in field_types)\nprint(row)\n通常来讲，你可能并不想过多去考虑这些转换问题。在实际情况中，CSV 文件都\n或多或少有些缺失的数据，被破坏的数据以及其它一些让转换失败的问题。因此，除非\n你的数据确实有保障是准确无误的，否则你必须考虑这些问题 (你可能需要增加合适的\n错误处理机制)。\n最后，如果你读取 CSV 数据的目的是做数据分析和统计的话，你可能需要看一看\nPandas 包。Pandas 包含了一个非常方便的函数叫 pandas.read_csv() ，它可以加载\nCSV 数据到一个 DataFrame 对象中去。然后利用这个对象你就可以生成各种形式的统\n计、过滤数据以及执行其他高级操作了。在 6.13 小节中会有这样一个例子。\n6.2 读写 JSON 数据\n问题\n你想读写 JSON(JavaScript Object Notation) 编码格式的数据。\n解决方案\njson 模块提供了一种很简单的方式来编码和解码 JSON 数据。其中两个主要的函\n数是 json.dumps() 和 json.loads() ，要比其他序列化函数库如 pickle 的接口少得多。\n下面演示如何将一个 Python 数据结构转换为 JSON：\nimport json\ndata = { 'name' : 'ACME',\n'shares' : 100, 'price' : 542.23\n}\njson_str = json.dumps(data)\n下面演示如何将一个 JSON 编码的字符串转换回一个 Python 数据结构：\ndata = json.loads(json_str)\n如果你要处理的是文件而不是字符串，你可以使用 json.dump() 和 json.load()\n来编码和解码 JSON 数据。例如：")]),e._v(" "),n("h1",{attrs:{id:"writing-json-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#writing-json-data"}},[e._v("#")]),e._v(" Writing JSON data")]),e._v(" "),n("p",[e._v("with open('data.json', 'w') as f:\njson.dump(data, f)")]),e._v(" "),n("h1",{attrs:{id:"reading-data-back"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reading-data-back"}},[e._v("#")]),e._v(" Reading data back")]),e._v(" "),n("p",[e._v("with open('data.json', 'r') as f:\ndata = json.load(f)\n讨论\nJSON 编码支持的基本数据类型为 None ，bool ，int ，float 和 str ，以及包含\n这些类型数据的 lists，tuples 和 dictionaries。对于 dictionaries，keys 需要是字符串类\n型 (字典中任何非字符串类型的 key 在编码时会先转换为字符串)。为了遵循 JSON 规\n范，你应该只编码 Python 的 lists 和 dictionaries。而且，在 web 应用程序中，顶层对\n象被编码为一个字典是一个标准做法。\nJSON 编码的格式对于 Python 语法而已几乎是完全一样的，除了一些小的差异之\n外。比如，True 会被映射为 true，False 被映射为 false，而 None 会被映射为 null。下\n面是一个例子，演示了编码后的字符串效果：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("json.dumps(False)\n'false'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("d = {'a': True,\n... 'b': 'Hello',\n... 'c': None}")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('json.dumps(d)\n\'{"b": "Hello", "c": null, "a": true}\'')])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你试着去检查 JSON 解码后的数据，你通常很难通过简单的打印来确定它\n的结构，特别是当数据的嵌套结构层次很深或者包含大量的字段时。为了解决这个问\n题，可以考虑使用 pprint 模块的 pprint() 函数来代替普通的 print() 函数。它会按\n照 key 的字母顺序并以一种更加美观的方式输出。下面是一个演示如何漂亮的打印输\n出 Twitter 上搜索结果的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from urllib.request import urlopen\nimport json\nu = urlopen('http://search.twitter.com/search.json?q=python&rpp=5')\nresp = json.loads(u.read().decode('utf-8'))\nfrom pprint import pprint\npprint(resp)\n{'completed_in': 0.074,\n'max_id': 264043230692245504,\n'max_id_str': '264043230692245504',\n'next_page': '?page=2&max_id=264043230692245504&q=python&rpp=5',\n'page': 1,\n'query': 'python',\n'refresh_url': '?since_id=264043230692245504&q=python',\n'results': [{'created_at': 'Thu, 01 Nov 2012 16:36:26 +0000',\n'from_user': ...\n},\n{'created_at': 'Thu, 01 Nov 2012 16:36:14 +0000',\n'from_user': ...\n},\n{'created_at': 'Thu, 01 Nov 2012 16:36:13 +0000',\n'from_user': ...\n},\n{'created_at': 'Thu, 01 Nov 2012 16:36:07 +0000',\n'from_user': ...\n}\n{'created_at': 'Thu, 01 Nov 2012 16:36:04 +0000',\n'from_user': ...\n}],\n'results_per_page': 5,\n'since_id': 0,\n'since_id_str': '0'}")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一般来讲，JSON 解码会根据提供的数据创建 dicts 或 lists。如果你想要创建其他\n类型的对象，可以给 json.loads() 传递 object_pairs_hook 或 object_hook 参数。例\n如，下面是演示如何解码 JSON 数据并在一个 OrderedDict 中保留其顺序的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = '{\"name\": \"ACME\", \"shares\": 50, \"price\": 490.1}'\nfrom collections import OrderedDict\ndata = json.loads(s, object_pairs_hook=OrderedDict)\ndata\nOrderedDict([('name', 'ACME'), ('shares', 50), ('price', 490.1)])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("下面是如何将一个 JSON 字典转换为一个 Python 对象例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("class JSONObject:\n... def "),n("strong",[e._v("init")]),e._v("(self, d):\n... self."),n("strong",[e._v("dict")]),e._v(" = d\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("data = json.loads(s, object_hook=JSONObject)\ndata.name\n'ACME'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("data.shares\n50")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("data.price\n490.1")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后一个例子中，JSON 解码后的字典作为一个单个参数传递给 "),n("strong",[e._v("init")]),e._v("() 。然\n后，你就可以随心所欲的使用它了，比如作为一个实例字典来直接使用它。\n在编码 JSON 的时候，还有一些选项很有用。如果你想获得漂亮的格式化字符串\n后输出，可以使用 json.dumps() 的 indent 参数。它会使得输出和 pprint() 函数效果\n类似。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('print(json.dumps(data))\n{"price": 542.23, "name": "ACME", "shares": 100}')])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('print(json.dumps(data, indent=4))\n{\n"price": 542.23,\n"name": "ACME",\n"shares": 100\n}')])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对象实例通常并不是 JSON 可序列化的。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("class Point:\n... def "),n("strong",[e._v("init")]),e._v("(self, x, y):\n... self.x = x\n... self.y = y\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('p = Point(2, 3)\njson.dumps(p)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "/usr/local/lib/python3.3/json/'),n("strong",[e._v("init")]),e._v('.py", line 226, in dumps\nreturn _default_encoder.encode(obj)\nFile "/usr/local/lib/python3.3/json/encoder.py", line 187, in encode\nchunks = self.iterencode(o, _one_shot=True)\nFile "/usr/local/lib/python3.3/json/encoder.py", line 245, in iterencode\nreturn _iterencode(o, 0)\nFile "/usr/local/lib/python3.3/json/encoder.py", line 169, in default\nraise TypeError(repr(o) + " is not JSON serializable")\nTypeError: <'),n("strong",[e._v("main")]),e._v(".Point object at 0x1006f2650> is not JSON serializable")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想序列化对象实例，你可以提供一个函数，它的输入是一个实例，返回一个\n可序列化的字典。例如：\ndef serialize_instance(obj):\nd = { '"),n("strong",[e._v("classname")]),e._v("' : type(obj)."),n("strong",[e._v("name")]),e._v(" } d.update(vars(obj))\nreturn d\n如果你想反过来获取这个实例，可以这样做：")]),e._v(" "),n("h1",{attrs:{id:"dictionary-mapping-names-to-known-classes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dictionary-mapping-names-to-known-classes"}},[e._v("#")]),e._v(" Dictionary mapping names to known classes")]),e._v(" "),n("p",[e._v("classes = { 'Point' : Point\n}\ndef unserialize_object(d):\nclsname = d.pop('"),n("strong",[e._v("classname")]),e._v("', None)\nif clsname:\ncls = classes[clsname]\nobj = cls."),n("strong",[e._v("new")]),e._v("(cls) # Make instance without calling "),n("strong",[e._v("init")]),e._v("\nfor key, value in d.items():\nsetattr(obj, key, value)\nreturn obj\nelse:\nreturn d\n下面是如何使用这些函数的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("p = Point(2,3)\ns = json.dumps(p, default=serialize_instance)\ns\n'{\""),n("strong",[e._v("classname")]),e._v('": "Point", "y": 3, "x": 2}\'')])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a = json.loads(s, object_hook=unserialize_object)\na\n<"),n("strong",[e._v("main")]),e._v(".Point object at 0x1017577d0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a.x 2\na.y 3")])])])]),e._v(" "),n("p",[e._v("json 模块还有很多其他选项来控制更低级别的数字、特殊值如 NaN 等的解析。可\n以参考官方文档获取更多细节。\n6.3 解析简单的 XML 数据\n问题\n你想从一个简单的 XML 文档中提取数据。\n解决方案\n可以使用 xml.etree.ElementTree 模块从简单的 XML 文档中提取数据。为了演\n示，假设你想解析 Planet Python 上的 RSS 源。下面是相应的代码：\nfrom urllib.request import urlopen\nfrom xml.etree.ElementTree import parse")]),e._v(" "),n("h1",{attrs:{id:"download-the-rss-feed-and-parse-it"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#download-the-rss-feed-and-parse-it"}},[e._v("#")]),e._v(" Download the RSS feed and parse it")]),e._v(" "),n("p",[e._v("u = urlopen('http://planet.python.org/rss20.xml')\ndoc = parse(u)")]),e._v(" "),n("h1",{attrs:{id:"extract-and-output-tags-of-interest"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#extract-and-output-tags-of-interest"}},[e._v("#")]),e._v(" Extract and output tags of interest")]),e._v(" "),n("p",[e._v("for item in doc.iterfind('channel/item'):\ntitle = item.findtext('title')\ndate = item.findtext('pubDate')\nlink = item.findtext('link')\nprint(title)\nprint(date)\nprint(link)\nprint()\n运行上面的代码，输出结果类似这样：\nSteve Holden: Python for Data Analysis\nMon, 19 Nov 2012 02:13:51 +0000\nhttp://holdenweb.blogspot.com/2012/11/python-for-data-analysis.html\nVasudev Ram: The Python Data model (for v2 and v3)\nSun, 18 Nov 2012 22:06:47 +0000\nhttp://jugad2.blogspot.com/2012/11/the-python-data-model.html\nPython Diary: Been playing around with Object Databases\nSun, 18 Nov 2012 20:40:29 +0000\nhttp://www.pythondiary.com/blog/Nov.18,2012/been-...-object-databases.html\nVasudev Ram: Wakari, Scientific Python in the cloud\nSun, 18 Nov 2012 20:19:41 +0000\nhttp://jugad2.blogspot.com/2012/11/wakari-scientific-python-in-cloud.html\nJesse Jiryu Davis: Toro: synchronization primitives for Tornado coroutines\nSun, 18 Nov 2012 20:17:49 +0000\nhttp://feedproxy.google.com/~r/EmptysquarePython/~3/_DOZT2Kd0hQ/\n很显然，如果你想做进一步的处理，你需要替换 print() 语句来完成其他有趣的\n事。\n讨论\n在很多应用程序中处理 XML 编码格式的数据是很常见的。不仅因为 XML 在\nInternet 上面已经被广泛应用于数据交换，同时它也是一种存储应用程序数据的常用格\n式 (比如字处理，音乐库等)。接下来的讨论会先假定读者已经对 XML 基础比较熟悉了。\n在很多情况下，当使用 XML 来仅仅存储数据的时候，对应的文档结构非常紧凑并\n且直观。例如，上面例子中的 RSS 订阅源类似于下面的格式：\n<?xml version=\"1.0\"?>\n"),n("rss",{attrs:{version:"2.0","xmlns:dc":"http://purl.org/dc/elements/1.1/"}},[n("channel",[n("title",[e._v("Planet Python")]),e._v(" "),n("link"),e._v("http://planet.python.org/"),e._v(" "),n("language",[e._v("en")]),e._v(" "),n("description",[e._v("Planet Python - http://planet.python.org/")]),e._v(" "),n("item",[n("title",[e._v("Steve Holden: Python for Data Analysis")]),e._v(" "),n("guid",[e._v("http://holdenweb.blogspot.com/...-data-analysis.html")]),e._v(" "),n("link"),e._v("http://holdenweb.blogspot.com/...-data-analysis.html"),e._v(" "),n("description",[e._v("...")]),e._v(" "),n("pubDate",[e._v("Mon, 19 Nov 2012 02:13:51 +0000")])],1),e._v(" "),n("item",[n("title",[e._v("Vasudev Ram: The Python Data model (for v2 and v3)")]),e._v(" "),n("guid",[e._v("http://jugad2.blogspot.com/...-data-model.html")]),e._v(" "),n("link"),e._v("http://jugad2.blogspot.com/...-data-model.html"),e._v(" "),n("description",[e._v("...")]),e._v(" "),n("pubDate",[e._v("Sun, 18 Nov 2012 22:06:47 +0000")])],1),e._v(" "),n("item",[n("title",[e._v("Python Diary: Been playing around with Object Databases</\n,\n→title>\n"),n("guid",[e._v("http://www.pythondiary.com/...-object-databases.html")]),e._v(" "),n("link"),e._v("http://www.pythondiary.com/...-object-databases.html"),e._v(" "),n("description",[e._v("...")]),e._v(" "),n("pubDate",[e._v("Sun, 18 Nov 2012 20:40:29 +0000")])],1)]),e._v("\n...\n")],1)],1),e._v("\nxml.etree.ElementTree.parse() 函数解析整个 XML 文档并将其转换成一个文\n档对象。然后，你就能使用 find() 、iterfind() 和 findtext() 等方法来搜索特定的\nXML 元素了。这些函数的参数就是某个指定的标签名，例如 channel/item 或 title 。\n每次指定某个标签时，你需要遍历整个文档结构。每次搜索操作会从一个起始元\n素开始进行。同样，每次操作所指定的标签名也是起始元素的相对路径。例如，执行\ndoc.iterfind('channel/item') 来搜索所有在 channel 元素下面的 item 元素。doc\n代表文档的最顶层 (也就是第一级的 rss 元素)。然后接下来的调用 item.findtext()\n会从已找到的 item 元素位置开始搜索。\nElementTree 模块中的每个元素有一些重要的属性和方法，在解析的时候非常有\n用。tag 属性包含了标签的名字，text 属性包含了内部的文本，而 get() 方法能获取\n属性值。例如：")],1),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("doc\n<xml.etree.ElementTree.ElementTree object at 0x101339510>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("e = doc.find('channel/title')\ne\n<Element 'title' at 0x10135b310>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("e.tag\n'title'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("e.text\n'Planet Python'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("e.get('some_attribute')")])])])]),e._v(" "),n("p",[e._v("有一点要强调的是 xml.etree.ElementTree 并不是 XML 解析的唯一方法。对于\n更高级的应用程序，你需要考虑使用 lxml 。它使用了和 ElementTree 同样的编程接\n口，因此上面的例子同样也适用于 lxml。你只需要将刚开始的 import 语句换成 from\nlxml.etree import parse 就行了。lxml 完全遵循 XML 标准，并且速度也非常快，同\n时还支持验证，XSLT，和 XPath 等特性。\n6.4 增量式解析大型 XML 文件\n问题\n你想使用尽可能少的内存从一个超大的 XML 文档中提取数据。\n解决方案\n任何时候只要你遇到增量式的数据处理时，第一时间就应该想到迭代器和生成器。\n下面是一个很简单的函数，只使用很少的内存就能增量式的处理一个大型 XML 文件：\nfrom xml.etree.ElementTree import iterparse\ndef parse_and_remove(filename, path):\npath_parts = path.split('/')\ndoc = iterparse(filename, ('start', 'end'))")]),e._v(" "),n("h1",{attrs:{id:"skip-the-root-element"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#skip-the-root-element"}},[e._v("#")]),e._v(" Skip the root element")]),e._v(" "),n("p",[e._v("next(doc)\ntag_stack = []\nelem_stack = []\nfor event, elem in doc:\nif event == 'start':\ntag_stack.append(elem.tag)\nelem_stack.append(elem)\nelif event == 'end':\nif tag_stack == path_parts:\nyield elem\nelem_stack[-2].remove(elem)\ntry:\ntag_stack.pop()\nelem_stack.pop()\nexcept IndexError:\npass\n为了测试这个函数，你需要先有一个大型的 XML 文件。通常你可以在政府网站或\n公共数据网站上找到这样的文件。例如，你可以下载 XML 格式的芝加哥城市道路坑洼\n数据库。在写这本书的时候，下载文件已经包含超过 100,000 行数据，编码格式类似于\n下面这样：\n"),n("response",[n("row",[e._v("\n<row ...>\n<creation_date>2012-11-18T00:00:00</creation_date>\n"),n("status",[e._v("Completed")]),e._v("\n<completion_date>2012-11-18T00:00:00</completion_date>\n<service_request_number>12-01906549</service_request_number>\n<type_of_service_request>Pot Hole in Street</type_of_service_\n,\n→request>\n<current_activity>Final Outcome</current_activity>\n<most_recent_action>CDOT Street Cut ... Outcome</most_recent_\n,\n→action>\n<street_address>4714 S TALMAN AVE</street_address>\n"),n("zip",[e._v("60632")]),e._v("\n<x_coordinate>1159494.68618856</x_coordinate>\n<y_coordinate>1873313.83503384</y_coordinate>\n"),n("ward",[e._v("14")]),e._v("\n<police_district>9</police_district>\n<community_area>58</community_area>\n"),n("latitude",[e._v("41.808090232127896")]),e._v(" "),n("longitude",[e._v("-87.69053684711305")]),e._v(" "),n("location",{attrs:{latitude:"41.808090232127896",longitude:"-87.69053684711305"}})],1),e._v("\n<row ...>\n<creation_date>2012-11-18T00:00:00</creation_date>\n"),n("status",[e._v("Completed")]),e._v("\n<completion_date>2012-11-18T00:00:00</completion_date>\n<service_request_number>12-01906695</service_request_number>\n<type_of_service_request>Pot Hole in Street</type_of_service_\n,\n→request>\n<current_activity>Final Outcome</current_activity>\n<most_recent_action>CDOT Street Cut ... Outcome</most_recent_\n,\n→action>\n<street_address>3510 W NORTH AVE</street_address>\n"),n("zip",[e._v("60647")]),e._v("\n<x_coordinate>1152732.14127696</x_coordinate>\n<y_coordinate>1910409.38979075</y_coordinate>\n"),n("ward",[e._v("26")]),e._v("\n<police_district>14</police_district>\n<community_area>23</community_area>\n"),n("latitude",[e._v("41.91002084292946")]),e._v(" "),n("longitude",[e._v("-87.71435952353961")]),e._v(" "),n("location",{attrs:{latitude:"41.91002084292946",longitude:"-87.71435952353961"}})],1),e._v("\n假设你想写一个脚本来按照坑洼报告数量排列邮编号码。你可以像这样做：\nfrom xml.etree.ElementTree import parse\nfrom collections import Counter\npotholes_by_zip = Counter()\ndoc = parse('potholes.xml')\nfor pothole in doc.iterfind('row/row'):\npotholes_by_zip[pothole.findtext('zip')] += 1\nfor zipcode, num in potholes_by_zip.most_common():\nprint(zipcode, num)\n这个脚本唯一的问题是它会先将整个 XML 文件加载到内存中然后解析。在我的机\n器上，为了运行这个程序需要用到 450MB 左右的内存空间。如果使用如下代码，程序\n只需要修改一点点：\nfrom collections import Counter\npotholes_by_zip = Counter()\ndata = parse_and_remove('potholes.xml', 'row/row')\nfor pothole in data:\npotholes_by_zip[pothole.findtext('zip')] += 1\nfor zipcode, num in potholes_by_zip.most_common():\nprint(zipcode, num)\n结果是：这个版本的代码运行时只需要 7MB 的内存–大大节约了内存资源。\n讨论\n这一节的技术会依赖 ElementTree 模块中的两个核心功能。第一，iterparse() 方\n法允许对 XML 文档进行增量操作。使用时，你需要提供文件名和一个包含下面一种或\n多种类型的事件列表：start , end, start-ns 和 end-ns 。由 iterparse() 创建的迭\n代器会产生形如 (event, elem) 的元组，其中 event 是上述事件列表中的某一个，而\nelem 是相应的 XML 元素。例如：")],1),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("data = iterparse('potholes.xml',('start','end'))\nnext(data)\n('start', <Element 'response' at 0x100771d60>)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("next(data)\n('start', <Element 'row' at 0x100771e68>)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("next(data)\n('start', <Element 'row' at 0x100771fc8>)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("next(data)\n('start', <Element 'creation_date' at 0x100771f18>)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("next(data)\n('end', <Element 'creation_date' at 0x100771f18>)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("next(data)\n('start', <Element 'status' at 0x1006a7f18>)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("next(data)\n('end', <Element 'status' at 0x1006a7f18>)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("start 事件在某个元素第一次被创建并且还没有被插入其他数据 (如子元素) 时被\n创建。而 end 事件在某个元素已经完成时被创建。尽管没有在例子中演示，start-ns\n和 end-ns 事件被用来处理 XML 文档命名空间的声明。\n这本节例子中，start 和 end 事件被用来管理元素和标签栈。栈代表了文档被解\n析时的层次结构，还被用来判断某个元素是否匹配传给函数 parse_and_remove() 的路\n径。如果匹配，就利用 yield 语句向调用者返回这个元素。\n在 yield 之后的下面这个语句才是使得程序占用极少内存的 ElementTree 的核心\n特性：\nelem_stack[-2].remove(elem)\n这个语句使得之前由 yield 产生的元素从它的父节点中删除掉。假设已经没有其\n它的地方引用这个元素了，那么这个元素就被销毁并回收内存。\n对节点的迭代式解析和删除的最终效果就是一个在文档上高效的增量式清扫过程。\n文档树结构从始自终没被完整的创建过。尽管如此，还是能通过上述简单的方式来处理\n这个 XML 数据。\n这种方案的主要缺陷就是它的运行性能了。我自己测试的结果是，读取整个文档到\n内存中的版本的运行速度差不多是增量式处理版本的两倍快。但是它却使用了超过后\n者 60 倍的内存。因此，如果你更关心内存使用量的话，那么增量式的版本完胜。\n6.5 将字典转换为 XML\n问题\n你想使用一个 Python 字典存储数据，并将它转换成 XML 格式。\n解决方案\n尽管 xml.etree.ElementTree 库通常用来做解析工作，其实它也可以创建 XML\n文档。例如，考虑如下这个函数：\nfrom xml.etree.ElementTree import Element\ndef dict_to_xml(tag, d):\n'''\nTurn a simple dict of key/value pairs into XML\n'''\nelem = Element(tag)\nfor key, val in d.items():\nchild = Element(key)\nchild.text = str(val)\nelem.append(child)\nreturn elem\n下面是一个使用例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = { 'name': 'GOOG', 'shares': 100, 'price':490.1 }\ne = dict_to_xml('stock', s)\ne\n<Element 'stock' at 0x1004b64c8>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("转换结果是一个 Element 实例。对于 I/O 操作，使用 xml.etree.ElementTree 中 的 tostring() 函数很容易就能将它转换成一个字节字符串。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from xml.etree.ElementTree import tostring\ntostring(e)\nb'"),n("stock",[n("price",[e._v("490.1")]),n("shares",[e._v("100")]),n("name",[e._v("GOOG")])],1),e._v("'")],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想给某个元素添加属性值，可以使用 set() 方法：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("e.set('_id','1234')\ntostring(e)\nb'"),n("stock",{attrs:{_id:"1234"}},[n("price",[e._v("490.1")]),n("shares",[e._v("100")]),n("name",[e._v("GOOG")])],1),e._v("'")],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你还想保持元素的顺序，可以考虑构造一个 OrderedDict 来代替一个普通的\n字典。请参考 1.7 小节。\n讨论\n当创建 XML 的时候，你被限制只能构造字符串类型的值。例如：\ndef dict_to_xml_str(tag, d):\n'''\nTurn a simple dict of key/value pairs into XML\n'''\nparts = ['<{}>'.format(tag)]\nfor key, val in d.items():\nparts.append('<{0}>{1}</{0}>'.format(key,val))\nparts.append('</{}>'.format(tag))\nreturn ''.join(parts)\n问题是如果你手动的去构造的时候可能会碰到一些麻烦。例如，当字典的值中包含\n一些特殊字符的时候会怎样呢？")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("d = { 'name' : '"),n("spam",[e._v("' }")])],1),e._v(" "),n("h1",{attrs:{id:"string-creation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string-creation"}},[e._v("#")]),e._v(" String creation")]),e._v(" "),n("p",[e._v("dict_to_xml_str('item',d)\n'"),n("item",[n("name",[n("spam")],1)],1),e._v("'")],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"proper-xml-creation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proper-xml-creation"}},[e._v("#")]),e._v(" Proper XML creation")]),e._v(" "),n("p",[e._v("e = dict_to_xml('item',d)\ntostring(e)\nb'"),n("item",[n("name",[e._v("<spam>")])],1),e._v("'")],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("注意到程序的后面那个例子中，字符‘<’和‘>’被替换成了 < 和 >\n下面仅供参考，如果你需要手动去转换这些字符，可以使用 xml.sax.saxutils 中 的 escape() 和 unescape() 函数。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from xml.sax.saxutils import escape, unescape\nescape('"),n("spam",[e._v("')\n'<spam>'")])],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("unescape(_)\n'"),n("spam",[e._v("'")])],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('除了能创建正确的输出外，还有另外一个原因推荐你创建 Element 实例而不是字\n符串，那就是使用字符串组合构造一个更大的文档并不是那么容易。而 Element 实例\n可以不用考虑解析 XML 文本的情况下通过多种方式被处理。也就是说，你可以在一个\n高级数据结构上完成你所有的操作，并在最后以字符串的形式将其输出。\n6.6 解析和修改 XML\n问题\n你想读取一个 XML 文档，对它最一些修改，然后将结果写回 XML 文档。\n解决方案\n使用 xml.etree.ElementTree 模块可以很容易的处理这些任务。第一步是以通常\n的方式来解析这个文档。例如，假设你有一个名为 pred.xml 的文档，类似下面这样：\n<?xml version="1.0"?>\n'),n("stop",[n("id",[e._v("14791")]),e._v(" "),n("nm",[e._v("Clark & Balmoral")]),e._v(" "),n("sri",[n("rt",[e._v("22")]),e._v(" "),n("d",[e._v("North Bound")]),e._v(" "),n("dd",[e._v("North Bound")])],1),e._v(" "),n("cr",[e._v("22")]),e._v(" "),n("pre",[n("pt",[e._v("5 MIN")]),e._v("\n"),n("fd",[e._v("Howard")]),e._v("\n"),n("v",[e._v("1378")]),e._v("\n"),n("rn",[e._v("22")]),e._v("\n")],1),e._v(" "),n("pre",[n("pt",[e._v("15 MIN")]),e._v("\n"),n("fd",[e._v("Howard")]),e._v("\n"),n("v",[e._v("1867")]),e._v("\n"),n("rn",[e._v("22")]),e._v("\n")],1)],1),e._v("\n下面是一个利用 ElementTree 来读取这个文档并对它做一些修改的例子：")],1),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from xml.etree.ElementTree import parse, Element\ndoc = parse('pred.xml')\nroot = doc.getroot()\nroot\n<Element 'stop' at 0x100770cb0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"remove-a-few-elements"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#remove-a-few-elements"}},[e._v("#")]),e._v(" Remove a few elements")]),e._v(" "),n("p",[e._v("root.remove(root.find('sri'))\nroot.remove(root.find('cr'))")]),e._v(" "),n("h1",{attrs:{id:"insert-a-new-element-after"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#insert-a-new-element-after"}},[e._v("#")]),e._v(" Insert a new element after "),n("nm",[e._v("...")])],1),e._v(" "),n("p",[e._v("root.getchildren().index(root.find('nm'))\n1")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("e = Element('spam')\ne.text = 'This is a test'\nroot.insert(2, e)")]),e._v(" "),n("h1",{attrs:{id:"write-back-to-a-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#write-back-to-a-file"}},[e._v("#")]),e._v(" Write back to a file")]),e._v(" "),n("p",[e._v("doc.write('newpred.xml', xml_declaration=True)")])])])]),e._v(" "),n("p",[e._v("处理结果是一个像下面这样新的 XML 文件：\n<?xml version='1.0' encoding='us-ascii'?>\n"),n("stop",[n("id",[e._v("14791")]),e._v(" "),n("nm",[e._v("Clark & Balmoral")]),e._v(" "),n("spam",[e._v("This is a test")]),e._v(" "),n("pre",[n("pt",[e._v("5 MIN")]),e._v("\n"),n("fd",[e._v("Howard")]),e._v("\n"),n("v",[e._v("1378")]),e._v("\n"),n("rn",[e._v("22")]),e._v("\n")],1),e._v(" "),n("pre",[n("pt",[e._v("15 MIN")]),e._v("\n"),n("fd",[e._v("Howard")]),e._v("\n"),n("v",[e._v("1867")]),e._v("\n"),n("rn",[e._v("22")]),e._v("\n")],1)],1),e._v('\n讨论\n修改一个 XML 文档结构是很容易的，但是你必须牢记的是所有的修改都是针对\n父节点元素，将它作为一个列表来处理。例如，如果你删除某个元素，通过调用父节\n点的 remove() 方法从它的直接父节点中删除。如果你插入或增加新的元素，你同样使\n用父节点元素的 insert() 和 append() 方法。还能对元素使用索引和切片操作，比如\nelement[i] 或 element[i:j]\n如果你需要创建新的元素，可以使用本节方案中演示的 Element 类。我们在 6.5 小\n节已经详细讨论过了。\n6.7 利用命名空间解析 XML 文档\n问题\n你想解析某个 XML 文档，文档中使用了 XML 命名空间。\n解决方案\n考虑下面这个使用了命名空间的文档：\n<?xml version="1.0" encoding="utf-8"?>\n'),n("top",[n("author",[e._v("David Beazley")]),e._v(" "),n("content",[n("html",{attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[n("head",[n("title",[e._v("Hello World")])]),e._v(" "),n("body",[n("h1",[e._v("Hello World!")])])])])],1),e._v("\n如果你解析这个文档并执行普通的查询，你会发现这个并不是那么容易，因为所有\n步骤都变得相当的繁琐。")],1),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"some-queries-that-work"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#some-queries-that-work"}},[e._v("#")]),e._v(" Some queries that work")]),e._v(" "),n("p",[e._v("doc.findtext('author')\n'David Beazley'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("doc.find('content')\n<Element 'content' at 0x100776ec0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"a-query-involving-a-namespace-doesn-t-work"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-query-involving-a-namespace-doesn-t-work"}},[e._v("#")]),e._v(" A query involving a namespace (doesn't work)")]),e._v(" "),n("p",[e._v("doc.find('content/html')")]),e._v(" "),n("h1",{attrs:{id:"works-if-fully-qualified"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#works-if-fully-qualified"}},[e._v("#")]),e._v(" Works if fully qualified")]),e._v(" "),n("p",[e._v("doc.find('content/{http://www.w3.org/1999/xhtml}html')\n<Element '{http://www.w3.org/1999/xhtml}html' at 0x1007767e0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"doesn-t-work"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#doesn-t-work"}},[e._v("#")]),e._v(" Doesn't work")]),e._v(" "),n("p",[e._v("doc.findtext('content/{http://www.w3.org/1999/xhtml}html/head/title')")]),e._v(" "),n("h1",{attrs:{id:"fully-qualified"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fully-qualified"}},[e._v("#")]),e._v(" Fully qualified")]),e._v(" "),n("p",[e._v("doc.findtext('content/{http://www.w3.org/1999/xhtml}html/'\n... '{http://www.w3.org/1999/xhtml}head/{http://www.w3.org/1999/xhtml}title')\n'Hello World'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你可以通过将命名空间处理逻辑包装为一个工具类来简化这个过程：\nclass XMLNamespaces:\ndef "),n("strong",[e._v("init")]),e._v("(self, **kwargs):\nself.namespaces = {}\nfor name, uri in kwargs.items():\nself.register(name, uri)\ndef register(self, name, uri):\nself.namespaces[name] = '{'+uri+'}'\ndef "),n("strong",[e._v("call")]),e._v("(self, path):\nreturn path.format_map(self.namespaces)\n通过下面的方式使用这个类：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("ns = XMLNamespaces(html='http://www.w3.org/1999/xhtml')\ndoc.find(ns('content/{html}html'))\n<Element '{http://www.w3.org/1999/xhtml}html' at 0x1007767e0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("doc.findtext(ns('content/{html}html/{html}head/{html}title'))\n'Hello World'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n解析含有命名空间的 XML 文档会比较繁琐。上面的 XMLNamespaces 仅仅是允许\n你使用缩略名代替完整的 URI 将其变得稍微简洁一点。\n很不幸的是，在基本的 ElementTree 解析中没有任何途径获取命名空间的信息。但\n是，如果你使用 iterparse() 函数的话就可以获取更多关于命名空间处理范围的信息。\n例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from xml.etree.ElementTree import iterparse\nfor evt, elem in iterparse('ns2.xml', ('end', 'start-ns', 'end-ns')):\n... print(evt, elem)\n...\nend <Element 'author' at 0x10110de10>\nstart-ns ('', 'http://www.w3.org/1999/xhtml')\nend <Element '{http://www.w3.org/1999/xhtml}title' at 0x1011131b0>\nend <Element '{http://www.w3.org/1999/xhtml}head' at 0x1011130a8>\nend <Element '{http://www.w3.org/1999/xhtml}h1' at 0x101113310>\nend <Element '{http://www.w3.org/1999/xhtml}body' at 0x101113260>\nend <Element '{http://www.w3.org/1999/xhtml}html' at 0x10110df70>\nend-ns None\nend <Element 'content' at 0x10110de68>\nend <Element 'top' at 0x10110dd60>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("elem # This is the topmost element\n<Element 'top' at 0x10110dd60>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后一点，如果你要处理的 XML 文本除了要使用到其他高级 XML 特性外，还要\n使用到命名空间，建议你最好是使用 lxml 函数库来代替 ElementTree 。例如，lxml\n对利用 DTD 验证文档、更好的 XPath 支持和一些其他高级 XML 特性等都提供了更\n好的支持。这一小节其实只是教你如何让 XML 解析稍微简单一点。\n6.8 与关系型数据库的交互\n问题\n你想在关系型数据库中查询、增加或删除记录。\n解决方案\nPython 中表示多行数据的标准方式是一个由元组构成的序列。例如：\nstocks = [ ('GOOG', 100, 490.1),\n('AAPL', 50, 545.75),\n('FB', 150, 7.45),\n('HPQ', 75, 33.2),\n]\n依据 PEP249，通过这种形式提供数据，可以很容易的使用 Python 标准数据库\nAPI 和关系型数据库进行交互。所有数据库上的操作都通过 SQL 查询语句来完成。每\n一行输入输出数据用一个元组来表示。\n为了演示说明，你可以使用 Python 标准库中的 sqlite3 模块。如果你使用的是一\n个不同的数据库 (比如 MySql、Postgresql 或者 ODBC)，还得安装相应的第三方模块来\n提供支持。不过相应的编程接口几乎都是一样的，除了一点点细微差别外。\n第一步是连接到数据库。通常你要执行 connect() 函数，给它提供一些数据库名、\n主机、用户名、密码和其他必要的一些参数。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sqlite3\ndb = sqlite3.connect('database.db')")])])])]),e._v(" "),n("p",[e._v("为了处理数据，下一步你需要创建一个游标。一旦你有了游标，那么你就可以执行\nSQL 查询语句了。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = db.cursor()\nc.execute('create table portfolio (symbol text, shares integer, price␣ , →real)')\n<sqlite3.Cursor object at 0x10067a730>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("db.commit()")])])])]),e._v(" "),n("p",[e._v("为了向数据库表中插入多条记录，使用类似下面这样的语句：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c.executemany('insert into portfolio values (?,?,?)', stocks)\n<sqlite3.Cursor object at 0x10067a730>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("db.commit()")])])])]),e._v(" "),n("p",[e._v("为了执行某个查询，使用像下面这样的语句：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for row in db.execute('select * from portfolio'):\n... print(row)\n...\n('GOOG', 100, 490.1)\n('AAPL', 50, 545.75)\n('FB', 150, 7.45)\n('HPQ', 75, 33.2)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想接受用户输入作为参数来执行查询操作，必须确保你使用下面这样的占\n位符 ‘‘?‘‘来进行引用参数：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("min_price = 100\nfor row in db.execute('select * from portfolio where price >= ?',\n(min_price,)):\n... print(row)\n...\n('GOOG', 100, 490.1)\n('AAPL', 50, 545.75)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n在比较低的级别上和数据库交互是非常简单的。你只需提供 SQL 语句并调用相应\n的模块就可以更新或提取数据了。虽说如此，还是有一些比较棘手的细节问题需要你逐\n个列出去解决。\n一个难点是数据库中的数据和 Python 类型直接的映射。对于日期类型，通常可以\n使用 datetime 模块中的 datetime 实例，或者可能是 time 模块中的系统时间戳。对\n于数字类型，特别是使用到小数的金融数据，可以用 decimal 模块中的 Decimal 实例\n来表示。不幸的是，对于不同的数据库而言具体映射规则是不一样的，你必须参考相应\n的文档。\n另外一个更加复杂的问题就是 SQL 语句字符串的构造。你千万不要使用 Python\n字符串格式化操作符 (如%) 或者 .format() 方法来创建这样的字符串。如果传递给这\n些格式化操作符的值来自于用户的输入，那么你的程序就很有可能遭受 SQL 注入攻击\n(参考 http://xkcd.com/327 )。查询语句中的通配符 ? 指示后台数据库使用它自己的字\n符串替换机制，这样更加的安全。\n不幸的是，不同的数据库后台对于通配符的使用是不一样的。大部分模块使用 ? 或 %s ，还有其他一些使用了不同的符号，比如:0 或:1 来指示参数。同样的，你还是得\n去参考你使用的数据库模块相应的文档。一个数据库模块的 paramstyle 属性包含了参\n数引用风格的信息。\n对于简单的数据库数据的读写问题，使用数据库 API 通常非常简单。如果你要处\n理更加复杂的问题，建议你使用更加高级的接口，比如一个对象关系映射 ORM 所提供\n的接口。类似 SQLAlchemy 这样的库允许你使用 Python 类来表示一个数据库表，并且\n能在隐藏底层 SQL 的情况下实现各种数据库的操作。\n6.9 编码和解码十六进制数\n问题\n你想将一个十六进制字符串解码成一个字节字符串或者将一个字节字符串编码成\n一个十六进制字符串。\n解决方案\n如果你只是简单的解码或编码一个十六进制的原始字符串，可以使用　 binascii\n模块。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"initial-byte-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#initial-byte-string"}},[e._v("#")]),e._v(" Initial byte string")]),e._v(" "),n("p",[e._v("s = b'hello'")]),e._v(" "),n("h1",{attrs:{id:"encode-as-hex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#encode-as-hex"}},[e._v("#")]),e._v(" Encode as hex")]),e._v(" "),n("p",[e._v("import binascii\nh = binascii.b2a_hex(s)\nh\nb'68656c6c6f'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"decode-back-to-bytes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decode-back-to-bytes"}},[e._v("#")]),e._v(" Decode back to bytes")]),e._v(" "),n("p",[e._v("binascii.a2b_hex(h)\nb'hello'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("类似的功能同样可以在 base64 模块中找到。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import base64\nh = base64.b16encode(s)\nh\nb'68656C6C6F'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("base64.b16decode(h)\nb'hello'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n大部分情况下，通过使用上述的函数来转换十六进制是很简单的。上面两种技术的\n主要不同在于大小写的处理。函数 base64.b16decode() 和 base64.b16encode() 只能\n操作大写形式的十六进制字母，而 binascii 模块中的函数大小写都能处理。\n还有一点需要注意的是编码函数所产生的输出总是一个字节字符串。如果想强制\n以 Unicode 形式输出，你需要增加一个额外的界面步骤。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("h = base64.b16encode(s)\nprint(h)\nb'68656C6C6F'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(h.decode('ascii'))\n68656C6C6F")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在解码十六进制数时，函数 b16decode() 和 a2b_hex() 可以接受字节或 unicode\n字符串。但是，unicode 字符串必须仅仅只包含 ASCII 编码的十六进制数。\n6.10 编码解码 Base64 数据\n问题\n你需要使用 Base64 格式解码或编码二进制数据。\n解决方案\nbase64 模块中有两个函数 b64encode() and b64decode() 可以帮你解决这个问题。\n例如;")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"some-byte-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#some-byte-data"}},[e._v("#")]),e._v(" Some byte data")]),e._v(" "),n("p",[e._v("s = b'hello'\nimport base64")]),e._v(" "),n("h1",{attrs:{id:"encode-as-base64"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#encode-as-base64"}},[e._v("#")]),e._v(" Encode as Base64")]),e._v(" "),n("p",[e._v("a = base64.b64encode(s)\na\nb'aGVsbG8='")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"decode-from-base64"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decode-from-base64"}},[e._v("#")]),e._v(" Decode from Base64")]),e._v(" "),n("p",[e._v("base64.b64decode(a)\nb'hello'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\nBase64 编码仅仅用于面向字节的数据比如字节字符串和字节数组。此外，编码处\n理的输出结果总是一个字节字符串。如果你想混合使用 Base64 编码的数据和 Unicode\n文本，你必须添加一个额外的解码步骤。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = base64.b64encode(s).decode('ascii')\na\n'aGVsbG8='")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("当解码 Base64 的时候，字节字符串和 Unicode 文本都可以作为参数。但是，Unicode\n字符串只能包含 ASCII 字符。\n6.11 读写二进制数组数据\n问题\n你想读写一个二进制数组的结构化数据到 Python 元组中。\n解决方案\n可以使用 struct 模块处理二进制数据。下面是一段示例代码将一个 Python 元组\n列表写入一个二进制文件，并使用 struct 将每个元组编码为一个结构体。\nfrom struct import Struct\ndef write_records(records, format, f):\n'''\nWrite a sequence of tuples to a binary file of structures.\n'''\nrecord_struct = Struct(format)\nfor r in records:\nf.write(record_struct.pack(*r))")]),e._v(" "),n("h1",{attrs:{id:"example-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-3"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("if "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nrecords = [ (1, 2.3, 4.5),\n(6, 7.8, 9.0),\n(12, 13.4, 56.7) ]\nwith open('data.b', 'wb') as f:\nwrite_records(records, '<idd', f)\n有很多种方法来读取这个文件并返回一个元组列表。首先，如果你打算以块的形式\n增量读取文件，你可以这样做：\nfrom struct import Struct\ndef read_records(format, f):\nrecord_struct = Struct(format)\nchunks = iter(lambda: f.read(record_struct.size), b'')\nreturn (record_struct.unpack(chunk) for chunk in chunks)")]),e._v(" "),n("h1",{attrs:{id:"example-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-4"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("if "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nwith open('data.b','rb') as f:\nfor rec in read_records('<idd', f):")]),e._v(" "),n("h1",{attrs:{id:"process-rec"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-rec"}},[e._v("#")]),e._v(" Process rec")]),e._v(" "),n("p",[e._v("...\n如果你想将整个文件一次性读取到一个字节字符串中，然后在分片解析。那么你可\n以这样做：\nfrom struct import Struct\ndef unpack_records(format, data):\nrecord_struct = Struct(format)\nreturn (record_struct.unpack_from(data, offset)\nfor offset in range(0, len(data), record_struct.size))")]),e._v(" "),n("h1",{attrs:{id:"example-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-5"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("if "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nwith open('data.b', 'rb') as f:\ndata = f.read()\nfor rec in unpack_records('<idd', data):")]),e._v(" "),n("h1",{attrs:{id:"process-rec-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-rec-2"}},[e._v("#")]),e._v(" Process rec")]),e._v(" "),n("p",[e._v("...\n两种情况下的结果都是一个可返回用来创建该文件的原始元组的可迭代对象。\n讨论\n对于需要编码和解码二进制数据的程序而言，通常会使用 struct 模块。为了声明\n一个新的结构体，只需要像这样创建一个 Struct 实例即可：")]),e._v(" "),n("h1",{attrs:{id:"little-endian-32-bit-integer-two-double-precision-floats"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#little-endian-32-bit-integer-two-double-precision-floats"}},[e._v("#")]),e._v(" Little endian 32-bit integer, two double precision floats")]),e._v(" "),n("p",[e._v("record_struct = Struct('<idd')\n结构体通常会使用一些结构码值 i, d, f 等 [参考 Python 文档 ]。这些代码分别代表\n某个特定的二进制数据类型如 32 位整数，64 位浮点数，32 位浮点数等。第一个字符 <\n指定了字节顺序。在这个例子中，它表示”低位在前”。更改这个字符为 > 表示高位在\n前，或者是 ! 表示网络字节顺序。\n产生的 Struct 实例有很多属性和方法用来操作相应类型的结构。size 属性包含\n了结构的字节数，这在 I/O 操作时非常有用。pack() 和 unpack() 方法被用来打包和\n解包数据。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from struct import Struct\nrecord_struct = Struct('<idd')\nrecord_struct.size\n20")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("record_struct.pack(1, 2.0, 3.0)\nb'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x08@'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("record_struct.unpack(_)\n(1, 2.0, 3.0)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("有时候你还会看到 pack() 和 unpack() 操作以模块级别函数被调用，类似下面这\n样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import struct\nstruct.pack('<idd', 1, 2.0, 3.0)\nb'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\x08@'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("struct.unpack('<idd', _)\n(1, 2.0, 3.0)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这样可以工作，但是感觉没有实例方法那么优雅，特别是在你代码中同样的结构出\n现在多个地方的时候。通过创建一个 Struct 实例，格式代码只会指定一次并且所有的\n操作被集中处理。这样一来代码维护就变得更加简单了 (因为你只需要改变一处代码即\n可)。\n读取二进制结构的代码要用到一些非常有趣而优美的编程技巧。在函数　\nread_records 中，iter() 被用来创建一个返回固定大小数据块的迭代器，参考\n5.8 小节。这个迭代器会不断的调用一个用户提供的可调用对象 (比如 lambda: f.\nread(record_struct.size) )，直到它返回一个特殊的值 (如 b’‘)，这时候迭代停止。\n例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = open('data.b', 'rb')\nchunks = iter(lambda: f.read(20), b'')\nchunks\n<callable_iterator object at 0x10069e6d0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for chk in chunks:\n... print(chk)\n...\nb'\\x01\\x00\\x00\\x00ffffff\\x02@\\x00\\x00\\x00\\x00\\x00\\x00\\x12@'\nb'\\x06\\x00\\x00\\x00333333\\x1f@\\x00\\x00\\x00\\x00\\x00\\x00\"@'\nb'\\x0c\\x00\\x00\\x00\\xcd\\xcc\\xcc\\xcc\\xcc\\xcc*@\\x9a\\x99\\x99\\x99\\x99YL@'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如你所见，创建一个可迭代对象的一个原因是它能允许使用一个生成器推导来创\n建记录。如果你不使用这种技术，那么代码可能会像下面这样：\ndef read_records(format, f):\nrecord_struct = Struct(format)\nwhile True:\nchk = f.read(record_struct.size)\nif chk == b'':\nbreak\nyield record_struct.unpack(chk)\n在 函 数 unpack_records() 中 使 用 了 另 外 一 种 方 法 unpack_from() 。\nunpack_from() 对于从一个大型二进制数组中提取二进制数据非常有用，因为它不\n会产生任何的临时对象或者进行内存复制操作。你只需要给它一个字节字符串 (或数\n组) 和一个字节偏移量，它会从那个位置开始直接解包数据。\n如果你使用 unpack() 来代替 unpack_from() ，你需要修改代码来构造大量的小\n的切片以及进行偏移量的计算。比如：\ndef unpack_records(format, data):\nrecord_struct = Struct(format)\nreturn (record_struct.unpack(data[offset:offset + record_struct.size])\nfor offset in range(0, len(data), record_struct.size))\n这种方案除了代码看上去很复杂外，还得做很多额外的工作，因为它执行了大量的\n偏移量计算，复制数据以及构造小的切片对象。如果你准备从读取到的一个大型字节字\n符串中解包大量的结构体的话，unpack_from() 会表现的更出色。\n在解包的时候，collections 模块中的命名元组对象或许是你想要用到的。它可以\n让你给返回元组设置属性名称。例如：\nfrom collections import namedtuple\nRecord = namedtuple('Record', ['kind','x','y'])\nwith open('data.p', 'rb') as f:\nrecords = (Record(*r) for r in read_records('<idd', f))\nfor r in records:\nprint(r.kind, r.x, r.y)\n如果你的程序需要处理大量的二进制数据，你最好使用 numpy 模块。例如，你可\n以将一个二进制数据读取到一个结构化数组中而不是一个元组列表中。就像下面这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import numpy as np\nf = open('data.b', 'rb')\nrecords = np.fromfile(f, dtype='<i,<d,<d')\nrecords\narray([(1, 2.3, 4.5), (6, 7.8, 9.0), (12, 13.4, 56.7)],\ndtype=[('f0', '<i4'), ('f1', '<f8'), ('f2', '<f8')])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("records[0]\n(1, 2.3, 4.5)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("records[1]\n(6, 7.8, 9.0)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后提一点，如果你需要从已知的文件格式 (如图片格式，图形文件，HDF5 等)\n中读取二进制数据时，先检查看看 Python 是不是已经提供了现存的模块。因为不到万\n不得已没有必要去重复造轮子。\n6.12 读取嵌套和可变长二进制数据\n问题\n你需要读取包含嵌套或者可变长记录集合的复杂二进制格式的数据。这些数据可\n能包含图片、视频、电子地图文件等。\n解决方案\nstruct 模块可被用来编码/解码几乎所有类型的二进制的数据结构。为了解释清\n楚这种数据，假设你用下面的 Python 数据结构来表示一个组成一系列多边形的点的集\n合：\npolys = [\n[ (1.0, 2.5), (3.5, 4.0), (2.5, 1.5) ],\n[ (7.0, 1.2), (5.1, 3.0), (0.5, 7.5), (0.8, 9.0) ],\n[ (3.4, 6.3), (1.2, 0.5), (4.6, 9.2) ],\n]\n现在假设这个数据被编码到一个以下列头部开始的二进制文件中去了：\n+------+--------+------------------------------------+\n|Byte | Type | Description |\n+======+========+====================================+\n|0 | int | 文件代码（0x1234，小端） |\n+------+--------+------------------------------------+\n|4 | double | x 的最小值（小端） |\n+------+--------+------------------------------------+\n|12 | double | y 的最小值（小端） |\n+------+--------+------------------------------------+\n|20 | double | x 的最大值（小端） |\n+------+--------+------------------------------------+\n|28 | double | y 的最大值（小端） |\n+------+--------+------------------------------------+\n|36 | int | 三角形数量（小端） |\n+------+--------+------------------------------------+\n紧跟着头部是一系列的多边形记录，编码格式如下：\n+------+--------+-------------------------------------------+\n|Byte | Type | Description |\n+======+========+===========================================+\n|0 | int | 记录长度（N 字节） |\n+------+--------+-------------------------------------------+\n|4-N | Points | (X,Y) 坐标，以浮点数表示 |\n+------+--------+-------------------------------------------+\n为了写这样的文件，你可以使用如下的 Python 代码：\nimport struct\nimport itertools\ndef write_polys(filename, polys):")]),e._v(" "),n("h1",{attrs:{id:"determine-bounding-box"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#determine-bounding-box"}},[e._v("#")]),e._v(" Determine bounding box")]),e._v(" "),n("p",[e._v("flattened = list(itertools.chain(*polys))\nmin_x = min(x for x, y in flattened)\nmax_x = max(x for x, y in flattened)\nmin_y = min(y for x, y in flattened)\nmax_y = max(y for x, y in flattened)\nwith open(filename, 'wb') as f:\nf.write(struct.pack('<iddddi', 0x1234,\nmin_x, min_y,\nmax_x, max_y,\nlen(polys)))\nfor poly in polys:\nsize = len(poly) * struct.calcsize('<dd') f.write(struct.pack('<i', size + 4))\nfor pt in poly:\nf.write(struct.pack('<dd', *pt))\n将数据读取回来的时候，可以利用函数 struct.unpack() ，代码很相似，基本就\n是上面写操作的逆序。如下：\ndef read_polys(filename):\nwith open(filename, 'rb') as f:")]),e._v(" "),n("h1",{attrs:{id:"read-the-header"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#read-the-header"}},[e._v("#")]),e._v(" Read the header")]),e._v(" "),n("p",[e._v("header = f.read(40)\nfile_code, min_x, min_y, max_x, max_y, num_polys = "),n("br"),e._v("\nstruct.unpack('<iddddi', header)\npolys = []\nfor n in range(num_polys):\npbytes, = struct.unpack('<i', f.read(4))\npoly = []\nfor m in range(pbytes // 16):\npt = struct.unpack('<dd', f.read(16))\npoly.append(pt)\npolys.append(poly)\nreturn polys\n尽管这个代码可以工作，但是里面混杂了很多读取、解包数据结构和其他细节的代\n码。如果用这样的代码来处理真实的数据文件，那未免也太繁杂了点。因此很显然应该\n有另一种解决方法可以简化这些步骤，让程序员只关注自最重要的事情。\n在本小节接下来的部分，我会逐步演示一个更加优秀的解析字节数据的方案。目标\n是可以给程序员提供一个高级的文件格式化方法，并简化读取和解包数据的细节。但是\n我要先提醒你，本小节接下来的部分代码应该是整本书中最复杂最高级的例子，使用了\n大量的面向对象编程和元编程技术。一定要仔细的阅读我们的讨论部分，另外也要参考\n下其他章节内容。\n首先，当读取字节数据的时候，通常在文件开始部分会包含文件头和其他的数据结\n构。尽管 struct 模块可以解包这些数据到一个元组中去，另外一种表示这种信息的方\n式就是使用一个类。就像下面这样：\nimport struct\nclass StructField:\n'''\nDescriptor representing a simple structure field\n'''\ndef "),n("strong",[e._v("init")]),e._v("(self, format, offset):\nself.format = format\nself.offset = offset\ndef "),n("strong",[e._v("get")]),e._v("(self, instance, cls):\nif instance is None:\nreturn self\nelse:r = struct.unpack_from(self.format, instance._buffer, self.offset)\nreturn r[0] if len(r) == 1 else r\nclass Structure:\ndef "),n("strong",[e._v("init")]),e._v("(self, bytedata):\nself._buffer = memoryview(bytedata)\n这里我们使用了一个描述器来表示每个结构字段，每个描述器包含一个结构兼容\n格式的代码以及一个字节偏移量，存储在内部的内存缓冲中。在 "),n("strong",[e._v("get")]),e._v("() 方法中，\nstruct.unpack_from() 函数被用来从缓冲中解包一个值，省去了额外的分片或复制操\n作步骤。\nStructure 类就是一个基础类，接受字节数据并存储在内部的内存缓冲中，并被\nStructField 描述器使用。这里使用了 memoryview() ，我们会在后面详细讲解它是用\n来干嘛的。\n使用这个代码，你现在就能定义一个高层次的结构对象来表示上面表格信息所期\n望的文件格式。例如：\nclass PolyHeader(Structure):\nfile_code = StructField('<i', 0)\nmin_x = StructField('<d', 4)\nmin_y = StructField('<d', 12)\nmax_x = StructField('<d', 20)\nmax_y = StructField('<d', 28)\nnum_polys = StructField('<i', 36)\n下面的例子利用这个类来读取之前我们写入的多边形数据的头部数据：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = open('polys.bin', 'rb')\nphead = PolyHeader(f.read(40))\nphead.file_code == 0x1234\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.min_x\n0.5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.min_y\n0.5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.max_x\n7.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.max_y\n9.2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.num_polys\n3")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这个很有趣，不过这种方式还是有一些烦人的地方。首先，尽管你获得了一个类接\n口的便利，但是这个代码还是有点臃肿，还需要使用者指定很多底层的细节 (比如重复\n使用 StructField ，指定偏移量等)。另外，返回的结果类同样确实一些便利的方法来\n计算结构的总数。\n任何时候只要你遇到了像这样冗余的类定义，你应该考虑下使用类装饰器或元类。\n元类有一个特性就是它能够被用来填充许多低层的实现细节，从而释放使用者的负担。\n下面我来举个例子，使用元类稍微改造下我们的 Structure 类：\nclass StructureMeta(type):\n'''\nMetaclass that automatically creates StructField descriptors\n'''\ndef "),n("strong",[e._v("init")]),e._v("(self, clsname, bases, clsdict):\nfields = getattr(self, '"),n("em",[e._v("fields")]),e._v("', [])\nbyte_order = ''\noffset = 0\nfor format, fieldname in fields:\nif format.startswith(('<','>','!','@')):\nbyte_order = format[0]\nformat = format[1:]\nformat = byte_order + format\nsetattr(self, fieldname, StructField(format, offset))\noffset += struct.calcsize(format)\nsetattr(self, 'struct_size', offset)\nclass Structure(metaclass=StructureMeta):\ndef "),n("strong",[e._v("init")]),e._v("(self, bytedata):\nself._buffer = bytedata\n@classmethod\ndef from_file(cls, f):\nreturn cls(f.read(cls.struct_size))\n使用新的 Structure 类，你可以像下面这样定义一个结构：\nclass PolyHeader(Structure):\n"),n("em",[e._v("fields")]),e._v(" = [ ('<i', 'file_code'),\n('d', 'min_x'),\n('d', 'min_y'),\n('d', 'max_x'),\n('d', 'max_y'),\n('i', 'num_polys') ]\n正如你所见，这样写就简单多了。我们添加的类方法 from_file() 让我们在不需\n要知道任何数据的大小和结构的情况下就能轻松的从文件中读取数据。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = open('polys.bin', 'rb')\nphead = PolyHeader.from_file(f)\nphead.file_code == 0x1234\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.min_x\n0.5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.min_y\n0.5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.max_x\n7.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.max_y\n9.2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.num_polys\n3")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一旦你开始使用了元类，你就可以让它变得更加智能。例如，假设你还想支持嵌套\n的字节结构，下面是对前面元类的一个小的改进，提供了一个新的辅助描述器来达到想\n要的效果：\nclass NestedStruct:\n'''\nDescriptor representing a nested structure\n'''\ndef "),n("strong",[e._v("init")]),e._v("(self, name, struct_type, offset):\nself.name = name\nself.struct_type = struct_type\nself.offset = offset\ndef "),n("strong",[e._v("get")]),e._v("(self, instance, cls):\nif instance is None:\nreturn self\nelse:\ndata = instance._buffer[self.offset:\nself.offset+self.struct_type.struct_size]\nresult = self.struct_type(data)")]),e._v(" "),n("h1",{attrs:{id:"save-resulting-structure-back-on-instance-to-avoid"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#save-resulting-structure-back-on-instance-to-avoid"}},[e._v("#")]),e._v(" Save resulting structure back on instance to avoid")]),e._v(" "),n("h1",{attrs:{id:"further-recomputation-of-this-step"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#further-recomputation-of-this-step"}},[e._v("#")]),e._v(" further recomputation of this step")]),e._v(" "),n("p",[e._v("setattr(instance, self.name, result)\nreturn result\nclass StructureMeta(type):\n'''\nMetaclass that automatically creates StructField descriptors\n'''\ndef "),n("strong",[e._v("init")]),e._v("(self, clsname, bases, clsdict):\nfields = getattr(self, '"),n("em",[e._v("fields")]),e._v("', [])\nbyte_order = ''\noffset = 0\nfor format, fieldname in fields:\nif isinstance(format, StructureMeta):\nsetattr(self, fieldname,\nNestedStruct(fieldname, format, offset))\noffset += format.struct_size\nelse:\nif format.startswith(('<','>','!','@')):\nbyte_order = format[0]\nformat = format[1:]\nformat = byte_order + format\nsetattr(self, fieldname, StructField(format, offset))\noffset += struct.calcsize(format)\nsetattr(self, 'struct_size', offset)\n在这段代码中，NestedStruct 描述器被用来叠加另外一个定义在某个内存区域上\n的结构。它通过将原始内存缓冲进行切片操作后实例化给定的结构类型。由于底层的内\n存缓冲区是通过一个内存视图初始化的，所以这种切片操作不会引发任何的额外的内\n存复制。相反，它仅仅就是之前的内存的一个叠加而已。另外，为了防止重复实例化，\n通过使用和 8.10 小节同样的技术，描述器保存了该实例中的内部结构对象。\n使用这个新的修正版，你就可以像下面这样编写：\nclass Point(Structure):\n"),n("em",[e._v("fields")]),e._v(" = [ ('<d', 'x'),\n('d', 'y')\n]\nclass PolyHeader(Structure):\n"),n("em",[e._v("fields")]),e._v(" = [ ('<i', 'file_code'),\n(Point, 'min'), # nested struct\n(Point, 'max'), # nested struct\n('i', 'num_polys') ]\n令人惊讶的是，它也能按照预期的正常工作，我们实际操作下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = open('polys.bin', 'rb')\nphead = PolyHeader.from_file(f)\nphead.file_code == 0x1234\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.min # Nested structure\n<"),n("strong",[e._v("main")]),e._v(".Point object at 0x1006a48d0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.min.x\n0.5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.min.y\n0.5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.max.x\n7.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.max.y\n9.2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("phead.num_polys\n3")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("到目前为止，一个处理定长记录的框架已经写好了。但是如果组件记录是变长的\n呢？比如，多边形文件包含变长的部分。\n一种方案是写一个类来表示字节数据，同时写一个工具函数来通过多少方式解析\n内容。跟 6.11 小节的代码很类似：\nclass SizedRecord:\ndef "),n("strong",[e._v("init")]),e._v("(self, bytedata):\nself._buffer = memoryview(bytedata)\n@classmethod\ndef from_file(cls, f, size_fmt, includes_size=True):\nsz_nbytes = struct.calcsize(size_fmt)\nsz_bytes = f.read(sz_nbytes)\nsz, = struct.unpack(size_fmt, sz_bytes)\nbuf = f.read(sz - includes_size * sz_nbytes)\nreturn cls(buf)\ndef iter_as(self, code):\nif isinstance(code, str):\ns = struct.Struct(code)\nfor off in range(0, len(self._buffer), s.size):\nyield s.unpack_from(self._buffer, off)\nelif isinstance(code, StructureMeta):\nsize = code.struct_size\nfor off in range(0, len(self._buffer), size):\ndata = self._buffer[off:off+size]\nyield code(data)\n类方法 SizedRecord.from_file() 是一个工具，用来从一个文件中读取带大小前\n缀的数据块，这也是很多文件格式常用的方式。作为输入，它接受一个包含大小编码的\n结构格式编码，并且也是自己形式。可选的 includes_size 参数指定了字节数是否包\n含头部大小。下面是一个例子教你怎样使用从多边形文件中读取单独的多边形数据：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = open('polys.bin', 'rb')\nphead = PolyHeader.from_file(f)\nphead.num_polys\n3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("polydata = [ SizedRecord.from_file(f, '<i')\n... for n in range(phead.num_polys) ]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("polydata\n[<"),n("strong",[e._v("main")]),e._v(".SizedRecord object at 0x1006a4d50>,\n<"),n("strong",[e._v("main")]),e._v(".SizedRecord object at 0x1006a4f50>,\n<"),n("strong",[e._v("main")]),e._v(".SizedRecord object at 0x10070da90>]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("可以看出，SizedRecord 实例的内容还没有被解析出来。可以使用 iter_as() 方\n法来达到目的，这个方法接受一个结构格式化编码或者是 Structure 类作为输入。这\n样子可以很灵活的去解析数据，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for n, poly in enumerate(polydata):\n... print('Polygon', n)\n... for p in poly.iter_as('<dd'):\n... print(p)\n...\nPolygon 0\n(1.0, 2.5)\n(3.5, 4.0)\n(2.5, 1.5)\nPolygon 1\n(7.0, 1.2)\n(5.1, 3.0)\n(0.5, 7.5)\n(0.8, 9.0)\nPolygon 2\n(3.4, 6.3)\n(1.2, 0.5)\n(4.6, 9.2)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for n, poly in enumerate(polydata):\n... print('Polygon', n)\n... for p in poly.iter_as(Point):\n... print(p.x, p.y)\n...\nPolygon 0\n1.0 2.5\n3.5 4.0\n2.5 1.5\nPolygon 1\n7.0 1.2\n5.1 3.0\n0.5 7.5\n0.8 9.0\nPolygon 2\n3.4 6.3\n1.2 0.5\n4.6 9.2")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("将所有这些结合起来，下面是一个 read_polys() 函数的另外一个修正版：\nclass Point(Structure):\n"),n("em",[e._v("fields")]),e._v(" = [ ('<d', 'x'),\n('d', 'y') ]\nclass PolyHeader(Structure):\n"),n("em",[e._v("fields")]),e._v(" = [ ('<i', 'file_code'),\n(Point, 'min'),\n(Point, 'max'),\n('i', 'num_polys') ]\ndef read_polys(filename):\npolys = []\nwith open(filename, 'rb') as f:\nphead = PolyHeader.from_file(f)\nfor n in range(phead.num_polys):\nrec = SizedRecord.from_file(f, '<i')\npoly = [ (p.x, p.y) for p in rec.iter_as(Point) ]\npolys.append(poly)\nreturn polys\n讨论\n这一节向你展示了许多高级的编程技术，包括描述器，延迟计算，元类，类变量和\n内存视图。然而，它们都为了同一个特定的目标服务。\n上面的实现的一个主要特征是它是基于懒解包的思想。当一个 Structure 实例被\n创建时，"),n("strong",[e._v("init")]),e._v("() 仅仅只是创建一个字节数据的内存视图，没有做其他任何事。特\n别的，这时候并没有任何的解包或者其他与结构相关的操作发生。这样做的一个动机是\n你可能仅仅只对一个字节记录的某一小部分感兴趣。我们只需要解包你需要访问的部\n分，而不是整个文件。\n为了实现懒解包和打包，需要使用 StructField 描述器类。用户在 "),n("em",[e._v("fields")]),e._v(" 中列\n出来的每个属性都会被转化成一个 StructField 描述器，它将相关结构格式码和偏移\n值保存到存储缓存中。元类 StructureMeta 在多个结构类被定义时自动创建了这些描\n述器。我们使用元类的一个主要原因是它使得用户非常方便的通过一个高层描述就能\n指定结构格式，而无需考虑低层的细节问题。\nStructureMeta 的一个很微妙的地方就是它会固定字节数据顺序。也就是说，如果\n任意的属性指定了一个字节顺序 (< 表示低位优先或者 > 表示高位优先)，那后面所有\n字段的顺序都以这个顺序为准。这么做可以帮助避免额外输入，但是在定义的中间我们\n仍然可能切换顺序的。比如，你可能有一些比较复杂的结构，就像下面这样：\nclass ShapeFile(Structure):\n"),n("em",[e._v("fields")]),e._v(" = [ ('>i', 'file_code'), # Big endian\n('20s', 'unused'),\n('i', 'file_length'),\n('<i', 'version'), # Little endian\n('i', 'shape_type'),\n('d', 'min_x'),\n('d', 'min_y'),\n('d', 'max_x'),\n('d', 'max_y'),\n('d', 'min_z'),\n('d', 'max_z'),\n('d', 'min_m'),\n('d', 'max_m') ]\n之前我们提到过，memoryview() 的使用可以帮助我们避免内存的复制。当结构存\n在嵌套的时候，memoryviews 可以叠加同一内存区域上定义的机构的不同部分。这个特\n性比较微妙，但是它关注的是内存视图与普通字节数组的切片操作行为。如果你在一个\n字节字符串或字节数组上执行切片操作，你通常会得到一个数据的拷贝。而内存视图切\n片不是这样的，它仅仅是在已存在的内存上面叠加而已。因此，这种方式更加高效。\n还有很多相关的章节可以帮助我们扩展这里讨论的方案。参考 8.13 小节使用\n描述器构建一个类型系统。8.10 小节有更多关于延迟计算属性值的讨论，并且跟\nNestedStruct 描述器的实现也有关。9.19 小节有一个使用元类来初始化类成员的例子，\n和 StructureMeta 类非常相似。Python 的 ctypes 源码同样也很有趣，它提供了对定\n义数据结构、数据结构嵌套这些相似功能的支持。\n6.13 数据的累加与统计操作\n问题\n你需要处理一个很大的数据集并需要计算数据总和或其他统计量。\n解决方案\n对于任何涉及到统计、时间序列以及其他相关技术的数据分析问题，都可以考虑使\n用 Pandas 库 。\n为了让你先体验下，下面是一个使用 Pandas 来分析芝加哥城市的 老鼠和啮齿类\n动物数据库 的例子。在我写这篇文章的时候，这个数据库是一个拥有大概 74,000 行数\n据的 CSV 文件。")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import pandas")]),e._v(" "),n("h1",{attrs:{id:"read-a-csv-file-skipping-last-line"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#read-a-csv-file-skipping-last-line"}},[e._v("#")]),e._v(" Read a CSV file, skipping last line")]),e._v(" "),n("p",[e._v("rats = pandas.read_csv('rats.csv', skip_footer=1)\nrats\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 74055 entries, 0 to 74054\nData columns:\nCreation Date 74055 non-null values\nStatus 74055 non-null values\nCompletion Date 72154 non-null values\nService Request Number 74055 non-null values\nType of Service Request 74055 non-null values\nNumber of Premises Baited 65804 non-null values\nNumber of Premises with Garbage 65600 non-null values\nNumber of Premises with Rats 65752 non-null values\nCurrent Activity 66041 non-null values\nMost Recent Action 66023 non-null values\nStreet Address 74055 non-null values\nZIP Code 73584 non-null values\nX Coordinate 74043 non-null values\nY Coordinate 74043 non-null values\nWard 74044 non-null values\nPolice District 74044 non-null values\nCommunity Area 74044 non-null values\nLatitude 74043 non-null values\nLongitude 74043 non-null values\nLocation 74043 non-null values\ndtypes: float64(11), object(9)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"investigate-range-of-values-for-a-certain-field"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#investigate-range-of-values-for-a-certain-field"}},[e._v("#")]),e._v(" Investigate range of values for a certain field")]),e._v(" "),n("p",[e._v("rats['Current Activity'].unique()\narray([nan, Dispatch Crew, Request Sanitation Inspector], dtype=object)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"filter-the-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#filter-the-data"}},[e._v("#")]),e._v(" Filter the data")]),e._v(" "),n("p",[e._v("crew_dispatched = rats[rats['Current Activity'] == 'Dispatch Crew']\nlen(crew_dispatched)\n65676")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"find-10-most-rat-infested-zip-codes-in-chicago"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#find-10-most-rat-infested-zip-codes-in-chicago"}},[e._v("#")]),e._v(" Find 10 most rat-infested ZIP codes in Chicago")]),e._v(" "),n("p",[e._v("crew_dispatched['ZIP Code'].value_counts()[:10]\n60647 3837\n60618 3530\n60614 3284\n60629 3251\n60636 2801\n60657 2465\n60641 2238\n60609 2206\n60651 2152\n60632 2071")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"group-by-completion-date"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#group-by-completion-date"}},[e._v("#")]),e._v(" Group by completion date")]),e._v(" "),n("p",[e._v("dates = crew_dispatched.groupby('Completion Date')\n<pandas.core.groupby.DataFrameGroupBy object at 0x10d0a2a10>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("len(dates)\n472")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"determine-counts-on-each-day"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#determine-counts-on-each-day"}},[e._v("#")]),e._v(" Determine counts on each day")]),e._v(" "),n("p",[e._v("date_counts = dates.size()\ndate_counts[0:10]\nCompletion Date\n01/03/2011 4\n01/03/2012 125\n01/04/2011 54\n01/04/2012 38\n01/05/2011 78\n01/05/2012 100\n01/06/2011 100\n01/06/2012 58\n01/07/2011 1\n01/09/2012 12")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"sort-the-counts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sort-the-counts"}},[e._v("#")]),e._v(" Sort the counts")]),e._v(" "),n("p",[e._v("date_counts.sort()\ndate_counts[-10:]\nCompletion Date\n10/12/2012 313\n10/21/2011 314\n09/20/2011 316\n10/26/2011 319\n02/22/2011 325\n10/26/2012 333\n03/17/2011 336\n10/13/2011 378\n10/14/2011 391\n10/07/2011 457")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("嗯，看样子 2011 年 10 月 7 日对老鼠们来说是个很忙碌的日子啊！^_^\n讨论\nPandas 是一个拥有很多特性的大型函数库，我在这里不可能介绍完。但是只要你\n需要去分析大型数据集合、对数据分组、计算各种统计量或其他类似任务的话，这个函\n数库真的值得你去看一看。")]),e._v(" "),n("h2",{attrs:{id:"第七章-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第七章-函数"}},[e._v("#")]),e._v(" 第七章：函数")]),e._v(" "),n("p",[e._v("使用 def 语句定义函数是所有程序的基础。本章的目标是讲解一些更加高级和不\n常见的函数定义与使用模式。涉及到的内容包括默认参数、任意数量参数、强制关键字\n参数、注解和闭包。另外，一些高级的控制流和利用回调函数传递数据的技术在这里也\n会讲解到。\n7.1 可接受任意数量参数的函数\n问题\n你想构造一个可接受任意数量参数的函数。\n解决方案\n为了能让一个函数接受任意数量的位置参数，可以使用一个 * 参数。例如：\ndef avg(first, *rest):\nreturn (first + sum(rest)) / (1 + len(rest))")]),e._v(" "),n("h1",{attrs:{id:"sample-use"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sample-use"}},[e._v("#")]),e._v(" Sample use")]),e._v(" "),n("p",[e._v("avg(1, 2) # 1.5\navg(1, 2, 3, 4) # 2.5\n在这个例子中，rest 是由所有其他位置参数组成的元组。然后我们在代码中把它当\n成了一个序列来进行后续的计算。\n为了接受任意数量的关键字参数，使用一个以 ** 开头的参数。比如：\nimport html\ndef make_element(name, value, **attrs):\nkeyvals = [' %s=\"%s\"' % item for item in attrs.items()]\nattr_str = ''.join(keyvals)\nelement = '<{name}{attrs}>{value}</{name}>'.format(\nname=name,\nattrs=attr_str,\nvalue=html.escape(value))\nreturn element")]),e._v(" "),n("h1",{attrs:{id:"example-6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-6"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("h1",{attrs:{id:"creates-albatross"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creates-albatross"}},[e._v("#")]),e._v(" Creates '"),n("item",{attrs:{size:"large",quantity:"6"}},[e._v("Albatross")]),e._v("'")],1),e._v(" "),n("p",[e._v("make_element('item', 'Albatross', size='large', quantity=6)")]),e._v(" "),n("h1",{attrs:{id:"creates-spam"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creates-spam"}},[e._v("#")]),e._v(" Creates '"),n("p",[e._v("<spam>")]),e._v("'")]),e._v(" "),n("p",[e._v("make_element('p', '"),n("spam",[e._v("')\n在这里，attrs 是一个包含所有被传入进来的关键字参数的字典。\n如果你还希望某个函数能同时接受任意数量的位置参数和关键字参数，可以同时\n使用 * 和 **。比如：\ndef anyargs(*args, "),n("strong",[e._v("kwargs):\nprint(args) # A tuple\nprint(kwargs) # A dict\n使用这个函数时，所有位置参数会被放到 args 元组中，所有关键字参数会被放到\n字典 kwargs 中。\n讨论\n一个 * 参数只能出现在函数定义中最后一个位置参数后面，而")]),e._v("参数只能出现在\n最后一个参数。有一点要注意的是，在 * 参数后面仍然可以定义其他参数。\ndef a(x, *args, y):\npass\ndef b(x, *args, y, **kwargs):\npass\n这种参数就是我们所说的强制关键字参数，在后面 7.2 小节还会详细讲解到。\n7.2 只接受关键字参数的函数\n问题\n你希望函数的某些参数强制使用关键字参数传递\n解决方案\n将强制关键字参数放到某个 * 参数或者单个 * 后面就能达到这种效果。比如：\ndef recv(maxsize, *, block):\n'Receives a message'\npass\nrecv(1024, True) # TypeError\nrecv(1024, block=True) # Ok\n利用这种技术，我们还能在接受任意多个位置参数的函数中指定关键字参数。比\n如：\ndef mininum(*values, clip=None):\nm = min(values)\nif clip is not None: m = clip if clip > m else m\nreturn m\nminimum(1, 5, 2, -5, 10) # Returns -5\nminimum(1, 5, 2, -5, 10, clip=0) # Returns 0\n讨论\n很多情况下，使用强制关键字参数会比使用位置参数表意更加清晰，程序也更加具\n有可读性。例如，考虑下如下一个函数调用：\nmsg = recv(1024, False)\n如果调用者对 recv 函数并不是很熟悉，那他肯定不明白那个 False 参数到底来干\n嘛用的。但是，如果代码变成下面这样子的话就清楚多了：\nmsg = recv(1024, block=False)\n另外，使用强制关键字参数也会比使用 **kwargs 参数更好，因为在使用函数 help\n的时候输出也会更容易理解：")])],1),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("help(recv)\nHelp on function recv in module "),n("strong",[e._v("main")]),e._v(":\nrecv(maxsize, *, block)\nReceives a message\n强制关键字参数在一些更高级场合同样也很有用。例如，它们可以被用来在使用\n*args 和 **kwargs 参数作为输入的函数中插入参数，9.11 小节有一个这样的例子。\n7.3 给函数参数增加元信息\n问题\n你写好了一个函数，然后想为这个函数的参数增加一些额外的信息，这样的话其他\n使用者就能清楚的知道这个函数应该怎么使用。\n解决方案\n使用函数参数注解是一个很好的办法，它能提示程序员应该怎样正确使用这个函\n数。例如，下面有一个被注解了的函数：\ndef add(x:int, y:int) -> int:\nreturn x + y\npython 解释器不会对这些注解添加任何的语义。它们不会被类型检查，运行时跟\n没有加注解之前的效果也没有任何差距。然而，对于那些阅读源码的人来讲就很有帮助\n啦。第三方工具和框架可能会对这些注解添加语义。同时它们也会出现在文档中。")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("help(add)\nHelp on function add in module "),n("strong",[e._v("main")]),e._v(":\nadd(x: int, y: int) -> int")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("尽管你可以使用任意类型的对象给函数添加注解 (例如数字，字符串，对象实例等\n等)，不过通常来讲使用类或者字符串会比较好点。\n讨论\n函数注解只存储在函数的 "),n("strong",[e._v("annotations")]),e._v(" 属性中。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("add."),n("strong",[e._v("annotations")]),e._v("\n{'y': <class 'int'>, 'return': <class 'int'>, 'x': <class 'int'>}\n尽管注解的使用方法可能有很多种，但是它们的主要用途还是文档。因为 python\n并没有类型声明，通常来讲仅仅通过阅读源码很难知道应该传递什么样的参数给这个\n函数。这时候使用注解就能给程序员更多的提示，让他们可以正确的使用函数。\n参考 9.20 小节的一个更加高级的例子，演示了如何利用注解来实现多分派 (比如\n重载函数)。\n7.4 返回多个值的函数\n问题\n你希望构造一个可以返回多个值的函数\n解决方案\n为了能返回多个值，函数直接 return 一个元组就行了。例如：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("def myfun():\n... return 1, 2, 3\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a, b, c = myfun()\na 1\nb 2\nc 3\n讨论\n尽管 myfun() 看上去返回了多个值，实际上是先创建了一个元组然后返回的。这\n个语法看上去比较奇怪，实际上我们使用的是逗号来生成一个元组，而不是用括号。比\n如下面的：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a = (1, 2) # With parentheses\na\n(1, 2)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = 1, 2 # Without parentheses\nb\n(1, 2)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("当我们调用返回一个元组的函数的时候，通常我们会将结果赋值给多个变量，就像\n上面的那样。其实这就是 1.1 小节中我们所说的元组解包。返回结果也可以赋值给单个\n变量，这时候这个变量值就是函数返回的那个元组本身了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = myfun()\nx\n(1, 2, 3)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("7.5 定义有默认参数的函数\n问题\n你想定义一个函数或者方法，它的一个或多个参数是可选的并且有一个默认值。\n解决方案\n定义一个有可选参数的函数是非常简单的，直接在函数定义中给参数指定一个默\n认值，并放到参数列表最后就行了。例如：\ndef spam(a, b=42):\nprint(a, b)\nspam(1) # Ok. a=1, b=42\nspam(1, 2) # Ok. a=1, b=2\n如果默认参数是一个可修改的容器比如一个列表、集合或者字典，可以使用 None\n作为默认值，就像下面这样：")]),e._v(" "),n("h1",{attrs:{id:"using-a-list-as-a-default-value"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-a-list-as-a-default-value"}},[e._v("#")]),e._v(" Using a list as a default value")]),e._v(" "),n("p",[e._v("def spam(a, b=None):\nif b is None: b = []\n...\n如果你并不想提供一个默认值，而是想仅仅测试下某个默认参数是不是有传递进\n来，可以像下面这样写：\n_no_value = object()\ndef spam(a, b=_no_value):\nif b is _no_value:\nprint('No b value supplied') ...\n我们测试下这个函数：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("spam(1)\nNo b value supplied")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam(1, 2) # b = 2\nspam(1, None) # b = None")])])])]),e._v(" "),n("p",[e._v("仔细观察可以发现到传递一个 None 值和不传值两种情况是有差别的。\n讨论\n定义带默认值参数的函数是很简单的，但绝不仅仅只是这个，还有一些东西在这里\n也深入讨论下。\n首先，默认参数的值仅仅在函数定义的时候赋值一次。试着运行下面这个例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 42\ndef spam(a, b=x):\n... print(a, b)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam(1)\n1 42")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x = 23 # Has no effect\nspam(1)\n1 42")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("注意到当我们改变 x 的值的时候对默认参数值并没有影响，这是因为在函数定义\n的时候就已经确定了它的默认值了。\n其次，默认参数的值应该是不可变的对象，比如 None、True、False、数字或字符\n串。特别的，千万不要像下面这样写代码：\ndef spam(a, b=[]): # NO!\n...\n如果你这么做了，当默认值在其他地方被修改后你将会遇到各种麻烦。这些修改会\n影响到下次调用这个函数时的默认值。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def spam(a, b=[]):\n... print(b)\n... return b\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x = spam(1)\nx\n[]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x.append(99)\nx.append('Yow!')\nx\n[99, 'Yow!']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam(1) # Modified list gets returned!\n[99, 'Yow!']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这种结果应该不是你想要的。为了避免这种情况的发生，最好是将默认值设为\nNone，然后在函数里面检查它，前面的例子就是这样做的。\n在测试 None 值时使用 is 操作符是很重要的，也是这种方案的关键点。有时候大\n家会犯下下面这样的错误：\ndef spam(a, b=None):\nif not b: # NO! Use 'b is None' instead\nb = []\n...\n这么写的问题在于尽管 None 值确实是被当成 False，但是还有其他的对象 (比如\n长度为 0 的字符串、列表、元组、字典等) 都会被当做 False。因此，上面的代码会误将\n一些其他输入也当成是没有输入。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("spam(1) # OK\nx = []\nspam(1, x) # Silent error. x value overwritten by default\nspam(1, 0) # Silent error. 0 ignored\nspam(1, '') # Silent error. '' ignored")])])])]),e._v(" "),n("p",[e._v("最后一个问题比较微妙，那就是一个函数需要测试某个可选参数是否被使用者传\n递进来。这时候需要小心的是你不能用某个默认值比如 None、0 或者 False 值来测试用\n户提供的值 (因为这些值都是合法的值，是可能被用户传递进来的)。因此，你需要其他\n的解决方案了。\n为了解决这个问题，你可以创建一个独一无二的私有对象实例，就像上面的\n_no_value 变量那样。在函数里面，你可以通过检查被传递参数值跟这个实例是否一样\n来判断。这里的思路是用户不可能去传递这个 _no_value 实例作为输入。因此，这里\n通过检查这个值就能确定某个参数是否被传递进来了。\n这里对 object() 的使用看上去有点不太常见。object 是 python 中所有类的基类。\n你可以创建 object 类的实例，但是这些实例没什么实际用处，因为它并没有任何有用\n的方法，也没有任何实例数据 (因为它没有任何的实例字典，你甚至都不能设置任何属\n性值)。你唯一能做的就是测试同一性。这个刚好符合我的要求，因为我在函数中就只\n是需要一个同一性的测试而已。\n7.6 定义匿名或内联函数\n问题\n你想为 sort() 操作创建一个很短的回调函数，但又不想用 def 去写一个单行函\n数，而是希望通过某个快捷方式以内联方式来创建这个函数。\n解决方案\n当一些函数很简单，仅仅只是计算一个表达式的值的时候，就可以使用 lambda 表\n达式来代替了。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("add = lambda x, y: x + y\nadd(2,3) 5\nadd('hello', 'world')\n'helloworld'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这里使用的 lambda 表达式跟下面的效果是一样的：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def add(x, y):\n... return x + y\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("add(2,3) 5")])])])]),e._v(" "),n("p",[e._v("lambda 表达式典型的使用场景是排序或数据 reduce 等：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("names = ['David Beazley', 'Brian Jones',\n... 'Raymond Hettinger', 'Ned Batchelder']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sorted(names, key=lambda name: name.split()[-1].lower())\n['Ned Batchelder', 'David Beazley', 'Raymond Hettinger', 'Brian Jones']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n尽管 lambda 表达式允许你定义简单函数，但是它的使用是有限制的。你只能指定\n单个表达式，它的值就是最后的返回值。也就是说不能包含其他的语言特性了，包括多\n个语句、条件表达式、迭代以及异常处理等等。\n你可以不使用 lambda 表达式就能编写大部分 python 代码。但是，当有人编写\n大量计算表达式值的短小函数或者需要用户提供回调函数的程序的时候，你就会看到\nlambda 表达式的身影了。\n7.7 匿名函数捕获变量值\n问题\n你用 lambda 定义了一个匿名函数，并想在定义时捕获到某些变量的值。\n解决方案\n先看下下面代码的效果：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 10\na = lambda y: x + y\nx = 20\nb = lambda y: x + y")])])])]),e._v(" "),n("p",[e._v("现在我问你，a(10) 和 b(10) 返回的结果是什么？如果你认为结果是 20 和 30，那\n么你就错了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a(10)\n30")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b(10)\n30")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这其中的奥妙在于 lambda 表达式中的 x 是一个自由变量，在运行时绑定值，而不\n是定义时就绑定，这跟函数的默认值参数定义是不同的。因此，在调用这个 lambda 表\n达式的时候，x 的值是执行时的值。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 15\na(10)\n25")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x = 3\na(10)\n13")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想让某个匿名函数在定义时就捕获到值，可以将那个参数值定义成默认参\n数即可，就像下面这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 10\na = lambda y, x=x: x + y\nx = 20\nb = lambda y, x=x: x + y\na(10)\n20")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b(10)\n30")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n在这里列出来的问题是新手很容易犯的错误，有些新手可能会不恰当的使用\nlambda 表达式。比如，通过在一个循环或列表推导中创建一个 lambda 表达式列表，并\n期望函数能在定义时就记住每次的迭代值。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("funcs = [lambda x: x+n for n in range(5)]\nfor f in funcs:\n... print(f(0))\n...\n44444")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("但是实际效果是运行是 n 的值为迭代的最后一个值。现在我们用另一种方式修改\n一下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("funcs = [lambda x, n=n: x+n for n in range(5)]\nfor f in funcs:\n... print(f(0))\n...\n01234")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("通过使用函数默认值参数形式，lambda 函数在定义时就能绑定到值。\n7.8 减少可调用对象的参数个数\n问题\n你有一个被其他 python 代码使用的 callable 对象，可能是一个回调函数或者是一\n个处理器，但是它的参数太多了，导致调用时出错。\n解决方案\n如果需要减少某个函数的参数个数，你可以使用 functools.partial() 。partial()\n函数允许你给一个或多个参数设置固定的值，减少接下来被调用时的参数个数。为了演\n示清楚，假设你有下面这样的函数：\ndef spam(a, b, c, d):\nprint(a, b, c, d)\n现在我们使用 partial() 函数来固定某些参数值：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from functools import partial\ns1 = partial(spam, 1) # a = 1\ns1(2, 3, 4)\n1 2 3 4")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s1(4, 5, 6)\n1 4 5 6")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s2 = partial(spam, d=42) # d = 42\ns2(1, 2, 3)\n1 2 3 42")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s2(4, 5, 5)\n4 5 5 42")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s3 = partial(spam, 1, 2, d=42) # a = 1, b = 2, d = 42\ns3(3)\n1 2 3 42")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s3(4)\n1 2 4 42")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s3(5)\n1 2 5 42")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("可以看出 partial() 固定某些参数并返回一个新的 callable 对象。这个新的 callable\n接受未赋值的参数，然后跟之前已经赋值过的参数合并起来，最后将所有参数传递给原\n始函数。\n讨论\n本节要解决的问题是让原本不兼容的代码可以一起工作。下面我会列举一系列的\n例子。\n第一个例子是，假设你有一个点的列表来表示 (x,y) 坐标元组。你可以使用下面的\n函数来计算两点之间的距离：\npoints = [ (1, 2), (3, 4), (5, 6), (7, 8) ]\nimport math\ndef distance(p1, p2):\nx1, y1 = p1\nx2, y2 = p2\nreturn math.hypot(x2 - x1, y2 - y1)\n现在假设你想以某个点为基点，根据点和基点之间的距离来排序所有的这些点。列\n表的 sort() 方法接受一个关键字参数来自定义排序逻辑，但是它只能接受一个单个参\n数的函数 (distance() 很明显是不符合条件的)。现在我们可以通过使用 partial() 来解\n决这个问题：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("pt = (4, 3)\npoints.sort(key=partial(distance,pt))\npoints\n[(3, 4), (1, 2), (5, 6), (7, 8)]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("更进一步，partial() 通常被用来微调其他库函数所使用的回调函数的参数。例\n如，下面是一段代码，使用 multiprocessing 来异步计算一个结果值，然后这个值被\n传递给一个接受一个 result 值和一个可选 logging 参数的回调函数：\ndef output_result(result, log=None):\nif log is not None:\nlog.debug('Got: %r', result)")]),e._v(" "),n("h1",{attrs:{id:"a-sample-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-sample-function"}},[e._v("#")]),e._v(" A sample function")]),e._v(" "),n("p",[e._v("def add(x, y):\nreturn x + y\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nimport logging\nfrom multiprocessing import Pool\nfrom functools import partial\nlogging.basicConfig(level=logging.DEBUG)\nlog = logging.getLogger('test') p = Pool()\np.apply_async(add, (3, 4), callback=partial(output_result, log=log))\np.close()\np.join()\n当给 apply_async() 提供回调函数时，通过使用 partial() 传递额外的 logging\n参数。而 multiprocessing 对这些一无所知——它仅仅只是使用单个值来调用回调函\n数。\n作为一个类似的例子，考虑下编写网络服务器的问题，socketserver 模块让它变\n得很容易。下面是个简单的 echo 服务器：\nfrom socketserver import StreamRequestHandler, TCPServer\nclass EchoHandler(StreamRequestHandler):\ndef handle(self):\nfor line in self.rfile:\nself.wfile.write(b'GOT:' + line)\nserv = TCPServer(('', 15000), EchoHandler)\nserv.serve_forever()\n不过，假设你想给 EchoHandler 增加一个可以接受其他配置选项的 "),n("strong",[e._v("init")]),e._v(" 方\n法。比如：\nclass EchoHandler(StreamRequestHandler):")]),e._v(" "),n("h1",{attrs:{id:"ack-is-added-keyword-only-argument-args-kwargs-are"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ack-is-added-keyword-only-argument-args-kwargs-are"}},[e._v("#")]),e._v(" ack is added keyword-only argument. *args, **kwargs are")]),e._v(" "),n("h1",{attrs:{id:"any-normal-parameters-supplied-which-are-passed-on"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#any-normal-parameters-supplied-which-are-passed-on"}},[e._v("#")]),e._v(" any normal parameters supplied (which are passed on)")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("init")]),e._v("(self, *args, ack, **kwargs):\nself.ack = ack\nsuper()."),n("strong",[e._v("init")]),e._v("(*args, **kwargs)\ndef handle(self):\nfor line in self.rfile:\nself.wfile.write(self.ack + line)\n这么修改后，我们就不需要显式地在 TCPServer 类中添加前缀了。但是你再次运\n行程序后会报类似下面的错误：\nException happened during processing of request from ('127.0.0.1', 59834)\nTraceback (most recent call last):\n...\nTypeError: "),n("strong",[e._v("init")]),e._v("() missing 1 required keyword-only argument: 'ack'\n初看起来好像很难修正这个错误，除了修改 socketserver 模块源代码或者使用某\n些奇怪的方法之外。但是，如果使用 partial() 就能很轻松的解决——给它传递 ack\n参数的值来初始化即可，如下：\nfrom functools import partial\nserv = TCPServer(('', 15000), partial(EchoHandler, ack=b'RECEIVED:'))\nserv.serve_forever()\n在这个例子中，"),n("strong",[e._v("init")]),e._v("() 方法中的 ack 参数声明方式看上去很有趣，其实就是\n声明 ack 为一个强制关键字参数。关于强制关键字参数问题我们在 7.2 小节我们已经讨\n论过了，读者可以再去回顾一下。\n很多时候 partial() 能实现的效果，lambda 表达式也能实现。比如，之前的几个\n例子可以使用下面这样的表达式：\npoints.sort(key=lambda p: distance(pt, p))\np.apply_async(add, (3, 4), callback=lambda result: output_result(result,log))\nserv = TCPServer(('', 15000),\nlambda *args, "),n("strong",[e._v("kwargs: EchoHandler(*args, ack=b'RECEIVED:',␣ , →")]),e._v("kwargs))\n这样写也能实现同样的效果，不过相比而已会显得比较臃肿，对于阅读代码的人来\n讲也更加难懂。这时候使用 partial() 可以更加直观的表达你的意图 (给某些参数预先\n赋值)。\n7.9 将单方法的类转换为函数\n问题\n你有一个除 "),n("strong",[e._v("init")]),e._v("() 方法外只定义了一个方法的类。为了简化代码，你想将它\n转换成一个函数。\n解决方案\n大多数情况下，可以使用闭包来将单个方法的类转换成函数。举个例子，下面示例\n中的类允许使用者根据某个模板方案来获取到 URL 链接地址。\nfrom urllib.request import urlopen\nclass UrlTemplate:\ndef "),n("strong",[e._v("init")]),e._v("(self, template):\nself.template = template\ndef open(self, **kwargs):\nreturn urlopen(self.template.format_map(kwargs))")]),e._v(" "),n("h1",{attrs:{id:"example-use-download-stock-data-from-yahoo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-download-stock-data-from-yahoo"}},[e._v("#")]),e._v(" Example use. Download stock data from yahoo")]),e._v(" "),n("p",[e._v("yahoo = UrlTemplate('http://finance.yahoo.com/d/quotes.csv?s={names}&f=\n,\n→{fields}')\nfor line in yahoo.open(names='IBM,AAPL,FB', fields='sl1c1v'):\nprint(line.decode('utf-8'))\n这个类可以被一个更简单的函数来代替：\ndef urltemplate(template):\ndef opener(**kwargs):\nreturn urlopen(template.format_map(kwargs))\nreturn opener")]),e._v(" "),n("h1",{attrs:{id:"example-use-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-2"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("yahoo = urltemplate('http://finance.yahoo.com/d/quotes.csv?s={names}&f=\n,\n→{fields}')\nfor line in yahoo(names='IBM,AAPL,FB', fields='sl1c1v'):\nprint(line.decode('utf-8'))\n讨论\n大部分情况下，你拥有一个单方法类的原因是需要存储某些额外的状态来给方法\n使用。比如，定义 UrlTemplate 类的唯一目的就是先在某个地方存储模板值，以便将来\n可以在 open() 方法中使用。\n使用一个内部函数或者闭包的方案通常会更优雅一些。简单来讲，一个闭包就是\n一个函数，只不过在函数内部带上了一个额外的变量环境。闭包关键特点就是它会记\n住自己被定义时的环境。因此，在我们的解决方案中，opener() 函数记住了 template\n参数的值，并在接下来的调用中使用它。\n任何时候只要你碰到需要给某个函数增加额外的状态信息的问题，都可以考虑使\n用闭包。相比将你的函数转换成一个类而言，闭包通常是一种更加简洁和优雅的方案。\n7.10 带额外状态信息的回调函数\n问题\n你的代码中需要依赖到回调函数的使用 (比如事件处理器、等待后台任务完成后的\n回调等)，并且你还需要让回调函数拥有额外的状态值，以便在它的内部使用到。\n解决方案\n这一小节主要讨论的是那些出现在很多函数库和框架中的回调函数的使用——特\n别是跟异步处理有关的。为了演示与测试，我们先定义如下一个需要调用回调函数的函\n数：\ndef apply_async(func, args, *, callback):")]),e._v(" "),n("h1",{attrs:{id:"compute-the-result"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compute-the-result"}},[e._v("#")]),e._v(" Compute the result")]),e._v(" "),n("p",[e._v("result = func(*args)")]),e._v(" "),n("h1",{attrs:{id:"invoke-the-callback-with-the-result"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#invoke-the-callback-with-the-result"}},[e._v("#")]),e._v(" Invoke the callback with the result")]),e._v(" "),n("p",[e._v("callback(result)\n实际上，这段代码可以做任何更高级的处理，包括线程、进程和定时器，但是这些\n都不是我们要关心的。我们仅仅只需要关注回调函数的调用。下面是一个演示怎样使用\n上述代码的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def print_result(result):\n... print('Got:', result)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("def add(x, y):\n... return x + y\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("apply_async(add, (2, 3), callback=print_result)\nGot: 5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("apply_async(add, ('hello', 'world'), callback=print_result)\nGot: helloworld")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("注意到 print_result() 函数仅仅只接受一个参数 result 。不能再传入其他信息。\n而当你想让回调函数访问其他变量或者特定环境的变量值的时候就会遇到麻烦。\n为了让回调函数访问外部信息，一种方法是使用一个绑定方法来代替一个简单函\n数。比如，下面这个类会保存一个内部序列号，每次接收到一个 result 的时候序列号\n加 1：\nclass ResultHandler:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself.sequence = 0\ndef handler(self, result):\nself.sequence += 1\nprint('[{}] Got: {}'.format(self.sequence, result))\n使用这个类的时候，你先创建一个类的实例，然后用它的 handler() 绑定方法来\n做为回调函数：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("r = ResultHandler()\napply_async(add, (2, 3), callback=r.handler)\n[1] Got: 5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("apply_async(add, ('hello', 'world'), callback=r.handler)\n[2] Got: helloworld")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("第二种方式，作为类的替代，可以使用一个闭包捕获状态值，例如：\ndef make_handler():\nsequence = 0\ndef handler(result):\nnonlocal sequence\nsequence += 1\nprint('[{}] Got: {}'.format(sequence, result))\nreturn handler\n下面是使用闭包方式的一个例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("handler = make_handler()\napply_async(add, (2, 3), callback=handler)\n[1] Got: 5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("apply_async(add, ('hello', 'world'), callback=handler)\n[2] Got: helloworld")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("还有另外一个更高级的方法，可以使用协程来完成同样的事情：\ndef make_handler():\nsequence = 0\nwhile True:\nresult = yield\nsequence += 1\nprint('[{}] Got: {}'.format(sequence, result))\n对于协程，你需要使用它的 send() 方法作为回调函数，如下所示：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("handler = make_handler()\nnext(handler) # Advance to the yield\napply_async(add, (2, 3), callback=handler.send)\n[1] Got: 5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("apply_async(add, ('hello', 'world'), callback=handler.send)\n[2] Got: helloworld")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n基于回调函数的软件通常都有可能变得非常复杂。一部分原因是回调函数通常会\n跟请求执行代码断开。因此，请求执行和处理结果之间的执行环境实际上已经丢失了。\n如果你想让回调函数连续执行多步操作，那你就必须去解决如何保存和恢复相关的状\n态信息了。\n至少有两种主要方式来捕获和保存状态信息，你可以在一个对象实例 (通过一个绑\n定方法) 或者在一个闭包中保存它。两种方式相比，闭包或许是更加轻量级和自然一点，\n因为它们可以很简单的通过函数来构造。它们还能自动捕获所有被使用到的变量。因\n此，你无需去担心如何去存储额外的状态信息 (代码中自动判定)。\n如果使用闭包，你需要注意对那些可修改变量的操作。在上面的方案中，nonlocal\n声明语句用来指示接下来的变量会在回调函数中被修改。如果没有这个声明，代码会报\n错。\n而使用一个协程来作为一个回调函数就更有趣了，它跟闭包方法密切相关。某种意\n义上来讲，它显得更加简洁，因为总共就一个函数而已。并且，你可以很自由的修改变\n量而无需去使用 nonlocal 声明。这种方式唯一缺点就是相对于其他 Python 技术而言\n或许比较难以理解。另外还有一些比较难懂的部分，比如使用之前需要调用 next() ，\n实际使用时这个步骤很容易被忘记。尽管如此，协程还有其他用处，比如作为一个内联\n回调函数的定义 (下一节会讲到)。\n如果你仅仅只需要给回调函数传递额外的值的话，还有一种使用 partial() 的方\n式也很有用。在没有使用 partial() 的时候，你可能经常看到下面这种使用 lambda 表\n达式的复杂代码：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("apply_async(add, (2, 3), callback=lambda r: handler(r, seq))\n[1] Got: 5")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("可以参考 7.8 小节的几个示例，教你如何使用 partial() 来更改参数签名来简化\n上述代码。\n7.11 内联回调函数\n问题\n当你编写使用回调函数的代码的时候，担心很多小函数的扩张可能会弄乱程序控\n制流。你希望找到某个方法来让代码看上去更像是一个普通的执行序列。\n解决方案\n通过使用生成器和协程可以使得回调函数内联在某个函数中。为了演示说明，假设\n你有如下所示的一个执行某种计算任务然后调用一个回调函数的函数 (参考 7.10 小节)：\ndef apply_async(func, args, *, callback):")]),e._v(" "),n("h1",{attrs:{id:"compute-the-result-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compute-the-result-2"}},[e._v("#")]),e._v(" Compute the result")]),e._v(" "),n("p",[e._v("result = func(*args)")]),e._v(" "),n("h1",{attrs:{id:"invoke-the-callback-with-the-result-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#invoke-the-callback-with-the-result-2"}},[e._v("#")]),e._v(" Invoke the callback with the result")]),e._v(" "),n("p",[e._v("callback(result)\n接下来让我们看一下下面的代码，它包含了一个 Async 类和一个 inlined_async\n装饰器：\nfrom queue import Queue\nfrom functools import wraps\nclass Async:\ndef "),n("strong",[e._v("init")]),e._v("(self, func, args):\nself.func = func\nself.args = args\ndef inlined_async(func):\n@wraps(func)\ndef wrapper(*args):\nf = func(*args)\nresult_queue = Queue()\nresult_queue.put(None)\nwhile True:\nresult = result_queue.get()\ntry:a = f.send(result)\napply_async(a.func, a.args, callback=result_queue.put)\nexcept StopIteration:\nbreak\nreturn wrapper\n这两个代码片段允许你使用 yield 语句内联回调步骤。比如：\ndef add(x, y):\nreturn x + y\n@inlined_async\ndef test():\nr = yield Async(add, (2, 3))\nprint(r)\nr = yield Async(add, ('hello', 'world'))\nprint(r)\nfor n in range(10):\nr = yield Async(add, (n, n))\nprint(r)\nprint('Goodbye')\n如果你调用 test() ，你会得到类似如下的输出：\n5\nhelloworld\n0\n2468\n10\n12\n14\n16\n18\nGoodbye\n你会发现，除了那个特别的装饰器和 yield 语句外，其他地方并没有出现任何的\n回调函数 (其实是在后台定义的)。\n讨论\n本小节会实实在在的测试你关于回调函数、生成器和控制流的知识。\n首先，在需要使用到回调的代码中，关键点在于当前计算工作会挂起并在将来\n的某个时候重启 (比如异步执行)。当计算重启时，回调函数被调用来继续处理结果。\napply_async() 函数演示了执行回调的实际逻辑，尽管实际情况中它可能会更加复杂\n(包括线程、进程、事件处理器等等)。\n计算的暂停与重启思路跟生成器函数的执行模型不谋而合。具体来讲，yield 操作\n会使一个生成器函数产生一个值并暂停。接下来调用生成器的 "),n("strong",[e._v("next")]),e._v("() 或 send()\n方法又会让它从暂停处继续执行。\n根据这个思路，这一小节的核心就在 inline_async() 装饰器函数中了。关键点\n就是，装饰器会逐步遍历生成器函数的所有 yield 语句，每一次一个。为了这样做，\n刚开始的时候创建了一个 result 队列并向里面放入一个 None 值。然后开始一个循\n环操作，从队列中取出结果值并发送给生成器，它会持续到下一个 yield 语句，在这\n里一个 Async 的实例被接受到。然后循环开始检查函数和参数，并开始进行异步计算\napply_async() 。然而，这个计算有个最诡异部分是它并没有使用一个普通的回调函\n数，而是用队列的 put() 方法来回调。\n这时候，是时候详细解释下到底发生了什么了。主循环立即返回顶部并在队列上执\n行 get() 操作。如果数据存在，它一定是 put() 回调存放的结果。如果没有数据，那么\n先暂停操作并等待结果的到来。这个具体怎样实现是由 apply_async() 函数来决定的。\n如果你不相信会有这么神奇的事情，你可以使用 multiprocessing 库来试一下，在单\n独的进程中执行异步计算操作，如下所示：\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nimport multiprocessing\npool = multiprocessing.Pool()\napply_async = pool.apply_async")]),e._v(" "),n("h1",{attrs:{id:"run-the-test-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-the-test-function"}},[e._v("#")]),e._v(" Run the test function")]),e._v(" "),n("p",[e._v("test()\n实际上你会发现这个真的就是这样的，但是要解释清楚具体的控制流得需要点时\n间了。\n将复杂的控制流隐藏到生成器函数背后的例子在标准库和第三方包中都能看到。比\n如，在 contextlib 中的 @contextmanager 装饰器使用了一个令人费解的技巧，通过\n一个 yield 语句将进入和离开上下文管理器粘合在一起。另外非常流行的 Twisted 包\n中也包含了非常类似的内联回调。\n7.12 访问闭包中定义的变量\n问题\n你想要扩展函数中的某个闭包，允许它能访问和修改函数的内部变量。\n解决方案\n通常来讲，闭包的内部变量对于外界来讲是完全隐藏的。但是，你可以通过编写访\n问函数并将其作为函数属性绑定到闭包上来实现这个目的。例如：\ndef sample():\nn = 0")]),e._v(" "),n("h1",{attrs:{id:"closure-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#closure-function"}},[e._v("#")]),e._v(" Closure function")]),e._v(" "),n("p",[e._v("def func():\nprint('n=', n)")]),e._v(" "),n("h1",{attrs:{id:"accessor-methods-for-n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#accessor-methods-for-n"}},[e._v("#")]),e._v(" Accessor methods for n")]),e._v(" "),n("p",[e._v("def get_n():\nreturn n\ndef set_n(value):\nnonlocal n\nn = value")]),e._v(" "),n("h1",{attrs:{id:"attach-as-function-attributes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attach-as-function-attributes"}},[e._v("#")]),e._v(" Attach as function attributes")]),e._v(" "),n("p",[e._v("func.get_n = get_n\nfunc.set_n = set_n\nreturn func\n下面是使用的例子:")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = sample()\nf()\nn= 0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("f.set_n(10)\nf()\nn= 10")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("f.get_n()\n10")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n为了说明清楚它如何工作的，有两点需要解释一下。首先，nonlocal 声明可以让\n我们编写函数来修改内部变量的值。其次，函数属性允许我们用一种很简单的方式将访\n问方法绑定到闭包函数上，这个跟实例方法很像 (尽管并没有定义任何类)。\n还可以进一步的扩展，让闭包模拟类的实例。你要做的仅仅是复制上面的内部函数\n到一个字典实例中并返回它即可。例如：\nimport sys\nclass ClosureInstance:\ndef "),n("strong",[e._v("init")]),e._v("(self, locals=None):\nif locals is None:\nlocals = sys._getframe(1).f_locals")]),e._v(" "),n("h1",{attrs:{id:"update-instance-dictionary-with-callables"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#update-instance-dictionary-with-callables"}},[e._v("#")]),e._v(" Update instance dictionary with callables")]),e._v(" "),n("p",[e._v("self."),n("strong",[e._v("dict")]),e._v(".update((key,value) for key, value in locals.items()\nif callable(value) )")]),e._v(" "),n("h1",{attrs:{id:"redirect-special-methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redirect-special-methods"}},[e._v("#")]),e._v(" Redirect special methods")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("len")]),e._v("(self):\nreturn self."),n("strong",[e._v("dict")]),n("a",{attrs:{href:""}},[e._v("'"),n("strong",[e._v("len")]),e._v("'")])]),e._v(" "),n("h1",{attrs:{id:"example-use-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-3"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("def Stack():\nitems = []\ndef push(item):\nitems.append(item)\ndef pop():\nreturn items.pop()\ndef "),n("strong",[e._v("len")]),e._v("():\nreturn len(items)\nreturn ClosureInstance()\n下面是一个交互式会话来演示它是如何工作的：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = Stack()\ns\n<"),n("strong",[e._v("main")]),e._v(".ClosureInstance object at 0x10069ed10>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.push(10)\ns.push(20)\ns.push('Hello')\nlen(s)\n3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.pop()\n'Hello'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.pop()\n20")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.pop()\n10")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("有趣的是，这个代码运行起来会比一个普通的类定义要快很多。你可能会像下面这\n样测试它跟一个类的性能对比：\nclass Stack2:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself.items = []\ndef push(self, item):\nself.items.append(item)\ndef pop(self):\nreturn self.items.pop()\ndef "),n("strong",[e._v("len")]),e._v("(self):\nreturn len(self.items)\n如果这样做，你会得到类似如下的结果：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from timeit import timeit")]),e._v(" "),n("h1",{attrs:{id:"test-involving-closures"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#test-involving-closures"}},[e._v("#")]),e._v(" Test involving closures")]),e._v(" "),n("p",[e._v("s = Stack()\ntimeit('s.push(1);s.pop()', 'from "),n("strong",[e._v("main")]),e._v(" import s')\n0.9874754269840196")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"test-involving-a-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#test-involving-a-class"}},[e._v("#")]),e._v(" Test involving a class")]),e._v(" "),n("p",[e._v("s = Stack2()\ntimeit('s.push(1);s.pop()', 'from "),n("strong",[e._v("main")]),e._v(" import s')\n1.0707052160287276")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("结果显示，闭包的方案运行起来要快大概 8%，大部分原因是因为对实例变量的简\n化访问，闭包更快是因为不会涉及到额外的 self 变量。\nRaymond Hettinger 对于这个问题设计出了更加难以理解的改进方案。不过，你得\n考虑下是否真的需要在你代码中这样做，而且它只是真实类的一个奇怪的替换而已，例\n如，类的主要特性如继承、属性、描述器或类方法都是不能用的。并且你要做一些其他\n的工作才能让一些特殊方法生效 (比如上面 ClosureInstance 中重写过的 "),n("strong",[e._v("len")]),e._v("()\n实现。)\n最后，你可能还会让其他阅读你代码的人感到疑惑，为什么它看起来不像一个普通\n的类定义呢？(当然，他们也想知道为什么它运行起来会更快)。尽管如此，这对于怎样\n访问闭包的内部变量也不失为一个有趣的例子。\n总体上讲，在配置的时候给闭包添加方法会有更多的实用功能，比如你需要重置内\n部状态、刷新缓冲区、清除缓存或其他的反馈机制的时候。")]),e._v(" "),n("h2",{attrs:{id:"第八章-类与对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第八章-类与对象"}},[e._v("#")]),e._v(" 第八章：类与对象")]),e._v(" "),n("h3",{attrs:{id:"_8-1-改变对象的字符串显示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-改变对象的字符串显示"}},[e._v("#")]),e._v(" 8.1 改变对象的字符串显示")]),e._v(" "),n("p",[e._v("要改变一个实例的字符串表示，可重新定义它的 "),n("strong",[e._v("str")]),e._v("() 和 "),n("strong",[e._v("repr")]),e._v("() 方法。\n例如：\nclass Pair:\ndef "),n("strong",[e._v("init")]),e._v("(self, x, y):\nself.x = x\nself.y = y\ndef "),n("strong",[e._v("repr")]),e._v("(self):\nreturn 'Pair({0.x!r}, {0.y!r})'.format(self)\ndef "),n("strong",[e._v("str")]),e._v("(self):\nreturn '({0.x!s}, {0.y!s})'.format(self)\n"),n("strong",[e._v("repr")]),e._v("() 方法返回一个实例的代码表示形式，通常用来重新构造这个实例。\n内置的 repr() 函数返回这个字符串，跟我们使用交互式解释器显示的值是一样的。\n"),n("strong",[e._v("str")]),e._v("() 方法将实例转换为一个字符串，使用 str() 或 print() 函数会输出这个字\n符串。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("p = Pair(3, 4)\np\nPair(3, 4) # "),n("strong",[e._v("repr")]),e._v("() output")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(p)\n(3, 4) # "),n("strong",[e._v("str")]),e._v("() output")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("我们在这里还演示了在格式化的时候怎样使用不同的字符串表现形式。特别来讲，\n!r 格式化代码指明输出使用 "),n("strong",[e._v("repr")]),e._v("() 来代替默认的 "),n("strong",[e._v("str")]),e._v("() 。你可以用前面的\n类来试着测试下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("p = Pair(3, 4)\nprint('p is {0!r}'.format(p))\np is Pair(3, 4)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print('p is {0}'.format(p))\np is (3, 4)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n自定义 "),n("strong",[e._v("repr")]),e._v("() 和 "),n("strong",[e._v("str")]),e._v("() 通常是很好的习惯，因为它能简化调试和实例\n输出。例如，如果仅仅只是打印输出或日志输出某个实例，那么程序员会看到实例更加\n详细与有用的信息。\n"),n("strong",[e._v("repr")]),e._v("() 生成的文本字符串标准做法是需要让 eval(repr(x)) == x 为真。如\n果实在不能这样子做，应该创建一个有用的文本表示，并使用 < 和 > 括起来。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = open('file.dat')\nf\n<_io.TextIOWrapper name='file.dat' mode='r' encoding='UTF-8'>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果 "),n("strong",[e._v("str")]),e._v("() 没有被定义，那么就会使用 "),n("strong",[e._v("repr")]),e._v("() 来代替输出。\n上面的 format() 方法的使用看上去很有趣，格式化代码 {0.x} 对应的是第 1 个\n参数的 x 属性。因此，在下面的函数中，0 实际上指的就是 self 本身：\ndef "),n("strong",[e._v("repr")]),e._v("(self):\nreturn 'Pair({0.x!r}, {0.y!r})'.format(self)\n作为这种实现的一个替代，你也可以使用 % 操作符，就像下面这样：\ndef "),n("strong",[e._v("repr")]),e._v("(self):\nreturn 'Pair(%r, %r)' % (self.x, self.y)\n8.2 自定义字符串的格式化\n问题\n你想通过 format() 函数和字符串方法使得一个对象能支持自定义的格式化。\n解决方案\n为了自定义字符串的格式化，我们需要在类上面定义 "),n("strong",[e._v("format")]),e._v("() 方法。例如：\n_formats = { 'ymd' : '{d.year}-{d.month}-{d.day}', 'mdy' : '{d.month}/{d.day}/{d.year}', 'dmy' : '{d.day}/{d.month}/{d.year}' }\nclass Date:\ndef "),n("strong",[e._v("init")]),e._v("(self, year, month, day):\nself.year = year\nself.month = month\nself.day = day\ndef "),n("strong",[e._v("format")]),e._v("(self, code):\nif code == '':\ncode = 'ymd'\nfmt = _formats[code]\nreturn fmt.format(d=self)\n现在 Date 类的实例可以支持格式化操作了，如同下面这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("d = Date(2012, 12, 21)\nformat(d)\n'2012-12-21'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(d, 'mdy')\n'12/21/2012'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("'The date is {:ymd}'.format(d)\n'The date is 2012-12-21'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("'The date is {:mdy}'.format(d)\n'The date is 12/21/2012'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n"),n("strong",[e._v("format")]),e._v("() 方法给 Python 的字符串格式化功能提供了一个钩子。这里需要着\n重强调的是格式化代码的解析工作完全由类自己决定。因此，格式化代码可以是任何\n值。例如，参考下面来自 datetime 模块中的代码：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from datetime import date\nd = date(2012, 12, 21)\nformat(d)\n'2012-12-21'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("format(d,'%A, %B %d, %Y')\n'Friday, December 21, 2012'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("'The end is {:%d %b %Y}. Goodbye'.format(d)\n'The end is 21 Dec 2012. Goodbye'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对于内置类型的格式化有一些标准的约定。可以参考 string 模块文档 说明。\n8.3 让对象支持上下文管理协议\n问题\n你想让你的对象支持上下文管理协议 (with 语句)。\n解决方案\n为了让一个对象兼容 with 语句，你需要实现 "),n("strong",[e._v("enter")]),e._v("() 和 "),n("strong",[e._v("exit")]),e._v("() 方法。\n例如，考虑如下的一个类，它能为我们创建一个网络连接：\nfrom socket import socket, AF_INET, SOCK_STREAM\nclass LazyConnection:\ndef "),n("strong",[e._v("init")]),e._v("(self, address, family=AF_INET, type=SOCK_STREAM):\nself.address = address\nself.family = family\nself.type = type\nself.sock = None\ndef "),n("strong",[e._v("enter")]),e._v("(self):\nif self.sock is not None:\nraise RuntimeError('Already connected')\nself.sock = socket(self.family, self.type)\nself.sock.connect(self.address)\nreturn self.sock\ndef "),n("strong",[e._v("exit")]),e._v("(self, exc_ty, exc_val, tb):\nself.sock.close()\nself.sock = None\n这个类的关键特点在于它表示了一个网络连接，但是初始化的时候并不会做任何\n事情 (比如它并没有建立一个连接)。连接的建立和关闭是使用 with 语句自动完成的，\n例如：\nfrom functools import partial\nconn = LazyConnection(('www.python.org', 80))")]),e._v(" "),n("h1",{attrs:{id:"connection-closed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#connection-closed"}},[e._v("#")]),e._v(" Connection closed")]),e._v(" "),n("p",[e._v("with conn as s:")]),e._v(" "),n("h1",{attrs:{id:"conn-enter-executes-connection-open"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conn-enter-executes-connection-open"}},[e._v("#")]),e._v(" conn."),n("strong",[e._v("enter")]),e._v("() executes: connection open")]),e._v(" "),n("p",[e._v("s.send(b'GET /index.html HTTP/1.0\\r\\n') s.send(b'Host: www.python.org\\r\\n') s.send(b'\\r\\n')\nresp = b''.join(iter(partial(s.recv, 8192), b''))")]),e._v(" "),n("h1",{attrs:{id:"conn-exit-executes-connection-closed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conn-exit-executes-connection-closed"}},[e._v("#")]),e._v(" conn."),n("strong",[e._v("exit")]),e._v("() executes: connection closed")]),e._v(" "),n("p",[e._v("讨论\n编写上下文管理器的主要原理是你的代码会放到 with 语句块中执行。当出现 with\n语句的时候，对象的 "),n("strong",[e._v("enter")]),e._v("() 方法被触发，它返回的值 (如果有的话) 会被赋值给\nas 声明的变量。然后，with 语句块里面的代码开始执行。最后，"),n("strong",[e._v("exit")]),e._v("() 方法被触\n发进行清理工作。\n不管 with 代码块中发生什么，上面的控制流都会执行完，就算代码块中发生了异\n常也是一样的。事实上，"),n("strong",[e._v("exit")]),e._v("() 方法的第三个参数包含了异常类型、异常值和追\n溯信息 (如果有的话)。"),n("strong",[e._v("exit")]),e._v("() 方法能自己决定怎样利用这个异常信息，或者忽略\n它并返回一个 None 值。如果 "),n("strong",[e._v("exit")]),e._v("() 返回 True ，那么异常会被清空，就好像什\n么都没发生一样，with 语句后面的程序继续在正常执行。\n还有一个细节问题就是 LazyConnection 类是否允许多个 with 语句来嵌套使用连\n接。很显然，上面的定义中一次只能允许一个 socket 连接，如果正在使用一个 socket\n的时候又重复使用 with 语句，就会产生一个异常了。不过你可以像下面这样修改下上\n面的实现来解决这个问题：\nfrom socket import socket, AF_INET, SOCK_STREAM\nclass LazyConnection:\ndef "),n("strong",[e._v("init")]),e._v("(self, address, family=AF_INET, type=SOCK_STREAM):\nself.address = address\nself.family = family\nself.type = type\nself.connections = []\ndef "),n("strong",[e._v("enter")]),e._v("(self):\nsock = socket(self.family, self.type)\nsock.connect(self.address)\nself.connections.append(sock)\nreturn sock\ndef "),n("strong",[e._v("exit")]),e._v("(self, exc_ty, exc_val, tb):\nself.connections.pop().close()")]),e._v(" "),n("h1",{attrs:{id:"example-use-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-4"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("from functools import partial\nconn = LazyConnection(('www.python.org', 80))\nwith conn as s1:\npass\nwith conn as s2:\npass")]),e._v(" "),n("h1",{attrs:{id:"s1-and-s2-are-independent-sockets"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#s1-and-s2-are-independent-sockets"}},[e._v("#")]),e._v(" s1 and s2 are independent sockets")]),e._v(" "),n("p",[e._v("在第二个版本中，LazyConnection 类可以被看做是某个连接工厂。在内部，一个\n列表被用来构造一个栈。每次 "),n("strong",[e._v("enter")]),e._v("() 方法执行的时候，它复制创建一个新的连\n接并将其加入到栈里面。"),n("strong",[e._v("exit")]),e._v("() 方法简单的从栈中弹出最后一个连接并关闭它。\n这里稍微有点难理解，不过它能允许嵌套使用 with 语句创建多个连接，就如上面演示\n的那样。\n在需要管理一些资源比如文件、网络连接和锁的编程环境中，使用上下文管理器是\n很普遍的。这些资源的一个主要特征是它们必须被手动的关闭或释放来确保程序的正\n确运行。例如，如果你请求了一个锁，那么你必须确保之后释放了它，否则就可能产生\n死锁。通过实现 "),n("strong",[e._v("enter")]),e._v("() 和 "),n("strong",[e._v("exit")]),e._v("() 方法并使用 with 语句可以很容易的避免\n这些问题，因为 "),n("strong",[e._v("exit")]),e._v("() 方法可以让你无需担心这些了。\n在 contextmanager 模块中有一个标准的上下文管理方案模板，可参考 9.22 小节。\n同时在 12.6 小节中还有一个对本节示例程序的线程安全的修改版。\n8.4 创建大量对象时节省内存方法\n问题\n你的程序要创建大量 (可能上百万) 的对象，导致占用很大的内存。\n解决方案\n对于主要是用来当成简单的数据结构的类而言，你可以通过给类添加 "),n("strong",[e._v("slots")]),e._v("\n属性来极大的减少实例所占的内存。比如：\nclass Date:\n"),n("strong",[e._v("slots")]),e._v(" = ['year', 'month', 'day']\ndef "),n("strong",[e._v("init")]),e._v("(self, year, month, day):\nself.year = year\nself.month = month\nself.day = day\n当你定义 "),n("strong",[e._v("slots")]),e._v(" 后，Python 就会为实例使用一种更加紧凑的内部表示。实\n例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一个字典，这跟元\n组或列表很类似。在 "),n("strong",[e._v("slots")]),e._v(" 中列出的属性名在内部被映射到这个数组的指定小标\n上。使用 slots 一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在\n"),n("strong",[e._v("slots")]),e._v(" 中定义的那些属性名。\n讨论\n使用 slots 后节省的内存会跟存储属性的数量和类型有关。不过，一般来讲，使用\n到的内存总量和将数据存储在一个元组中差不多。为了给你一个直观认识，假设你不使\n用 slots 直接存储一个 Date 实例，在 64 位的 Python 上面要占用 428 字节，而如果使\n用了 slots，内存占用下降到 156 字节。如果程序中需要同时创建大量的日期实例，那\n么这个就能极大的减小内存使用量了。\n尽管 slots 看上去是一个很有用的特性，很多时候你还是得减少对它的使用冲动。\nPython 的很多特性都依赖于普通的基于字典的实现。另外，定义了 slots 后的类不再支\n持一些普通类特性了，比如多继承。大多数情况下，你应该只在那些经常被使用到的用\n作数据结构的类上定义 slots (比如在程序中需要创建某个类的几百万个实例对象)。\n关于 "),n("strong",[e._v("slots")]),e._v(" 的一个常见误区是它可以作为一个封装工具来防止用户给实例增\n加新的属性。尽管使用 slots 可以达到这样的目的，但是这个并不是它的初衷。"),n("strong",[e._v("slots")]),e._v("\n更多的是用来作为一个内存优化工具。\n8.5 在类中封装属性名\n问题\n你想封装类的实例上面的“私有”数据，但是 Python 语言并没有访问控制。\n解决方案\nPython 程序员不去依赖语言特性去封装数据，而是通过遵循一定的属性和方法命\n名规约来达到这个效果。第一个约定是任何以单下划线 _ 开头的名字都应该是内部实\n现。比如：\nclass A:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._internal = 0 # An internal attribute\nself.public = 1 # A public attribute\ndef public_method(self):\n'''\nA public method\n'''\npass\ndef _internal_method(self):\npass\nPython 并不会真的阻止别人访问内部名称。但是如果你这么做肯定是不好的，可\n能会导致脆弱的代码。同时还要注意到，使用下划线开头的约定同样适用于模块名和模\n块级别函数。例如，如果你看到某个模块名以单下划线开头 (比如 _socket)，那它就是\n内部实现。类似的，模块级别函数比如 sys._getframe() 在使用的时候就得加倍小心\n了。\n你还可能会遇到在类定义中使用两个下划线 (__) 开头的命名。比如：\nclass B:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself.__private = 0\ndef __private_method(self):\npass\ndef public_method(self):\npass\nself.__private_method()\n使用双下划线开始会导致访问名称变成其他形式。比如，在前面的类 B 中，私有\n属性会被分别重命名为 _B__private 和 _B__private_method 。这时候你可能会问这\n样重命名的目的是什么，答案就是继承——这种属性通过继承是无法被覆盖的。比如：\nclass C(B):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nsuper()."),n("strong",[e._v("init")]),e._v("()\nself.__private = 1 # Does not override B.__private")]),e._v(" "),n("h1",{attrs:{id:"does-not-override-b-private-method"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#does-not-override-b-private-method"}},[e._v("#")]),e._v(" Does not override B.__private_method()")]),e._v(" "),n("p",[e._v("def __private_method(self):\npass\n这里，私有名称 __private 和 __private_method 被重命名为 _C__private 和\n"),n("em",[e._v("C__private_method ，这个跟父类 B 中的名称是完全不同的。\n讨论\n上面提到有两种不同的编码约定 (单下划线和双下划线) 来命名私有属性，那么问\n题就来了：到底哪种方式好呢？大多数而言，你应该让你的非公共名称以单下划线开\n头。但是，如果你清楚你的代码会涉及到子类，并且有些内部属性应该在子类中隐藏起\n来，那么才考虑使用双下划线方案。\n还有一点要注意的是，有时候你定义的一个变量和某个保留关键字冲突，这时候可\n以使用单下划线作为后缀，例如：\nlambda")]),e._v(" = 2.0 # Trailing _ to avoid clash with lambda keyword\n这里我们并不使用单下划线前缀的原因是它避免误解它的使用初衷 (如使用单下划\n线前缀的目的是为了防止命名冲突而不是指明这个属性是私有的)。通过使用单下划线\n后缀可以解决这个问题。\n8.6 创建可管理的属性\n问题\n你想给某个实例 attribute 增加除访问与修改之外的其他处理逻辑，比如类型检查\n或合法性验证。\n解决方案\n自定义某个属性的一种简单方法是将它定义为一个 property。例如，下面的代码定\n义了一个 property，增加对一个属性简单的类型检查：\nclass Person:\ndef "),n("strong",[e._v("init")]),e._v("(self, first_name):\nself.first_name = first_name")]),e._v(" "),n("h1",{attrs:{id:"getter-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getter-function"}},[e._v("#")]),e._v(" Getter function")]),e._v(" "),n("p",[e._v("@property\ndef first_name(self):\nreturn self._first_name")]),e._v(" "),n("h1",{attrs:{id:"setter-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setter-function"}},[e._v("#")]),e._v(" Setter function")]),e._v(" "),n("p",[e._v("@first_name.setter\ndef first_name(self, value):\nif not isinstance(value, str):\nraise TypeError('Expected a string')\nself._first_name = value")]),e._v(" "),n("h1",{attrs:{id:"deleter-function-optional"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#deleter-function-optional"}},[e._v("#")]),e._v(" Deleter function (optional)")]),e._v(" "),n("p",[e._v('@first_name.deleter\ndef first_name(self):\nraise AttributeError("Can\'t delete attribute")\n上述代码中有三个相关联的方法，这三个方法的名字都必须一样。第一个方法是一\n个 getter 函数，它使得 first_name 成为一个属性。其他两个方法给 first_name 属\n性添加了 setter 和 deleter 函数。需要强调的是只有在 first_name 属性被创建后，\n后面的两个装饰器 @first_name.setter 和 @first_name.deleter 才能被定义。\nproperty 的一个关键特征是它看上去跟普通的 attribute 没什么两样，但是访问它\n的时候会自动触发 getter 、setter 和 deleter 方法。例如：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = Person('Guido')\na.first_name # Calls the getter\n'Guido'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('a.first_name = 42 # Calls the setter\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFile \"prop.py\", line 14, in first_name\nraise TypeError('Expected a string')\nTypeError: Expected a string")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('del a.first_name\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nAttributeError: can`t delete attribute")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在实现一个 property 的时候，底层数据 (如果有的话) 仍然需要存储在某个地方。\n因此，在 get 和 set 方法中，你会看到对 _first_name 属性的操作，这也是实际数据\n保存的地方。另外，你可能还会问为什么 "),n("strong",[e._v("init")]),e._v("() 方法中设置了 self.first_name\n而不是 self._first_name 。在这个例子中，我们创建一个 property 的目的就是在设置\nattribute 的时候进行检查。因此，你可能想在初始化的时候也进行这种类型检查。通\n过设置 self.first_name ，自动调用 setter 方法，这个方法里面会进行参数的检查，\n否则就是直接访问 self._first_name 了。\n还能在已存在的 get 和 set 方法基础上定义 property。例如：\nclass Person:\ndef "),n("strong",[e._v("init")]),e._v("(self, first_name):\nself.set_first_name(first_name)")]),e._v(" "),n("h1",{attrs:{id:"getter-function-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getter-function-2"}},[e._v("#")]),e._v(" Getter function")]),e._v(" "),n("p",[e._v("def get_first_name(self):\nreturn self._first_name")]),e._v(" "),n("h1",{attrs:{id:"setter-function-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setter-function-2"}},[e._v("#")]),e._v(" Setter function")]),e._v(" "),n("p",[e._v("def set_first_name(self, value):\nif not isinstance(value, str):\nraise TypeError('Expected a string')\nself._first_name = value")]),e._v(" "),n("h1",{attrs:{id:"deleter-function-optional-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#deleter-function-optional-2"}},[e._v("#")]),e._v(" Deleter function (optional)")]),e._v(" "),n("p",[e._v('def del_first_name(self):\nraise AttributeError("Can\'t delete attribute")')]),e._v(" "),n("h1",{attrs:{id:"make-a-property-from-existing-get-set-methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-property-from-existing-get-set-methods"}},[e._v("#")]),e._v(" Make a property from existing get/set methods")]),e._v(" "),n("p",[e._v("name = property(get_first_name, set_first_name, del_first_name)\n讨论\n一个 property 属性其实就是一系列相关绑定方法的集合。如果你去查看拥有\nproperty 的类，就会发现 property 本身的 fget、fset 和 fdel 属性就是类里面的普通方\n法。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("Person.first_name.fget\n<function Person.first_name at 0x1006a60e0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("Person.first_name.fset\n<function Person.first_name at 0x1006a6170>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("Person.first_name.fdel\n<function Person.first_name at 0x1006a62e0>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("通常来讲，你不会直接取调用 fget 或者 fset，它们会在访问 property 的时候自动\n被触发。\n只有当你确实需要对 attribute 执行其他额外的操作的时候才应该使用到 property。\n有时候一些从其他编程语言 (比如 Java) 过来的程序员总认为所有访问都应该通过\ngetter 和 setter，所以他们认为代码应该像下面这样写：\nclass Person:\ndef "),n("strong",[e._v("init")]),e._v("(self, first_name):\nself.first_name = first_name\n@property\ndef first_name(self):\nreturn self._first_name\n@first_name.setter\ndef first_name(self, value):\nself._first_name = value\n不要写这种没有做任何其他额外操作的 property。首先，它会让你的代码变得很臃\n肿，并且还会迷惑阅读者。其次，它还会让你的程序运行起来变慢很多。最后，这样的设\n计并没有带来任何的好处。特别是当你以后想给普通 attribute 访问添加额外的处理逻\n辑的时候，你可以将它变成一个 property 而无需改变原来的代码。因为访问 attribute\n的代码还是保持原样。\nProperties 还是一种定义动态计算 attribute 的方法。这种类型的 attributes 并不会\n被实际的存储，而是在需要的时候计算出来。比如：\nimport math\nclass Circle:\ndef "),n("strong",[e._v("init")]),e._v("(self, radius):\nself.radius = radius\n@property\ndef area(self):\nreturn math.pi * self.radius ** 2\n@property\ndef diameter(self):\nreturn self.radius * 2\n@property\ndef perimeter(self):\nreturn 2 * math.pi * self.radius\n在这里，我们通过使用 properties，将所有的访问接口形式统一起来，对半径、直\n径、周长和面积的访问都是通过属性访问，就跟访问简单的 attribute 是一样的。如果\n不这样做的话，那么就要在代码中混合使用简单属性访问和方法调用。下面是使用的实\n例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = Circle(4.0)\nc.radius\n4.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.area # Notice lack of ()\n50.26548245743669")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.perimeter # Notice lack of ()\n25.132741228718345")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("尽管 properties 可以实现优雅的编程接口，但有些时候你还是会想直接使用 getter\n和 setter 函数。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("p = Person('Guido')\np.get_first_name()\n'Guido'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p.set_first_name('Larry')")])])])]),e._v(" "),n("p",[e._v("这种情况的出现通常是因为 Python 代码被集成到一个大型基础平台架构或程序\n中。例如，有可能是一个 Python 类准备加入到一个基于远程过程调用的大型分布式系\n统中。这种情况下，直接使用 get/set 方法 (普通方法调用) 而不是 property 或许会更\n容易兼容。\n最后一点，不要像下面这样写有大量重复代码的 property 定义：\nclass Person:\ndef "),n("strong",[e._v("init")]),e._v("(self, first_name, last_name):\nself.first_name = first_name\nself.last_name = last_name\n@property\ndef first_name(self):\nreturn self._first_name\n@first_name.setter\ndef first_name(self, value):\nif not isinstance(value, str):\nraise TypeError('Expected a string')\nself._first_name = value")]),e._v(" "),n("h1",{attrs:{id:"repeated-property-code-but-for-a-different-name-bad"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#repeated-property-code-but-for-a-different-name-bad"}},[e._v("#")]),e._v(" Repeated property code, but for a different name (bad!)")]),e._v(" "),n("p",[e._v("@property\ndef last_name(self):\nreturn self._last_name\n@last_name.setter\ndef last_name(self, value):\nif not isinstance(value, str):\nraise TypeError('Expected a string')\nself._last_name = value\n重复代码会导致臃肿、易出错和丑陋的程序。好消息是，通过使用装饰器或闭包，\n有很多种更好的方法来完成同样的事情。可以参考 8.9 和 9.21 小节的内容。\n8.7 调用父类方法\n问题\n你想在子类中调用父类的某个已经被覆盖的方法。\n解决方案\n为了调用父类 (超类) 的一个方法，可以使用 super() 函数，比如：\nclass A:\ndef spam(self):\nprint('A.spam')\nclass B(A):\ndef spam(self):\nprint('B.spam')\nsuper().spam() # Call parent spam()\nsuper() 函数的一个常见用法是在 "),n("strong",[e._v("init")]),e._v("() 方法中确保父类被正确的初始化\n了：\nclass A:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself.x = 0\nclass B(A):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nsuper()."),n("strong",[e._v("init")]),e._v("()\nself.y = 1\nsuper() 的另外一个常见用法出现在覆盖 Python 特殊方法的代码中，比如：\nclass Proxy:\ndef "),n("strong",[e._v("init")]),e._v("(self, obj):\nself._obj = obj")]),e._v(" "),n("h1",{attrs:{id:"delegate-attribute-lookup-to-internal-obj"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delegate-attribute-lookup-to-internal-obj"}},[e._v("#")]),e._v(" Delegate attribute lookup to internal obj")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("getattr")]),e._v("(self, name):\nreturn getattr(self._obj, name)")]),e._v(" "),n("h1",{attrs:{id:"delegate-attribute-assignment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delegate-attribute-assignment"}},[e._v("#")]),e._v(" Delegate attribute assignment")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("setattr")]),e._v("(self, name, value):\nif name.startswith('_'):\nsuper()."),n("strong",[e._v("setattr")]),e._v("(name, value) # Call original "),n("strong",[e._v("setattr")]),e._v("\nelse:\nsetattr(self."),n("em",[e._v("obj, name, value)\n在上面代码中，"),n("strong",[e._v("setattr")]),e._v("() 的实现包含一个名字检查。如果某个属性名以下划\n线 (")]),e._v(") 开头，就通过 super() 调用原始的 "),n("strong",[e._v("setattr")]),e._v("() ，否则的话就委派给内部的\n代理对象 self._obj 去处理。这看上去有点意思，因为就算没有显式的指明某个类的\n父类，super() 仍然可以有效的工作。\n讨论\n实际上，大家对于在 Python 中如何正确使用 super() 函数普遍知之甚少。你有时\n候会看到像下面这样直接调用父类的一个方法：\nclass Base:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nprint('Base."),n("strong",[e._v("init")]),e._v("')\nclass A(Base):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nBase."),n("strong",[e._v("init")]),e._v("(self)\nprint('A."),n("strong",[e._v("init")]),e._v("')\n尽管对于大部分代码而言这么做没什么问题，但是在更复杂的涉及到多继承的代\n码中就有可能导致很奇怪的问题发生。比如，考虑如下的情况：\nclass Base:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nprint('Base."),n("strong",[e._v("init")]),e._v("')\nclass A(Base):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nBase."),n("strong",[e._v("init")]),e._v("(self)\nprint('A."),n("strong",[e._v("init")]),e._v("')\nclass B(Base):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nBase."),n("strong",[e._v("init")]),e._v("(self)\nprint('B."),n("strong",[e._v("init")]),e._v("')\nclass C(A,B):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nA."),n("strong",[e._v("init")]),e._v("(self) B."),n("strong",[e._v("init")]),e._v("(self)\nprint('C."),n("strong",[e._v("init")]),e._v("')\n如果你运行这段代码就会发现 Base."),n("strong",[e._v("init")]),e._v("() 被调用两次，如下所示：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = C()\nBase."),n("strong",[e._v("init")]),e._v("\nA."),n("strong",[e._v("init")]),e._v("\nBase."),n("strong",[e._v("init")]),e._v("\nB."),n("strong",[e._v("init")]),e._v("\nC."),n("strong",[e._v("init")])])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("可能两次调用 Base."),n("strong",[e._v("init")]),e._v("() 没什么坏处，但有时候却不是。另一方面，假设\n你在代码中换成使用 super() ，结果就很完美了：\nclass Base:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nprint('Base."),n("strong",[e._v("init")]),e._v("')\nclass A(Base):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nsuper()."),n("strong",[e._v("init")]),e._v("()\nprint('A."),n("strong",[e._v("init")]),e._v("')\nclass B(Base):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nsuper()."),n("strong",[e._v("init")]),e._v("()\nprint('B."),n("strong",[e._v("init")]),e._v("')\nclass C(A,B):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nsuper()."),n("strong",[e._v("init")]),e._v("() # Only one call to super() here\nprint('C."),n("strong",[e._v("init")]),e._v("')\n运行这个新版本后，你会发现每个 "),n("strong",[e._v("init")]),e._v("() 方法只会被调用一次了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = C()\nBase."),n("strong",[e._v("init")]),e._v("\nB."),n("strong",[e._v("init")]),e._v("\nA."),n("strong",[e._v("init")]),e._v("\nC."),n("strong",[e._v("init")])])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("为了弄清它的原理，我们需要花点时间解释下 Python 是如何实现继承的。对于你\n定义的每一个类，Python 会计算出一个所谓的方法解析顺序 (MRO) 列表。这个 MRO\n列表就是一个简单的所有基类的线性顺序表。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("C."),n("strong",[e._v("mro")]),e._v("\n(<class '"),n("strong",[e._v("main")]),e._v(".C'>, <class '"),n("strong",[e._v("main")]),e._v(".A'>, <class '"),n("strong",[e._v("main")]),e._v(".B'>,\n<class '"),n("strong",[e._v("main")]),e._v(".Base'>, <class 'object'>)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("为了实现继承，Python 会在 MRO 列表上从左到右开始查找基类，直到找到第一\n个匹配这个属性的类为止。\n而这个 MRO 列表的构造是通过一个 C3 线性化算法来实现的。我们不去深究这个\n算法的数学原理，它实际上就是合并所有父类的 MRO 列表并遵循如下三条准则：\n• 子类会先于父类被检查\n• 多个父类会根据它们在列表中的顺序被检查\n• 如果对下一个类存在两个合法的选择，选择第一个父类\n老实说，你所要知道的就是 MRO 列表中的类顺序会让你定义的任意类层级关系\n变得有意义。\n当你使用 super() 函数时，Python 会在 MRO 列表上继续搜索下一个类。只要\n每个重定义的方法统一使用 super() 并只调用它一次，那么控制流最终会遍历完整个\nMRO 列表，每个方法也只会被调用一次。这也是为什么在第二个例子中你不会调用两\n次 Base."),n("strong",[e._v("init")]),e._v("() 的原因。\nsuper() 有个令人吃惊的地方是它并不一定去查找某个类在 MRO 中下一个直接\n父类，你甚至可以在一个没有直接父类的类中使用它。例如，考虑如下这个类：\nclass A:\ndef spam(self):\nprint('A.spam')\nsuper().spam()\n如果你试着直接使用这个类就会出错：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('a = A()\na.spam()\nA.spam\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "'),n("stdin",[e._v("\", line 4, in spam\nAttributeError: 'super' object has no attribute 'spam'")])],1)],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("但是，如果你使用多继承的话看看会发生什么：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("class B:\n... def spam(self):\n... print('B.spam')\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("class C(A,B):\n... pass\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c = C()\nc.spam()\nA.spam\nB.spam")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你可以看到在类 A 中使用 super().spam() 实际上调用的是跟类 A 毫无关系的类\nB 中的 spam() 方法。这个用类 C 的 MRO 列表就可以完全解释清楚了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("C."),n("strong",[e._v("mro")]),e._v("\n(<class '"),n("strong",[e._v("main")]),e._v(".C'>, <class '"),n("strong",[e._v("main")]),e._v(".A'>, <class '"),n("strong",[e._v("main")]),e._v(".B'>,\n<class 'object'>)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在定义混入类的时候这样使用 super() 是很普遍的。可以参考 8.13 和 8.18 小节。\n然而，由于 super() 可能会调用不是你想要的方法，你应该遵循一些通用原则。首\n先，确保在继承体系中所有相同名字的方法拥有可兼容的参数签名 (比如相同的参数个\n数和参数名称)。这样可以确保 super() 调用一个非直接父类方法时不会出错。其次，\n最好确保最顶层的类提供了这个方法的实现，这样的话在 MRO 上面的查找链肯定可\n以找到某个确定的方法。\n在 Python 社区中对于 super() 的使用有时候会引来一些争议。尽管如此，如果一\n切顺利的话，你应该在你最新代码中使用它。Raymond Hettinger 为此写了一篇非常好\n的文章 “Python’s super() Considered Super!” ，通过大量的例子向我们解释了为什\n么 super() 是极好的。\n8.8 子类中扩展 property\n问题\n在子类中，你想要扩展定义在父类中的 property 的功能。\n解决方案\n考虑如下的代码，它定义了一个 property：\nclass Person:\ndef "),n("strong",[e._v("init")]),e._v("(self, name):\nself.name = name")]),e._v(" "),n("h1",{attrs:{id:"getter-function-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getter-function-3"}},[e._v("#")]),e._v(" Getter function")]),e._v(" "),n("p",[e._v("@property\ndef name(self):\nreturn self._name")]),e._v(" "),n("h1",{attrs:{id:"setter-function-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setter-function-3"}},[e._v("#")]),e._v(" Setter function")]),e._v(" "),n("p",[e._v("@name.setter\ndef name(self, value):\nif not isinstance(value, str):\nraise TypeError('Expected a string')\nself._name = value")]),e._v(" "),n("h1",{attrs:{id:"deleter-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#deleter-function"}},[e._v("#")]),e._v(" Deleter function")]),e._v(" "),n("p",[e._v("@name.deleter\ndef name(self):\nraise AttributeError(\"Can't delete attribute\")\n下面是一个示例类，它继承自 Person 并扩展了 name 属性的功能：\nclass SubPerson(Person):\n@property\ndef name(self):\nprint('Getting name')\nreturn super().name\n@name.setter\ndef name(self, value):\nprint('Setting name to', value)\nsuper(SubPerson, SubPerson).name."),n("strong",[e._v("set")]),e._v("(self, value)\n@name.deleter\ndef name(self):\nprint('Deleting name')\nsuper(SubPerson, SubPerson).name."),n("strong",[e._v("delete")]),e._v("(self)\n接下来使用这个新类：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = SubPerson('Guido')\nSetting name to Guido")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.name\nGetting name\n'Guido'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.name = 'Larry'\nSetting name to Larry")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('s.name = 42\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFile \"example.py\", line 16, in name\nraise TypeError('Expected a string')\nTypeError: Expected a string")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你仅仅只想扩展 property 的某一个方法，那么可以像下面这样写：\nclass SubPerson(Person):\n@Person.name.getter\ndef name(self):\nprint('Getting name')\nreturn super().name\n或者，你只想修改 setter 方法，就这么写：\nclass SubPerson(Person):\n@Person.name.setter\ndef name(self, value):\nprint('Setting name to', value)\nsuper(SubPerson, SubPerson).name."),n("strong",[e._v("set")]),e._v("(self, value)\n讨论\n在子类中扩展一个 property 可能会引起很多不易察觉的问题，因为一个 property\n其实是 getter、setter 和 deleter 方法的集合，而不是单个方法。因此，当你扩展一\n个 property 的时候，你需要先确定你是否要重新定义所有的方法还是说只修改其中某\n一个。\n在第一个例子中，所有的 property 方法都被重新定义。在每一个方法中，使用了\nsuper() 来调用父类的实现。在 setter 函数中使用 super(SubPerson, SubPerson).\nname."),n("strong",[e._v("set")]),e._v("(self, value) 的语句是没有错的。为了委托给之前定义的 setter 方\n法，需要将控制权传递给之前定义的 name 属性的 "),n("strong",[e._v("set")]),e._v("() 方法。不过，获取这个\n方法的唯一途径是使用类变量而不是实例变量来访问它。这也是为什么我们要使用\nsuper(SubPerson, SubPerson) 的原因。\n如果你只想重定义其中一个方法，那只使用 @property 本身是不够的。比如，下面\n的代码就无法工作：\nclass SubPerson(Person):\n@property # Doesn't work\ndef name(self):\nprint('Getting name')\nreturn super().name\n如果你试着运行会发现 setter 函数整个消失了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = SubPerson('Guido')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "example.py", line 5, in '),n("strong",[e._v("init")]),e._v("\nself.name = name\nAttributeError: can't set attribute")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你应该像之前说过的那样修改代码：\nclass SubPerson(Person):\n@Person.name.getter\ndef name(self):\nprint('Getting name')\nreturn super().name\n这么写后，property 之前已经定义过的方法会被复制过来，而 getter 函数被替换。\n然后它就能按照期望的工作了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = SubPerson('Guido')\ns.name\nGetting name\n'Guido'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.name = 'Larry'\ns.name\nGetting name\n'Larry'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('s.name = 42\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFile \"example.py\", line 16, in name\nraise TypeError('Expected a string')\nTypeError: Expected a string")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在这个特别的解决方案中，我们没办法使用更加通用的方式去替换硬编码的\nPerson 类名。如果你不知道到底是哪个基类定义了 property，那你只能通过重新定义\n所有 property 并使用 super() 来将控制权传递给前面的实现。\n值的注意的是上面演示的第一种技术还可以被用来扩展一个描述器 (在 8.9 小节我\n们有专门的介绍)。比如：")]),e._v(" "),n("h1",{attrs:{id:"a-descriptor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-descriptor"}},[e._v("#")]),e._v(" A descriptor")]),e._v(" "),n("p",[e._v("class String:\ndef "),n("strong",[e._v("init")]),e._v("(self, name):\nself.name = name\ndef "),n("strong",[e._v("get")]),e._v("(self, instance, cls):\nif instance is None:\nreturn self\nreturn instance."),n("strong",[e._v("dict")]),e._v("[self.name]\ndef "),n("strong",[e._v("set")]),e._v("(self, instance, value):\nif not isinstance(value, str):\nraise TypeError('Expected a string')\ninstance."),n("strong",[e._v("dict")]),e._v("[self.name] = value")]),e._v(" "),n("h1",{attrs:{id:"a-class-with-a-descriptor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-class-with-a-descriptor"}},[e._v("#")]),e._v(" A class with a descriptor")]),e._v(" "),n("p",[e._v("class Person:\nname = String('name')\ndef "),n("strong",[e._v("init")]),e._v("(self, name):\nself.name = name")]),e._v(" "),n("h1",{attrs:{id:"extending-a-descriptor-with-a-property"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#extending-a-descriptor-with-a-property"}},[e._v("#")]),e._v(" Extending a descriptor with a property")]),e._v(" "),n("p",[e._v("class SubPerson(Person):\n@property\ndef name(self):\nprint('Getting name')\nreturn super().name\n@name.setter\ndef name(self, value):\nprint('Setting name to', value)\nsuper(SubPerson, SubPerson).name."),n("strong",[e._v("set")]),e._v("(self, value)\n@name.deleter\ndef name(self):\nprint('Deleting name')\nsuper(SubPerson, SubPerson).name."),n("strong",[e._v("delete")]),e._v("(self)\n最后值的注意的是，读到这里时，你应该会发现子类化 setter 和 deleter 方法其\n实是很简单的。这里演示的解决方案同样适用，但是在 Python 的 issue 页面 报告的一\n个 bug，或许会使得将来的 Python 版本中出现一个更加简洁的方法。\n8.9 创建新的类或实例属性\n问题\n你想创建一个新的拥有一些额外功能的实例属性类型，比如类型检查。\n解决方案\n如果你想创建一个全新的实例属性，可以通过一个描述器类的形式来定义它的功\n能。下面是一个例子：")]),e._v(" "),n("h1",{attrs:{id:"descriptor-attribute-for-an-integer-type-checked-attribute"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#descriptor-attribute-for-an-integer-type-checked-attribute"}},[e._v("#")]),e._v(" Descriptor attribute for an integer type-checked attribute")]),e._v(" "),n("p",[e._v("class Integer:\ndef "),n("strong",[e._v("init")]),e._v("(self, name):\nself.name = name\ndef "),n("strong",[e._v("get")]),e._v("(self, instance, cls):\nif instance is None:\nreturn self\nelse:\nreturn instance."),n("strong",[e._v("dict")]),e._v("[self.name]\ndef "),n("strong",[e._v("set")]),e._v("(self, instance, value):\nif not isinstance(value, int):\nraise TypeError('Expected an int')\ninstance."),n("strong",[e._v("dict")]),e._v("[self.name] = value\ndef "),n("strong",[e._v("delete")]),e._v("(self, instance):\ndel instance."),n("strong",[e._v("dict")]),e._v("[self.name]\n一个描述器就是一个实现了三个核心的属性访问操作 (get, set, delete) 的类，分别\n为 "),n("strong",[e._v("get")]),e._v("() 、"),n("strong",[e._v("set")]),e._v("() 和 "),n("strong",[e._v("delete")]),e._v("() 这三个特殊的方法。这些方法接受一个实\n例作为输入，之后相应的操作实例底层的字典。\n为了使用一个描述器，需将这个描述器的实例作为类属性放到一个类的定义中。例\n如：\nclass Point: x = Integer('x') y = Integer('y')\ndef "),n("strong",[e._v("init")]),e._v("(self, x, y):\nself.x = x\nself.y = y\n当你这样做后，所有对描述器属性 (比如 x 或 y) 的访问会被 "),n("strong",[e._v("get")]),e._v("() 、"),n("strong",[e._v("set")]),e._v("()\n和 "),n("strong",[e._v("delete")]),e._v("() 方法捕获到。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("p = Point(2, 3)\np.x # Calls Point.x."),n("strong",[e._v("get")]),e._v("(p,Point)\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p.y = 5 # Calls Point.y."),n("strong",[e._v("set")]),e._v("(p, 5)\np.x = 2.3 # Calls Point.x."),n("strong",[e._v("set")]),e._v('(p, 2.3)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "descrip.py", line 12, in '),n("strong",[e._v("set")]),e._v("\nraise TypeError('Expected an int')\nTypeError: Expected an int")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("作为输入，描述器的每一个方法会接受一个操作实例。为了实现请求操作，会相应\n的操作实例底层的字典 ("),n("strong",[e._v("dict")]),e._v(" 属性)。描述器的 self.name 属性存储了在实例字\n典中被实际使用到的 key。\n讨论\n描述器可实现大部分 Python 类特性中的底层魔法，包括 @classmethod 、\n@staticmethod 、@property ，甚至是 "),n("strong",[e._v("slots")]),e._v(" 特性。\n通过定义一个描述器，你可以在底层捕获核心的实例操作 (get, set, delete)，并且\n可完全自定义它们的行为。这是一个强大的工具，有了它你可以实现很多高级功能，并\n且它也是很多高级库和框架中的重要工具之一。\n描述器的一个比较困惑的地方是它只能在类级别被定义，而不能为每个实例单独\n定义。因此，下面的代码是无法工作的：")]),e._v(" "),n("h1",{attrs:{id:"does-not-work"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#does-not-work"}},[e._v("#")]),e._v(" Does NOT work")]),e._v(" "),n("p",[e._v("class Point:\ndef "),n("strong",[e._v("init")]),e._v("(self, x, y):\nself.x = Integer('x') # No! Must be a class variable\nself.y = Integer('y')\nself.x = x\nself.y = y\n同时，"),n("strong",[e._v("get")]),e._v("() 方法实现起来比看上去要复杂得多：")]),e._v(" "),n("h1",{attrs:{id:"descriptor-attribute-for-an-integer-type-checked-attribute-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#descriptor-attribute-for-an-integer-type-checked-attribute-2"}},[e._v("#")]),e._v(" Descriptor attribute for an integer type-checked attribute")]),e._v(" "),n("p",[e._v("class Integer:\ndef "),n("strong",[e._v("get")]),e._v("(self, instance, cls):\nif instance is None:\nreturn self\nelse:\nreturn instance."),n("strong",[e._v("dict")]),e._v("[self.name]\n"),n("strong",[e._v("get")]),e._v("() 看上去有点复杂的原因归结于实例变量和类变量的不同。如果一个描述\n器被当做一个类变量来访问，那么 instance 参数被设置成 None 。这种情况下，标准做\n法就是简单的返回这个描述器本身即可 (尽管你还可以添加其他的自定义操作)。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("p = Point(2,3)\np.x # Calls Point.x."),n("strong",[e._v("get")]),e._v("(p, Point)\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("Point.x # Calls Point.x."),n("strong",[e._v("get")]),e._v("(None, Point)\n<"),n("strong",[e._v("main")]),e._v(".Integer object at 0x100671890>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("描述器通常是那些使用到装饰器或元类的大型框架中的一个组件。同时它们的使\n用也被隐藏在后面。举个例子，下面是一些更高级的基于描述器的代码，并涉及到一个\n类装饰器：")]),e._v(" "),n("h1",{attrs:{id:"descriptor-for-a-type-checked-attribute"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#descriptor-for-a-type-checked-attribute"}},[e._v("#")]),e._v(" Descriptor for a type-checked attribute")]),e._v(" "),n("p",[e._v("class Typed:\ndef "),n("strong",[e._v("init")]),e._v("(self, name, expected_type):\nself.name = name\nself.expected_type = expected_type\ndef "),n("strong",[e._v("get")]),e._v("(self, instance, cls):\nif instance is None:\nreturn self\nelse:\nreturn instance."),n("strong",[e._v("dict")]),e._v("[self.name]\ndef "),n("strong",[e._v("set")]),e._v("(self, instance, value):\nif not isinstance(value, self.expected_type):\nraise TypeError('Expected ' + str(self.expected_type))\ninstance."),n("strong",[e._v("dict")]),e._v("[self.name] = value\ndef "),n("strong",[e._v("delete")]),e._v("(self, instance):\ndel instance."),n("strong",[e._v("dict")]),e._v("[self.name]")]),e._v(" "),n("h1",{attrs:{id:"class-decorator-that-applies-it-to-selected-attributes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-decorator-that-applies-it-to-selected-attributes"}},[e._v("#")]),e._v(" Class decorator that applies it to selected attributes")]),e._v(" "),n("p",[e._v("def typeassert(**kwargs):\ndef decorate(cls):\nfor name, expected_type in kwargs.items():")]),e._v(" "),n("h1",{attrs:{id:"attach-a-typed-descriptor-to-the-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attach-a-typed-descriptor-to-the-class"}},[e._v("#")]),e._v(" Attach a Typed descriptor to the class")]),e._v(" "),n("p",[e._v("setattr(cls, name, Typed(name, expected_type))\nreturn cls\nreturn decorate")]),e._v(" "),n("h1",{attrs:{id:"example-use-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-5"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("@typeassert(name=str, shares=int, price=float)\nclass Stock:\ndef "),n("strong",[e._v("init")]),e._v("(self, name, shares, price):\nself.name = name\nself.shares = shares\nself.price = price\n最后要指出的一点是，如果你只是想简单的自定义某个类的单个属性访问的话就\n不用去写描述器了。这种情况下使用 8.6 小节介绍的 property 技术会更加容易。当程\n序中有很多重复代码的时候描述器就很有用了 (比如你想在你代码的很多地方使用描述\n器提供的功能或者将它作为一个函数库特性)。\n8.10 使用延迟计算属性\n问题\n你想将一个只读属性定义成一个 property，并且只在访问的时候才会计算结果。但\n是一旦被访问后，你希望结果值被缓存起来，不用每次都去计算。\n解决方案\n定义一个延迟属性的一种高效方法是通过使用一个描述器类，如下所示：\nclass lazyproperty:\ndef "),n("strong",[e._v("init")]),e._v("(self, func):\nself.func = func\ndef "),n("strong",[e._v("get")]),e._v("(self, instance, cls):\nif instance is None:\nreturn self\nelse:\nvalue = self.func(instance)\nsetattr(instance, self.func."),n("strong",[e._v("name")]),e._v(", value)\nreturn value\n你需要像下面这样在一个类中使用它：\nimport math\nclass Circle:\ndef "),n("strong",[e._v("init")]),e._v("(self, radius):\nself.radius = radius\n@lazyproperty\ndef area(self):\nprint('Computing area')\nreturn math.pi * self.radius ** 2\n@lazyproperty\ndef perimeter(self):\nprint('Computing perimeter')\nreturn 2 * math.pi * self.radius\n下面在一个交互环境中演示它的使用：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = Circle(4.0)\nc.radius\n4.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.area\nComputing area\n50.26548245743669")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.area\n50.26548245743669")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.perimeter\nComputing perimeter\n25.132741228718345")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.perimeter\n25.132741228718345")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("仔细观察你会发现消息 Computing area 和 Computing perimeter 仅仅出现一次。\n讨论\n很多时候，构造一个延迟计算属性的主要目的是为了提升性能。例如，你可以避免\n计算这些属性值，除非你真的需要它们。这里演示的方案就是用来实现这样的效果的，\n只不过它是通过以非常高效的方式使用描述器的一个精妙特性来达到这种效果的。\n正如在其他小节 (如 8.9 小节) 所讲的那样，当一个描述器被放入一个类的定义时，\n每次访问属性时它的 "),n("strong",[e._v("get")]),e._v("() 、"),n("strong",[e._v("set")]),e._v("() 和 "),n("strong",[e._v("delete")]),e._v("() 方法就会被触发。不过，\n如果一个描述器仅仅只定义了一个 "),n("strong",[e._v("get")]),e._v("() 方法的话，它比通常的具有更弱的绑定。\n特别地，只有当被访问属性不在实例底层的字典中时 "),n("strong",[e._v("get")]),e._v("() 方法才会被触发。\nlazyproperty 类利用这一点，使用 "),n("strong",[e._v("get")]),e._v("() 方法在实例中存储计算出来的值，\n这个实例使用相同的名字作为它的 property。这样一来，结果值被存储在实例字典中并\n且以后就不需要再去计算这个 property 了。你可以尝试更深入的例子来观察结果：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = Circle(4.0)")]),e._v(" "),n("h1",{attrs:{id:"get-instance-variables"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-instance-variables"}},[e._v("#")]),e._v(" Get instance variables")]),e._v(" "),n("p",[e._v("vars(c)\n{'radius': 4.0}")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"compute-area-and-observe-variables-afterward"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compute-area-and-observe-variables-afterward"}},[e._v("#")]),e._v(" Compute area and observe variables afterward")]),e._v(" "),n("p",[e._v("c.area\nComputing area\n50.26548245743669")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("vars(c)\n{'area': 50.26548245743669, 'radius': 4.0}")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"notice-access-doesn-t-invoke-property-anymore"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notice-access-doesn-t-invoke-property-anymore"}},[e._v("#")]),e._v(" Notice access doesn't invoke property anymore")]),e._v(" "),n("p",[e._v("c.area\n50.26548245743669")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"delete-the-variable-and-see-property-trigger-again"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delete-the-variable-and-see-property-trigger-again"}},[e._v("#")]),e._v(" Delete the variable and see property trigger again")]),e._v(" "),n("p",[e._v("del c.area\nvars(c)\n{'radius': 4.0}")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.area\nComputing area\n50.26548245743669")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这种方案有一个小缺陷就是计算出的值被创建后是可以被修改的。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c.area\nComputing area\n50.26548245743669")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.area = 25\nc.area\n25")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你担心这个问题，那么可以使用一种稍微没那么高效的实现，就像下面这样：\ndef lazyproperty(func):\nname = '"),n("em",[e._v("lazy")]),e._v("' + func."),n("strong",[e._v("name")]),e._v("\n@property\ndef lazy(self):\nif hasattr(self, name):\nreturn getattr(self, name)\nelse:\nvalue = func(self)\nsetattr(self, name, value)\nreturn value\nreturn lazy\n如果你使用这个版本，就会发现现在修改操作已经不被允许了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = Circle(4.0)\nc.area\nComputing area\n50.26548245743669")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.area\n50.26548245743669")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('c.area = 25\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nAttributeError: can't set attribute")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("然而，这种方案有一个缺点就是所有 get 操作都必须被定向到属性的 getter 函数\n上去。这个跟之前简单的在实例字典中查找值的方案相比效率要低一点。如果想获取更\n多关于 property 和可管理属性的信息，可以参考 8.6 小节。而描述器的相关内容可以\n在 8.9 小节找到。\n8.11 简化数据结构的初始化\n问题\n你写了很多仅仅用作数据结构的类，不想写太多烦人的 "),n("strong",[e._v("init")]),e._v("() 函数\n解决方案\n可以在一个基类中写一个公用的 "),n("strong",[e._v("init")]),e._v("() 函数：\nimport math\nclass Structure1:")]),e._v(" "),n("h1",{attrs:{id:"class-variable-that-specifies-expected-fields"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-variable-that-specifies-expected-fields"}},[e._v("#")]),e._v(" Class variable that specifies expected fields")]),e._v(" "),n("p",[e._v("_fields = []\ndef "),n("strong",[e._v("init")]),e._v("(self, *args):\nif len(args) != len(self._fields):\nraise TypeError('Expected {} arguments'.format(len(self._fields)))")]),e._v(" "),n("h1",{attrs:{id:"set-the-arguments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-the-arguments"}},[e._v("#")]),e._v(" Set the arguments")]),e._v(" "),n("p",[e._v("for name, value in zip(self._fields, args):\nsetattr(self, name, value)\n然后使你的类继承自这个基类:")]),e._v(" "),n("h1",{attrs:{id:"example-class-definitions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-class-definitions"}},[e._v("#")]),e._v(" Example class definitions")]),e._v(" "),n("p",[e._v("class Stock(Structure1):\n_fields = ['name', 'shares', 'price']\nclass Point(Structure1):\n_fields = ['x', 'y']\nclass Circle(Structure1):\n_fields = ['radius']\ndef area(self):\nreturn math.pi * self.radius ** 2\n使用这些类的示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = Stock('ACME', 50, 91.1)\np = Point(2, 3)\nc = Circle(4.5)\ns2 = Stock('ACME', 50)\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "structure.py", line 6, in '),n("strong",[e._v("init")]),e._v("\nraise TypeError('Expected {} arguments'.format(len(self._fields)))\nTypeError: Expected 3 arguments\n如果还想支持关键字参数，可以将关键字参数设置为实例属性：\nclass Structure2:\n_fields = []\ndef "),n("strong",[e._v("init")]),e._v("(self, *args, **kwargs):\nif len(args) > len(self._fields):\nraise TypeError('Expected {} arguments'.format(len(self._fields)))")])],1)],1)])])]),e._v(" "),n("h1",{attrs:{id:"set-all-of-the-positional-arguments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-all-of-the-positional-arguments"}},[e._v("#")]),e._v(" Set all of the positional arguments")]),e._v(" "),n("p",[e._v("for name, value in zip(self._fields, args):\nsetattr(self, name, value)")]),e._v(" "),n("h1",{attrs:{id:"set-the-remaining-keyword-arguments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-the-remaining-keyword-arguments"}},[e._v("#")]),e._v(" Set the remaining keyword arguments")]),e._v(" "),n("p",[e._v("for name in self._fields[len(args):]:\nsetattr(self, name, kwargs.pop(name))")]),e._v(" "),n("h1",{attrs:{id:"check-for-any-remaining-unknown-arguments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-for-any-remaining-unknown-arguments"}},[e._v("#")]),e._v(" Check for any remaining unknown arguments")]),e._v(" "),n("p",[e._v("if kwargs:\nraise TypeError('Invalid argument(s): {}'.format(','. , →join(kwargs)))")]),e._v(" "),n("h1",{attrs:{id:"example-use-6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-6"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("if "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nclass Stock(Structure2):\n_fields = ['name', 'shares', 'price']\ns1 = Stock('ACME', 50, 91.1)\ns2 = Stock('ACME', 50, price=91.1)\ns3 = Stock('ACME', shares=50, price=91.1)")]),e._v(" "),n("h1",{attrs:{id:"s3-stock-acme-shares-50-price-91-1-aa-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#s3-stock-acme-shares-50-price-91-1-aa-1"}},[e._v("#")]),e._v(" s3 = Stock('ACME', shares=50, price=91.1, aa=1)")]),e._v(" "),n("p",[e._v("你还能将不在 _fields 中的名称加入到属性中去：\nclass Structure3:")]),e._v(" "),n("h1",{attrs:{id:"class-variable-that-specifies-expected-fields-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-variable-that-specifies-expected-fields-2"}},[e._v("#")]),e._v(" Class variable that specifies expected fields")]),e._v(" "),n("p",[e._v("_fields = []\ndef "),n("strong",[e._v("init")]),e._v("(self, *args, **kwargs):\nif len(args) != len(self._fields):\nraise TypeError('Expected {} arguments'.format(len(self._fields)))")]),e._v(" "),n("h1",{attrs:{id:"set-the-arguments-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-the-arguments-2"}},[e._v("#")]),e._v(" Set the arguments")]),e._v(" "),n("p",[e._v("for name, value in zip(self._fields, args):\nsetattr(self, name, value)")]),e._v(" "),n("h1",{attrs:{id:"set-the-additional-arguments-if-any"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-the-additional-arguments-if-any"}},[e._v("#")]),e._v(" Set the additional arguments (if any)")]),e._v(" "),n("p",[e._v("extra_args = kwargs.keys() - self._fields\nfor name in extra_args:\nsetattr(self, name, kwargs.pop(name))\nif kwargs:\nraise TypeError('Duplicate values for {}'.format(','. , →join(kwargs)))")]),e._v(" "),n("h1",{attrs:{id:"example-use-7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-7"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("if "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nclass Stock(Structure3):\n_fields = ['name', 'shares', 'price']\ns1 = Stock('ACME', 50, 91.1)\ns2 = Stock('ACME', 50, 91.1, date='8/2/2012')\n讨论\n当你需要使用大量很小的数据结构类的时候，相比手工一个个定义 "),n("strong",[e._v("init")]),e._v("() 方\n法而已，使用这种方式可以大大简化代码。\n在上面的实现中我们使用了 setattr() 函数类设置属性值，你可能不想用这种方\n式，而是想直接更新实例字典，就像下面这样：\nclass Structure:")]),e._v(" "),n("h1",{attrs:{id:"class-variable-that-specifies-expected-fields-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-variable-that-specifies-expected-fields-3"}},[e._v("#")]),e._v(" Class variable that specifies expected fields")]),e._v(" "),n("p",[e._v("_fields= []\ndef "),n("strong",[e._v("init")]),e._v("(self, *args):\nif len(args) != len(self._fields):\nraise TypeError('Expected {} arguments'.format(len(self._fields)))")]),e._v(" "),n("h1",{attrs:{id:"set-the-arguments-alternate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-the-arguments-alternate"}},[e._v("#")]),e._v(" Set the arguments (alternate)")]),e._v(" "),n("p",[e._v("self."),n("strong",[e._v("dict")]),e._v(".update(zip(self._fields,args))\n尽管这也可以正常工作，但是当定义子类的时候问题就来了。当一个子类定义了\n"),n("strong",[e._v("slots")]),e._v(" 或者通过 property(或描述器) 来包装某个属性，那么直接访问实例字典就\n不起作用了。我们上面使用 setattr() 会显得更通用些，因为它也适用于子类情况。\n这种方法唯一不好的地方就是对某些 IDE 而言，在显示帮助函数时可能不太友好。\n比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("help(Stock)\nHelp on class Stock in module "),n("strong",[e._v("main")]),e._v(":\nclass Stock(Structure)\n...\n| Methods inherited from Structure:\n|\n| "),n("strong",[e._v("init")]),e._v("(self, *args, **kwargs)\n|\n...")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("可以参考 9.16 小节来强制在 "),n("strong",[e._v("init")]),e._v("() 方法中指定参数的类型签名。\n8.12 定义接口或者抽象基类\n问题\n你想定义一个接口或抽象类，并且通过执行类型检查来确保子类实现了某些特定\n的方法\n解决方案\n使用 abc 模块可以很轻松的定义抽象基类：\nfrom abc import ABCMeta, abstractmethod\nclass IStream(metaclass=ABCMeta):\n@abstractmethod\ndef read(self, maxbytes=-1):\npass\n@abstractmethod\ndef write(self, data):\npass\n抽象类的一个特点是它不能直接被实例化，比如你想像下面这样做是不行的：\na = IStream() # TypeError: Can't instantiate abstract class")]),e._v(" "),n("h1",{attrs:{id:"istream-with-abstract-methods-read-write"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#istream-with-abstract-methods-read-write"}},[e._v("#")]),e._v(" IStream with abstract methods read, write")]),e._v(" "),n("p",[e._v("抽象类的目的就是让别的类继承它并实现特定的抽象方法：\nclass SocketStream(IStream):\ndef read(self, maxbytes=-1):\npass\ndef write(self, data):\npass\n抽象基类的一个主要用途是在代码中检查某些类是否为特定类型，实现了特定接\n口：\ndef serialize(obj, stream):\nif not isinstance(stream, IStream):\nraise TypeError('Expected an IStream')\npass\n除了继承这种方式外，还可以通过注册方式来让某个类实现抽象基类：\nimport io")]),e._v(" "),n("h1",{attrs:{id:"register-the-built-in-i-o-classes-as-supporting-our-interface"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#register-the-built-in-i-o-classes-as-supporting-our-interface"}},[e._v("#")]),e._v(" Register the built-in I/O classes as supporting our interface")]),e._v(" "),n("p",[e._v("IStream.register(io.IOBase)")]),e._v(" "),n("h1",{attrs:{id:"open-a-normal-file-and-type-check"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#open-a-normal-file-and-type-check"}},[e._v("#")]),e._v(" Open a normal file and type check")]),e._v(" "),n("p",[e._v("f = open('foo.txt')\nisinstance(f, IStream) # Returns True\n@abstractmethod 还能注解静态方法、类方法和 properties 。你只需保证这个注\n解紧靠在函数定义前即可：\nclass A(metaclass=ABCMeta):\n@property\n@abstractmethod\ndef name(self):\npass\n@name.setter\n@abstractmethod\ndef name(self, value):\npass\n@classmethod\n@abstractmethod\ndef method1(cls):\npass\n@staticmethod\n@abstractmethod\ndef method2():\npass\n讨论\n标准库中有很多用到抽象基类的地方。collections 模块定义了很多跟容器和迭\n代器 (序列、映射、集合等) 有关的抽象基类。numbers 库定义了跟数字对象 (整数、浮\n点数、有理数等) 有关的基类。io 库定义了很多跟 I/O 操作相关的基类。\n你可以使用预定义的抽象类来执行更通用的类型检查，例如：\nimport collections")]),e._v(" "),n("h1",{attrs:{id:"check-if-x-is-a-sequence"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-if-x-is-a-sequence"}},[e._v("#")]),e._v(" Check if x is a sequence")]),e._v(" "),n("p",[e._v("if isinstance(x, collections.Sequence):\n...")]),e._v(" "),n("h1",{attrs:{id:"check-if-x-is-iterable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-if-x-is-iterable"}},[e._v("#")]),e._v(" Check if x is iterable")]),e._v(" "),n("p",[e._v("if isinstance(x, collections.Iterable):\n...")]),e._v(" "),n("h1",{attrs:{id:"check-if-x-has-a-size"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-if-x-has-a-size"}},[e._v("#")]),e._v(" Check if x has a size")]),e._v(" "),n("p",[e._v("if isinstance(x, collections.Sized):\n...")]),e._v(" "),n("h1",{attrs:{id:"check-if-x-is-a-mapping"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-if-x-is-a-mapping"}},[e._v("#")]),e._v(" Check if x is a mapping")]),e._v(" "),n("p",[e._v("if isinstance(x, collections.Mapping):\n尽管 ABCs 可以让我们很方便的做类型检查，但是我们在代码中最好不要过多的\n使用它。因为 Python 的本质是一门动态编程语言，其目的就是给你更多灵活性，强制\n类型检查或让你代码变得更复杂，这样做无异于舍本求末。\n8.13 实现数据模型的类型约束\n问题\n你想定义某些在属性赋值上面有限制的数据结构。\n解决方案\n在这个问题中，你需要在对某些实例属性赋值时进行检查。所以你要自定义属性赋\n值函数，这种情况下最好使用描述器。\n下面的代码使用描述器实现了一个系统类型和赋值验证框架：")]),e._v(" "),n("h1",{attrs:{id:"base-class-uses-a-descriptor-to-set-a-value"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#base-class-uses-a-descriptor-to-set-a-value"}},[e._v("#")]),e._v(" Base class. Uses a descriptor to set a value")]),e._v(" "),n("p",[e._v("class Descriptor:\ndef "),n("strong",[e._v("init")]),e._v("(self, name=None, **opts):\nself.name = name\nfor key, value in opts.items():\nsetattr(self, key, value)\ndef "),n("strong",[e._v("set")]),e._v("(self, instance, value):\ninstance."),n("strong",[e._v("dict")]),e._v("[self.name] = value")]),e._v(" "),n("h1",{attrs:{id:"descriptor-for-enforcing-types"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#descriptor-for-enforcing-types"}},[e._v("#")]),e._v(" Descriptor for enforcing types")]),e._v(" "),n("p",[e._v("class Typed(Descriptor):\nexpected_type = type(None)\ndef "),n("strong",[e._v("set")]),e._v("(self, instance, value):\nif not isinstance(value, self.expected_type):\nraise TypeError('expected ' + str(self.expected_type))\nsuper()."),n("strong",[e._v("set")]),e._v("(instance, value)")]),e._v(" "),n("h1",{attrs:{id:"descriptor-for-enforcing-values"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#descriptor-for-enforcing-values"}},[e._v("#")]),e._v(" Descriptor for enforcing values")]),e._v(" "),n("p",[e._v("class Unsigned(Descriptor):\ndef "),n("strong",[e._v("set")]),e._v("(self, instance, value):\nif value < 0:\nraise ValueError('Expected >= 0')\nsuper()."),n("strong",[e._v("set")]),e._v("(instance, value)\nclass MaxSized(Descriptor):\ndef "),n("strong",[e._v("init")]),e._v("(self, name=None, **opts):\nif 'size' not in opts:\nraise TypeError('missing size option')\nsuper()."),n("strong",[e._v("init")]),e._v("(name, **opts)\ndef "),n("strong",[e._v("set")]),e._v("(self, instance, value):\nif len(value) >= self.size:\nraise ValueError('size must be < ' + str(self.size))\nsuper()."),n("strong",[e._v("set")]),e._v("(instance, value)\n这些类就是你要创建的数据模型或类型系统的基础构建模块。下面就是我们实际\n定义的各种不同的数据类型：\nclass Integer(Typed):\nexpected_type = int\nclass UnsignedInteger(Integer, Unsigned):\npass\nclass Float(Typed):\nexpected_type = float\nclass UnsignedFloat(Float, Unsigned):\npass\nclass String(Typed):\nexpected_type = str\nclass SizedString(String, MaxSized):\npass\n然后使用这些自定义数据类型，我们定义一个类：\nclass Stock:")]),e._v(" "),n("h1",{attrs:{id:"specify-constraints"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specify-constraints"}},[e._v("#")]),e._v(" Specify constraints")]),e._v(" "),n("p",[e._v("name = SizedString('name', size=8)\nshares = UnsignedInteger('shares')\nprice = UnsignedFloat('price')\ndef "),n("strong",[e._v("init")]),e._v("(self, name, shares, price):\nself.name = name\nself.shares = shares\nself.price = price\n然后测试这个类的属性赋值约束，可发现对某些属性的赋值违法了约束是不合法\n的：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s.name\n'ACME'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('s.shares = 75\ns.shares = -10\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "example.py", line 17, in '),n("strong",[e._v("set")]),e._v("\nsuper()."),n("strong",[e._v("set")]),e._v('(instance, value)\nFile "example.py", line 23, in '),n("strong",[e._v("set")]),e._v("\nraise ValueError('Expected >= 0')\nValueError: Expected >= 0")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.price = 'a lot'\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "example.py", line 16, in '),n("strong",[e._v("set")]),e._v("\nraise TypeError('expected ' + str(self.expected_type))\nTypeError: expected <class 'float'>")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.name = 'ABRACADABRA'\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "example.py", line 17, in '),n("strong",[e._v("set")]),e._v("\nsuper()."),n("strong",[e._v("set")]),e._v('(instance, value)\nFile "example.py", line 35, in '),n("strong",[e._v("set")]),e._v("\nraise ValueError('size must be < ' + str(self.size))\nValueError: size must be < 8")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("还有一些技术可以简化上面的代码，其中一种是使用类装饰器：")]),e._v(" "),n("h1",{attrs:{id:"class-decorator-to-apply-constraints"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-decorator-to-apply-constraints"}},[e._v("#")]),e._v(" Class decorator to apply constraints")]),e._v(" "),n("p",[e._v("def check_attributes(**kwargs):\ndef decorate(cls):\nfor key, value in kwargs.items():\nif isinstance(value, Descriptor):\nvalue.name = key\nsetattr(cls, key, value)\nelse:\nsetattr(cls, key, value(key))\nreturn cls\nreturn decorate")]),e._v(" "),n("h1",{attrs:{id:"example-7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-7"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("@check_attributes(name=SizedString(size=8),\nshares=UnsignedInteger,\nprice=UnsignedFloat)\nclass Stock:\ndef "),n("strong",[e._v("init")]),e._v("(self, name, shares, price):\nself.name = name\nself.shares = shares\nself.price = price\n另外一种方式是使用元类：")]),e._v(" "),n("h1",{attrs:{id:"a-metaclass-that-applies-checking"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-metaclass-that-applies-checking"}},[e._v("#")]),e._v(" A metaclass that applies checking")]),e._v(" "),n("p",[e._v("class checkedmeta(type):\ndef "),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, methods):")]),e._v(" "),n("h1",{attrs:{id:"attach-attribute-names-to-the-descriptors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attach-attribute-names-to-the-descriptors"}},[e._v("#")]),e._v(" Attach attribute names to the descriptors")]),e._v(" "),n("p",[e._v("for key, value in methods.items():\nif isinstance(value, Descriptor):\nvalue.name = key\nreturn type."),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, methods)")]),e._v(" "),n("h1",{attrs:{id:"example-8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-8"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("class Stock2(metaclass=checkedmeta):\nname = SizedString(size=8)\nshares = UnsignedInteger()\nprice = UnsignedFloat()\ndef "),n("strong",[e._v("init")]),e._v("(self, name, shares, price):\nself.name = name\nself.shares = shares\nself.price = price\n讨论\n本节使用了很多高级技术，包括描述器、混入类、super() 的使用、类装饰器和元\n类。不可能在这里一一详细展开来讲，但是可以在 8.9、8.18、9.19 小节找到更多例子。\n但是，我在这里还是要提一下几个需要注意的点。\n首先，在 Descriptor 基类中你会看到有个 "),n("strong",[e._v("set")]),e._v("() 方法，却没有相应的\n"),n("strong",[e._v("get")]),e._v("() 方法。如果一个描述仅仅是从底层实例字典中获取某个属性值的话，那\n么没必要去定义 "),n("strong",[e._v("get")]),e._v("() 方法。\n所有描述器类都是基于混入类来实现的。比如 Unsigned 和 MaxSized 要跟其他继\n承自 Typed 类混入。这里利用多继承来实现相应的功能。\n混入类的一个比较难理解的地方是，调用 super() 函数时，你并不知道究竟要调\n用哪个具体类。你需要跟其他类结合后才能正确的使用，也就是必须合作才能产生效\n果。\n使用类装饰器和元类通常可以简化代码。上面两个例子中你会发现你只需要输入\n一次属性名即可了。")]),e._v(" "),n("h1",{attrs:{id:"normal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#normal"}},[e._v("#")]),e._v(" Normal")]),e._v(" "),n("p",[e._v("class Point: x = Integer('x') y = Integer('y')")]),e._v(" "),n("h1",{attrs:{id:"metaclass"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#metaclass"}},[e._v("#")]),e._v(" Metaclass")]),e._v(" "),n("p",[e._v("class Point(metaclass=checkedmeta):\nx = Integer()\ny = Integer()\n所有方法中，类装饰器方案应该是最灵活和最高明的。首先，它并不依赖任何其他\n新的技术，比如元类。其次，装饰器可以很容易的添加或删除。\n最后，装饰器还能作为混入类的替代技术来实现同样的效果;")]),e._v(" "),n("h1",{attrs:{id:"decorator-for-applying-type-checking"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decorator-for-applying-type-checking"}},[e._v("#")]),e._v(" Decorator for applying type checking")]),e._v(" "),n("p",[e._v("def Typed(expected_type, cls=None):\nif cls is None:\nreturn lambda cls: Typed(expected_type, cls)\nsuper_set = cls."),n("strong",[e._v("set")]),e._v("\ndef "),n("strong",[e._v("set")]),e._v("(self, instance, value):\nif not isinstance(value, expected_type):\nraise TypeError('expected ' + str(expected_type))\nsuper_set(self, instance, value)\ncls."),n("strong",[e._v("set")]),e._v(" = "),n("strong",[e._v("set")]),e._v("\nreturn cls")]),e._v(" "),n("h1",{attrs:{id:"decorator-for-unsigned-values"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decorator-for-unsigned-values"}},[e._v("#")]),e._v(" Decorator for unsigned values")]),e._v(" "),n("p",[e._v("def Unsigned(cls):\nsuper_set = cls."),n("strong",[e._v("set")]),e._v("\ndef "),n("strong",[e._v("set")]),e._v("(self, instance, value):\nif value < 0:\nraise ValueError('Expected >= 0')\nsuper_set(self, instance, value)\ncls."),n("strong",[e._v("set")]),e._v(" = "),n("strong",[e._v("set")]),e._v("\nreturn cls")]),e._v(" "),n("h1",{attrs:{id:"decorator-for-allowing-sized-values"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decorator-for-allowing-sized-values"}},[e._v("#")]),e._v(" Decorator for allowing sized values")]),e._v(" "),n("p",[e._v("def MaxSized(cls):\nsuper_init = cls."),n("strong",[e._v("init")]),e._v("\ndef "),n("strong",[e._v("init")]),e._v("(self, name=None, **opts):\nif 'size' not in opts:\nraise TypeError('missing size option')\nsuper_init(self, name, **opts)\ncls."),n("strong",[e._v("init")]),e._v(" = "),n("strong",[e._v("init")]),e._v("\nsuper_set = cls."),n("strong",[e._v("set")]),e._v("\ndef "),n("strong",[e._v("set")]),e._v("(self, instance, value):\nif len(value) >= self.size:\nraise ValueError('size must be < ' + str(self.size))\nsuper_set(self, instance, value)\ncls."),n("strong",[e._v("set")]),e._v(" = "),n("strong",[e._v("set")]),e._v("\nreturn cls")]),e._v(" "),n("h1",{attrs:{id:"specialized-descriptors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#specialized-descriptors"}},[e._v("#")]),e._v(" Specialized descriptors")]),e._v(" "),n("p",[e._v("@Typed(int)\nclass Integer(Descriptor):\npass\n@Unsigned\nclass UnsignedInteger(Integer):\npass\n@Typed(float)\nclass Float(Descriptor):\npass\n@Unsigned\nclass UnsignedFloat(Float):\npass\n@Typed(str)\nclass String(Descriptor):\npass\n@MaxSized\nclass SizedString(String):\npass\n这种方式定义的类跟之前的效果一样，而且执行速度会更快。设置一个简单的类型\n属性的值，装饰器方式要比之前的混入类的方式几乎快 100%。现在你应该庆幸自己读\n完了本节全部内容了吧？^_^\n8.14 实现自定义容器\n问题\n你想实现一个自定义的类来模拟内置的容器类功能，比如列表和字典。但是你不确\n定到底要实现哪些方法。\n解决方案\ncollections 定义了很多抽象基类，当你想自定义容器类的时候它们会非常有用。\n比如你想让你的类支持迭代，那就让你的类继承 collections.Iterable 即可：\nimport collections\nclass A(collections.Iterable):\npass\n不过你需要实现 collections.Iterable 所有的抽象方法，否则会报错:")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('a = A()\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: Can't instantiate abstract class A with abstract methods "),n("strong",[e._v("iter")])])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你只要实现 "),n("strong",[e._v("iter")]),e._v("() 方法就不会报错了 (参考 4.2 和 4.7 小节)。\n你可以先试着去实例化一个对象，在错误提示中可以找到需要实现哪些方法：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('import collections\ncollections.Sequence()\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: Can't instantiate abstract class Sequence with abstract methods "),n("br"),e._v(" "),n("strong",[e._v("getitem")]),e._v(", "),n("strong",[e._v("len")])])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("下面是一个简单的示例，继承自上面 Sequence 抽象类，并且实现元素按照顺序存\n储：\nclass SortedItems(collections.Sequence):\ndef "),n("strong",[e._v("init")]),e._v("(self, initial=None):\nself._items = sorted(initial) if initial is not None else []")]),e._v(" "),n("h1",{attrs:{id:"required-sequence-methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#required-sequence-methods"}},[e._v("#")]),e._v(" Required sequence methods")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("getitem")]),e._v("(self, index):\nreturn self._items[index]\ndef "),n("strong",[e._v("len")]),e._v("(self):\nreturn len(self._items)")]),e._v(" "),n("h1",{attrs:{id:"method-for-adding-an-item-in-the-right-location"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#method-for-adding-an-item-in-the-right-location"}},[e._v("#")]),e._v(" Method for adding an item in the right location")]),e._v(" "),n("p",[e._v("def add(self, item):\nbisect.insort(self._items, item)\nitems = SortedItems([5, 1, 3])\nprint(list(items))\nprint(items[0], items[-1])\nitems.add(2)\nprint(list(items))\n可以看到，SortedItems 跟普通的序列没什么两样，支持所有常用操作，包括索引、\n迭代、包含判断，甚至是切片操作。\n这里面使用到了 bisect 模块，它是一个在排序列表中插入元素的高效方式。可以\n保证元素插入后还保持顺序。\n讨论\n使用 collections 中的抽象基类可以确保你自定义的容器实现了所有必要的方法。\n并且还能简化类型检查。你的自定义容器会满足大部分类型检查需要，如下所示：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("items = SortedItems()\nimport collections\nisinstance(items, collections.Iterable)\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("isinstance(items, collections.Sequence)\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("isinstance(items, collections.Container)\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("isinstance(items, collections.Sized)\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("isinstance(items, collections.Mapping)\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("collections 中很多抽象类会为一些常见容器操作提供默认的实现，这样一\n来你只需要实现那些你最感兴趣的方法即可。假设你的类继承自 collections.\nMutableSequence ，如下：\nclass Items(collections.MutableSequence):\ndef "),n("strong",[e._v("init")]),e._v("(self, initial=None):\nself._items = list(initial) if initial is not None else []")]),e._v(" "),n("h1",{attrs:{id:"required-sequence-methods-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#required-sequence-methods-2"}},[e._v("#")]),e._v(" Required sequence methods")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("getitem")]),e._v("(self, index):\nprint('Getting:', index)\nreturn self._items[index]\ndef "),n("strong",[e._v("setitem")]),e._v("(self, index, value):\nprint('Setting:', index, value)\nself._items[index] = value\ndef "),n("strong",[e._v("delitem")]),e._v("(self, index):\nprint('Deleting:', index)\ndel self._items[index]\ndef insert(self, index, value):\nprint('Inserting:', index, value)\nself._items.insert(index, value)\ndef "),n("strong",[e._v("len")]),e._v("(self):\nprint('Len')\nreturn len(self._items)\n如果你创建 Items 的实例，你会发现它支持几乎所有的核心列表方法 (如 append()、\nremove()、count() 等)。下面是使用演示：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = Items([1, 2, 3])\nlen(a)\nLen\n3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a.append(4)\nLen\nInserting: 3 4")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a.append(2)\nLen\nInserting: 4 2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a.count(2)\nGetting: 0\nGetting: 1\nGetting: 2\nGetting: 3\nGetting: 4\nGetting: 5\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a.remove(3)\nGetting: 0\nGetting: 1\nGetting: 2\nDeleting: 2")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('本小节只是对 Python 抽象类功能的抛砖引玉。numbers 模块提供了一个类似的跟\n整数类型相关的抽象类型集合。可以参考 8.12 小节来构造更多自定义抽象基类。\n8.15 属性的代理访问\n问题\n你想将某个实例的属性访问代理到内部另一个实例中去，目的可能是作为继承的\n一个替代方法或者实现代理模式。\n解决方案\n简单来说，代理是一种编程模式，它将某个操作转移给另外一个对象来实现。最简\n单的形式可能是像下面这样：\nclass A:\ndef spam(self, x):\npass\ndef foo(self):\npass\nclass B1:\n""" 简单的代理"""\ndef '),n("strong",[e._v("init")]),e._v("(self):\nself._a = A()\ndef spam(self, x):")]),e._v(" "),n("h1",{attrs:{id:"delegate-to-the-internal-self-a-instance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delegate-to-the-internal-self-a-instance"}},[e._v("#")]),e._v(" Delegate to the internal self._a instance")]),e._v(" "),n("p",[e._v("return self._a.spam(x)\ndef foo(self):")]),e._v(" "),n("h1",{attrs:{id:"delegate-to-the-internal-self-a-instance-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delegate-to-the-internal-self-a-instance-2"}},[e._v("#")]),e._v(" Delegate to the internal self._a instance")]),e._v(" "),n("p",[e._v("return self."),n("em",[e._v("a.foo()\ndef bar(self):\npass\n如果仅仅就两个方法需要代理，那么像这样写就足够了。但是，如果有大量的方法\n需要代理，那么使用 "),n("strong",[e._v("getattr")]),e._v('() 方法或许或更好些：\nclass B2:\n""" 使用__getattr')]),e._v('_ 的代理，代理方法比较多时候"""\ndef '),n("strong",[e._v("init")]),e._v("(self):\nself._a = A()\ndef bar(self):\npass")]),e._v(" "),n("h1",{attrs:{id:"expose-all-of-the-methods-defined-on-class-a"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#expose-all-of-the-methods-defined-on-class-a"}},[e._v("#")]),e._v(" Expose all of the methods defined on class A")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("getattr")]),e._v('(self, name):\n""" 这个方法在访问的 attribute 不存在的时候被调用\nthe '),n("strong",[e._v("getattr")]),e._v('() method is actually a fallback method\nthat only gets called when an attribute is not found"""\nreturn getattr(self._a, name)\n'),n("strong",[e._v("getattr")]),e._v(" 方法是在访问 attribute 不存在的时候被调用，使用演示：\nb = B()\nb.bar() # Calls B.bar() (exists on B)\nb.spam(42) # Calls B."),n("strong",[e._v("getattr")]),e._v("('spam') and delegates to A.spam\n另外一个代理例子是实现代理模式，例如：")]),e._v(" "),n("h1",{attrs:{id:"a-proxy-class-that-wraps-around-another-object-but"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-proxy-class-that-wraps-around-another-object-but"}},[e._v("#")]),e._v(" A proxy class that wraps around another object, but")]),e._v(" "),n("h1",{attrs:{id:"exposes-its-public-attributes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exposes-its-public-attributes"}},[e._v("#")]),e._v(" exposes its public attributes")]),e._v(" "),n("p",[e._v("class Proxy:\ndef "),n("strong",[e._v("init")]),e._v("(self, obj):\nself._obj = obj")]),e._v(" "),n("h1",{attrs:{id:"delegate-attribute-lookup-to-internal-obj-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delegate-attribute-lookup-to-internal-obj-2"}},[e._v("#")]),e._v(" Delegate attribute lookup to internal obj")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("getattr")]),e._v("(self, name):\nprint('getattr:', name)\nreturn getattr(self._obj, name)")]),e._v(" "),n("h1",{attrs:{id:"delegate-attribute-assignment-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delegate-attribute-assignment-2"}},[e._v("#")]),e._v(" Delegate attribute assignment")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("setattr")]),e._v("(self, name, value):\nif name.startswith('_'):\nsuper()."),n("strong",[e._v("setattr")]),e._v("(name, value)\nelse:\nprint('setattr:', name, value)\nsetattr(self._obj, name, value)")]),e._v(" "),n("h1",{attrs:{id:"delegate-attribute-deletion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delegate-attribute-deletion"}},[e._v("#")]),e._v(" Delegate attribute deletion")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("delattr")]),e._v("(self, name):\nif name.startswith('_'):\nsuper()."),n("strong",[e._v("delattr")]),e._v("(name)\nelse:\nprint('delattr:', name)\ndelattr(self._obj, name)\n使用这个代理类时，你只需要用它来包装下其他类即可：\nclass Spam:\ndef "),n("strong",[e._v("init")]),e._v("(self, x):\nself.x = x\ndef bar(self, y):\nprint('Spam.bar:', self.x, y)")]),e._v(" "),n("h1",{attrs:{id:"create-an-instance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-an-instance"}},[e._v("#")]),e._v(" Create an instance")]),e._v(" "),n("p",[e._v("s = Spam(2)")]),e._v(" "),n("h1",{attrs:{id:"create-a-proxy-around-it"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-proxy-around-it"}},[e._v("#")]),e._v(" Create a proxy around it")]),e._v(" "),n("p",[e._v("p = Proxy(s)")]),e._v(" "),n("h1",{attrs:{id:"access-the-proxy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#access-the-proxy"}},[e._v("#")]),e._v(" Access the proxy")]),e._v(" "),n("p",[e._v("print(p.x) # Outputs 2\np.bar(3) # Outputs \"Spam.bar: 2 3\"\np.x = 37 # Changes s.x to 37\n通过自定义属性访问方法，你可以用不同方式自定义代理类行为 (比如加入日志功\n能、只读访问等)。\n讨论\n代理类有时候可以作为继承的替代方案。例如，一个简单的继承如下：\nclass A:\ndef spam(self, x):\nprint('A.spam', x)\ndef foo(self):\nprint('A.foo')\nclass B(A):\ndef spam(self, x):\nprint('B.spam')\nsuper().spam(x)\ndef bar(self):\nprint('B.bar')\n使用代理的话，就是下面这样：\nclass A:\ndef spam(self, x):\nprint('A.spam', x)\ndef foo(self):\nprint('A.foo')\nclass B:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._a = A()\ndef spam(self, x):\nprint('B.spam', x)\nself._a.spam(x)\ndef bar(self):\nprint('B.bar')\ndef "),n("strong",[e._v("getattr")]),e._v("(self, name):\nreturn getattr(self._a, name)\n当实现代理模式时，还有些细节需要注意。首先，"),n("strong",[e._v("getattr")]),e._v("() 实际是一个后备\n方法，只有在属性不存在时才会调用。因此，如果代理类实例本身有这个属性的话，那\n么不会触发这个方法的。另外，"),n("strong",[e._v("setattr")]),e._v("() 和 "),n("strong",[e._v("delattr")]),e._v("() 需要额外的魔法来\n区分代理实例和被代理实例 _obj 的属性。一个通常的约定是只代理那些不以下划线 _\n开头的属性 (代理类只暴露被代理类的公共属性)。\n还有一点需要注意的是，"),n("strong",[e._v("getattr")]),e._v('() 对于大部分以双下划线 (__) 开始和结尾\n的属性并不适用。比如，考虑如下的类：\nclass ListLike:\n"""'),n("strong",[e._v("getattr")]),e._v(' 对于双下划线开始和结尾的方法是不能用的，需要一个个去重定义"""\ndef '),n("strong",[e._v("init")]),e._v("(self):\nself._items = []\ndef "),n("strong",[e._v("getattr")]),e._v("(self, name):\nreturn getattr(self._items, name)\n如果是创建一个 ListLike 对象，会发现它支持普通的列表方法，如 append() 和\ninsert()，但是却不支持 len()、元素查找等。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('a = ListLike()\na.append(2)\na.insert(0, 1)\na.sort()\nlen(a)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: object of type 'ListLike' has no len()")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('a[0]\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: 'ListLike' object does not support indexing")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('为了让它支持这些方法，你必须手动的实现这些方法代理：\nclass ListLike:\n"""'),n("strong",[e._v("getattr")]),e._v(' 对于双下划线开始和结尾的方法是不能用的，需要一个个去重定义"""\ndef '),n("strong",[e._v("init")]),e._v("(self):\nself._items = []\ndef "),n("strong",[e._v("getattr")]),e._v("(self, name):\nreturn getattr(self._items, name)")]),e._v(" "),n("h1",{attrs:{id:"added-special-methods-to-support-certain-list-operations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#added-special-methods-to-support-certain-list-operations"}},[e._v("#")]),e._v(" Added special methods to support certain list operations")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("len")]),e._v("(self):\nreturn len(self._items)\ndef "),n("strong",[e._v("getitem")]),e._v("(self, index):\nreturn self._items[index]\ndef "),n("strong",[e._v("setitem")]),e._v("(self, index, value):\nself._items[index] = value\ndef "),n("strong",[e._v("delitem")]),e._v("(self, index):\ndel self._items[index]\n11.8 小节还有一个在远程方法调用环境中使用代理的例子。\n8.16 在类中定义多个构造器\n问题\n你想实现一个类，除了使用 "),n("strong",[e._v("init")]),e._v('() 方法外，还有其他方式可以初始化它。\n解决方案\n为了实现多个构造器，你需要使用到类方法。例如：\nimport time\nclass Date:\n""" 方法一：使用类方法"""')]),e._v(" "),n("h1",{attrs:{id:"primary-constructor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#primary-constructor"}},[e._v("#")]),e._v(" Primary constructor")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("init")]),e._v("(self, year, month, day):\nself.year = year\nself.month = month\nself.day = day")]),e._v(" "),n("h1",{attrs:{id:"alternate-constructor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alternate-constructor"}},[e._v("#")]),e._v(" Alternate constructor")]),e._v(" "),n("p",[e._v("@classmethod\ndef today(cls):\nt = time.localtime()\nreturn cls(t.tm_year, t.tm_mon, t.tm_mday)\n直接调用类方法即可，下面是使用示例：\na = Date(2012, 12, 21) # Primary\nb = Date.today() # Alternate\n讨论\n类方法的一个主要用途就是定义多个构造器。它接受一个 class 作为第一个参数\n(cls)。你应该注意到了这个类被用来创建并返回最终的实例。在继承时也能工作的很好：\nclass NewDate(Date):\npass\nc = Date.today() # Creates an instance of Date (cls=Date)\nd = NewDate.today() # Creates an instance of NewDate (cls=NewDate)\n8.17 创建不调用 init 方法的实例\n问题\n你想创建一个实例，但是希望绕过执行 "),n("strong",[e._v("init")]),e._v("() 方法。\n解决方案\n可以通过 "),n("strong",[e._v("new")]),e._v("() 方法创建一个未初始化的实例。例如考虑如下这个类：\nclass Date:\ndef "),n("strong",[e._v("init")]),e._v("(self, year, month, day):\nself.year = year\nself.month = month\nself.day = day\n下面演示如何不调用 "),n("strong",[e._v("init")]),e._v("() 方法来创建这个 Date 实例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("d = Date."),n("strong",[e._v("new")]),e._v("(Date)\nd\n<"),n("strong",[e._v("main")]),e._v(".Date object at 0x1006716d0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('d.year\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nAttributeError: 'Date' object has no attribute 'year'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("结果可以看到，这个 Date 实例的属性 year 还不存在，所以你需要手动初始化：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("data = {'year':2012, 'month':8, 'day':29}\nfor key, value in data.items():\n... setattr(d, key, value)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("d.year\n2012")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("d.month\n8")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n当我们在反序列对象或者实现某个类方法构造函数时需要绕过 "),n("strong",[e._v("init")]),e._v("() 方法来\n创建对象。例如，对于上面的 Date 来讲，有时候你可能会像下面这样定义一个新的构\n造函数 today() ：\nfrom time import localtime\nclass Date:\ndef "),n("strong",[e._v("init")]),e._v("(self, year, month, day):\nself.year = year\nself.month = month\nself.day = day\n@classmethod\ndef today(cls):\nd = cls."),n("strong",[e._v("new")]),e._v("(cls) t = localtime()\nd.year = t.tm_year\nd.month = t.tm_mon\nd.day = t.tm_mday\nreturn d\n同样，在你反序列化 JSON 数据时产生一个如下的字典对象：\ndata = { 'year': 2012, 'month': 8, 'day': 29 }\n如果你想将它转换成一个 Date 类型实例，可以使用上面的技术。\n当你通过这种非常规方式来创建实例的时候，最好不要直接去访问底层实例字\n典，除非你真的清楚所有细节。否则的话，如果这个类使用了 "),n("strong",[e._v("slots")]),e._v(' 、properties 、\ndescriptors 或其他高级技术的时候代码就会失效。而这时候使用 setattr() 方法会让\n你的代码变得更加通用。\n8.18 利用 Mixins 扩展类功能\n问题\n你有很多有用的方法，想使用它们来扩展其他类的功能。但是这些类并没有任何继\n承的关系。因此你不能简单的将这些方法放入一个基类，然后被其他类继承。\n解决方案\n通常当你想自定义类的时候会碰上这些问题。可能是某个库提供了一些基础类，你\n可以利用它们来构造你自己的类。\n假设你想扩展映射对象，给它们添加日志、唯一性设置、类型检查等等功能。下面\n是一些混入类：\nclass LoggedMappingMixin:\n"""\nAdd logging to get/set/delete operations for debugging.\n"""\n'),n("strong",[e._v("slots")]),e._v(" = () # 混入类都没有实例变量，因为直接实例化混入类没有任何意义\ndef "),n("strong",[e._v("getitem")]),e._v("(self, key):\nprint('Getting ' + str(key))\nreturn super()."),n("strong",[e._v("getitem")]),e._v("(key)\ndef "),n("strong",[e._v("setitem")]),e._v("(self, key, value):\nprint('Setting {} = {!r}'.format(key, value))\nreturn super()."),n("strong",[e._v("setitem")]),e._v("(key, value)\ndef "),n("strong",[e._v("delitem")]),e._v("(self, key):\nprint('Deleting ' + str(key))\nreturn super()."),n("strong",[e._v("delitem")]),e._v("(key)\nclass SetOnceMappingMixin:\n'''\nOnly allow a key to be set once.\n'''\n"),n("strong",[e._v("slots")]),e._v(" = ()\ndef "),n("strong",[e._v("setitem")]),e._v("(self, key, value):\nif key in self:\nraise KeyError(str(key) + ' already set')\nreturn super()."),n("strong",[e._v("setitem")]),e._v("(key, value)\nclass StringKeysMappingMixin:\n'''\nRestrict keys to strings only\n'''\n"),n("strong",[e._v("slots")]),e._v(" = ()\ndef "),n("strong",[e._v("setitem")]),e._v("(self, key, value):\nif not isinstance(key, str):\nraise TypeError('keys must be strings')\nreturn super()."),n("strong",[e._v("setitem")]),e._v("(key, value)\n这些类单独使用起来没有任何意义，事实上如果你去实例化任何一个类，除了产生\n异常外没任何作用。它们是用来通过多继承来和其他映射对象混入使用的。例如：\nclass LoggedDict(LoggedMappingMixin, dict):\npass\nd = LoggedDict()\nd['x'] = 23\nprint(d['x'])\ndel d['x']\nfrom collections import defaultdict\nclass SetOnceDefaultDict(SetOnceMappingMixin, defaultdict):\npass\nd = SetOnceDefaultDict(list)\nd['x'].append(2)\nd['x'].append(3)")]),e._v(" "),n("h1",{attrs:{id:"d-x-23-keyerror-x-already-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#d-x-23-keyerror-x-already-set"}},[e._v("#")]),e._v(" d['x'] = 23 # KeyError: 'x already set'")]),e._v(" "),n("p",[e._v("这个例子中，可以看到混入类跟其他已存在的类 (比如 dict、defaultdict 和 Or￾deredDict) 结合起来使用，一个接一个。结合后就能发挥正常功效了。\n讨论\n混入类在标准库中很多地方都出现过，通常都是用来像上面那样扩展某些类的功\n能。它们也是多继承的一个主要用途。比如，当你编写网络代码时候，你会经常使用\nsocketserver 模块中的 ThreadingMixIn 来给其他网络相关类增加多线程支持。例如，\n下面是一个多线程的 XML-RPC 服务：\nfrom xmlrpc.server import SimpleXMLRPCServer\nfrom socketserver import ThreadingMixIn\nclass ThreadedXMLRPCServer(ThreadingMixIn, SimpleXMLRPCServer):\npass\n同时在一些大型库和框架中也会发现混入类的使用，用途同样是增强已存在的类\n的功能和一些可选特征。\n对于混入类，有几点需要记住。首先是，混入类不能直接被实例化使用。其次，混\n入类没有自己的状态信息，也就是说它们并没有定义 "),n("strong",[e._v("init")]),e._v("() 方法，并且没有实例\n属性。这也是为什么我们在上面明确定义了 "),n("strong",[e._v("slots")]),e._v(' = () 。\n还有一种实现混入类的方式就是使用类装饰器，如下所示：\ndef LoggedMapping(cls):\n""" 第二种方式：使用类装饰器"""\ncls_getitem = cls.'),n("strong",[e._v("getitem")]),e._v("\ncls_setitem = cls."),n("strong",[e._v("setitem")]),e._v("\ncls_delitem = cls."),n("strong",[e._v("delitem")]),e._v("\ndef "),n("strong",[e._v("getitem")]),e._v("(self, key):\nprint('Getting ' + str(key))\nreturn cls_getitem(self, key)\ndef "),n("strong",[e._v("setitem")]),e._v("(self, key, value):\nprint('Setting {} = {!r}'.format(key, value))\nreturn cls_setitem(self, key, value)\ndef "),n("strong",[e._v("delitem")]),e._v("(self, key):\nprint('Deleting ' + str(key))\nreturn cls_delitem(self, key)\ncls."),n("strong",[e._v("getitem")]),e._v(" = "),n("strong",[e._v("getitem")]),e._v("\ncls."),n("strong",[e._v("setitem")]),e._v(" = "),n("strong",[e._v("setitem")]),e._v("\ncls."),n("strong",[e._v("delitem")]),e._v(" = "),n("strong",[e._v("delitem")]),e._v('\nreturn cls\n@LoggedMapping\nclass LoggedDict(dict):\npass\n这个效果跟之前的是一样的，而且不再需要使用多继承了。参考 9.12 小节获取更\n多类装饰器的信息，参考 8.13 小节查看更多混入类和类装饰器的例子。\n8.19 实现状态对象或者状态机\n问题\n你想实现一个状态机或者是在不同状态下执行操作的对象，但是又不想在代码中\n出现太多的条件判断语句。\n解决方案\n在很多程序中，有些对象会根据状态的不同来执行不同的操作。比如考虑如下的一\n个连接对象：\nclass Connection:\n""" 普通方案，好多个判断语句，效率低下~~"""\ndef '),n("strong",[e._v("init")]),e._v("(self):\nself.state = 'CLOSED'\ndef read(self):\nif self.state != 'OPEN':\nraise RuntimeError('Not open')\nprint('reading')\ndef write(self, data):\nif self.state != 'OPEN':\nraise RuntimeError('Not open')\nprint('writing')\ndef open(self):\nif self.state == 'OPEN':\nraise RuntimeError('Already open')\nself.state = 'OPEN'\ndef close(self):\nif self.state == 'CLOSED':\nraise RuntimeError('Already closed')\nself.state = 'CLOSED'\n这样写有很多缺点，首先是代码太复杂了，好多的条件判断。其次是执行效率变\n低，因为一些常见的操作比如 read()、write() 每次执行前都需要执行检查。\n一个更好的办法是为每个状态定义一个对象：\nclass Connection1:\n\"\"\" 新方案——对每个状态定义一个类\"\"\"\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself.new_state(ClosedConnectionState)\ndef new_state(self, newstate):\nself._state = newstate")]),e._v(" "),n("h1",{attrs:{id:"delegate-to-the-state-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#delegate-to-the-state-class"}},[e._v("#")]),e._v(" Delegate to the state class")]),e._v(" "),n("p",[e._v("def read(self):\nreturn self._state.read(self)\ndef write(self, data):\nreturn self._state.write(self, data)\ndef open(self):\nreturn self._state.open(self)\ndef close(self):\nreturn self._state.close(self)")]),e._v(" "),n("h1",{attrs:{id:"connection-state-base-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#connection-state-base-class"}},[e._v("#")]),e._v(" Connection state base class")]),e._v(" "),n("p",[e._v("class ConnectionState:\n@staticmethod\ndef read(conn):\nraise NotImplementedError()\n@staticmethod\ndef write(conn, data):\nraise NotImplementedError()\n@staticmethod\ndef open(conn):\nraise NotImplementedError()\n@staticmethod\ndef close(conn):\nraise NotImplementedError()")]),e._v(" "),n("h1",{attrs:{id:"implementation-of-different-states"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#implementation-of-different-states"}},[e._v("#")]),e._v(" Implementation of different states")]),e._v(" "),n("p",[e._v("class ClosedConnectionState(ConnectionState):\n@staticmethod\ndef read(conn):\nraise RuntimeError('Not open')\n@staticmethod\ndef write(conn, data):\nraise RuntimeError('Not open')\n@staticmethod\ndef open(conn):\nconn.new_state(OpenConnectionState)\n@staticmethod\ndef close(conn):\nraise RuntimeError('Already closed')\nclass OpenConnectionState(ConnectionState):\n@staticmethod\ndef read(conn):\nprint('reading')\n@staticmethod\ndef write(conn, data):\nprint('writing')\n@staticmethod\ndef open(conn):\nraise RuntimeError('Already open')\n@staticmethod\ndef close(conn):\nconn.new_state(ClosedConnectionState)\n下面是使用演示：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = Connection()\nc._state\n<class '"),n("strong",[e._v("main")]),e._v(".ClosedConnectionState'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('c.read()\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "example.py", line 10, in read\nreturn self._state.read(self)\nFile "example.py", line 43, in read\nraise RuntimeError(\'Not open\')\nRuntimeError: Not open')])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.open()\nc._state\n<class '"),n("strong",[e._v("main")]),e._v(".OpenConnectionState'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.read()\nreading")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.write('hello')\nwriting")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.close()\nc._state\n<class '"),n("strong",[e._v("main")]),e._v(".ClosedConnectionState'>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n如果代码中出现太多的条件判断语句的话，代码就会变得难以维护和阅读。这里的\n解决方案是将每个状态抽取出来定义成一个类。\n这里看上去有点奇怪，每个状态对象都只有静态方法，并没有存储任何的实例\n属性数据。实际上，所有状态信息都只存储在 Connection 实例中。在基类中定义的\nNotImplementedError 是为了确保子类实现了相应的方法。这里你或许还想使用 8.12\n小节讲解的抽象基类方式。\n设计模式中有一种模式叫状态模式，这一小节算是一个初步入门！\n8.20 通过字符串调用对象方法\n问题\n你有一个字符串形式的方法名称，想通过它调用某个对象的对应方法。\n解决方案\n最简单的情况，可以使用 getattr() ：\nimport math\nclass Point:\ndef "),n("strong",[e._v("init")]),e._v("(self, x, y):\nself.x = x\nself.y = y\ndef "),n("strong",[e._v("repr")]),e._v("(self):\nreturn 'Point({!r:},{!r:})'.format(self.x, self.y)\ndef distance(self, x, y):\nreturn math.hypot(self.x - x, self.y - y)\np = Point(2, 3) d = getattr(p, 'distance')(0, 0) # Calls p.distance(0, 0)\n另外一种方法是使用 operator.methodcaller() ，例如：\nimport operator\noperator.methodcaller('distance', 0, 0)(p)\n当你需要通过相同的参数多次调用某个方法时，使用 operator.methodcaller 就\n很方便了。比如你需要排序一系列的点，就可以这样做：\npoints = [\nPoint(1, 2),\nPoint(3, 0),\nPoint(10, -3),\nPoint(-5, -7),\nPoint(-1, 8),\nPoint(3, 2) ]")]),e._v(" "),n("h1",{attrs:{id:"sort-by-distance-from-origin-0-0"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sort-by-distance-from-origin-0-0"}},[e._v("#")]),e._v(" Sort by distance from origin (0, 0)")]),e._v(" "),n("p",[e._v("points.sort(key=operator.methodcaller('distance', 0, 0))\n讨论\n调用一个方法实际上是两部独立操作，第一步是查找属性，第二步是函数调用。因\n此，为了调用某个方法，你可以首先通过 getattr() 来查找到这个属性，然后再去以\n函数方式调用它即可。\noperator.methodcaller() 创建一个可调用对象，并同时提供所有必要参数，然\n后调用的时候只需要将实例对象传递给它即可，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("p = Point(3, 4)\nd = operator.methodcaller('distance', 0, 0)\nd(p)\n5.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("通过方法名称字符串来调用方法通常出现在需要模拟 case 语句或实现访问者模式\n的时候。参考下一小节获取更多高级例子。\n8.21 实现访问者模式\n问题\n你要处理由大量不同类型的对象组成的复杂数据结构，每一个对象都需要需要进\n行不同的处理。比如，遍历一个树形结构，然后根据每个节点的相应状态执行不同的操\n作。\n解决方案\n这里遇到的问题在编程领域中是很普遍的，有时候会构建一个由大量不同对象组\n成的数据结构。假设你要写一个表示数学表达式的程序，那么你可能需要定义如下的\n类：\nclass Node:\npass\nclass UnaryOperator(Node):\ndef "),n("strong",[e._v("init")]),e._v("(self, operand):\nself.operand = operand\nclass BinaryOperator(Node):\ndef "),n("strong",[e._v("init")]),e._v("(self, left, right):\nself.left = left\nself.right = right\nclass Add(BinaryOperator):\npass\nclass Sub(BinaryOperator):\npass\nclass Mul(BinaryOperator):\npass\nclass Div(BinaryOperator):\npass\nclass Negate(UnaryOperator):\npass\nclass Number(Node):\ndef "),n("strong",[e._v("init")]),e._v("(self, value):\nself.value = value\n然后利用这些类构建嵌套数据结构，如下所示：")]),e._v(" "),n("h1",{attrs:{id:"representation-of-1-2-3-4-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#representation-of-1-2-3-4-5"}},[e._v("#")]),e._v(" Representation of 1 + 2 * (3 - 4) / 5")]),e._v(" "),n("p",[e._v("t1 = Sub(Number(3), Number(4))\nt2 = Mul(Number(2), t1)\nt3 = Div(t2, Number(5))\nt4 = Add(Number(1), t3)\n这样做的问题是对于每个表达式，每次都要重新定义一遍，有没有一种更通用的方\n式让它支持所有的数字和操作符呢。这里我们使用访问者模式可以达到这样的目的：\nclass NodeVisitor:\ndef visit(self, node):\nmethname = 'visit_' + type(node)."),n("strong",[e._v("name")]),e._v("\nmeth = getattr(self, methname, None)\nif meth is None:\nmeth = self.generic_visit\nreturn meth(node)\ndef generic_visit(self, node):\nraise RuntimeError('No {} method'.format('visit_' + type(node)."),n("em",[n("em",[e._v("name")]),e._v("\n,\n→")]),e._v("))\n为了使用这个类，可以定义一个类继承它并且实现各种 visit_Name() 方法，其中\nName 是 node 类型。例如，如果你想求表达式的值，可以这样写：\nclass Evaluator(NodeVisitor):\ndef visit_Number(self, node):\nreturn node.value\ndef visit_Add(self, node):\nreturn self.visit(node.left) + self.visit(node.right)\ndef visit_Sub(self, node):\nreturn self.visit(node.left) - self.visit(node.right)\ndef visit_Mul(self, node):\nreturn self.visit(node.left) * self.visit(node.right)\ndef visit_Div(self, node):\nreturn self.visit(node.left) / self.visit(node.right)\ndef visit_Negate(self, node):\nreturn -node.operand\n使用示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("e = Evaluator()\ne.visit(t4)\n0.6")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("作为一个不同的例子，下面定义一个类在一个栈上面将一个表达式转换成多个操\n作序列：\nclass StackCode(NodeVisitor):\ndef generate_code(self, node):\nself.instructions = []\nself.visit(node)\nreturn self.instructions\ndef visit_Number(self, node):\nself.instructions.append(('PUSH', node.value))\ndef binop(self, node, instruction):\nself.visit(node.left)\nself.visit(node.right)\nself.instructions.append((instruction,))\ndef visit_Add(self, node):\nself.binop(node, 'ADD')\ndef visit_Sub(self, node):\nself.binop(node, 'SUB')\ndef visit_Mul(self, node):\nself.binop(node, 'MUL')\ndef visit_Div(self, node):\nself.binop(node, 'DIV')\ndef unaryop(self, node, instruction):\nself.visit(node.operand)\nself.instructions.append((instruction,))\ndef visit_Negate(self, node):\nself.unaryop(node, 'NEG')\n使用示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = StackCode()\ns.generate_code(t4)\n[('PUSH', 1), ('PUSH', 2), ('PUSH', 3), ('PUSH', 4), ('SUB',),\n('MUL',), ('PUSH', 5), ('DIV',), ('ADD',)]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n刚开始的时候你可能会写大量的 if/else 语句来实现，这里访问者模式的好处就是\n通过 getattr() 来获取相应的方法，并利用递归来遍历所有的节点：\ndef binop(self, node, instruction):\nself.visit(node.left)\nself.visit(node.right)\nself.instructions.append((instruction,))\n还有一点需要指出的是，这种技术也是实现其他语言中 switch 或 case 语句的方式。\n比如，如果你正在写一个 HTTP 框架，你可能会写这样一个请求分发的控制器：\nclass HTTPHandler:\ndef handle(self, request):\nmethname = 'do_' + request.request_method\ngetattr(self, methname)(request)\ndef do_GET(self, request):\npass\ndef do_POST(self, request):\npass\ndef do_HEAD(self, request):\npass\n访问者模式一个缺点就是它严重依赖递归，如果数据结构嵌套层次太深可能会有\n问题，有时候会超过 Python 的递归深度限制 (参考 sys.getrecursionlimit() )。\n可以参照 8.22 小节，利用生成器或迭代器来实现非递归遍历算法。\n在跟解析和编译相关的编程中使用访问者模式是非常常见的。Python 本身的 ast\n模块值的关注下，可以去看看源码。9.24 小节演示了一个利用 ast 模块来处理 Python\n源代码的例子。\n8.22 不用递归实现访问者模式\n问题\n你使用访问者模式遍历一个很深的嵌套树形数据结构，并且因为超过嵌套层级限\n制而失败。你想消除递归，并同时保持访问者编程模式。\n解决方案\n通过巧妙的使用生成器可以在树遍历或搜索算法中消除递归。在 8.21 小节中，我\n们给出了一个访问者类。下面我们利用一个栈和生成器重新实现这个类：\nimport types\nclass Node:\npass\nclass NodeVisitor:\ndef visit(self, node):\nstack = [node]\nlast_result = None\nwhile stack:\ntry:\nlast = stack[-1]\nif isinstance(last, types.GeneratorType):\nstack.append(last.send(last_result))\nlast_result = None\nelif isinstance(last, Node):\nstack.append(self."),n("em",[e._v("visit(stack.pop()))\nelse:\nlast_result = stack.pop()\nexcept StopIteration:\nstack.pop()\nreturn last_result\ndef "),n("em",[e._v("visit(self, node):\nmethname = 'visit")]),e._v("' + type(node)."),n("strong",[e._v("name")]),e._v("\nmeth = getattr(self, methname, None)\nif meth is None:\nmeth = self.generic_visit\nreturn meth(node)\ndef generic_visit(self, node):\nraise RuntimeError('No {} method'.format('visit")]),e._v("' + type(node)."),n("em",[n("em",[e._v("name")]),e._v("\n,\n→")]),e._v("))\n如果你使用这个类，也能达到相同的效果。事实上你完全可以将它作为上一节中的\n访问者模式的替代实现。考虑如下代码，遍历一个表达式的树：\nclass UnaryOperator(Node):\ndef "),n("strong",[e._v("init")]),e._v("(self, operand):\nself.operand = operand\nclass BinaryOperator(Node):\ndef "),n("strong",[e._v("init")]),e._v("(self, left, right):\nself.left = left\nself.right = right\nclass Add(BinaryOperator):\npass\nclass Sub(BinaryOperator):\npass\nclass Mul(BinaryOperator):\npass\nclass Div(BinaryOperator):\npass\nclass Negate(UnaryOperator):\npass\nclass Number(Node):\ndef "),n("strong",[e._v("init")]),e._v("(self, value):\nself.value = value")]),e._v(" "),n("h1",{attrs:{id:"a-sample-visitor-class-that-evaluates-expressions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-sample-visitor-class-that-evaluates-expressions"}},[e._v("#")]),e._v(" A sample visitor class that evaluates expressions")]),e._v(" "),n("p",[e._v("class Evaluator(NodeVisitor):\ndef visit_Number(self, node):\nreturn node.value\ndef visit_Add(self, node):\nreturn self.visit(node.left) + self.visit(node.right)\ndef visit_Sub(self, node):\nreturn self.visit(node.left) - self.visit(node.right)\ndef visit_Mul(self, node):\nreturn self.visit(node.left) * self.visit(node.right)\ndef visit_Div(self, node):\nreturn self.visit(node.left) / self.visit(node.right)\ndef visit_Negate(self, node):\nreturn -self.visit(node.operand)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':")]),e._v(" "),n("h1",{attrs:{id:"_1-2-3-4-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-4-5"}},[e._v("#")]),e._v(" 1 + 2*(3-4) / 5")]),e._v(" "),n("p",[e._v("t1 = Sub(Number(3), Number(4))\nt2 = Mul(Number(2), t1)\nt3 = Div(t2, Number(5))\nt4 = Add(Number(1), t3)")]),e._v(" "),n("h1",{attrs:{id:"evaluate-it"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#evaluate-it"}},[e._v("#")]),e._v(" Evaluate it")]),e._v(" "),n("p",[e._v("e = Evaluator()\nprint(e.visit(t4)) # Outputs 0.6\n如果嵌套层次太深那么上述的 Evaluator 就会失效：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = Number(0)\nfor n in range(1, 100000):\n... a = Add(a, Number(n))\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('e = Evaluator()\ne.visit(a)\nTraceback (most recent call last):\n...\nFile "visitor.py", line 29, in _visit\nreturn meth(node)\nFile "visitor.py", line 67, in visit_Add\nreturn self.visit(node.left) + self.visit(node.right)\nRuntimeError: maximum recursion depth exceeded')])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("现在我们稍微修改下上面的 Evaluator：\nclass Evaluator(NodeVisitor):\ndef visit_Number(self, node):\nreturn node.value\ndef visit_Add(self, node):\nyield (yield node.left) + (yield node.right)\ndef visit_Sub(self, node):\nyield (yield node.left) - (yield node.right)\ndef visit_Mul(self, node):\nyield (yield node.left) * (yield node.right)\ndef visit_Div(self, node):\nyield (yield node.left) / (yield node.right)\ndef visit_Negate(self, node):\nyield - (yield node.operand)\n再次运行，就不会报错了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = Number(0)\nfor n in range(1,100000):\n... a = Add(a, Number(n))\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("e = Evaluator()\ne.visit(a)\n4999950000")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你还想添加其他自定义逻辑也没问题：\nclass Evaluator(NodeVisitor):\n...\ndef visit_Add(self, node):\nprint('Add:', node)\nlhs = yield node.left\nprint('left=', lhs)\nrhs = yield node.right\nprint('right=', rhs)\nyield lhs + rhs\n...\n下面是简单的测试：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("e = Evaluator()\ne.visit(t4)\nAdd: <"),n("strong",[e._v("main")]),e._v(".Add object at 0x1006a8d90>\nleft= 1\nright= -0.4\n0.6")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n这一小节我们演示了生成器和协程在程序控制流方面的强大功能。避免递归的一\n个通常方法是使用一个栈或队列的数据结构。例如，深度优先的遍历算法，第一次碰到\n一个节点时将其压入栈中，处理完后弹出栈。visit() 方法的核心思路就是这样。\n另外一个需要理解的就是生成器中 yield 语句。当碰到 yield 语句时，生成器会返\n回一个数据并暂时挂起。上面的例子使用这个技术来代替了递归。例如，之前我们是这\n样写递归：\nvalue = self.visit(node.left)\n现在换成 yield 语句：\nvalue = yield node.left\n它会将 node.left 返回给 visit() 方法，然后 visit() 方法调用那个节点相应的\nvisit_Name() 方法。yield 暂时将程序控制器让出给调用者，当执行完后，结果会赋值\n给 value，\n看完这一小节，你也许想去寻找其它没有 yield 语句的方案。但是这么做没有必要，\n你必须处理很多棘手的问题。例如，为了消除递归，你必须要维护一个栈结构，如果不\n使用生成器，代码会变得很臃肿，到处都是栈操作语句、回调函数等。实际上，使用\nyield 语句可以让你写出非常漂亮的代码，它消除了递归但是看上去又很像递归实现，\n代码很简洁。\n8.23 循环引用数据结构的内存管理\n问题\n你的程序创建了很多循环引用数据结构 (比如树、图、观察者模式等)，你碰到了内\n存管理难题。\n解决方案\n一个简单的循环引用数据结构例子就是一个树形结构，双亲节点有指针指向孩子\n节点，孩子节点又返回来指向双亲节点。这种情况下，可以考虑使用 weakref 库中的\n弱引用。例如：\nimport weakref\nclass Node:\ndef "),n("strong",[e._v("init")]),e._v("(self, value):\nself.value = value\nself._parent = None\nself.children = []\ndef "),n("strong",[e._v("repr")]),e._v("(self):\nreturn 'Node({!r:})'.format(self.value)")]),e._v(" "),n("h1",{attrs:{id:"property-that-manages-the-parent-as-a-weak-reference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#property-that-manages-the-parent-as-a-weak-reference"}},[e._v("#")]),e._v(" property that manages the parent as a weak-reference")]),e._v(" "),n("p",[e._v("@property\ndef parent(self):\nreturn None if self._parent is None else self._parent()\n@parent.setter\ndef parent(self, node):\nself._parent = weakref.ref(node)\ndef add_child(self, child):\nself.children.append(child)\nchild.parent = self\n这种是想方式允许 parent 静默终止。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("root = Node('parent')\nc1 = Node('child')\nroot.add_child(c1)\nprint(c1.parent)\nNode('parent')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("del root\nprint(c1.parent)\nNone")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n循环引用的数据结构在 Python 中是一个很棘手的问题，因为正常的垃圾回收机制\n不能适用于这种情形。例如考虑如下代码：")]),e._v(" "),n("h1",{attrs:{id:"class-just-to-illustrate-when-deletion-occurs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-just-to-illustrate-when-deletion-occurs"}},[e._v("#")]),e._v(" Class just to illustrate when deletion occurs")]),e._v(" "),n("p",[e._v("class Data:\ndef "),n("strong",[e._v("del")]),e._v("(self):\nprint('Data."),n("strong",[e._v("del")]),e._v("')")]),e._v(" "),n("h1",{attrs:{id:"node-class-involving-a-cycle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-class-involving-a-cycle"}},[e._v("#")]),e._v(" Node class involving a cycle")]),e._v(" "),n("p",[e._v("class Node:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself.data = Data()\nself.parent = None\nself.children = []\ndef add_child(self, child):\nself.children.append(child)\nchild.parent = self\n下面我们使用这个代码来做一些垃圾回收试验：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = Data()\ndel a # Immediately deleted\nData."),n("strong",[e._v("del")])])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a = Node()\ndel a # Immediately deleted\nData."),n("strong",[e._v("del")])])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a = Node()\na.add_child(Node())\ndel a # Not deleted (no message)")])])])]),e._v(" "),n("p",[e._v("可以看到，最后一个的删除时打印语句没有出现。原因是 Python 的垃圾回收机制\n是基于简单的引用计数。当一个对象的引用数变成 0 的时候才会立即删除掉。而对于循\n环引用这个条件永远不会成立。因此，在上面例子中最后部分，父节点和孩子节点互相\n拥有对方的引用，导致每个对象的引用计数都不可能变成 0。\nPython 有另外的垃圾回收器来专门针对循环引用的，但是你永远不知道它什么时\n候会触发。另外你还可以手动的触发它，但是代码看上去很挫：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import gc\ngc.collect() # Force collection\nData."),n("strong",[e._v("del")]),e._v("\nData."),n("strong",[e._v("del")])])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果循环引用的对象自己还定义了自己的 "),n("strong",[e._v("del")]),e._v("() 方法，那么会让情况变得更\n糟糕。假设你像下面这样给 Node 定义自己的 "),n("strong",[e._v("del")]),e._v("() 方法：")]),e._v(" "),n("h1",{attrs:{id:"node-class-involving-a-cycle-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-class-involving-a-cycle-2"}},[e._v("#")]),e._v(" Node class involving a cycle")]),e._v(" "),n("p",[e._v("class Node:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself.data = Data()\nself.parent = None\nself.children = []\ndef add_child(self, child):\nself.children.append(child)\nchild.parent = self")]),e._v(" "),n("h1",{attrs:{id:"never-define-like-this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#never-define-like-this"}},[e._v("#")]),e._v(" NEVER DEFINE LIKE THIS.")]),e._v(" "),n("h1",{attrs:{id:"only-here-to-illustrate-pathological-behavior"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#only-here-to-illustrate-pathological-behavior"}},[e._v("#")]),e._v(" Only here to illustrate pathological behavior")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("del")]),e._v("(self):\ndel self.data\ndel.parent\ndel.children\n这种情况下，垃圾回收永远都不会去回收这个对象的，还会导致内存泄露。如果你\n试着去运行它会发现，Data."),n("strong",[e._v("del")]),e._v(" 消息永远不会出现了, 甚至在你强制内存回收时：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = Node()\na.add_child(Node()\ndel a # No message (not collected)\nimport gc\ngc.collect() # No message (not collected)")])])])]),e._v(" "),n("p",[e._v("弱引用消除了引用循环的这个问题，本质来讲，弱引用就是一个对象指针，它不会\n增加它的引用计数。你可以通过 weakref 来创建弱引用。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import weakref\na = Node()\na_ref = weakref.ref(a)\na_ref\n<weakref at 0x100581f70; to 'Node' at 0x1005c5410>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("为了访问弱引用所引用的对象，你可以像函数一样去调用它即可。如果那个对象还\n存在就会返回它，否则就返回一个 None。由于原始对象的引用计数没有增加，那么就\n可以去删除它了。例如;")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("print(a_ref())\n<"),n("strong",[e._v("main")]),e._v(".Node object at 0x1005c5410>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("del a\nData."),n("strong",[e._v("del")])])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(a_ref())\nNone")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("通过这里演示的弱引用技术，你会发现不再有循环引用问题了，一旦某个节点不被\n使用了，垃圾回收器立即回收它。你还能参考 8.25 小节关于弱引用的另外一个例子。\n8.24 让类支持比较操作\n问题\n你想让某个类的实例支持标准的比较运算 (比如 >=,!=,<=,< 等)，但是又不想去\n实现那一大丢的特殊方法。\n解决方案\nPython 类对每个比较操作都需要实现一个特殊方法来支持。例如为了支持 >= 操\n作符，你需要定义一个 "),n("strong",[e._v("ge")]),e._v("() 方法。尽管定义一个方法没什么问题，但如果要你实\n现所有可能的比较方法那就有点烦人了。\n装饰器 functools.total_ordering 就是用来简化这个处理的。使用它来装饰一个\n来，你只需定义一个 "),n("strong",[e._v("eq")]),e._v("() 方法，外加其他方法 ("),n("strong",[e._v("lt")]),e._v(", "),n("strong",[e._v("le")]),e._v(", "),n("strong",[e._v("gt")]),e._v(", or\n"),n("strong",[e._v("ge")]),e._v(") 中的一个即可。然后装饰器会自动为你填充其它比较方法。\n作为例子，我们构建一些房子，然后给它们增加一些房间，最后通过房子大小来比\n较它们：\nfrom functools import total_ordering\nclass Room:\ndef "),n("strong",[e._v("init")]),e._v("(self, name, length, width):\nself.name = name\nself.length = length\nself.width = width\nself.square_feet = self.length * self.width\n@total_ordering\nclass House:\ndef "),n("strong",[e._v("init")]),e._v("(self, name, style):\nself.name = name\nself.style = style\nself.rooms = list()\n@property\ndef living_space_footage(self):\nreturn sum(r.square_feet for r in self.rooms)\ndef add_room(self, room):\nself.rooms.append(room)\ndef "),n("strong",[e._v("str")]),e._v("(self):\nreturn '{}: {} square foot {}'.format(self.name,\nself.living_space_footage,\nself.style)\ndef "),n("strong",[e._v("eq")]),e._v("(self, other):\nreturn self.living_space_footage == other.living_space_footage\ndef "),n("strong",[e._v("lt")]),e._v("(self, other):\nreturn self.living_space_footage < other.living_space_footage\n这里我们只是给 House 类定义了两个方法："),n("strong",[e._v("eq")]),e._v("() 和 "),n("strong",[e._v("lt")]),e._v("() ，它就能支持\n所有的比较操作：")]),e._v(" "),n("h1",{attrs:{id:"build-a-few-houses-and-add-rooms-to-them"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#build-a-few-houses-and-add-rooms-to-them"}},[e._v("#")]),e._v(" Build a few houses, and add rooms to them")]),e._v(" "),n("p",[e._v("h1 = House('h1', 'Cape')\nh1.add_room(Room('Master Bedroom', 14, 21))\nh1.add_room(Room('Living Room', 18, 20))\nh1.add_room(Room('Kitchen', 12, 16))\nh1.add_room(Room('Office', 12, 12))\nh2 = House('h2', 'Ranch')\nh2.add_room(Room('Master Bedroom', 14, 21))\nh2.add_room(Room('Living Room', 18, 20))\nh2.add_room(Room('Kitchen', 12, 16))\nh3 = House('h3', 'Split')\nh3.add_room(Room('Master Bedroom', 14, 21))\nh3.add_room(Room('Living Room', 18, 20))\nh3.add_room(Room('Office', 12, 16))\nh3.add_room(Room('Kitchen', 15, 17))\nhouses = [h1, h2, h3]\nprint('Is h1 bigger than h2?', h1 > h2) # prints True\nprint('Is h2 smaller than h3?', h2 < h3) # prints True\nprint('Is h2 greater than or equal to h1?', h2 >= h1) # Prints False\nprint('Which one is biggest?', max(houses)) # Prints 'h3: 1101-square-foot␣ , →Split'\nprint('Which is smallest?', min(houses)) # Prints 'h2: 846-square-foot Ranch'\n讨论\n其实 total_ordering 装饰器也没那么神秘。它就是定义了一个从每个比较支持方\n法到所有需要定义的其他方法的一个映射而已。比如你定义了 "),n("strong",[e._v("le")]),e._v("() 方法，那么它\n就被用来构建所有其他的需要定义的那些特殊方法。实际上就是在类里面像下面这样\n定义了一些特殊方法：\nclass House:\ndef "),n("strong",[e._v("eq")]),e._v("(self, other):\npass\ndef "),n("strong",[e._v("lt")]),e._v("(self, other):\npass")]),e._v(" "),n("h1",{attrs:{id:"methods-created-by-total-ordering"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#methods-created-by-total-ordering"}},[e._v("#")]),e._v(" Methods created by @total_ordering")]),e._v(" "),n("p",[n("strong",[e._v("le")]),e._v(" = lambda self, other: self < other or self == other\n"),n("strong",[e._v("gt")]),e._v(" = lambda self, other: not (self < other or self == other)\n"),n("strong",[e._v("ge")]),e._v(" = lambda self, other: not (self < other)\n"),n("strong",[e._v("ne")]),e._v(" = lambda self, other: not self == other\n当然，你自己去写也很容易，但是使用 @total_ordering 可以简化代码，何乐而\n不为呢。\n8.25 创建缓存实例\n问题\n在创建一个类的对象时，如果之前使用同样参数创建过这个对象，你想返回它的缓\n存引用。\n解决方案\n这种通常是因为你希望相同参数创建的对象时单例的。在很多库中都有实际的例\n子，比如 logging 模块，使用相同的名称创建的 logger 实例永远只有一个。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import logging\na = logging.getLogger('foo')\nb = logging.getLogger('bar')\na is b\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c = logging.getLogger('foo')\na is c\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("为了达到这样的效果，你需要使用一个和类本身分开的工厂函数，例如：")]),e._v(" "),n("h1",{attrs:{id:"the-class-in-question"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-class-in-question"}},[e._v("#")]),e._v(" The class in question")]),e._v(" "),n("p",[e._v("class Spam:\ndef "),n("strong",[e._v("init")]),e._v("(self, name):\nself.name = name")]),e._v(" "),n("h1",{attrs:{id:"caching-support"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#caching-support"}},[e._v("#")]),e._v(" Caching support")]),e._v(" "),n("p",[e._v("import weakref\n_spam_cache = weakref.WeakValueDictionary()\ndef get_spam(name):\nif name not in _spam_cache:\ns = Spam(name)\n_spam_cache[name] = s\nelse:s = _spam_cache[name]\nreturn s\n然后做一个测试，你会发现跟之前那个日志对象的创建行为是一致的：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = get_spam('foo')\nb = get_spam('bar')\na is b\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c = get_spam('foo')\na is c\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n编写一个工厂函数来修改普通的实例创建行为通常是一个比较简单的方法。但是\n我们还能否找到更优雅的解决方案呢？\n例如，你可能会考虑重新定义类的 "),n("strong",[e._v("new")]),e._v("() 方法，就像下面这样：")]),e._v(" "),n("h1",{attrs:{id:"note-this-code-doesn-t-quite-work"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#note-this-code-doesn-t-quite-work"}},[e._v("#")]),e._v(" Note: This code doesn't quite work")]),e._v(" "),n("p",[e._v("import weakref\nclass Spam:\n_spam_cache = weakref.WeakValueDictionary()\ndef "),n("strong",[e._v("new")]),e._v("(cls, name):\nif name in cls._spam_cache:\nreturn cls._spam_cache[name]\nelse:\nself = super()."),n("strong",[e._v("new")]),e._v("(cls)\ncls._spam_cache[name] = self\nreturn self\ndef "),n("strong",[e._v("init")]),e._v("(self, name):\nprint('Initializing Spam')\nself.name = name\n初看起来好像可以达到预期效果，但是问题是 "),n("strong",[e._v("init")]),e._v("() 每次都会被调用，不管\n这个实例是否被缓存了。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = Spam('Dave')\nInitializing Spam")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("t = Spam('Dave')\nInitializing Spam")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s is t\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这个或许不是你想要的效果，因此这种方法并不可取。\n上面我们使用到了弱引用计数，对于垃圾回收来讲是很有帮助的，关于这个我们\n在 8.23 小节已经讲过了。当我们保持实例缓存时，你可能只想在程序中使用到它们时\n才保存。一个 WeakValueDictionary 实例只会保存那些在其它地方还在被使用的实例。\n否则的话，只要实例不再被使用了，它就从字典中被移除了。观察下下面的测试结果：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = get_spam('foo')\nb = get_spam('bar')\nc = get_spam('foo')\nlist(_spam_cache)\n['foo', 'bar']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("del a\ndel c\nlist(_spam_cache)\n['bar']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("del b\nlist(_spam_cache)\n[]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对于大部分程序而已，这里代码已经够用了。不过还是有一些更高级的实现值得了\n解下。\n首先是这里使用到了一个全局变量，并且工厂函数跟类放在一块。我们可以通过将\n缓存代码放到一个单独的缓存管理器中：\nimport weakref\nclass CachedSpamManager:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._cache = weakref.WeakValueDictionary()\ndef get_spam(self, name):\nif name not in self._cache:\ns = Spam(name)\nself._cache[name] = s\nelse:s = self._cache[name]\nreturn s\ndef clear(self):\nself._cache.clear()\nclass Spam:\nmanager = CachedSpamManager()\ndef "),n("strong",[e._v("init")]),e._v("(self, name):\nself.name = name\ndef get_spam(name):\nreturn Spam.manager.get_spam(name)\n这样的话代码更清晰，并且也更灵活，我们可以增加更多的缓存管理机制，只需要\n替代 manager 即可。\n还有一点就是，我们暴露了类的实例化给用户，用户很容易去直接实例化这个类，\n而不是使用工厂方法，如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = Spam('foo')\nb = Spam('foo')\na is b\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("有几种方式可以防止用户这样做，第一个是将类的名字修改为以下划线 (_) 开头，\n提示用户别直接调用它。第二种就是让这个类的 "),n("strong",[e._v("init")]),e._v("() 方法抛出一个异常，让它\n不能被初始化：\nclass Spam:\ndef "),n("strong",[e._v("init")]),e._v('(self, *args, **kwargs):\nraise RuntimeError("Can\'t instantiate directly")')]),e._v(" "),n("h1",{attrs:{id:"alternate-constructor-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alternate-constructor-2"}},[e._v("#")]),e._v(" Alternate constructor")]),e._v(" "),n("p",[e._v("@classmethod\ndef _new(cls, name):\nself = cls."),n("strong",[e._v("new")]),e._v("(cls)\nself.name = name\n然后修改缓存管理器代码，使用 Spam._new() 来创建实例，而不是直接调用 Spam()\n构造函数：")]),e._v(" "),n("h1",{attrs:{id:"最后的修正方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最后的修正方案"}},[e._v("#")]),e._v(" ------------------------最后的修正方案------------------------")]),e._v(" "),n("p",[e._v("class CachedSpamManager2:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._cache = weakref.WeakValueDictionary()\ndef get_spam(self, name):\nif name not in self._cache:\ntemp = Spam3._new(name) # Modified creation\nself._cache[name] = temp\nelse:\ntemp = self._cache[name]\nreturn temp\ndef clear(self):\nself._cache.clear()\nclass Spam3:\ndef "),n("strong",[e._v("init")]),e._v('(self, *args, **kwargs):\nraise RuntimeError("Can\'t instantiate directly")')]),e._v(" "),n("h1",{attrs:{id:"alternate-constructor-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alternate-constructor-3"}},[e._v("#")]),e._v(" Alternate constructor")]),e._v(" "),n("p",[e._v("@classmethod\ndef _new(cls, name):\nself = cls."),n("strong",[e._v("new")]),e._v("(cls)\nself.name = name\nreturn self\n最后这样的方案就已经足够好了。缓存和其他构造模式还可以使用 9.13 小节中的\n元类实现的更优雅一点 (使用了更高级的技术)。")]),e._v(" "),n("h2",{attrs:{id:"第九章-元编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第九章-元编程"}},[e._v("#")]),e._v(" 第九章：元编程")]),e._v(" "),n("p",[e._v("软件开发领域中最经典的口头禅就是“don’t repeat yourself”。也就是说，任何时候当你的程序中存在高度重复 (或者是通过剪切复制) 的代码时，都应该想想是否有更好的解决方案。在 Python 当中，通常都可以通过元编程来解决这类问题。简而言之，元编程就是关于创建操作源代码 (比如修改、生成或包装原来的代码) 的函数和类。主要技术是使用装饰器、类装饰器和元类。不过还有一些其他技术，包括签名对象、使用exec() 执行代码以及对内部函数和类的反射技术等。本章的主要目的是向大家介绍这些元编程技术，并且给出实例来演示它们是怎样定制化你的源代码行为的。")]),e._v(" "),n("h3",{attrs:{id:"_9-1-在函数上添加包装器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-在函数上添加包装器"}},[e._v("#")]),e._v(" 9.1 在函数上添加包装器")]),e._v(" "),n("ul",[n("li",[e._v("问题：你想在函数上添加一个包装器，增加额外的操作处理 (比如日志、计时等)。")]),e._v(" "),n("li",[e._v("解决方案：如果你想使用额外的代码包装一个函数，可以定义一个装饰器函数，例如：")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" time\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" functools "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" wraps\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("timethis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@wraps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("wrapper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        start "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        result "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        end "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__name__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__doc__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__annotations__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("end "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" result\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" wrapper\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@timethis")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v('"""这里是doc"""')]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        n "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'__main__'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10000000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br")])]),n("p",[e._v("讨论：一个装饰器就是一个函数，它接受一个函数作为参数并返回一个新的函数。当你像下面这样写：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@timethis")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("countdown")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pass")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("跟像下面这样写其实效果是一样的：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("countdown")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pass")]),e._v("\ncountdown "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" timethis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("countdown"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("顺便说一下，内置的装饰器比如 @staticmethod, @classmethod,@property 原理也是一样的。例如，下面这两个代码片段是等价的：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("A")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@classmethod")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("method")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pass")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("B")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Equivalent definition of a class method")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("method")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("pass")]),e._v("\n\tmethod "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("classmethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("method"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("ul",[n("li",[e._v("在上面的 wrapper() 函数中，装饰器内部定义了一个使用 *args 和 **kwargs 来接受任意参数的函数。在这个函数里面调用了原始函数并将其结果返回，不过你还可以添加其他额外的代码 (比如计时)。然后这个新的函数包装器被作为结果返回来代替原始函数。")]),e._v(" "),n("li",[e._v("需要强调的是装饰器并不会修改原始函数的参数签名以及返回值。使用 *args和 **kwargs 目的就是确保任何参数都能适用。而返回结果值基本都是调用原始函数func(*args, **kwargs) 的返回结果，其中 func 就是原始函数。")]),e._v(" "),n("li",[e._v("刚开始学习装饰器的时候，会使用一些简单的例子来说明，比如上面演示的这个。不过实际场景使用时，还是有一些细节问题要注意的。比如上面使用 @wraps(func) 注解是很重要的，它能保留原始函数的元数据 (下一小节会讲到)，新手经常会忽略这个细节。接下来的几个小节我们会更加深入的讲解装饰器函数的细节问题，如果你想构造你自己的装饰器函数，需要认真看一下。")])]),e._v(" "),n("h3",{attrs:{id:"_9-2-创建装饰器时保留函数元信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-创建装饰器时保留函数元信息"}},[e._v("#")]),e._v(" 9.2 创建装饰器时保留函数元信息")]),e._v(" "),n("ul",[n("li",[e._v("问题：你写了一个装饰器作用在某个函数上，但是这个函数的重要的元信息比如名字、文档字符串、注解和参数签名都丢失了。")]),e._v(" "),n("li",[e._v("解决方案：任何时候你定义装饰器的时候，都应该使用 functools 库中的 @wraps 装饰器来注解底层包装函数，参考9.1")]),e._v(" "),n("li",[e._v("讨论：在编写装饰器的时候复制元信息是一个非常重要的部分。如果你忘记了使用 @wraps，那么你会发现被装饰函数丢失了所有有用的信息。")]),e._v(" "),n("li",[e._v("@wraps 有一个重要特征是它能让你通过属性 "),n("strong",[e._v("wrapped")]),e._v(" 直接访问被包装函数。")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[e._v("countdown"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__wrapped__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("100000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[n("strong",[e._v("wrapped")]),e._v(" 属性还能让被装饰函数正确暴露底层的参数签名信息。例如：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" inspect "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" signature\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("signature"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("countdown"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("h3",{attrs:{id:"_9-3-解除一个装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-解除一个装饰器"}},[e._v("#")]),e._v(" 9.3 解除一个装饰器")]),e._v(" "),n("ul",[n("li",[e._v("问题：一个装饰器已经作用在一个函数上，你想撤销它，直接访问原始的未包装的那个函数。")]),e._v(" "),n("li",[e._v("解决方案：假设装饰器是通过 @wraps (参考 9.2 小节) 来实现的，那么你可以通过访问__wrapped__ 属性来访问原始函数：")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" time\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" functools "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" wraps\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("timethis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@wraps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("wrapper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        start "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        result "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        end "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__name__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__doc__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__annotations__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" end "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" result\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" wrapper\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@timethis")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" y\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'__main__'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("100000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    orig_func "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__wrapped__\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("orig_func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br")])]),n("p",[e._v("如果有多个包装器，那么访问 "),n("strong",[e._v("wrapped")]),e._v(" 属性的行为是不可预知的，应该避免这样做。在 Python3.3 中，它会略过所有的包装层，比如，假如你有如下的代码：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" functools "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" wraps\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("decorator1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@wraps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("wrapper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Decorator 1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" wrapper\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("decorator2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@wraps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("wrapper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Decorator 2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" wrapper\n\t\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@decorator1")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@decorator2")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" y\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("p",[e._v("下面我们在 Python3.3 下测试：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[e._v("add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nDecorator "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\nDecorator "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n\nadd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__wrapped__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("下面我们在 Python3.4 下测试：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[e._v("add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nDecorator "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\nDecorator "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n\nadd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__wrapped__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nDecorator "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("最后要说的是，并不是所有的装饰器都使用了 @wraps ，因此这里的方案并不全部适用。特别的，内置的装饰器 @staticmethod 和 @classmethod 就没有遵循这个约定(它们把原始函数存储在属性 "),n("strong",[e._v("func")]),e._v(" 中)。")]),e._v(" "),n("h3",{attrs:{id:"_9-4-定义一个带参数的装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-定义一个带参数的装饰器"}},[e._v("#")]),e._v(" 9.4 定义一个带参数的装饰器")]),e._v(" "),n("ul",[n("li",[e._v("问题：你想定义一个可以接受参数的装饰器")]),e._v(" "),n("li",[e._v("解决方案：我们用一个例子详细阐述下接受参数的处理过程。假设你想写一个装饰器，给函数添加日志功能，同时允许用户指定日志的级别和其他的选项。下面是这个装饰器的定义和使用示例：")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" logging\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" functools "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" wraps\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("logged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" message"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("decorate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        logname "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__module__\n        log "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" logging"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("getLogger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("logname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        logmsg "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" message "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" message "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__name__\n        "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@wraps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("wrapper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n            log"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("log"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" logmsg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" wrapper\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" decorate\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@logged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("logging"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("DEBUG"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" y\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@logged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("logging"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("INFO"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'example'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("example")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'example'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'__main__'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    example"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br")])]),n("p",[e._v("初看起来，这种实现看上去很复杂，但是核心思想很简单。最外层的函数 logged()接受参数并将它们作用在内部的装饰器函数上面。内层的函数 decorate() 接受一个函数作为参数，然后在函数上面放置一个包装器。这里的关键点是包装器是可以使用传递给 logged() 的参数的。")]),e._v(" "),n("h3",{attrs:{id:"_9-5-可自定义属性的装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-5-可自定义属性的装饰器"}},[e._v("#")]),e._v(" 9.5 可自定义属性的装饰器")]),e._v(" "),n("ul",[n("li",[e._v("问题：你想写一个装饰器来包装一个函数，并且允许用户提供参数在运行时控制装饰器行为。")]),e._v(" "),n("li",[e._v("解决方案：引入一个访问函数，使用 nonlocal 来修改内部变量。然后这个访问函数被作为一个属性赋值给包装函数。")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" logging\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" functools "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" wraps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" partial\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("attach_wrapper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" func "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("is")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" partial"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("attach_wrapper"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("setattr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__name__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" func\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("logged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" message"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("decorate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        logname "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__module__\n        log "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" logging"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("getLogger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("logname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        logmsg "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" message "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" message "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__name__\n        "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@wraps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("wrapper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n            log"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("log"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" logmsg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@attach_wrapper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("wrapper"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("set_level")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("new_level"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("nonlocal")]),e._v(" level\n            level "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" new_level\n        "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@attach_wrapper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("wrapper"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("set_message")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("newmsg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("nonlocal")]),e._v(" logmsg\n            logmsg "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" newmsg\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" wrapper\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" decorate\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@logged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("logging"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("DEBUG"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" y\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@logged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("logging"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("INFO"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'example'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("example")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'example'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'__main__'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    example"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br")])]),n("p",[e._v("讨论：这一小节的关键点在于访问函数 (如 set_message() 和 set_level() )，它们被作为属性赋给包装器。每个访问函数允许使用 nonlocal 来修改函数内部的变量。")]),e._v(" "),n("h3",{attrs:{id:"_9-6-带可选参数的装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-6-带可选参数的装饰器"}},[e._v("#")]),e._v(" 9.6 带可选参数的装饰器")]),e._v(" "),n("ul",[n("li",[e._v("问题：你想写一个装饰器，既可以不传参数给它，比如 @decorator ，也可以传递可选参数给它，比如 @decorator(x,y,z) 。")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" logging\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" functools "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" wraps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" partial\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("logged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" level"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("logging"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("DEBUG"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" message"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" func "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("is")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" partial"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("logged"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" level"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" message"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    logname "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__module__\n    log "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" logging"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("getLogger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("logname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    logmsg "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" message "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" message "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__name__\n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@wraps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("wrapper")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n        log"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("log"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" logmsg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("**")]),e._v("kwargs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" wrapper\n\t\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@logged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" y\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@logged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("logging"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("INFO"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'example'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("example")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'example'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'__main__'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    example"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br")])]),n("p",[e._v("讨论：这里提到的这个问题就是通常所说的编程一致性问题。当我们使用装饰器的时候，大部分程序员习惯了要么不给它们传递任何参数，要么给它们传递确切参数。其实从技术上来讲，我们可以定义一个所有参数都是可选的装饰器，就像下面这样：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@logged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" x"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v("y\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("ul",[n("li",[e._v("但是，这种写法并不符合我们的习惯，有时候程序员忘记加上后面的括号会导致错误。这里我们向你展示了如何以一致的编程风格来同时满足没有括号和有括号两种情况。")]),e._v(" "),n("li",[e._v("为了理解代码是如何工作的，你需要非常熟悉装饰器是如何作用到函数上以及它们的调用规则。对于一个像下面这样的简单装饰器：")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@logged")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" y\n这个调用序列跟下面等价：\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" y\nadd "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" logged"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("这时候，被装饰函数会被当做第一个参数直接传递给 logged 装饰器。因此，logged() 中的第一个参数就是被包装函数本身。所有其他参数都必须有默认值。而对于一个下面这样有参数的装饰器：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@logged")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("logging"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("CRITICAL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'example'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("spam")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Spam!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n调用序列跟下面等价：\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("spam")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Spam!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nspam "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" logged"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("level"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("logging"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("CRITICAL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'example'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("spam"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("初始调用 logged() 函数时，被包装函数并没有传递进来。因此在装饰器内，它必须是可选的。这个反过来会迫使其他参数必须使用关键字来指定。并且，但这些参数被传递进来后，装饰器要返回一个接受一个函数参数并包装它的函数 (参考 9.5 小节)。为了这样做，我们使用了一个技巧，就是利用 functools.partial 。它会返回一个未完全初始化的自身，除了被包装函数外其他参数都已经确定下来了。")]),e._v(" "),n("h3",{attrs:{id:"_9-7-利用装饰器强制函数上的类型检查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-7-利用装饰器强制函数上的类型检查"}},[e._v("#")]),e._v(" 9.7 利用装饰器强制函数上的类型检查")]),e._v(" "),n("p",[e._v("问题\n作为某种编程规约，你想在对函数参数进行强制类型检查。\n解决方案\n在演示实际代码前，先说明我们的目标：能对函数参数类型进行断言，类似下面这\n样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("@typeassert(int, int)\n... def add(x, y):\n... return x + y\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("add(2, 3) 5\nadd(2, 'hello')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFile \"contract.py\", line 33, in wrapper\nTypeError: Argument y must be <class 'int'>")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("下面是使用装饰器技术来实现 @typeassert ：\nfrom inspect import signature\nfrom functools import wraps\ndef typeassert(*ty_args, **ty_kwargs):\ndef decorate(func):")]),e._v(" "),n("h1",{attrs:{id:"if-in-optimized-mode-disable-type-checking"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#if-in-optimized-mode-disable-type-checking"}},[e._v("#")]),e._v(" If in optimized mode, disable type checking")]),e._v(" "),n("p",[e._v("if not "),n("strong",[e._v("debug")]),e._v(":\nreturn func")]),e._v(" "),n("h1",{attrs:{id:"map-function-argument-names-to-supplied-types"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map-function-argument-names-to-supplied-types"}},[e._v("#")]),e._v(" Map function argument names to supplied types")]),e._v(" "),n("p",[e._v("sig = signature(func)\nbound_types = sig.bind_partial(*ty_args, **ty_kwargs).arguments\n@wraps(func)\ndef wrapper(*args, **kwargs):\nbound_values = sig.bind(*args, **kwargs)")]),e._v(" "),n("h1",{attrs:{id:"enforce-type-assertions-across-supplied-arguments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enforce-type-assertions-across-supplied-arguments"}},[e._v("#")]),e._v(" Enforce type assertions across supplied arguments")]),e._v(" "),n("p",[e._v("for name, value in bound_values.arguments.items():\nif name in bound_types:\nif not isinstance(value, bound_types[name]):\nraise TypeError( 'Argument {} must be {}'.format(name, bound_\n,\n→types[name])\n)\nreturn func(*args, **kwargs)\nreturn wrapper\nreturn decorate\n可以看出这个装饰器非常灵活，既可以指定所有参数类型，也可以只指定部分。并\n且可以通过位置或关键字来指定参数类型。下面是使用示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("@typeassert(int, z=int)\n... def spam(x, y, z=42):\n... print(x, y, z)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam(1, 2, 3)\n1 2 3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam(1, 'hello', 3)\n1 hello 3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam(1, 'hello', 'world')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFile \"contract.py\", line 33, in wrapper\nTypeError: Argument z must be <class 'int'>")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n这节是高级装饰器示例，引入了很多重要的概念。\n首先，装饰器只会在函数定义时被调用一次。有时候你去掉装饰器的功能，那么你\n只需要简单的返回被装饰函数即可。下面的代码中，如果全局变量　 "),n("strong",[e._v("debug")]),e._v(" 被设\n置成了 False(当你使用-O 或-OO 参数的优化模式执行程序时)，那么就直接返回未修改\n过的函数本身：\ndef decorate(func):")]),e._v(" "),n("h1",{attrs:{id:"if-in-optimized-mode-disable-type-checking-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#if-in-optimized-mode-disable-type-checking-2"}},[e._v("#")]),e._v(" If in optimized mode, disable type checking")]),e._v(" "),n("p",[e._v("if not "),n("strong",[e._v("debug")]),e._v(":\nreturn func\n其次，这里还对被包装函数的参数签名进行了检查，我们使用了 inspect.\nsignature() 函数。简单来讲，它运行你提取一个可调用对象的参数签名信息。例\n如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from inspect import signature\ndef spam(x, y, z=42):\n... pass\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sig = signature(spam)\nprint(sig)\n(x, y, z=42)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sig.parameters\nmappingproxy(OrderedDict([('x', <Parameter at 0x10077a050 'x'>),\n('y', <Parameter at 0x10077a158 'y'>), ('z', <Parameter at 0x10077a1b0 'z'>\n,\n→)]))")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sig.parameters['z'].name\n'z'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sig.parameters['z'].default\n42")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sig.parameters['z'].kind\n<_ParameterKind: 'POSITIONAL_OR_KEYWORD'>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("装饰器的开始部分，我们使用了 bind_partial() 方法来执行从指定类型到名称的\n部分绑定。下面是例子演示：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("bound_types = sig.bind_partial(int,z=int)\nbound_types\n<inspect.BoundArguments object at 0x10069bb50>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("bound_types.arguments\nOrderedDict([('x', <class 'int'>), ('z', <class 'int'>)])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在这个部分绑定中，你可以注意到缺失的参数被忽略了 (比如并没有对 y 进行绑\n定)。不过最重要的是创建了一个有序字典 bound_types.arguments 。这个字典会将参\n数名以函数签名中相同顺序映射到指定的类型值上面去。在我们的装饰器例子中，这个\n映射包含了我们要强制指定的类型断言。\n在 装 饰 器 创 建 的 实 际 包 装 函 数 中 使 用 到 了 sig.bind() 方 法。bind() 跟\nbind_partial() 类似，但是它不允许忽略任何参数。因此有了下面的结果：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("bound_values = sig.bind(1, 2, 3)\nbound_values.arguments\nOrderedDict([('x', 1), ('y', 2), ('z', 3)])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("使用这个映射我们可以很轻松的实现我们的强制类型检查：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for name, value in bound_values.arguments.items():\n... if name in bound_types.arguments:\n... if not isinstance(value, bound_types.arguments[name]):\n... raise TypeError()\n...")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("不过这个方案还有点小瑕疵，它对于有默认值的参数并不适用。比如下面的代码可\n以正常工作，尽管 items 的类型是错误的：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("@typeassert(int, list)\n... def bar(x, items=None):\n... if items is None:\n... items = []\n... items.append(x)\n... return items")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("bar(2)\n[2]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('bar(2,3)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFile \"contract.py\", line 33, in wrapper\nTypeError: Argument items must be <class 'list'>")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("bar(4, [1, 2, 3])\n[1, 2, 3, 4]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后一点是关于适用装饰器参数和函数注解之间的争论。例如，为什么不像下面这\n样写一个装饰器来查找函数中的注解呢？\n@typeassert\ndef spam(x:int, y, z:int = 42):\nprint(x,y,z)\n一个可能的原因是如果使用了函数参数注解，那么就被限制了。如果注解被用来做\n类型检查就不能做其他事情了。而且 @typeassert 不能再用于使用注解做其他事情的\n函数了。而使用上面的装饰器参数灵活性大多了，也更加通用。\n可以在 PEP 362 以及 inspect 模块中找到更多关于函数参数对象的信息。在 9.16\n小节还有另外一个例子。\n9.8 将装饰器定义为类的一部分\n问题\n你想在类中定义装饰器，并将其作用在其他函数或方法上。\n解决方案\n在类里面定义装饰器很简单，但是你首先要确认它的使用方式。比如到底是作为一\n个实例方法还是类方法。下面我们用例子来阐述它们的不同：\nfrom functools import wraps\nclass A:")]),e._v(" "),n("h1",{attrs:{id:"decorator-as-an-instance-method"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decorator-as-an-instance-method"}},[e._v("#")]),e._v(" Decorator as an instance method")]),e._v(" "),n("p",[e._v("def decorator1(self, func):\n@wraps(func)\ndef wrapper(*args, **kwargs):\nprint('Decorator 1')\nreturn func(*args, **kwargs)\nreturn wrapper")]),e._v(" "),n("h1",{attrs:{id:"decorator-as-a-class-method"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decorator-as-a-class-method"}},[e._v("#")]),e._v(" Decorator as a class method")]),e._v(" "),n("p",[e._v("@classmethod\ndef decorator2(cls, func):\n@wraps(func)\ndef wrapper(*args, **kwargs):\nprint('Decorator 2')\nreturn func(*args, **kwargs)\nreturn wrapper\n下面是一使用例子：")]),e._v(" "),n("h1",{attrs:{id:"as-an-instance-method"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#as-an-instance-method"}},[e._v("#")]),e._v(" As an instance method")]),e._v(" "),n("p",[e._v("a = A()\n@a.decorator1\ndef spam():\npass")]),e._v(" "),n("h1",{attrs:{id:"as-a-class-method"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#as-a-class-method"}},[e._v("#")]),e._v(" As a class method")]),e._v(" "),n("p",[e._v("@A.decorator2\ndef grok():\npass\n仔细观察可以发现一个是实例调用，一个是类调用。\n讨论\n在类中定义装饰器初看上去好像很奇怪，但是在标准库中有很多这样的例子。特别\n的，@property 装饰器实际上是一个类，它里面定义了三个方法 getter(), setter(),\ndeleter() , 每一个方法都是一个装饰器。例如：\nclass Person:")]),e._v(" "),n("h1",{attrs:{id:"create-a-property-instance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-property-instance"}},[e._v("#")]),e._v(" Create a property instance")]),e._v(" "),n("p",[e._v("first_name = property()")]),e._v(" "),n("h1",{attrs:{id:"apply-decorator-methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#apply-decorator-methods"}},[e._v("#")]),e._v(" Apply decorator methods")]),e._v(" "),n("p",[e._v("@first_name.getter\ndef first_name(self):\nreturn self._first_name\n@first_name.setter\ndef first_name(self, value):\nif not isinstance(value, str):\nraise TypeError('Expected a string')\nself._first_name = value\n它为什么要这么定义的主要原因是各种不同的装饰器方法会在关联的 property 实\n例上操作它的状态。因此，任何时候只要你碰到需要在装饰器中记录或绑定信息，那么\n这不失为一种可行方法。\n在类中定义装饰器有个难理解的地方就是对于额外参数 self 或 cls 的正确使用。\n尽管最外层的装饰器函数比如 decorator1() 或 decorator2() 需要提供一个 self 或\ncls 参数，但是在两个装饰器内部被创建的 wrapper() 函数并不需要包含这个 self 参\n数。你唯一需要这个参数是在你确实要访问包装器中这个实例的某些部分的时候。其他\n情况下都不用去管它。\n对于类里面定义的包装器还有一点比较难理解，就是在涉及到继承的时候。例如，\n假设你想让在 A 中定义的装饰器作用在子类 B 中。你需要像下面这样写：\nclass B(A):\n@A.decorator2\ndef bar(self):\npass\n也就是说，装饰器要被定义成类方法并且你必须显式的使用父类名去调用它。你不\n能使用 @B.decorator2 ，因为在方法定义时，这个类 B 还没有被创建。\n9.9 将装饰器定义为类\n问题\n你想使用一个装饰器去包装函数，但是希望返回一个可调用的实例。你需要让你的\n装饰器可以同时工作在类定义的内部和外部。\n解决方案\n为了将装饰器定义成一个实例，你需要确保它实现了 "),n("strong",[e._v("call")]),e._v("() 和 "),n("strong",[e._v("get")]),e._v("() 方\n法。例如，下面的代码定义了一个类，它在其他函数上放置一个简单的记录层：\nimport types\nfrom functools import wraps\nclass Profiled:\ndef "),n("strong",[e._v("init")]),e._v("(self, func):\nwraps(func)(self)\nself.ncalls = 0\ndef "),n("strong",[e._v("call")]),e._v("(self, *args, **kwargs):\nself.ncalls += 1\nreturn self."),n("strong",[e._v("wrapped")]),e._v("(*args, **kwargs)\ndef "),n("strong",[e._v("get")]),e._v("(self, instance, cls):\nif instance is None:\nreturn self\nelse:\nreturn types.MethodType(self, instance)\n你可以将它当做一个普通的装饰器来使用，在类里面或外面都可以：\n@Profiled\ndef add(x, y):\nreturn x + y\nclass Spam:\n@Profiled\ndef bar(self, x):\nprint(self, x)\n在交互环境中的使用示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("add(2, 3) 5\nadd(4, 5) 9\nadd.ncalls\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s = Spam()\ns.bar(1)\n<"),n("strong",[e._v("main")]),e._v(".Spam object at 0x10069e9d0> 1")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.bar(2)\n<"),n("strong",[e._v("main")]),e._v(".Spam object at 0x10069e9d0> 2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.bar(3)\n<"),n("strong",[e._v("main")]),e._v(".Spam object at 0x10069e9d0> 3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("Spam.bar.ncalls\n3\n讨论\n将装饰器定义成类通常是很简单的。但是这里还是有一些细节需要解释下，特别是\n当你想将它作用在实例方法上的时候。\n首先，使用 functools.wraps() 函数的作用跟之前还是一样，将被包装函数的元\n信息复制到可调用实例中去。\n其次，通常很容易会忽视上面的 "),n("strong",[e._v("get")]),e._v("() 方法。如果你忽略它，保持其他代码\n不变再次运行，你会发现当你去调用被装饰实例方法时出现很奇怪的问题。例如：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s = Spam()\ns.bar(3)\nTraceback (most recent call last):\n...\nTypeError: bar() missing 1 required positional argument: 'x'\n出错原因是当方法函数在一个类中被查找时，它们的 "),n("strong",[e._v("get")]),e._v("() 方法依据描述器\n协议被调用，在 8.9 小节已经讲述过描述器协议了。在这里，"),n("strong",[e._v("get")]),e._v("() 的目的是创建\n一个绑定方法对象 (最终会给这个方法传递 self 参数)。下面是一个例子来演示底层原\n理：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s = Spam()\ndef grok(self, x):\n... pass\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("grok."),n("strong",[e._v("get")]),e._v("(s, Spam)\n<bound method Spam.grok of <"),n("strong",[e._v("main")]),e._v(".Spam object at 0x100671e90>>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[n("strong",[e._v("get")]),e._v("() 方法是为了确保绑定方法对象能被正确的创建。type.MethodType() 手\n动创建一个绑定方法来使用。只有当实例被使用的时候绑定方法才会被创建。如果这个\n方法是在类上面来访问，那么 "),n("strong",[e._v("get")]),e._v("() 中的 instance 参数会被设置成 None 并直接\n返回 Profiled 实例本身。这样的话我们就可以提取它的 ncalls 属性了。\n如果你想避免一些混乱，也可以考虑另外一个使用闭包和 nonlocal 变量实现的装\n饰器，这个在 9.5 小节有讲到。例如：\nimport types\nfrom functools import wraps\ndef profiled(func):\nncalls = 0\n@wraps(func)\ndef wrapper(*args, **kwargs):\nnonlocal ncalls\nncalls += 1\nreturn func(*args, **kwargs)\nwrapper.ncalls = lambda: ncalls\nreturn wrapper")]),e._v(" "),n("h1",{attrs:{id:"example-9"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-9"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("@profiled\ndef add(x, y):\nreturn x + y\n这个方式跟之前的效果几乎一样，除了对于 ncalls 的访问现在是通过一个被绑定\n为属性的函数来实现，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("add(2, 3) 5\nadd(4, 5) 9\nadd.ncalls()\n2")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("9.10 为类和静态方法提供装饰器\n问题\n你想给类或静态方法提供装饰器。\n解决方案\n给类或静态方法提供装饰器是很简单的，不过要确保装饰器在 @classmethod 或\n@staticmethod 之前。例如：\nimport time\nfrom functools import wraps")]),e._v(" "),n("h1",{attrs:{id:"a-simple-decorator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-simple-decorator"}},[e._v("#")]),e._v(" A simple decorator")]),e._v(" "),n("p",[e._v("def timethis(func):\n@wraps(func)\ndef wrapper(*args, **kwargs):\nstart = time.time()\nr = func(*args, **kwargs)\nend = time.time()\nprint(end-start)\nreturn r\nreturn wrapper")]),e._v(" "),n("h1",{attrs:{id:"class-illustrating-application-of-the-decorator-to-different-kinds-of␣-→methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-illustrating-application-of-the-decorator-to-different-kinds-of␣-→methods"}},[e._v("#")]),e._v(" Class illustrating application of the decorator to different kinds of␣ , →methods")]),e._v(" "),n("p",[e._v("class Spam:\n@timethis\ndef instance_method(self, n):\nprint(self, n)\nwhile n > 0:\nn -= 1\n@classmethod\n@timethis\ndef class_method(cls, n):\nprint(cls, n)\nwhile n > 0: n -= 1\n@staticmethod\n@timethis\ndef static_method(n):\nprint(n)\nwhile n > 0: n -= 1\n装饰后的类和静态方法可正常工作，只不过增加了额外的计时功能：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = Spam()\ns.instance_method(1000000)\n<"),n("strong",[e._v("main")]),e._v(".Spam object at 0x1006a6050> 1000000\n0.11817407608032227")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("Spam.class_method(1000000)\n<class '"),n("strong",[e._v("main")]),e._v(".Spam'> 1000000\n0.11334395408630371")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("Spam.static_method(1000000)\n1000000\n0.11740279197692871")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n如果你把装饰器的顺序写错了就会出错。例如，假设你像下面这样写：\nclass Spam:\n@timethis\n@staticmethod\ndef static_method(n):\nprint(n)\nwhile n > 0: n -= 1\n那么你调用这个静态方法时就会报错：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('Spam.static_method(1000000)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFile \"timethis.py\", line 6, in wrapper\nstart = time.time()\nTypeError: 'staticmethod' object is not callable")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("问题在于 @classmethod 和 @staticmethod 实际上并不会创建可直接调用的对象，\n而是创建特殊的描述器对象 (参考 8.9 小节)。因此当你试着在其他装饰器中将它们当做\n函数来使用时就会出错。确保这种装饰器出现在装饰器链中的第一个位置可以修复这\n个问题。\n当我们在抽象基类中定义类方法和静态方法 (参考 8.12 小节) 时，这里讲到的知识\n就很有用了。例如，如果你想定义一个抽象类方法，可以使用类似下面的代码：\nfrom abc import ABCMeta, abstractmethod\nclass A(metaclass=ABCMeta):\n@classmethod\n@abstractmethod\ndef method(cls):\npass\n在这段代码中，@classmethod 跟 @abstractmethod 两者的顺序是有讲究的，如果\n你调换它们的顺序就会出错。\n9.11 装饰器为被包装函数增加参数\n问题\n你想在装饰器中给被包装函数增加额外的参数，但是不能影响这个函数现有的调\n用规则。\n解决方案\n可以使用关键字参数来给被包装函数增加额外参数。考虑下面的装饰器：\nfrom functools import wraps\ndef optional_debug(func):\n@wraps(func)\ndef wrapper(*args, debug=False, **kwargs):\nif debug:\nprint('Calling', func."),n("strong",[e._v("name")]),e._v(")\nreturn func(*args, **kwargs)\nreturn wrapper")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("@optional_debug\n... def spam(a,b,c):\n... print(a,b,c)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam(1,2,3)\n1 2 3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam(1,2,3, debug=True)\nCalling spam\n1 2 3")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n通过装饰器来给被包装函数增加参数的做法并不常见。尽管如此，有时候它可以避\n免一些重复代码。例如，如果你有下面这样的代码：\ndef a(x, debug=False):\nif debug:\nprint('Calling a')\ndef b(x, y, z, debug=False):\nif debug:\nprint('Calling b')\ndef c(x, y, debug=False):\nif debug:\nprint('Calling c')\n那么你可以将其重构成这样：\nfrom functools import wraps\nimport inspect\ndef optional_debug(func):\nif 'debug' in inspect.getargspec(func).args:\nraise TypeError('debug argument already defined')\n@wraps(func)\ndef wrapper(*args, debug=False, **kwargs):\nif debug:\nprint('Calling', func."),n("strong",[e._v("name")]),e._v(")\nreturn func(*args, **kwargs)\nreturn wrapper\n@optional_debug\ndef a(x):\npass\n@optional_debug\ndef b(x, y, z):\npass\n@optional_debug\ndef c(x, y):\npass\n这种实现方案之所以行得通，在于强制关键字参数很容易被添加到接受 *args 和\n**kwargs 参数的函数中。通过使用强制关键字参数，它被作为一个特殊情况被挑选出\n来，并且接下来仅仅使用剩余的位置和关键字参数去调用这个函数时，这个特殊参数会\n被排除在外。也就是说，它并不会被纳入到 **kwargs 中去。\n还有一个难点就是如何去处理被添加的参数与被包装函数参数直接的名字冲突。例\n如，如果装饰器 @optional_debug 作用在一个已经拥有一个 debug 参数的函数上时会\n有问题。这里我们增加了一步名字检查。\n上面的方案还可以更完美一点，因为精明的程序员应该发现了被包装函数的函数\n签名其实是错误的。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("@optional_debug\n... def add(x,y):\n... return x+y\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import inspect\nprint(inspect.signature(add))\n(x, y)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("通过如下的修改，可以解决这个问题：\nfrom functools import wraps\nimport inspect\ndef optional_debug(func):\nif 'debug' in inspect.getargspec(func).args:\nraise TypeError('debug argument already defined')\n@wraps(func)\ndef wrapper(*args, debug=False, **kwargs):\nif debug:\nprint('Calling', func."),n("strong",[e._v("name")]),e._v(")\nreturn func(*args, **kwargs)\nsig = inspect.signature(func)\nparms = list(sig.parameters.values())\nparms.append(inspect.Parameter('debug',\ninspect.Parameter.KEYWORD_ONLY,\ndefault=False))\nwrapper."),n("strong",[e._v("signature")]),e._v(" = sig.replace(parameters=parms)\nreturn wrapper\n通过这样的修改，包装后的函数签名就能正确的显示 debug 参数的存在了。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("@optional_debug\n... def add(x,y):\n... return x+y\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(inspect.signature(add))\n(x, y, *, debug=False)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("add(2,3) 5")])])])]),e._v(" "),n("p",[e._v("参考 9.16 小节获取更多关于函数签名的信息。\n9.12 使用装饰器扩充类的功能\n问题\n你想通过反省或者重写类定义的某部分来修改它的行为，但是你又不希望使用继\n承或元类的方式。\n解决方案\n这种情况可能是类装饰器最好的使用场景了。例如，下面是一个重写了特殊方法\n"),n("strong",[e._v("getattribute")]),e._v(" 的类装饰器，可以打印日志：\ndef log_getattribute(cls):")]),e._v(" "),n("h1",{attrs:{id:"get-the-original-implementation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-the-original-implementation"}},[e._v("#")]),e._v(" Get the original implementation")]),e._v(" "),n("p",[e._v("orig_getattribute = cls."),n("strong",[e._v("getattribute")])]),e._v(" "),n("h1",{attrs:{id:"make-a-new-definition"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-new-definition"}},[e._v("#")]),e._v(" Make a new definition")]),e._v(" "),n("p",[e._v("def new_getattribute(self, name):\nprint('getting:', name)\nreturn orig_getattribute(self, name)")]),e._v(" "),n("h1",{attrs:{id:"attach-to-the-class-and-return"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attach-to-the-class-and-return"}},[e._v("#")]),e._v(" Attach to the class and return")]),e._v(" "),n("p",[e._v("cls."),n("strong",[e._v("getattribute")]),e._v(" = new_getattribute\nreturn cls")]),e._v(" "),n("h1",{attrs:{id:"example-use-8"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-8"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("@log_getattribute\nclass A:\ndef "),n("strong",[e._v("init")]),e._v("(self,x):\nself.x = x\ndef spam(self):\npass\n下面是使用效果：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = A(42)\na.x\ngetting: x\n42")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a.spam()\ngetting: spam")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n类装饰器通常可以作为其他高级技术比如混入或元类的一种非常简洁的替代方案。\n比如，上面示例中的另外一种实现使用到继承：\nclass LoggedGetattribute:\ndef "),n("strong",[e._v("getattribute")]),e._v("(self, name):\nprint('getting:', name)\nreturn super()."),n("strong",[e._v("getattribute")]),e._v("(name)")]),e._v(" "),n("h1",{attrs:{id:"example-10"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-10"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),n("p",[e._v("class A(LoggedGetattribute):\ndef "),n("strong",[e._v("init")]),e._v("(self,x):\nself.x = x\ndef spam(self):\npass\n这种方案也行得通，但是为了去理解它，你就必须知道方法调用顺序、super() 以\n及其它 8.7 小节介绍的继承知识。某种程度上来讲，类装饰器方案就显得更加直观，并\n且它不会引入新的继承体系。它的运行速度也更快一些，因为他并不依赖 super() 函\n数。\n如果你系想在一个类上面使用多个类装饰器，那么就需要注意下顺序问题。例如，\n一个装饰器 A 会将其装饰的方法完整替换成另一种实现，而另一个装饰器 B 只是简单\n的在其装饰的方法中添加点额外逻辑。那么这时候装饰器 A 就需要放在装饰器 B 的前\n面。\n你还可以回顾一下 8.13 小节另外一个关于类装饰器的有用的例子。\n9.13 使用元类控制实例的创建\n问题\n你想通过改变实例创建方式来实现单例、缓存或其他类似的特性。\n解决方案\nPython 程序员都知道，如果你定义了一个类，就能像函数一样的调用它来创建实\n例，例如：\nclass Spam:\ndef "),n("strong",[e._v("init")]),e._v("(self, name):\nself.name = name\na = Spam('Guido') b = Spam('Diana')\n如果你想自定义这个步骤，你可以定义一个元类并自己实现 "),n("strong",[e._v("call")]),e._v("() 方法。\n为了演示，假设你不想任何人创建这个类的实例：\nclass NoInstances(type):\ndef "),n("strong",[e._v("call")]),e._v('(self, *args, **kwargs):\nraise TypeError("Can\'t instantiate directly")')]),e._v(" "),n("h1",{attrs:{id:"example-11"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-11"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("class Spam(metaclass=NoInstances):\n@staticmethod\ndef grok(x):\nprint('Spam.grok')\n这样的话，用户只能调用这个类的静态方法，而不能使用通常的方法来创建它的实\n例。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("Spam.grok(42)\nSpam.grok")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('s = Spam()\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "example1.py", line 7, in '),n("strong",[e._v("call")]),e._v("\nraise TypeError(\"Can't instantiate directly\")\nTypeError: Can't instantiate directly")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("现在，假如你想实现单例模式（只能创建唯一实例的类），实现起来也很简单：\nclass Singleton(type):\ndef "),n("strong",[e._v("init")]),e._v("(self, *args, **kwargs):\nself.__instance = None\nsuper()."),n("strong",[e._v("init")]),e._v("(*args, **kwargs)\ndef "),n("strong",[e._v("call")]),e._v("(self, *args, **kwargs):\nif self.__instance is None:\nself.__instance = super()."),n("strong",[e._v("call")]),e._v("(*args, **kwargs)\nreturn self.__instance\nelse:\nreturn self.__instance")]),e._v(" "),n("h1",{attrs:{id:"example-12"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-12"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("class Spam(metaclass=Singleton):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nprint('Creating Spam')\n那么 Spam 类就只能创建唯一的实例了，演示如下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = Spam()\nCreating Spam")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = Spam()\na is b\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c = Spam()\na is c\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后，假设你想创建 8.25 小节中那样的缓存实例。下面我们可以通过元类来实现：\nimport weakref\nclass Cached(type):\ndef "),n("strong",[e._v("init")]),e._v("(self, *args, **kwargs):\nsuper()."),n("strong",[e._v("init")]),e._v("(*args, **kwargs)\nself.__cache = weakref.WeakValueDictionary()\ndef "),n("strong",[e._v("call")]),e._v("(self, *args):\nif args in self.__cache:\nreturn self.__cache[args]\nelse:\nobj = super()."),n("strong",[e._v("call")]),e._v("(*args)\nself.__cache[args] = obj\nreturn obj")]),e._v(" "),n("h1",{attrs:{id:"example-13"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-13"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("class Spam(metaclass=Cached):\ndef "),n("strong",[e._v("init")]),e._v("(self, name):\nprint('Creating Spam({!r})'.format(name))\nself.name = name\n然后我也来测试一下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = Spam('Guido')\nCreating Spam('Guido')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = Spam('Diana')\nCreating Spam('Diana')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c = Spam('Guido') # Cached\na is b\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a is c # Cached value returned\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n利用元类实现多种实例创建模式通常要比不使用元类的方式优雅得多。\n假设你不使用元类，你可能需要将类隐藏在某些工厂函数后面。比如为了实现一个\n单例，你你可能会像下面这样写：\nclass _Spam:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nprint('Creating Spam')\n_spam_instance = None\ndef Spam():\nglobal _spam_instance\nif _spam_instance is not None:\nreturn _spam_instance\nelse:\n_spam_instance = _Spam()\nreturn _spam_instance\n尽管使用元类可能会涉及到比较高级点的技术，但是它的代码看起来会更加简洁\n舒服，而且也更加直观。\n更多关于创建缓存实例、弱引用等内容，请参考 8.25 小节。\n9.14 捕获类的属性定义顺序\n问题\n你想自动记录一个类中属性和方法定义的顺序，然后可以利用它来做很多操作（比\n如序列化、映射到数据库等等）。\n解决方案\n利用元类可以很容易的捕获类的定义信息。下面是一个例子，使用了一个 Ordered￾Dict 来记录描述器的定义顺序：\nfrom collections import OrderedDict")]),e._v(" "),n("h1",{attrs:{id:"a-set-of-descriptors-for-various-types"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-set-of-descriptors-for-various-types"}},[e._v("#")]),e._v(" A set of descriptors for various types")]),e._v(" "),n("p",[e._v("class Typed:\n_expected_type = type(None)\ndef "),n("strong",[e._v("init")]),e._v("(self, name=None):\nself._name = name\ndef "),n("strong",[e._v("set")]),e._v("(self, instance, value):\nif not isinstance(value, self._expected_type):\nraise TypeError('Expected ' + str(self._expected_type))\ninstance."),n("strong",[e._v("dict")]),e._v("[self._name] = value\nclass Integer(Typed):\n_expected_type = int\nclass Float(Typed):\n_expected_type = float\nclass String(Typed):\n_expected_type = str")]),e._v(" "),n("h1",{attrs:{id:"metaclass-that-uses-an-ordereddict-for-class-body"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#metaclass-that-uses-an-ordereddict-for-class-body"}},[e._v("#")]),e._v(" Metaclass that uses an OrderedDict for class body")]),e._v(" "),n("p",[e._v("class OrderedMeta(type):\ndef "),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, clsdict):\nd = dict(clsdict)\norder = []\nfor name, value in clsdict.items():\nif isinstance(value, Typed):\nvalue._name = name\norder.append(name)\nd['_order'] = order\nreturn type."),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, d)\n@classmethod\ndef "),n("strong",[e._v("prepare")]),e._v("(cls, clsname, bases):\nreturn OrderedDict()\n在这个元类中，执行类主体时描述器的定义顺序会被一个 OrderedDict"),n("code",[e._v("捕获到， 生成的有序名称从字典中提取出来并放入类属性")]),e._v("_order 中。这样的话类中的方法可以通\n过多种方式来使用它。例如，下面是一个简单的类，使用这个排序字典来实现将一个类\n实例的数据序列化为一行 CSV 数据：\nclass Structure(metaclass=OrderedMeta):\ndef as_csv(self):\nreturn ','.join(str(getattr(self,name)) for name in self._order)")]),e._v(" "),n("h1",{attrs:{id:"example-use-9"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-9"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("class Stock(Structure):\nname = String()\nshares = Integer()\nprice = Float()\ndef "),n("strong",[e._v("init")]),e._v("(self, name, shares, price):\nself.name = name\nself.shares = shares\nself.price = price\n我们在交互式环境中测试一下这个 Stock 类：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = Stock('GOOG',100,490.1)\ns.name\n'GOOG'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.as_csv()\n'GOOG,100,490.1'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("t = Stock('AAPL','a lot', 610.23)\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "dupmethod.py", line 34, in '),n("strong",[e._v("init")]),e._v("\nTypeError: shares expects <class 'int'>")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n本节一个关键点就是 OrderedMeta 元类中定义的 ‘‘ "),n("strong",[e._v("prepare")]),e._v("()‘‘ 方法。这个\n方法会在开始定义类和它的父类的时候被执行。它必须返回一个映射对象以便在类定\n义体中被使用到。我们这里通过返回了一个 OrderedDict 而不是一个普通的字典，可以\n很容易的捕获定义的顺序。\n如果你想构造自己的类字典对象，可以很容易的扩展这个功能。比如，下面的这个\n修改方案可以防止重复的定义：\nfrom collections import OrderedDict\nclass NoDupOrderedDict(OrderedDict):\ndef "),n("strong",[e._v("init")]),e._v("(self, clsname):\nself.clsname = clsname\nsuper()."),n("strong",[e._v("init")]),e._v("()\ndef "),n("strong",[e._v("setitem")]),e._v("(self, name, value):\nif name in self:\nraise TypeError('{} already defined in {}'.format(name, self. , →clsname))\nsuper()."),n("strong",[e._v("setitem")]),e._v("(name, value)\nclass OrderedMeta(type):\ndef "),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, clsdict):\nd = dict(clsdict)\nd['"),n("em",[e._v("order'] = [name for name in clsdict if name[0] != '")]),e._v("']\nreturn type."),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, d)\n@classmethod\ndef "),n("strong",[e._v("prepare")]),e._v("(cls, clsname, bases):\nreturn NoDupOrderedDict(clsname)\n下面我们测试重复的定义会出现什么情况：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('class A(metaclass=OrderedMeta):\n... def spam(self):\n... pass\n... def spam(self):\n... pass\n...\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "'),n("stdin",[e._v('", line 4, in A\nFile "dupmethod2.py", line 25, in '),n("strong",[e._v("setitem")]),e._v("\n(name, self.clsname))\nTypeError: spam already defined in A")])],1)],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后还有一点很重要，就是在 "),n("strong",[e._v("new")]),e._v("() 方法中对于元类中被修改字典的处理。尽\n管类使用了另外一个字典来定义，在构造最终的 class 对象的时候，我们仍然需要将\n这个字典转换为一个正确的 dict 实例。通过语句 d = dict(clsdict) 来完成这个效\n果。\n对于很多应用程序而已，能够捕获类定义的顺序是一个看似不起眼却又非常重要\n的特性。例如，在对象关系映射中，我们通常会看到下面这种方式定义的类：\nclass Stock(Model):\nname = String()\nshares = Integer()\nprice = Float()\n在框架底层，我们必须捕获定义的顺序来将对象映射到元组或数据库表中的行（就\n类似于上面例子中的 as_csv() 的功能）。这节演示的技术非常简单，并且通常会比其\n他类似方法（通常都要在描述器类中维护一个隐藏的计数器）要简单的多。\n9.15 定义有可选参数的元类\n问题\n你想定义一个元类，允许类定义时提供可选参数，这样可以控制或配置类型的创建\n过程。\n解决方案\n在定义类的时候，Python 允许我们使用‘‘metaclass‘‘关键字参数来指定特定的元类。\n例如使用抽象基类：\nfrom abc import ABCMeta, abstractmethod\nclass IStream(metaclass=ABCMeta):\n@abstractmethod\ndef read(self, maxsize=None):\npass\n@abstractmethod\ndef write(self, data):\npass\n然而，在自定义元类中我们还可以提供其他的关键字参数，如下所示：\nclass Spam(metaclass=MyMeta, debug=True, synchronize=True):\npass\n为了使元类支持这些关键字参数，你必须确保在 "),n("strong",[e._v("prepare")]),e._v("() , "),n("strong",[e._v("new")]),e._v("() 和\n"),n("strong",[e._v("init")]),e._v("() 方法中都使用强制关键字参数。就像下面这样：\nclass MyMeta(type):")]),e._v(" "),n("h1",{attrs:{id:"optional"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#optional"}},[e._v("#")]),e._v(" Optional")]),e._v(" "),n("p",[e._v("@classmethod\ndef "),n("strong",[e._v("prepare")]),e._v("(cls, name, bases, *, debug=False, synchronize=False):")]),e._v(" "),n("h1",{attrs:{id:"custom-processing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#custom-processing"}},[e._v("#")]),e._v(" Custom processing")]),e._v(" "),n("p",[e._v("pass\nreturn super()."),n("strong",[e._v("prepare")]),e._v("(name, bases)")]),e._v(" "),n("h1",{attrs:{id:"required"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#required"}},[e._v("#")]),e._v(" Required")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("new")]),e._v("(cls, name, bases, ns, *, debug=False, synchronize=False):")]),e._v(" "),n("h1",{attrs:{id:"custom-processing-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#custom-processing-2"}},[e._v("#")]),e._v(" Custom processing")]),e._v(" "),n("p",[e._v("pass\nreturn super()."),n("strong",[e._v("new")]),e._v("(cls, name, bases, ns)")]),e._v(" "),n("h1",{attrs:{id:"required-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#required-2"}},[e._v("#")]),e._v(" Required")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("init")]),e._v("(self, name, bases, ns, *, debug=False, synchronize=False):")]),e._v(" "),n("h1",{attrs:{id:"custom-processing-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#custom-processing-3"}},[e._v("#")]),e._v(" Custom processing")]),e._v(" "),n("p",[e._v("pass\nsuper()."),n("strong",[e._v("init")]),e._v("(name, bases, ns)\n讨论\n给一个元类添加可选关键字参数需要你完全弄懂类创建的所有步骤，因为这些参\n数会被传递给每一个相关的方法。"),n("strong",[e._v("prepare")]),e._v("() 方法在所有类定义开始执行前首先\n被调用，用来创建类命名空间。通常来讲，这个方法只是简单的返回一个字典或其他映\n射对象。"),n("strong",[e._v("new")]),e._v("() 方法被用来实例化最终的类对象。它在类的主体被执行完后开始执\n行。"),n("strong",[e._v("init")]),e._v("() 方法最后被调用，用来执行其他的一些初始化工作。\n当我们构造元类的时候，通常只需要定义一个 "),n("strong",[e._v("new")]),e._v("() 或 "),n("strong",[e._v("init")]),e._v("() 方法，但\n不是两个都定义。但是，如果需要接受其他的关键字参数的话，这两个方法就要同时提\n供，并且都要提供对应的参数签名。默认的 "),n("strong",[e._v("prepare")]),e._v("() 方法接受任意的关键字参\n数，但是会忽略它们，所以只有当这些额外的参数可能会影响到类命名空间的创建时你\n才需要去定义 "),n("strong",[e._v("prepare")]),e._v("() 方法。\n通过使用强制关键字参数，在类的创建过程中我们必须通过关键字来指定这些参\n数。\n使用关键字参数配置一个元类还可以视作对类变量的一种替代方式。例如：\nclass Spam(metaclass=MyMeta):\ndebug = True\nsynchronize = True\npass\n将这些属性定义为参数的好处在于它们不会污染类的名称空间，这些属性仅仅只\n从属于类的创建阶段，而不是类中的语句执行阶段。另外，它们在 "),n("strong",[e._v("prepare")]),e._v("() 方\n法中是可以被访问的，因为这个方法会在所有类主体执行前被执行。但是类变量只能在\n元类的 "),n("strong",[e._v("new")]),e._v("() 和 "),n("strong",[e._v("init")]),e._v("() 方法中可见。\n9.16 *args 和 **kwargs 的强制参数签名\n问题\n你有一个函数或方法，它使用 *args 和 **kwargs 作为参数，这样使得它比较通用，\n但有时候你想检查传递进来的参数是不是某个你想要的类型。\n解决方案\n对任何涉及到操作函数调用签名的问题，你都应该使用 inspect 模块中的签名特\n性。我们最主要关注两个类：Signature 和 Parameter 。下面是一个创建函数前面的交\n互例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from inspect import Signature, Parameter")]),e._v(" "),n("h1",{attrs:{id:"make-a-signature-for-a-func-x-y-42-z-none"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-signature-for-a-func-x-y-42-z-none"}},[e._v("#")]),e._v(" Make a signature for a func(x, y=42, *, z=None)")]),e._v(" "),n("p",[e._v("parms = [ Parameter('x', Parameter.POSITIONAL_OR_KEYWORD),\n... Parameter('y', Parameter.POSITIONAL_OR_KEYWORD, default=42),\n... Parameter('z', Parameter.KEYWORD_ONLY, default=None) ]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sig = Signature(parms)\nprint(sig)\n(x, y=42, *, z=None)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一旦你有了一个签名对象，你就可以使用它的 bind() 方法很容易的将它绑定到\n*args 和 **kwargs 上去。下面是一个简单的演示：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def func(*args, **kwargs):\n... bound_values = sig.bind(*args, **kwargs)\n... for name, value in bound_values.arguments.items():\n... print(name,value)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"try-various-examples"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#try-various-examples"}},[e._v("#")]),e._v(" Try various examples")]),e._v(" "),n("p",[e._v("func(1, 2, z=3)\nx 1\ny 2\nz 3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("func(1)\nx 1")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("func(1, z=3)\nx 1\nz 3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("func(y=2, x=1)\nx 1\ny 2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("func(1, 2, 3, 4)\nTraceback (most recent call last):\n...\nFile \"/usr/local/lib/python3.3/inspect.py\", line 1972, in _bind\nraise TypeError('too many positional arguments')\nTypeError: too many positional arguments")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("func(y=2)\nTraceback (most recent call last):\n...\nFile \"/usr/local/lib/python3.3/inspect.py\", line 1961, in _bind\nraise TypeError(msg) from None\nTypeError: 'x' parameter lacking default value")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("func(1, y=2, x=3)\nTraceback (most recent call last):\n...\nFile \"/usr/local/lib/python3.3/inspect.py\", line 1985, in _bind\n'{arg!r}'.format(arg=param.name))\nTypeError: multiple values for argument 'x'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("可以看出来，通过将签名和传递的参数绑定起来，可以强制函数调用遵循特定的规\n则，比如必填、默认、重复等等。\n下面是一个强制函数签名更具体的例子。在代码中，我们在基类中先定义了一个非\n常通用的 "),n("strong",[e._v("init")]),e._v("() 方法，然后我们强制所有的子类必须提供一个特定的参数签名。\nfrom inspect import Signature, Parameter\ndef make_sig(*names):\nparms = [Parameter(name, Parameter.POSITIONAL_OR_KEYWORD)\nfor name in names]\nreturn Signature(parms)\nclass Structure:\n"),n("strong",[e._v("signature")]),e._v(" = make_sig()\ndef "),n("strong",[e._v("init")]),e._v("(self, *args, **kwargs):\nbound_values = self."),n("strong",[e._v("signature")]),e._v(".bind(*args, **kwargs)\nfor name, value in bound_values.arguments.items():\nsetattr(self, name, value)")]),e._v(" "),n("h1",{attrs:{id:"example-use-10"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-10"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("class Stock(Structure):\n"),n("strong",[e._v("signature")]),e._v(" = make_sig('name', 'shares', 'price')\nclass Point(Structure):\n"),n("strong",[e._v("signature")]),e._v(" = make_sig('x', 'y')\n下面是使用这个 Stock 类的示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import inspect\nprint(inspect.signature(Stock))\n(name, shares, price)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s1 = Stock('ACME', 100, 490.1)\ns2 = Stock('ACME', 100)\nTraceback (most recent call last):\n...\nTypeError: 'price' parameter lacking default value")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s3 = Stock('ACME', 100, 490.1, shares=50)\nTraceback (most recent call last):\n...\nTypeError: multiple values for argument 'shares'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n在我们需要构建通用函数库、编写装饰器或实现代理的时候，对于 *args 和\n**kwargs 的使用是很普遍的。但是，这样的函数有一个缺点就是当你想要实现自己的\n参数检验时，代码就会笨拙混乱。在 8.11 小节里面有这样一个例子。这时候我们可以\n通过一个签名对象来简化它。\n在最后的一个方案实例中，我们还可以通过使用自定义元类来创建签名对象。下面\n演示怎样来实现：\nfrom inspect import Signature, Parameter\ndef make_sig(*names):\nparms = [Parameter(name, Parameter.POSITIONAL_OR_KEYWORD)\nfor name in names]\nreturn Signature(parms)\nclass StructureMeta(type):\ndef "),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, clsdict):\nclsdict['"),n("strong",[e._v("signature")]),e._v("'] = make_sig(*clsdict.get('_fields',[]))\nreturn super()."),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, clsdict)\nclass Structure(metaclass=StructureMeta):\n_fields = []\ndef "),n("strong",[e._v("init")]),e._v("(self, *args, **kwargs):\nbound_values = self."),n("strong",[e._v("signature")]),e._v(".bind(*args, **kwargs)\nfor name, value in bound_values.arguments.items():\nsetattr(self, name, value)")]),e._v(" "),n("h1",{attrs:{id:"example-14"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-14"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("class Stock(Structure):\n_fields = ['name', 'shares', 'price']\nclass Point(Structure):\n_fields = ['x', 'y']\n当我们自定义签名的时候，将签名存储在特定的属性 "),n("strong",[e._v("signature")]),e._v(" 中通常是很\n有用的。这样的话，在使用 inspect 模块执行内省的代码就能发现签名并将它作为调\n用约定。")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import inspect\nprint(inspect.signature(Stock))\n(name, shares, price)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(inspect.signature(Point))\n(x, y)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("9.17 在类上强制使用编程规约\n问题\n你的程序包含一个很大的类继承体系，你希望强制执行某些编程规约（或者代码\n诊断）来帮助程序员保持清醒。\n解决方案\n如果你想监控类的定义，通常可以通过定义一个元类。一个基本元类通常是继承自\ntype 并重定义它的 "),n("strong",[e._v("new")]),e._v("() 方法或者是 "),n("strong",[e._v("init")]),e._v("() 方法。比如：\nclass MyMeta(type):\ndef "),n("strong",[e._v("new")]),e._v("(self, clsname, bases, clsdict):")]),e._v(" "),n("h1",{attrs:{id:"clsname-is-name-of-class-being-defined"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#clsname-is-name-of-class-being-defined"}},[e._v("#")]),e._v(" clsname is name of class being defined")]),e._v(" "),n("h1",{attrs:{id:"bases-is-tuple-of-base-classes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bases-is-tuple-of-base-classes"}},[e._v("#")]),e._v(" bases is tuple of base classes")]),e._v(" "),n("h1",{attrs:{id:"clsdict-is-class-dictionary"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#clsdict-is-class-dictionary"}},[e._v("#")]),e._v(" clsdict is class dictionary")]),e._v(" "),n("p",[e._v("return super()."),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, clsdict)\n另一种是，定义 "),n("strong",[e._v("init")]),e._v("() 方法：\nclass MyMeta(type):\ndef "),n("strong",[e._v("init")]),e._v("(self, clsname, bases, clsdict):\nsuper()."),n("strong",[e._v("init")]),e._v("(clsname, bases, clsdict)")]),e._v(" "),n("h1",{attrs:{id:"clsname-is-name-of-class-being-defined-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#clsname-is-name-of-class-being-defined-2"}},[e._v("#")]),e._v(" clsname is name of class being defined")]),e._v(" "),n("h1",{attrs:{id:"bases-is-tuple-of-base-classes-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bases-is-tuple-of-base-classes-2"}},[e._v("#")]),e._v(" bases is tuple of base classes")]),e._v(" "),n("h1",{attrs:{id:"clsdict-is-class-dictionary-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#clsdict-is-class-dictionary-2"}},[e._v("#")]),e._v(" clsdict is class dictionary")]),e._v(" "),n("p",[e._v("为了使用这个元类，你通常要将它放到到一个顶级父类定义中，然后其他的类继承\n这个顶级父类。例如：\nclass Root(metaclass=MyMeta):\npass\nclass A(Root):\npass\nclass B(Root):\npass\n元类的一个关键特点是它允许你在定义的时候检查类的内容。在重新定义\n"),n("strong",[e._v("init")]),e._v("() 方法中，你可以很轻松的检查类字典、父类等等。并且，一旦某个元\n类被指定给了某个类，那么就会被继承到所有子类中去。因此，一个框架的构建者就能\n在大型的继承体系中通过给一个顶级父类指定一个元类去捕获所有下面子类的定义。\n作为一个具体的应用例子，下面定义了一个元类，它会拒绝任何有混合大小写名字\n作为方法的类定义（可能是想气死 Java 程序员 ^"),n("em",[e._v("^）：\nclass NoMixedCaseMeta(type):\ndef "),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, clsdict):\nfor name in clsdict:\nif name.lower() != name:\nraise TypeError('Bad attribute name: ' + name)\nreturn super()."),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, clsdict)\nclass Root(metaclass=NoMixedCaseMeta):\npass\nclass A(Root):\ndef foo_bar(self): # Ok\npass\nclass B(Root):\ndef fooBar(self): # TypeError\npass\n作为更高级和实用的例子，下面有一个元类，它用来检测重载方法，确保它的调用\n参数跟父类中原始方法有着相同的参数签名。\nfrom inspect import signature\nimport logging\nclass MatchSignaturesMeta(type):\ndef "),n("strong",[e._v("init")]),e._v("(self, clsname, bases, clsdict):\nsuper()."),n("strong",[e._v("init")]),e._v("(clsname, bases, clsdict)\nsup = super(self, self)\nfor name, value in clsdict.items():\nif name.startswith('")]),e._v("') or not callable(value):\ncontinue")]),e._v(" "),n("h1",{attrs:{id:"get-the-previous-definition-if-any-and-compare-the-signatures"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-the-previous-definition-if-any-and-compare-the-signatures"}},[e._v("#")]),e._v(" Get the previous definition (if any) and compare the signatures")]),e._v(" "),n("p",[e._v("prev_dfn = getattr(sup,name,None)\nif prev_dfn:\nprev_sig = signature(prev_dfn)\nval_sig = signature(value)\nif prev_sig != val_sig:\nlogging.warning('Signature mismatch in %s. %s != %s',\nvalue."),n("strong",[e._v("qualname")]),e._v(", prev_sig, val_sig)")]),e._v(" "),n("h1",{attrs:{id:"example-15"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-15"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("class Root(metaclass=MatchSignaturesMeta):\npass\nclass A(Root):\ndef foo(self, x, y):\npass\ndef spam(self, x, *, z):\npass")]),e._v(" "),n("h1",{attrs:{id:"class-with-redefined-methods-but-slightly-different-signatures"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-with-redefined-methods-but-slightly-different-signatures"}},[e._v("#")]),e._v(" Class with redefined methods, but slightly different signatures")]),e._v(" "),n("p",[e._v("class B(A):\ndef foo(self, a, b):\npass\ndef spam(self,x,z):\npass\n如果你运行这段代码，就会得到下面这样的输出结果：\nWARNING:root:Signature mismatch in B.spam. (self, x, *, z) != (self, x, z)\nWARNING:root:Signature mismatch in B.foo. (self, x, y) != (self, a, b)\n这种警告信息对于捕获一些微妙的程序 bug 是很有用的。例如，如果某个代码依\n赖于传递给方法的关键字参数，那么当子类改变参数名字的时候就会调用出错。\n讨论\n在大型面向对象的程序中，通常将类的定义放在元类中控制是很有用的。元类可以\n监控类的定义，警告编程人员某些没有注意到的可能出现的问题。\n有人可能会说，像这样的错误可以通过程序分析工具或 IDE 去做会更好些。诚然，\n这些工具是很有用。但是，如果你在构建一个框架或函数库供其他人使用，那么你没办\n法去控制使用者要使用什么工具。因此，对于这种类型的程序，如果可以在元类中做检\n测或许可以带来更好的用户体验。\n在元类中选择重新定义 "),n("strong",[e._v("new")]),e._v("() 方法还是 "),n("strong",[e._v("init")]),e._v("() 方法取决于你想怎样使\n用结果类。"),n("strong",[e._v("new")]),e._v("() 方法在类创建之前被调用，通常用于通过某种方式（比如通过改\n变类字典的内容）修改类的定义。而 "),n("strong",[e._v("init")]),e._v("() 方法是在类被创建之后被调用，当你\n需要完整构建类对象的时候会很有用。在最后一个例子中，这是必要的，因为它使用了\nsuper() 函数来搜索之前的定义。它只能在类的实例被创建之后，并且相应的方法解析\n顺序也已经被设置好了。\n最后一个例子还演示了 Python 的函数签名对象的使用。实际上，元类将每个可\n调用定义放在一个类中，搜索前一个定义（如果有的话），然后通过使用 inspect.\nsignature() 来简单的比较它们的调用签名。\n最后一点，代码中有一行使用了 super(self, self) 并不是排版错误。当使用元\n类的时候，我们要时刻记住一点就是 self 实际上是一个类对象。因此，这条语句其实\n就是用来寻找位于继承体系中构建 self 父类的定义。\n9.18 以编程方式定义类\n问题\n你在写一段代码，最终需要创建一个新的类对象。你考虑将类的定义源代码以字符\n串的形式发布出去。并且使用函数比如 exec() 来执行它，但是你想寻找一个更加优雅\n的解决方案。\n解决方案\n你可以使用函数 types.new_class() 来初始化新的类对象。你需要做的只是提供\n类的名字、父类元组、关键字参数，以及一个用成员变量填充类字典的回调函数。例如：")]),e._v(" "),n("h1",{attrs:{id:"stock-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stock-py"}},[e._v("#")]),e._v(" stock.py")]),e._v(" "),n("h1",{attrs:{id:"example-of-making-a-class-manually-from-parts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-of-making-a-class-manually-from-parts"}},[e._v("#")]),e._v(" Example of making a class manually from parts")]),e._v(" "),n("h1",{attrs:{id:"methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("init")]),e._v("(self, name, shares, price):\nself.name = name\nself.shares = shares\nself.price = price\ndef cost(self):\nreturn self.shares * self.price\ncls_dict = { '"),n("strong",[e._v("init")]),e._v("' : "),n("strong",[e._v("init")]),e._v(", 'cost' : cost,\n}")]),e._v(" "),n("h1",{attrs:{id:"make-a-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-class"}},[e._v("#")]),e._v(" Make a class")]),e._v(" "),n("p",[e._v("import types\nStock = types.new_class('Stock', (), {}, lambda ns: ns.update(cls_dict))\nStock."),n("strong",[e._v("module")]),e._v(" = "),n("strong",[e._v("name")]),e._v("\n这种方式会构建一个普通的类对象，并且按照你的期望工作：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = Stock('ACME', 50, 91.1)\ns\n<stock.Stock object at 0x1006a9b10>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.cost()\n4555.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这种方法中，一个比较难理解的地方是在调用完 types.new_class() 对 Stock.\n"),n("strong",[e._v("module")]),e._v(" 的赋值。每次当一个类被定义后，它的 "),n("strong",[e._v("module")]),e._v(" 属性包含定义它的模块\n名。这个名字用于生成 "),n("strong",[e._v("repr")]),e._v("() 方法的输出。它同样也被用于很多库，比如 pickle\n。因此，为了让你创建的类是“正确”的，你需要确保这个属性也设置正确了。\n如果你想创建的类需要一个不同的元类，可以通过 types.new_class() 第三个参\n数传递给它。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import abc\nStock = types.new_class('Stock', (), {'metaclass': abc.ABCMeta},\n... lambda ns: ns.update(cls_dict))\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("Stock."),n("strong",[e._v("module")]),e._v(" = "),n("strong",[e._v("name")]),e._v("\nStock\n<class '"),n("strong",[e._v("main")]),e._v(".Stock'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("type(Stock)\n<class 'abc.ABCMeta'>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("第三个参数还可以包含其他的关键字参数。比如，一个类的定义如下：\nclass Spam(Base, debug=True, typecheck=False):\npass\n那么可以将其翻译成如下的 new_class() 调用形式：\nSpam = types.new_class('Spam', (Base,),\n{'debug': True, 'typecheck': False},\nlambda ns: ns.update(cls_dict))\nnew_class() 第四个参数最神秘，它是一个用来接受类命名空间的映射对象的函\n数。通常这是一个普通的字典，但是它实际上是 "),n("strong",[e._v("prepare")]),e._v("() 方法返回的任意对象，\n这个在 9.14 小节已经介绍过了。这个函数需要使用上面演示的 update() 方法给命名\n空间增加内容。\n讨论\n很 多 时 候 如 果 能 构 造 新 的 类 对 象 是 很 有 用 的。有 个 很 熟 悉 的 例 子 是 调 用\ncollections.namedtuple() 函数，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("Stock = collections.namedtuple('Stock', ['name', 'shares', 'price'])\nStock\n<class '"),n("strong",[e._v("main")]),e._v(".Stock'>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("namedtuple() 使用 exec() 而不是上面介绍的技术。但是，下面通过一个简单的\n变化，我们直接创建一个类：\nimport operator\nimport types\nimport sys\ndef named_tuple(classname, fieldnames):")]),e._v(" "),n("h1",{attrs:{id:"populate-a-dictionary-of-field-property-accessors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#populate-a-dictionary-of-field-property-accessors"}},[e._v("#")]),e._v(" Populate a dictionary of field property accessors")]),e._v(" "),n("p",[e._v("cls_dict = { name: property(operator.itemgetter(n))\nfor n, name in enumerate(fieldnames) }")]),e._v(" "),n("h1",{attrs:{id:"make-a-new-function-and-add-to-the-class-dict"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-new-function-and-add-to-the-class-dict"}},[e._v("#")]),e._v(" Make a "),n("strong",[e._v("new")]),e._v(" function and add to the class dict")]),e._v(" "),n("p",[e._v("def "),n("strong",[e._v("new")]),e._v("(cls, *args):\nif len(args) != len(fieldnames):\nraise TypeError('Expected {} arguments'.format(len(fieldnames)))\nreturn tuple."),n("strong",[e._v("new")]),e._v("(cls, args)\ncls_dict['"),n("strong",[e._v("new")]),e._v("'] = "),n("strong",[e._v("new")])]),e._v(" "),n("h1",{attrs:{id:"make-the-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-the-class"}},[e._v("#")]),e._v(" Make the class")]),e._v(" "),n("p",[e._v("cls = types.new_class(classname, (tuple,), {},\nlambda ns: ns.update(cls_dict))")]),e._v(" "),n("h1",{attrs:{id:"set-the-module-to-that-of-the-caller"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-the-module-to-that-of-the-caller"}},[e._v("#")]),e._v(" Set the module to that of the caller")]),e._v(" "),n("p",[e._v("cls."),n("strong",[e._v("module")]),e._v(" = sys._getframe(1).f_globals['"),n("strong",[e._v("name")]),e._v("']\nreturn cls\n这段代码的最后部分使用了一个所谓的”框架魔法”，通过调用 sys._getframe()\n来获取调用者的模块名。另外一个框架魔法例子在 2.15 小节中有介绍过。\n下面的例子演示了前面的代码是如何工作的：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("Point = named_tuple('Point', ['x', 'y'])\nPoint\n<class '"),n("strong",[e._v("main")]),e._v(".Point'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p = Point(4, 5)\nlen(p)\n2")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('p.x 4\np.y 5\np.x = 2\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nAttributeError: can't set attribute")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print('%s %s' % p)\n4 5")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这项技术一个很重要的方面是它对于元类的正确使用。你可能像通过直接实例化\n一个元类来直接创建一个类：\nStock = type('Stock', (), cls_dict)\n这种方法的问题在于它忽略了一些关键步骤，比如对于元类中 "),n("strong",[e._v("prepare")]),e._v("() 方\n法的调用。通过使用 types.new_class() ，你可以保证所有的必要初始化步骤都能得\n到执行。比如，types.new_class() 第四个参数的回调函数接受 "),n("strong",[e._v("prepare")]),e._v("() 方法\n返回的映射对象。\n如果你仅仅只是想执行准备步骤，可以使用 types.prepare_class() 。例如：\nimport types\nmetaclass, kwargs, ns = types.prepare_class('Stock', (), {'metaclass': type})\n它会查找合适的元类并调用它的 "),n("strong",[e._v("prepare")]),e._v("() 方法。然后这个元类保存它的关\n键字参数，准备命名空间后被返回。\n更多信息, 请参考 PEP 3115 , 以及 Python documentation .\n9.19 在定义的时候初始化类的成员\n问题\n你想在类被定义的时候就初始化一部分类的成员，而不是要等到实例被创建后。\n解决方案\n在类定义时就执行初始化或设置操作是元类的一个典型应用场景。本质上讲，一个\n元类会在定义时被触发，这时候你可以执行一些额外的操作。\n下面是一个例子，利用这个思路来创建类似于 collections 模块中的命名元组的\n类：\nimport operator\nclass StructTupleMeta(type):\ndef "),n("strong",[e._v("init")]),e._v("(cls, *args, **kwargs):\nsuper()."),n("strong",[e._v("init")]),e._v("(*args, **kwargs)\nfor n, name in enumerate(cls._fields):\nsetattr(cls, name, property(operator.itemgetter(n)))\nclass StructTuple(tuple, metaclass=StructTupleMeta):\n_fields = []\ndef "),n("strong",[e._v("new")]),e._v("(cls, *args):\nif len(args) != len(cls._fields):\nraise ValueError('{} arguments required'.format(len(cls._fields)))\nreturn super()."),n("strong",[e._v("new")]),e._v("(cls,args)\n这段代码可以用来定义简单的基于元组的数据结构，如下所示：\nclass Stock(StructTuple):\n_fields = ['name', 'shares', 'price']\nclass Point(StructTuple):\n_fields = ['x', 'y']\n下面演示它如何工作：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = Stock('ACME', 50, 91.1)\ns\n('ACME', 50, 91.1)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s[0]\n'ACME'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.name\n'ACME'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.shares * s.price\n4555.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('s.shares = 23\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nAttributeError: can't set attribute")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n这一小节中，类 StructTupleMeta 获取到类属性 _fields 中的属性名字列表，然\n后将它们转换成相应的可访问特定元组槽的方法。函数 operator.itemgetter() 创建\n一个访问器函数，然后 property() 函数将其转换成一个属性。\n本节最难懂的部分是知道不同的初始化步骤是什么时候发生的。StructTupleMeta\n中的 "),n("strong",[e._v("init")]),e._v("() 方法只在每个类被定义时被调用一次。cls 参数就是那个被定义的类。\n实际上，上述代码使用了 _fields 类变量来保存新的被定义的类，然后给它再添加一\n点新的东西。\nStructTuple 类作为一个普通的基类，供其他使用者来继承。这个类中的 "),n("strong",[e._v("new")]),e._v("()\n方法用来构造新的实例。这里使用 "),n("strong",[e._v("new")]),e._v("() 并不是很常见，主要是因为我们要修改\n元组的调用签名，使得我们可以像普通的实例调用那样创建实例。就像下面这样：\ns = Stock('ACME', 50, 91.1) # OK\ns = Stock(('ACME', 50, 91.1)) # Error\n跟 "),n("strong",[e._v("init")]),e._v("() 不同的是，"),n("strong",[e._v("new")]),e._v("() 方法在实例被创建之前被触发。由于元组是\n不可修改的，所以一旦它们被创建了就不可能对它做任何改变。而 "),n("strong",[e._v("init")]),e._v("() 会在实\n例创建的最后被触发，这样的话我们就可以做我们想做的了。这也是为什么 "),n("strong",[e._v("new")]),e._v("()\n方法已经被定义了。\n尽管本节很短，还是需要你能仔细研读，深入思考 Python 类是如何被定义的，实\n例是如何被创建的，还有就是元类和类的各个不同的方法究竟在什么时候被调用。\nPEP 422 提供了一个解决本节问题的另外一种方法。但是，截止到我写这本书的\n时候，它还没被采纳和接受。尽管如此，如果你使用的是 Python 3.3 或更高的版本，那\n么还是值得去看一下的。\n9.20 利用函数注解实现方法重载\n问题\n你已经学过怎样使用函数参数注解，那么你可能会想利用它来实现基于类型的方\n法重载。但是你不确定应该怎样去实现（或者到底行得通不）。\n解决方案\n本小节的技术是基于一个简单的技术，那就是 Python 允许参数注解，代码可以像\n下面这样写：\nclass Spam:\ndef bar(self, x:int, y:int):\nprint('Bar 1:', x, y)\ndef bar(self, s:str, n:int = 0):\nprint('Bar 2:', s, n)\ns = Spam()\ns.bar(2, 3) # Prints Bar 1: 2 3\ns.bar('hello') # Prints Bar 2: hello 0\n下面是我们第一步的尝试，使用到了一个元类和描述器：")]),e._v(" "),n("h1",{attrs:{id:"multiple-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#multiple-py"}},[e._v("#")]),e._v(" multiple.py")]),e._v(" "),n("p",[e._v("import inspect\nimport types\nclass MultiMethod:\n'''\nRepresents a single multimethod.\n'''\ndef "),n("strong",[e._v("init")]),e._v("(self, name):\nself._methods = {}\nself."),n("strong",[e._v("name")]),e._v(" = name\ndef register(self, meth):\n'''\nRegister a new method as a multimethod\n'''\nsig = inspect.signature(meth)")]),e._v(" "),n("h1",{attrs:{id:"build-a-type-signature-from-the-method-s-annotations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#build-a-type-signature-from-the-method-s-annotations"}},[e._v("#")]),e._v(" Build a type signature from the method's annotations")]),e._v(" "),n("p",[e._v("types = []\nfor name, parm in sig.parameters.items():\nif name == 'self':\ncontinue\nif parm.annotation is inspect.Parameter.empty:\nraise TypeError( 'Argument {} must be annotated with a type'.format(name)\n)\nif not isinstance(parm.annotation, type):\nraise TypeError( 'Argument {} annotation must be a type'.format(name)\n)\nif parm.default is not inspect.Parameter.empty:\nself._methods[tuple(types)] = meth\ntypes.append(parm.annotation)\nself._methods[tuple(types)] = meth\ndef "),n("strong",[e._v("call")]),e._v("(self, *args):\n'''\nCall a method based on type signature of the arguments\n'''\ntypes = tuple(type(arg) for arg in args[1:])\nmeth = self._methods.get(types, None)\nif meth:\nreturn meth(*args)\nelse:\nraise TypeError('No matching method for types {}'.format(types))\ndef "),n("strong",[e._v("get")]),e._v("(self, instance, cls):\n'''\nDescriptor method needed to make calls work in a class\n'''\nif instance is not None:\nreturn types.MethodType(self, instance)\nelse:\nreturn self\nclass MultiDict(dict):\n'''\nSpecial dictionary to build multimethods in a metaclass\n'''\ndef "),n("strong",[e._v("setitem")]),e._v("(self, key, value):\nif key in self:")]),e._v(" "),n("h1",{attrs:{id:"if-key-already-exists-it-must-be-a-multimethod-or-callable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#if-key-already-exists-it-must-be-a-multimethod-or-callable"}},[e._v("#")]),e._v(" If key already exists, it must be a multimethod or callable")]),e._v(" "),n("p",[e._v("current_value = self[key]\nif isinstance(current_value, MultiMethod):\ncurrent_value.register(value)\nelse:\nmvalue = MultiMethod(key)\nmvalue.register(current_value)\nmvalue.register(value)\nsuper()."),n("strong",[e._v("setitem")]),e._v("(key, mvalue)\nelse:\nsuper()."),n("strong",[e._v("setitem")]),e._v("(key, value)\nclass MultipleMeta(type):\n'''\nMetaclass that allows multiple dispatch of methods\n'''\ndef "),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, clsdict):\nreturn type."),n("strong",[e._v("new")]),e._v("(cls, clsname, bases, dict(clsdict))\n@classmethod\ndef "),n("strong",[e._v("prepare")]),e._v("(cls, clsname, bases):\nreturn MultiDict()\n为了使用这个类，你可以像下面这样写：\nclass Spam(metaclass=MultipleMeta):\ndef bar(self, x:int, y:int):\nprint('Bar 1:', x, y)\ndef bar(self, s:str, n:int = 0):\nprint('Bar 2:', s, n)")]),e._v(" "),n("h1",{attrs:{id:"example-overloaded-init"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-overloaded-init"}},[e._v("#")]),e._v(" Example: overloaded "),n("strong",[e._v("init")])]),e._v(" "),n("p",[e._v("import time\nclass Date(metaclass=MultipleMeta):\ndef "),n("strong",[e._v("init")]),e._v("(self, year: int, month:int, day:int):\nself.year = year\nself.month = month\nself.day = day\ndef "),n("strong",[e._v("init")]),e._v("(self):\nt = time.localtime()\nself."),n("strong",[e._v("init")]),e._v("(t.tm_year, t.tm_mon, t.tm_mday)\n下面是一个交互示例来验证它能正确的工作：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = Spam()\ns.bar(2, 3)\nBar 1: 2 3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.bar('hello')\nBar 2: hello 0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.bar('hello', 5)\nBar 2: hello 5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.bar(2, 'hello')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "multiple.py", line 42, in '),n("strong",[e._v("call")]),e._v("\nraise TypeError('No matching method for types {}'.format(types))\nTypeError: No matching method for types (<class 'int'>, <class 'str'>)")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"overloaded-init"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overloaded-init"}},[e._v("#")]),e._v(" Overloaded "),n("strong",[e._v("init")])]),e._v(" "),n("p",[e._v("d = Date(2012, 12, 21)")]),e._v(" "),n("h1",{attrs:{id:"get-today-s-date"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-today-s-date"}},[e._v("#")]),e._v(" Get today's date")]),e._v(" "),n("p",[e._v("e = Date()\ne.year\n2012")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("e.month\n12")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("e.day\n3")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n坦白来讲，相对于通常的代码而已本节使用到了很多的魔法代码。但是，它却能让\n我们深入理解元类和描述器的底层工作原理，并能加深对这些概念的印象。因此，就算\n你并不会立即去应用本节的技术，它的一些底层思想却会影响到其它涉及到元类、描述\n器和函数注解的编程技术。\n本 节 的 实 现 中 的 主 要 思 路 其 实 是 很 简 单 的。MutipleMeta 元 类 使 用 它 的\n"),n("strong",[e._v("prepare")]),e._v("() 方法来提供一个作为 MultiDict 实例的自定义字典。这个跟普通字\n典不一样的是，MultiDict 会在元素被设置的时候检查是否已经存在，如果存在的话，\n重复的元素会在 MultiMethod 实例中合并。\nMultiMethod 实例通过构建从类型签名到函数的映射来收集方法。在这个构建过\n程中，函数注解被用来收集这些签名然后构建这个映射。这个过程在 MultiMethod.\nregister() 方法中实现。这种映射的一个关键特点是对于多个方法，所有参数类型都\n必须要指定，否则就会报错。\n为了让 MultiMethod 实例模拟一个调用，它的 "),n("strong",[e._v("call")]),e._v("() 方法被实现了。这个方\n法从所有排除 slef 的参数中构建一个类型元组，在内部 map 中查找这个方法，然后\n调用相应的方法。为了能让 MultiMethod 实例在类定义时正确操作，"),n("strong",[e._v("get")]),e._v("() 是必\n须得实现的。它被用来构建正确的绑定方法。比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("b = s.bar\nb\n<bound method Spam.bar of <"),n("strong",[e._v("main")]),e._v(".Spam object at 0x1006a46d0>>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b."),n("strong",[e._v("self")]),e._v("\n<"),n("strong",[e._v("main")]),e._v(".Spam object at 0x1006a46d0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b."),n("strong",[e._v("func")]),e._v("\n<"),n("strong",[e._v("main")]),e._v(".MultiMethod object at 0x1006a4d50>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b(2, 3)\nBar 1: 2 3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b('hello')\nBar 2: hello 0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("不过本节的实现还有一些限制，其中一个是它不能使用关键字参数。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('s.bar(x=2, y=3)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: "),n("strong",[e._v("call")]),e._v("() got an unexpected keyword argument 'y'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.bar(s='hello')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: "),n("strong",[e._v("call")]),e._v("() got an unexpected keyword argument 's'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("也许有其他的方法能添加这种支持，但是它需要一个完全不同的方法映射方式。问\n题在于关键字参数的出现是没有顺序的。当它跟位置参数混合使用时，那你的参数就会\n变得比较混乱了，这时候你不得不在 "),n("strong",[e._v("call")]),e._v("() 方法中先去做个排序。\n同样对于继承也是有限制的，例如，类似下面这种代码就不能正常工作：\nclass A:\npass\nclass B(A):\npass\nclass C:\npass\nclass Spam(metaclass=MultipleMeta):\ndef foo(self, x:A):\nprint('Foo 1:', x)\ndef foo(self, x:C):\nprint('Foo 2:', x)\n原因是因为 x:A 注解不能成功匹配子类实例（比如 B 的实例），如下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = Spam()\na = A()\ns.foo(a)\nFoo 1: <"),n("strong",[e._v("main")]),e._v(".A object at 0x1006a5310>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c = C()\ns.foo(c)\nFoo 2: <"),n("strong",[e._v("main")]),e._v(".C object at 0x1007a1910>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('b = B()\ns.foo(b)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "multiple.py", line 44, in '),n("strong",[e._v("call")]),e._v("\nraise TypeError('No matching method for types {}'.format(types))\nTypeError: No matching method for types (<class '"),n("strong",[e._v("main")]),e._v(".B'>,)")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("作为使用元类和注解的一种替代方案，可以通过描述器来实现类似的效果。例如：\nimport types\nclass multimethod:\ndef "),n("strong",[e._v("init")]),e._v("(self, func):\nself._methods = {}\nself."),n("strong",[e._v("name")]),e._v(" = func."),n("strong",[e._v("name")]),e._v("\nself._default = func\ndef match(self, *types):\ndef register(func):\nndefaults = len(func."),n("strong",[e._v("defaults")]),e._v(") if func."),n("strong",[e._v("defaults")]),e._v(" else 0\nfor n in range(ndefaults+1):\nself._methods[types[:len(types) - n]] = func\nreturn self\nreturn register\ndef "),n("strong",[e._v("call")]),e._v("(self, *args):\ntypes = tuple(type(arg) for arg in args[1:])\nmeth = self._methods.get(types, None)\nif meth:\nreturn meth(*args)\nelse:\nreturn self._default(*args)\ndef "),n("strong",[e._v("get")]),e._v("(self, instance, cls):\nif instance is not None:\nreturn types.MethodType(self, instance)\nelse:\nreturn self\n为了使用描述器版本，你需要像下面这样写：\nclass Spam:\n@multimethod\ndef bar(self, *args):")]),e._v(" "),n("h1",{attrs:{id:"default-method-called-if-no-match"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#default-method-called-if-no-match"}},[e._v("#")]),e._v(" Default method called if no match")]),e._v(" "),n("p",[e._v("raise TypeError('No matching method for bar')\n@bar.match(int, int)\ndef bar(self, x, y):\nprint('Bar 1:', x, y)\n@bar.match(str, int)\ndef bar(self, s, n = 0):\nprint('Bar 2:', s, n)\n描述器方案同样也有前面提到的限制（不支持关键字参数和继承）。\n所有事物都是平等的，有好有坏，也许最好的办法就是在普通代码中避免使用方法\n重载。不过有些特殊情况下还是有意义的，比如基于模式匹配的方法重载程序中。举个\n例子，8.21 小节中的访问者模式可以修改为一个使用方法重载的类。但是，除了这个以\n外，通常不应该使用方法重载（就简单的使用不同名称的方法就行了）。\n在 Python 社区对于实现方法重载的讨论已经由来已久。对于引发这个争论的原\n因，可以参考下 Guido van Rossum 的这篇博客：Five-Minute Multimethods in Python\n9.21 避免重复的属性方法\n问题\n你在类中需要重复的定义一些执行相同逻辑的属性方法，比如进行类型检查，怎样\n去简化这些重复代码呢？\n解决方案\n考虑下一个简单的类，它的属性由属性方法包装：\nclass Person:\ndef "),n("strong",[e._v("init")]),e._v("(self, name ,age):\nself.name = name\nself.age = age\n@property\ndef name(self):\nreturn self._name\n@name.setter\ndef name(self, value):\nif not isinstance(value, str):\nraise TypeError('name must be a string')\nself._name = value\n@property\ndef age(self):\nreturn self._age\n@age.setter\ndef age(self, value):\nif not isinstance(value, int):\nraise TypeError('age must be an int')\nself."),n("em",[e._v("age = value\n可以看到，为了实现属性值的类型检查我们写了很多的重复代码。只要你以后看到\n类似这样的代码，你都应该想办法去简化它。一个可行的方法是创建一个函数用来定义\n属性并返回它。例如：\ndef typed_property(name, expected_type):\nstorage_name = '")]),e._v("' + name\n@property\ndef prop(self):\nreturn getattr(self, storage_name)\n@prop.setter\ndef prop(self, value):\nif not isinstance(value, expected_type):\nraise TypeError('{} must be a {}'.format(name, expected_type))\nsetattr(self, storage_name, value)\nreturn prop")]),e._v(" "),n("h1",{attrs:{id:"example-use-11"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-11"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("class Person:\nname = typed_property('name', str)\nage = typed_property('age', int)\ndef "),n("strong",[e._v("init")]),e._v("(self, name, age):\nself.name = name\nself.age = age\n讨论\n本节我们演示内部函数或者闭包的一个重要特性，它们很像一个宏。例子中的\n函数 typed_property() 看上去有点难理解，其实它所做的仅仅就是为你生成属性并\n返回这个属性对象。因此，当在一个类中使用它的时候，效果跟将它里面的代码放到\n类定义中去是一样的。尽管属性的 getter 和 setter 方法访问了本地变量如 name ,\nexpected_type 以及 storate_name ，这个很正常，这些变量的值会保存在闭包当中。\n我们还可以使用 functools.partial() 来稍稍改变下这个例子，很有趣。例如，你\n可以像下面这样：\nfrom functools import partial\nString = partial(typed_property, expected_type=str)\nInteger = partial(typed_property, expected_type=int)")]),e._v(" "),n("h1",{attrs:{id:"example-16"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-16"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),n("p",[e._v("class Person:\nname = String('name')\nage = Integer('age')\ndef "),n("strong",[e._v("init")]),e._v("(self, name, age):\nself.name = name\nself.age = age\n其实你可以发现，这里的代码跟 8.13 小节中的类型系统描述器代码有些相似。\n9.22 定义上下文管理器的简单方法\n问题\n你想自己去实现一个新的上下文管理器，以便使用 with 语句。\n解决方案\n实现一个新的上下文管理器的最简单的方法就是使用 contexlib 模块中的\n@contextmanager 装饰器。下面是一个实现了代码块计时功能的上下文管理器例子：\nimport time\nfrom contextlib import contextmanager\n@contextmanager\ndef timethis(label):\nstart = time.time()\ntry:\nyield\nfinally:\nend = time.time()\nprint('{}: {}'.format(label, end - start))")]),e._v(" "),n("h1",{attrs:{id:"example-use-12"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-12"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("with timethis('counting'):\nn = 10000000\nwhile n > 0: n -= 1\n在函数 timethis() 中，yield 之前的代码会在上下文管理器中作为 "),n("strong",[e._v("enter")]),e._v("()\n方法执行，所有在 yield 之后的代码会作为 "),n("strong",[e._v("exit")]),e._v("() 方法执行。如果出现了异常，\n异常会在 yield 语句那里抛出。\n下面是一个更加高级一点的上下文管理器，实现了列表对象上的某种事务：\n@contextmanager\ndef list_transaction(orig_list):\nworking = list(orig_list)\nyield working\norig_list[:] = working\n这段代码的作用是任何对列表的修改只有当所有代码运行完成并且不出现异常的\n情况下才会生效。下面我们来演示一下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("items = [1, 2, 3]\nwith list_transaction(items) as working:\n... working.append(4)\n... working.append(5)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("items\n[1, 2, 3, 4, 5]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("with list_transaction(items) as working:\n... working.append(6)\n... working.append(7)\n... raise RuntimeError('oops')\n...\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 4, in '),n("module",[e._v("\nRuntimeError: oops")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("items\n[1, 2, 3, 4, 5]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n通常情况下，如果要写一个上下文管理器，你需要定义一个类，里面包含一个\n"),n("strong",[e._v("enter")]),e._v("() 和一个 "),n("strong",[e._v("exit")]),e._v("() 方法，如下所示：\nimport time\nclass timethis:\ndef "),n("strong",[e._v("init")]),e._v("(self, label):\nself.label = label\ndef "),n("strong",[e._v("enter")]),e._v("(self):\nself.start = time.time()\ndef "),n("strong",[e._v("exit")]),e._v("(self, exc_ty, exc_val, exc_tb):\nend = time.time()\nprint('{}: {}'.format(self.label, end - self.start))\n尽管这个也不难写，但是相比较写一个简单的使用 @contextmanager 注解的函数\n而言还是稍显乏味。\n@contextmanager 应该仅仅用来写自包含的上下文管理函数。如果你有一些对\n象 (比如一个文件、网络连接或锁)，需要支持 with 语句，那么你就需要单独实现\n"),n("strong",[e._v("enter")]),e._v("() 方法和 "),n("strong",[e._v("exit")]),e._v("() 方法。\n9.23 在局部变量域中执行代码\n问题\n你想在使用范围内执行某个代码片段，并且希望在执行后所有的结果都不可见。\n解决方案\n为了理解这个问题，先试试一个简单场景。首先，在全局命名空间内执行一个代码\n片段：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = 13\nexec('b = a + 1')\nprint(b)\n14")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("然后，再在一个函数中执行同样的代码：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def test():\n... a = 13\n... exec('b = a + 1')\n... print(b)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('test()\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "'),n("stdin",[e._v("\", line 4, in test\nNameError: global name 'b' is not defined")])],1)],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("可以看出，最后抛出了一个 NameError 异常，就跟在 exec() 语句从没执行过一\n样。要是你想在后面的计算中使用到 exec() 执行结果的话就会有问题了。\n为了修正这样的错误，你需要在调用 exec() 之前使用 locals() 函数来得到一个\n局部变量字典。之后你就能从局部字典中获取修改过后的变量值了。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def test():\n... a = 13\n... loc = locals()\n... exec('b = a + 1')\n... b = loc['b']\n... print(b)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("test()\n14")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n实际上对于 exec() 的正确使用是比较难的。大多数情况下当你要考虑使用 exec()\n的时候，还有另外更好的解决方案（比如装饰器、闭包、元类等等）。\n然而，如果你仍然要使用 exec() ，本节列出了一些如何正确使用它的方法。默认\n情况下，exec() 会在调用者局部和全局范围内执行代码。然而，在函数里面，传递给\nexec() 的局部范围是拷贝实际局部变量组成的一个字典。因此，如果 exec() 如果执\n行了修改操作，这种修改后的结果对实际局部变量值是没有影响的。下面是另外一个演\n示它的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def test1():\n... x = 0\n... exec('x += 1')\n... print(x)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("test1()\n0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("上面代码里，当你调用 locals() 获取局部变量时，你获得的是传递给 exec() 的\n局部变量的一个拷贝。通过在代码执行后审查这个字典的值，那就能获取修改后的值\n了。下面是一个演示例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def test2():\n... x = 0\n... loc = locals()\n... print('before:', loc)\n... exec('x += 1')\n... print('after:', loc)\n... print('x =', x)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("test2()\nbefore: {'x': 0}\nafter: {'loc': {...}, 'x': 1}\nx = 0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("仔细观察最后一步的输出，除非你将 loc 中被修改后的值手动赋值给 x，否则 x\n变量值是不会变的。\n在使用 locals() 的时候，你需要注意操作顺序。每次它被调用的时候，locals()\n会获取局部变量值中的值并覆盖字典中相应的变量。请注意观察下下面这个试验的输\n出结果：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def test3():\n... x = 0\n... loc = locals()\n... print(loc)\n... exec('x += 1')\n... print(loc)\n... locals()\n... print(loc)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("test3()\n{'x': 0}\n{'loc': {...}, 'x': 1}\n{'loc': {...}, 'x': 0}")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("注意最后一次调用 locals() 的时候 x 的值是如何被覆盖掉的。\n作为 locals() 的一个替代方案，你可以使用你自己的字典，并将它传递给 exec()\n。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def test4():\n... a = 13\n... loc = { 'a' : a }\n... glb = { }\n... exec('b = a + 1', glb, loc)\n... b = loc['b']\n... print(b)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("test4()\n14")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("大部分情况下，这种方式是使用 exec() 的最佳实践。你只需要保证全局和局部字\n典在后面代码访问时已经被初始化。\n还有一点，在使用 exec() 之前，你可能需要问下自己是否有其他更好的替代方案。\n大多数情况下当你要考虑使用 exec() 的时候，还有另外更好的解决方案，比如装饰器、\n闭包、元类，或其他一些元编程特性。\n9.24 解析与分析 Python 源码\n问题\n你想写解析并分析 Python 源代码的程序。\n解决方案\n大部分程序员知道 Python 能够计算或执行字符串形式的源代码。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 42\neval('2 + 3*4 + x')\n56")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("exec('for i in range(10): print(i)') 0123456789")])])])]),e._v(" "),n("p",[e._v("尽管如此，ast 模块能被用来将 Python 源码编译成一个可被分析的抽象语法树\n（AST）。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import ast\nex = ast.parse('2 + 3*4 + x', mode='eval')\nex\n<_ast.Expression object at 0x1007473d0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("ast.dump(ex)\n\"Expression(body=BinOp(left=BinOp(left=Num(n=2), op=Add(),\nright=BinOp(left=Num(n=3), op=Mult(), right=Num(n=4))), op=Add(),\nright=Name(id='x', ctx=Load())))\"")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("top = ast.parse('for i in range(10): print(i)', mode='exec')\ntop\n<_ast.Module object at 0x100747390>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("ast.dump(top)\n\"Module(body=[For(target=Name(id='i', ctx=Store()),\niter=Call(func=Name(id='range', ctx=Load()), args=[Num(n=10)],\nkeywords=[], starargs=None, kwargs=None),\nbody=[Expr(value=Call(func=Name(id='print', ctx=Load()),\nargs=[Name(id='i', ctx=Load())], keywords=[], starargs=None,\nkwargs=None))], orelse=[])])\"")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("分析源码树需要你自己更多的学习，它是由一系列 AST 节点组成的。分析这些节点\n最简单的方法就是定义一个访问者类，实现很多 visit_NodeName() 方法，NodeName()\n匹配那些你感兴趣的节点。下面是这样一个类，记录了哪些名字被加载、存储和删除的\n信息。\nimport ast\nclass CodeAnalyzer(ast.NodeVisitor):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself.loaded = set()\nself.stored = set()\nself.deleted = set()\ndef visit_Name(self, node):\nif isinstance(node.ctx, ast.Load):\nself.loaded.add(node.id)\nelif isinstance(node.ctx, ast.Store):\nself.stored.add(node.id)\nelif isinstance(node.ctx, ast.Del):\nself.deleted.add(node.id)")]),e._v(" "),n("h1",{attrs:{id:"sample-usage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sample-usage"}},[e._v("#")]),e._v(" Sample usage")]),e._v(" "),n("p",[e._v("if "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':")]),e._v(" "),n("h1",{attrs:{id:"some-python-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#some-python-code"}},[e._v("#")]),e._v(" Some Python code")]),e._v(" "),n("p",[e._v("code = '''\nfor i in range(10):\nprint(i)\ndel i\n'''")]),e._v(" "),n("h1",{attrs:{id:"parse-into-an-ast"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parse-into-an-ast"}},[e._v("#")]),e._v(" Parse into an AST")]),e._v(" "),n("p",[e._v("top = ast.parse(code, mode='exec')")]),e._v(" "),n("h1",{attrs:{id:"feed-the-ast-to-analyze-name-usage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#feed-the-ast-to-analyze-name-usage"}},[e._v("#")]),e._v(" Feed the AST to analyze name usage")]),e._v(" "),n("p",[e._v("c = CodeAnalyzer()\nc.visit(top)\nprint('Loaded:', c.loaded)\nprint('Stored:', c.stored)\nprint('Deleted:', c.deleted)\n如果你运行这个程序，你会得到下面这样的输出：\nLoaded: {'i', 'range', 'print'}\nStored: {'i'}\nDeleted: {'i'}\n最后，AST 可以通过 compile() 函数来编译并执行。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("exec(compile(top,'"),n("stdin",[e._v("', 'exec'))\n0123456789")])],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n当你能够分析源代码并从中获取信息的时候，你就能写很多代码分析、优化或验证\n工具了。例如，相比盲目的传递一些代码片段到类似 exec() 函数中，你可以先将它转\n换成一个 AST，然后观察它的细节看它到底是怎样做的。你还可以写一些工具来查看\n某个模块的全部源码，并且在此基础上执行某些静态分析。\n需要注意的是，如果你知道自己在干啥，你还能够重写 AST 来表示新的代码。下\n面是一个装饰器例子，可以通过重新解析函数体源码、重写 AST 并重新创建函数代码\n对象来将全局访问变量降为函数体作用范围，")]),e._v(" "),n("h1",{attrs:{id:"namelower-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#namelower-py"}},[e._v("#")]),e._v(" namelower.py")]),e._v(" "),n("p",[e._v("import ast\nimport inspect")]),e._v(" "),n("h1",{attrs:{id:"node-visitor-that-lowers-globally-accessed-names-into"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-visitor-that-lowers-globally-accessed-names-into"}},[e._v("#")]),e._v(" Node visitor that lowers globally accessed names into")]),e._v(" "),n("h1",{attrs:{id:"the-function-body-as-local-variables"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-function-body-as-local-variables"}},[e._v("#")]),e._v(" the function body as local variables.")]),e._v(" "),n("p",[e._v("class NameLower(ast.NodeVisitor):\ndef "),n("strong",[e._v("init")]),e._v("(self, lowered_names):\nself.lowered_names = lowered_names\ndef visit_FunctionDef(self, node):")]),e._v(" "),n("h1",{attrs:{id:"compile-some-assignments-to-lower-the-constants"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compile-some-assignments-to-lower-the-constants"}},[e._v("#")]),e._v(" Compile some assignments to lower the constants")]),e._v(" "),n("p",[e._v("code = '__globals = globals()\\n'\ncode += '\\n'.join(\"{0} = __globals['{0}']\".format(name)\nfor name in self.lowered_names)\ncode_ast = ast.parse(code, mode='exec')")]),e._v(" "),n("h1",{attrs:{id:"inject-new-statements-into-the-function-body"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inject-new-statements-into-the-function-body"}},[e._v("#")]),e._v(" Inject new statements into the function body")]),e._v(" "),n("p",[e._v("node.body[:0] = code_ast.body")]),e._v(" "),n("h1",{attrs:{id:"save-the-function-object"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#save-the-function-object"}},[e._v("#")]),e._v(" Save the function object")]),e._v(" "),n("p",[e._v("self.func = node")]),e._v(" "),n("h1",{attrs:{id:"decorator-that-turns-global-names-into-locals"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decorator-that-turns-global-names-into-locals"}},[e._v("#")]),e._v(" Decorator that turns global names into locals")]),e._v(" "),n("p",[e._v("def lower_names(*namelist):\ndef lower(func):\nsrclines = inspect.getsource(func).splitlines()")]),e._v(" "),n("h1",{attrs:{id:"skip-source-lines-prior-to-the-lower-names-decorator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#skip-source-lines-prior-to-the-lower-names-decorator"}},[e._v("#")]),e._v(" Skip source lines prior to the @lower_names decorator")]),e._v(" "),n("p",[e._v("for n, line in enumerate(srclines):\nif '@lower_names' in line:\nbreak\nsrc = '\\n'.join(srclines[n+1:])")]),e._v(" "),n("h1",{attrs:{id:"hack-to-deal-with-indented-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hack-to-deal-with-indented-code"}},[e._v("#")]),e._v(" Hack to deal with indented code")]),e._v(" "),n("p",[e._v("if src.startswith((' ','\\t')):\nsrc = 'if 1:\\n' + src\ntop = ast.parse(src, mode='exec')")]),e._v(" "),n("h1",{attrs:{id:"transform-the-ast"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#transform-the-ast"}},[e._v("#")]),e._v(" Transform the AST")]),e._v(" "),n("p",[e._v("cl = NameLower(namelist)\ncl.visit(top)")]),e._v(" "),n("h1",{attrs:{id:"execute-the-modified-ast"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#execute-the-modified-ast"}},[e._v("#")]),e._v(" Execute the modified AST")]),e._v(" "),n("p",[e._v("temp = {}\nexec(compile(top,'','exec'), temp, temp)")]),e._v(" "),n("h1",{attrs:{id:"pull-out-the-modified-code-object"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pull-out-the-modified-code-object"}},[e._v("#")]),e._v(" Pull out the modified code object")]),e._v(" "),n("p",[e._v("func."),n("strong",[e._v("code")]),e._v(" = temp[func."),n("strong",[e._v("name")]),e._v("]."),n("strong",[e._v("code")]),e._v("\nreturn func\nreturn lower\n为了使用这个代码，你可以像下面这样写：\nINCR = 1\n@lower_names('INCR')\ndef countdown(n):\nwhile n > 0: n -= INCR\n装饰器会将 countdown() 函数重写为类似下面这样子：\ndef countdown(n):\n__globals = globals()\nINCR = __globals['INCR']\nwhile n > 0: n -= INCR\n在性能测试中，它会让函数运行快 20%\n现在，你是不是想为你所有的函数都加上这个装饰器呢？或许不会。但是，这却是\n对于一些高级技术比如 AST 操作、源码操作等等的一个很好的演示说明\n本节受另外一个在 ActiveState 中处理 Python 字节码的章节的启示。使用 AST\n是一个更加高级点的技术，并且也更简单些。参考下面一节获得字节码的更多信息。\n9.25 拆解 Python 字节码\n问题\n你想通过将你的代码反编译成低级的字节码来查看它底层的工作机制。\n解决方案\ndis 模块可以被用来输出任何 Python 函数的反编译结果。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def countdown(n):\n... while n > 0:\n... print('T-minus', n)\n... n -= 1\n... print('Blastoff!')\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import dis\ndis.dis(countdown)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n当你想要知道你的程序底层的运行机制的时候，dis 模块是很有用的。比如如果你\n想试着理解性能特征。被 dis() 函数解析的原始字节码如下所示：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("countdown."),n("strong",[e._v("code")]),e._v('.co_code\nb"x\'\\x00|\\x00\\x00d\\x01\\x00k\\x04\\x00r)\\x00t\\x00\\x00d\\x02\\x00|\\x00\\x00\\x83\n\\x02\\x00\\x01|\\x00\\x00d\\x03\\x008}\\x00\\x00q\\x03\\x00Wt\\x00\\x00d\\x04\\x00\\x83\n\\x01\\x00\\x01d\\x00\\x00S"')])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想自己解释这段代码，你需要使用一些在 opcode 模块中定义的常量。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = countdown."),n("strong",[e._v("code")]),e._v(".co_code\nimport opcode\nopcode.opname[c[0]]\nopcode.opname[c[0]]\n'SETUP_LOOP'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("opcode.opname[c[3]]\n'LOAD_FAST'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("奇怪的是，在 dis 模块中并没有函数让你以编程方式很容易的来处理字节码。不\n过，下面的生成器函数可以将原始字节码序列转换成 opcodes 和参数。\nimport opcode\ndef generate_opcodes(codebytes):\nextended_arg = 0 i = 0 n = len(codebytes)\nwhile i < n:\nop = codebytes[i]\ni += 1\nif op >= opcode.HAVE_ARGUMENT:\noparg = codebytes[i] + codebytes[i+1]*256 + extended_arg\nextended_arg = 0 i += 2\nif op == opcode.EXTENDED_ARG:\nextended_arg = oparg * 65536\ncontinue\nelse:\noparg = None\nyield (op, oparg)\n使用方法如下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("for op, oparg in generate_opcodes(countdown."),n("strong",[e._v("code")]),e._v(".co_code):\n... print(op, opcode.opname[op], oparg)\n这种方式很少有人知道，你可以利用它替换任何你想要替换的函数的原始字节码。\n下面我们用一个示例来演示整个过程：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("def add(x, y):\n... return x + y\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c = add."),n("strong",[e._v("code")]),e._v('\nc\n<code object add at 0x1007beed0, file "'),n("stdin",[e._v('", line 1>')])],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.co_code\nb'|\\x00\\x00|\\x01\\x00\\x17S'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"make-a-completely-new-code-object-with-bogus-byte-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-completely-new-code-object-with-bogus-byte-code"}},[e._v("#")]),e._v(" Make a completely new code object with bogus byte code")]),e._v(" "),n("p",[e._v("import types\nnewbytecode = b'xxxxxxx'\nnc = types.CodeType(c.co_argcount, c.co_kwonlyargcount,\n... c.co_nlocals, c.co_stacksize, c.co_flags, newbytecode, c.co_consts,\n... c.co_names, c.co_varnames, c.co_filename, c.co_name,\n... c.co_firstlineno, c.co_lnotab)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('nc\n<code object add at 0x10069fe40, file "'),n("stdin",[e._v('", line 1>')])],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("add."),n("strong",[e._v("code")]),e._v(" = nc\nadd(2,3)\nSegmentation fault\n你可以像这样耍大招让解释器奔溃。但是，对于编写更高级优化和元编程工具的程\n序员来讲，他们可能真的需要重写字节码。本节最后的部分演示了这个是怎样做到的。\n你还可以参考另外一个类似的例子：this code on ActiveState")])])])]),e._v(" "),n("h2",{attrs:{id:"第十章-模块与包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第十章-模块与包"}},[e._v("#")]),e._v(" 第十章：模块与包")]),e._v(" "),n("p",[e._v("模块与包是任何大型程序的核心，就连 Python 安装程序本身也是一个包。本章重\n点涉及有关模块和包的常用编程技术，例如如何组织包、把大型模块分割成多个文件、\n创建命名空间包。同时，也给出了让你自定义导入语句的秘籍。\n10.1 构建一个模块的层级包\n问题\n你想将你的代码组织成由很多分层模块构成的包。\n解决方案\n封装成包是很简单的。在文件系统上组织你的代码，并确保每个目录都定义了一个\n"),n("strong",[e._v("init")]),e._v(".py 文件。例如：\ngraphics/\n"),n("strong",[e._v("init")]),e._v(".py\nprimitive/\n"),n("strong",[e._v("init")]),e._v(".py\nline.py\nfill.py\ntext.py\nformats/\n"),n("strong",[e._v("init")]),e._v(".py\npng.py\njpg.py\n一旦你做到了这一点，你应该能够执行各种 import 语句，如下：\nimport graphics.primitive.line\nfrom graphics.primitive import line\nimport graphics.formats.jpg as jpg\n讨论\n定义模块的层次结构就像在文件系统上建立目录结构一样容易。文件 "),n("strong",[e._v("init")]),e._v(".py\n的目的是要包含不同运行级别的包的可选的初始化代码。举个例子，如果你执行了语句\nimport graphics，文件 graphics/"),n("strong",[e._v("init")]),e._v(".py 将被导入, 建立 graphics 命名空间的内容。\n像 import graphics.format.jpg 这样导入，文件 graphics/"),n("strong",[e._v("init")]),e._v(".py 和文件 graphics/\nformats/"),n("strong",[e._v("init")]),e._v(".py 将在文件 graphics/formats/jpg.py 导入之前导入。\n绝大部分时候让 "),n("strong",[e._v("init")]),e._v(".py 空着就好。但是有些情况下可能包含代码。举个例\n子，"),n("strong",[e._v("init")]),e._v(".py 能够用来自动加载子模块:")]),e._v(" "),n("h1",{attrs:{id:"graphics-formats-init-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#graphics-formats-init-py"}},[e._v("#")]),e._v(" graphics/formats/"),n("strong",[e._v("init")]),e._v(".py")]),e._v(" "),n("p",[e._v("from . import jpg\nfrom . import png\n像这样一个文件, 用户可以仅仅通过 import grahpics.formats 来代替 import graph￾ics.formats.jpg 以及 import graphics.formats.png。\n"),n("strong",[e._v("init")]),e._v(".py 的其他常用用法包括将多个文件合并到一个逻辑命名空间，这将在\n10.4 小节讨论。\n敏锐的程序员会发现，即使没有 "),n("strong",[e._v("init")]),e._v(".py 文件存在，python 仍然会导入包。\n如果你没有定义 "),n("strong",[e._v("init")]),e._v(".py 时，实际上创建了一个所谓的“命名空间包”，这将在\n10.5 小节讨论。万物平等，如果你着手创建一个新的包的话，包含一个 "),n("strong",[e._v("init")]),e._v(".py\n文件吧。\n10.2 控制模块被全部导入的内容\n问题\n当使用’from module import *’语句时，希望对从模块或包导出的符号进行精确\n控制。\n解决方案\n在你的模块中定义一个变量 "),n("strong",[e._v("all")]),e._v(" 来明确地列出需要导出的内容。\n举个例子:")]),e._v(" "),n("h1",{attrs:{id:"somemodule-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#somemodule-py"}},[e._v("#")]),e._v(" somemodule.py")]),e._v(" "),n("p",[e._v("def spam():\npass\ndef grok():\npass\nblah = 42")]),e._v(" "),n("h1",{attrs:{id:"only-export-spam-and-grok"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#only-export-spam-and-grok"}},[e._v("#")]),e._v(" Only export 'spam' and 'grok'")]),e._v(" "),n("p",[n("strong",[e._v("all")]),e._v(" = ['spam', 'grok']\n讨论\n尽管强烈反对使用‘from module import *’, 但是在定义了大量变量名的模块中\n频繁使用。如果你不做任何事, 这样的导入将会导入所有不以下划线开头的。另一方面,\n如果定义了 "),n("strong",[e._v("all")]),e._v(" , 那么只有被列举出的东西会被导出。\n如果你将 "),n("strong",[e._v("all")]),e._v(" 定义成一个空列表, 没有东西将被导入。如果 "),n("strong",[e._v("all")]),e._v(" 包含未\n定义的名字, 在导入时引起 AttributeError。\n10.3 使用相对路径名导入包中子模块\n问题\n将代码组织成包, 想用 import 语句从另一个包名没有硬编码过的包的中导入子模\n块。\n解决方案\n使用包的相对导入，使一个模块导入同一个包的另一个模块举个例子，假设在你的\n文件系统上有 mypackage 包，组织如下：\nmypackage/\n"),n("strong",[e._v("init")]),e._v(".py\nA/\n"),n("strong",[e._v("init")]),e._v(".py\nspam.py\ngrok.py\nB/\n"),n("strong",[e._v("init")]),e._v(".py\nbar.py\n如果模块 mypackage.A.spam 要导入同目录下的模块 grok，它应该包括的 import\n语句如下：")]),e._v(" "),n("h1",{attrs:{id:"mypackage-a-spam-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mypackage-a-spam-py"}},[e._v("#")]),e._v(" mypackage/A/spam.py")]),e._v(" "),n("p",[e._v("from . import grok\n如果模块 mypackage.A.spam 要导入不同目录下的模块 B.bar，它应该使用的\nimport 语句如下：")]),e._v(" "),n("h1",{attrs:{id:"mypackage-a-spam-py-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mypackage-a-spam-py-2"}},[e._v("#")]),e._v(" mypackage/A/spam.py")]),e._v(" "),n("p",[e._v("from ..B import bar\n两个 import 语句都没包含顶层包名，而是使用了 spam.py 的相对路径。\n讨论\n在包内，既可以使用相对路径也可以使用绝对路径来导入。举个例子：")]),e._v(" "),n("h1",{attrs:{id:"mypackage-a-spam-py-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mypackage-a-spam-py-3"}},[e._v("#")]),e._v(" mypackage/A/spam.py")]),e._v(" "),n("p",[e._v("from mypackage.A import grok # OK\nfrom . import grok # OK\nimport grok # Error (not found)\n像 mypackage.A 这样使用绝对路径名的不利之处是这将顶层包名硬编码到你的源\n码中。如果你想重新组织它，你的代码将更脆，很难工作。举个例子，如果你改变了包\n名，你就必须检查所有文件来修正源码。同样，硬编码的名称会使移动代码变得困难。\n举个例子，也许有人想安装两个不同版本的软件包，只通过名称区分它们。如果使用相\n对导入，那一切都 ok，然而使用绝对路径名很可能会出问题。\nimport 语句的 . 和 .. 看起来很滑稽, 但它指定目录名. 为当前目录，..B 为目录../\nB。这种语法只适用于 import。举个例子：\nfrom . import grok # OK\nimport .grok # ERROR\n尽管使用相对导入看起来像是浏览文件系统，但是不能到定义包的目录之外。也就\n是说，使用点的这种模式从不是包的目录中导入将会引发错误。\n最后，相对导入只适用于在合适的包中的模块。尤其是在顶层的脚本的简单模块\n中，它们将不起作用。如果包的部分被作为脚本直接执行，那它们将不起作用例如：\n% python3 mypackage/A/spam.py # Relative imports fail\n另一方面，如果你使用 Python 的-m 选项来执行先前的脚本，相对导入将会正确\n运行。例如：\n% python3 -m mypackage.A.spam # Relative imports work\n更多的包的相对导入的背景知识, 请看 PEP 328 .\n10.4 将模块分割成多个文件\n问题\n你想将一个模块分割成多个文件。但是你不想将分离的文件统一成一个逻辑模块\n时使已有的代码遭到破坏。\n解决方案\n程序模块可以通过变成包来分割成多个独立的文件。考虑下下面简单的模块：")]),e._v(" "),n("h1",{attrs:{id:"mymodule-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mymodule-py"}},[e._v("#")]),e._v(" mymodule.py")]),e._v(" "),n("p",[e._v("class A:\ndef spam(self):\nprint('A.spam')\nclass B(A):\ndef bar(self):\nprint('B.bar')\n假设你想 mymodule.py 分为两个文件，每个定义的一个类。要做到这一点，首先\n用 mymodule 目录来替换文件 mymodule.py。这这个目录下，创建以下文件：\nmymodule/\n"),n("strong",[e._v("init")]),e._v(".py\na.py\nb.py\n在 a.py 文件中插入以下代码：")]),e._v(" "),n("h1",{attrs:{id:"a-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-py"}},[e._v("#")]),e._v(" a.py")]),e._v(" "),n("p",[e._v("class A:\ndef spam(self):\nprint('A.spam') 在 b.py 文件中插入以下代码：")]),e._v(" "),n("h1",{attrs:{id:"b-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#b-py"}},[e._v("#")]),e._v(" b.py")]),e._v(" "),n("p",[e._v("from .a import A\nclass B(A):\ndef bar(self):\nprint('B.bar')\n最后，在 "),n("strong",[e._v("init")]),e._v(".py 中，将 2 个文件粘合在一起：")]),e._v(" "),n("h1",{attrs:{id:"init-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#init-py"}},[e._v("#")]),e._v(" "),n("strong",[e._v("init")]),e._v(".py")]),e._v(" "),n("p",[e._v("from .a import A\nfrom .b import B\n如果按照这些步骤，所产生的包 MyModule 将作为一个单一的逻辑模块：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import mymodule\na = mymodule.A()\na.spam()\nA.spam")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = mymodule.B()\nb.bar()\nB.bar")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n在这个章节中的主要问题是一个设计问题，不管你是否希望用户使用很多小模块\n或只是一个模块。举个例子，在一个大型的代码库中，你可以将这一切都分割成独立的\n文件，让用户使用大量的 import 语句，就像这样：\nfrom mymodule.a import A\nfrom mymodule.b import B ...\n这样能工作，但这让用户承受更多的负担，用户要知道不同的部分位于何处。通常\n情况下，将这些统一起来，使用一条 import 将更加容易，就像这样：\nfrom mymodule import A, B\n对后者而言，让 mymodule 成为一个大的源文件是最常见的。但是，这一章节展示\n了如何合并多个文件合并成一个单一的逻辑命名空间。这样做的关键是创建一个包目\n录，使用 "),n("strong",[e._v("init")]),e._v(".py 文件来将每部分粘合在一起。\n当一个模块被分割，你需要特别注意交叉引用的文件名。举个例子，在这一章节\n中，B 类需要访问 A 类作为基类。用包的相对导入 from .a import A 来获取。\n整个章节都使用包的相对导入来避免将顶层模块名硬编码到源代码中。这使得重\n命名模块或者将它移动到别的位置更容易。（见 10.3 小节）\n作为这一章节的延伸，将介绍延迟导入。如图所示，"),n("strong",[e._v("init")]),e._v(".py 文件一次导入所\n有必需的组件的。但是对于一个很大的模块，可能你只想组件在需要时被加载。要做到\n这一点，"),n("strong",[e._v("init")]),e._v(".py 有细微的变化：")]),e._v(" "),n("h1",{attrs:{id:"init-py-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#init-py-2"}},[e._v("#")]),e._v(" "),n("strong",[e._v("init")]),e._v(".py")]),e._v(" "),n("p",[e._v("def A():\nfrom .a import A\nreturn A()\ndef B():\nfrom .b import B\nreturn B()\n在这个版本中，类 A 和类 B 被替换为在第一次访问时加载所需的类的函数。对于\n用户，这看起来不会有太大的不同。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import mymodule\na = mymodule.A()\na.spam()\nA.spam")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("延迟加载的主要缺点是继承和类型检查可能会中断。你可能会稍微改变你的代码，\n例如:\nif isinstance(x, mymodule.A): # Error\n...\nif isinstance(x, mymodule.a.A): # Ok\n...\n延迟加载的真实例子, 见标准库 multiprocessing/"),n("strong",[e._v("init")]),e._v(".py 的源码.\n10.5 利用命名空间导入目录分散的代码\n问题\n你可能有大量的代码，由不同的人来分散地维护。每个部分被组织为文件目录，如\n一个包。然而，你希望能用共同的包前缀将所有组件连接起来，不是将每一个部分作为\n独立的包来安装。\n解决方案\n从本质上讲，你要定义一个顶级 Python 包，作为一个大集合分开维护子包的命名\n空间。这个问题经常出现在大的应用框架中，框架开发者希望鼓励用户发布插件或附加\n包。\n在统一不同的目录里统一相同的命名空间，但是要删去用来将组件联合起来的\n"),n("strong",[e._v("init")]),e._v(".py 文件。假设你有 Python 代码的两个不同的目录如下：\nfoo-package/\nspam/\nblah.py\nbar-package/\nspam/\ngrok.py\n在这 2 个目录里，都有着共同的命名空间 spam。在任何一个目录里都没有\n"),n("strong",[e._v("init")]),e._v(".py 文件。\n让我们看看，如果将 foo-package 和 bar-package 都加到 python 模块路径并尝试导\n入会发生什么")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sys\nsys.path.extend(['foo-package', 'bar-package'])\nimport spam.blah\nimport spam.grok")])])])]),e._v(" "),n("p",[e._v("两个不同的包目录被合并到一起，你可以导入 spam.blah 和 spam.grok，并且它们\n能够工作。\n讨论\n在这里工作的机制被称为“包命名空间”的一个特征。从本质上讲，包命名空间是\n一种特殊的封装设计，为合并不同的目录的代码到一个共同的命名空间。对于大的框\n架，这可能是有用的，因为它允许一个框架的部分被单独地安装下载。它也使人们能够\n轻松地为这样的框架编写第三方附加组件和其他扩展。\n包命名空间的关键是确保顶级目录中没有 "),n("strong",[e._v("init")]),e._v(".py 文件来作为共同的命名空\n间。缺失 "),n("strong",[e._v("init")]),e._v(".py 文件使得在导入包的时候会发生有趣的事情：这并没有产生错\n误，解释器创建了一个由所有包含匹配包名的目录组成的列表。特殊的包命名空间模块\n被创建，只读的目录列表副本被存储在其 "),n("strong",[e._v("path")]),e._v(" 变量中。举个例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import spam\nspam."),n("strong",[e._v("path")]),e._v("\n_NamespacePath(['foo-package/spam', 'bar-package/spam'])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在定位包的子组件时，目录 "),n("strong",[e._v("path")]),e._v(" 将被用到 (例如, 当导入 spam.grok 或者\nspam.blah 的时候).\n包命名空间的一个重要特点是任何人都可以用自己的代码来扩展命名空间。举个\n例子，假设你自己的代码目录像这样：\nmy-package/\nspam/\ncustom.py\n如果你将你的代码目录和其他包一起添加到 sys.path，这将无缝地合并到别的\nspam 包目录中：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import spam.custom\nimport spam.grok\nimport spam.blah")])])])]),e._v(" "),n("p",[e._v("一个包是否被作为一个包命名空间的主要方法是检查其 "),n("strong",[e._v("file")]),e._v(" 属性。如果没\n有，那包是个命名空间。这也可以由其字符表现形式中的“namespace”这个词体现出\n来。")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("spam."),n("strong",[e._v("file")]),e._v('\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nAttributeError: 'module' object has no attribute '"),n("strong",[e._v("file")]),e._v("'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam\n<module 'spam' (namespace)>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("更多的包命名空间信息可以查看 PEP 420.\n10.6 重新加载模块\n问题\n你想重新加载已经加载的模块，因为你对其源码进行了修改。\n解决方案\n使用 imp.reload() 来重新加载先前加载的模块。举个例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import spam\nimport imp\nimp.reload(spam)\n<module 'spam' from './spam.py'>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n重新加载模块在开发和调试过程中常常很有用。但在生产环境中的代码使用会不\n安全，因为它并不总是像您期望的那样工作。\nreload() 擦除了模块底层字典的内容，并通过重新执行模块的源代码来刷新它。模\n块对象本身的身份保持不变。因此，该操作在程序中所有已经被导入了的地方更新了模\n块。\n尽管如此，reload() 没有更新像”from module import name”这样使用 import 语\n句导入的定义。举个例子：")]),e._v(" "),n("h1",{attrs:{id:"spam-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spam-py"}},[e._v("#")]),e._v(" spam.py")]),e._v(" "),n("p",[e._v("def bar():\nprint('bar')\ndef grok():\nprint('grok')\n现在启动交互式会话：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import spam\nfrom spam import grok\nspam.bar()\nbar")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("grok()\ngrok")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("不退出 Python 修改 spam.py 的源码，将 grok() 函数改成这样：\ndef grok():\nprint('New grok')\n现在回到交互式会话，重新加载模块，尝试下这个实验：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import imp\nimp.reload(spam)\n<module 'spam' from './spam.py'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam.bar()\nbar")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("grok() # Notice old output\ngrok")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam.grok() # Notice new output\nNew grok")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在这个例子中，你看到有 2 个版本的 grok() 函数被加载。通常来说，这不是你想\n要的，而是令人头疼的事。\n因此，在生产环境中可能需要避免重新加载模块。在交互环境下调试，解释程序并\n试图弄懂它。\n10.7 运行目录或压缩文件\n问题\n您有一个已成长为包含多个文件的应用，它已远不再是一个简单的脚本，你想向用\n户提供一些简单的方法运行这个程序。\n解决方案\n如果你的应用程序已经有多个文件，你可以把你的应用程序放进它自己的目录并\n添加一个 "),n("strong",[e._v("main")]),e._v(".py 文件。举个例子，你可以像这样创建目录：\nmyapplication/\nspam.py\nbar.py\ngrok.py\n"),n("strong",[e._v("main")]),e._v(".py\n如果 "),n("strong",[e._v("main")]),e._v(".py 存在，你可以简单地在顶级目录运行 Python 解释器：\nbash % python3 myapplication\n解释器将执行 "),n("strong",[e._v("main")]),e._v(".py 文件作为主程序。\n如果你将你的代码打包成 zip 文件，这种技术同样也适用，举个例子：\nbash % ls\nspam.py bar.py grok.py "),n("strong",[e._v("main")]),e._v(".py\nbash % zip -r myapp.zip *.py\nbash % python3 myapp.zip\n... output from "),n("strong",[e._v("main")]),e._v(".py ...\n讨论\n创建一个目录或 zip 文件并添加 "),n("strong",[e._v("main")]),e._v(".py 文件来将一个更大的 Python 应用\n打包是可行的。这和作为标准库被安装到 Python 库的代码包是有一点区别的。相反，\n这只是让别人执行的代码包。\n由于目录和 zip 文件与正常文件有一点不同，你可能还需要增加一个 shell 脚本，\n使执行更加容易。例如，如果代码文件名为 myapp.zip，你可以创建这样一个顶级脚本：\n#!/usr/bin/env python3 /usr/local/bin/myapp.zip\n10.8 读取位于包中的数据文件\n问题\n你的包中包含代码需要去读取的数据文件。你需要尽可能地用最便捷的方式来做\n这件事。\n解决方案\n假设你的包中的文件组织成如下：\nmypackage/\n"),n("strong",[e._v("init")]),e._v(".py\nsomedata.dat\nspam.py\n现在假设 spam.py 文件需要读取 somedata.dat 文件中的内容。你可以用以下代码\n来完成：")]),e._v(" "),n("h1",{attrs:{id:"spam-py-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spam-py-2"}},[e._v("#")]),e._v(" spam.py")]),e._v(" "),n("p",[e._v("import pkgutil\ndata = pkgutil.get_data("),n("strong",[e._v("package")]),e._v(", 'somedata.dat')\n由此产生的变量是包含该文件的原始内容的字节字符串。\n讨论\n要读取数据文件，你可能会倾向于编写使用内置的 I/ O 功能的代码，如 open()。\n但是这种方法也有一些问题。\n首先，一个包对解释器的当前工作目录几乎没有控制权。因此，编程时任何 I/O 操\n作都必须使用绝对文件名。由于每个模块包含有完整路径的 "),n("strong",[e._v("file")]),e._v(" 变量，这弄清楚\n它的路径不是不可能，但它很凌乱。\n第二，包通常安装作为.zip 或.egg 文件，这些文件并不像在文件系统上的一个普通\n目录里那样被保存。因此，你试图用 open() 对一个包含数据文件的归档文件进行操作，\n它根本不会工作。\npkgutil.get_data() 函数是一个读取数据文件的高级工具，不用管包是如何安装以\n及安装在哪。它只是工作并将文件内容以字节字符串返回给你\nget_data() 的第一个参数是包含包名的字符串。你可以直接使用包名，也可以使\n用特殊的变量，比如 "),n("strong",[e._v("package")]),e._v('。第二个参数是包内文件的相对名称。如果有必要，\n可以使用标准的 Unix 命名规范到不同的目录，只有最后的目录仍然位于包中。\n10.9 将文件夹加入到 sys.path\n问题\n你无法导入你的 Python 代码因为它所在的目录不在 sys.path 里。你想将添加新目\n录到 Python 路径，但是不想硬链接到你的代码。\n解决方案\n有两种常用的方式将新目录添加到 sys.path。第一种，你可以使用 PYTHONPATH\n环境变量来添加。例如：\nbash % env PYTHONPATH=/some/dir:/other/dir python3\nPython 3.3.0 (default, Oct 4 2012, 10:17:33)\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType "help", "copyright", "credits" or "license" for more information.')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sys\nsys.path\n['', '/some/dir', '/other/dir', ...]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在自定义应用程序中，这样的环境变量可在程序启动时设置或通过 shell 脚本。\n第二种方法是创建一个.pth 文件，将目录列举出来，像这样：")]),e._v(" "),n("h1",{attrs:{id:"myapplication-pth"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#myapplication-pth"}},[e._v("#")]),e._v(" myapplication.pth")]),e._v(" "),n("p",[e._v("/some/dir\n/other/dir\n这个.pth 文件需要放在某个 Python 的 site-packages 目录，通常位于/usr/local/\nlib/python3.3/site-packages 或者 ~/.local/lib/python3.3/sitepackages。当解释器启动时，\n.pth 文件里列举出来的存在于文件系统的目录将被添加到 sys.path。安装一个.pth 文件\n可能需要管理员权限，如果它被添加到系统级的 Python 解释器。\n讨论\n比起费力地找文件，你可能会倾向于写一个代码手动调节 sys.path 的值。例如:\nimport sys\nsys.path.insert(0, '/some/dir')\nsys.path.insert(0, '/other/dir')\n虽然这能“工作”，它是在实践中极为脆弱，应尽量避免使用。这种方法的问题是，\n它将目录名硬编码到了你的源代码。如果你的代码被移到一个新的位置，这会导致维\n护问题。更好的做法是在不修改源代码的情况下，将 path 配置到其他地方。如果您使\n用模块级的变量来精心构造一个适当的绝对路径，有时你可以解决硬编码目录的问题，\n比如 "),n("strong",[e._v("file")]),e._v("。举个例子：\nimport sys\nfrom os.path import abspath, join, dirname\nsys.path.insert(0, join(abspath(dirname("),n("strong",[e._v("file")]),e._v(")), 'src'))\n这将 src 目录添加到 path 里，和执行插入步骤的代码在同一个目录里。\nsite-packages 目录是第三方包和模块安装的目录。如果你手动安装你的代码，它将\n被安装到 site-packages 目录。虽然用于配置 path 的.pth 文件必须放置在 site-packages\n里，但它配置的路径可以是系统上任何你希望的目录。因此，你可以把你的代码放在一\n系列不同的目录，只要那些目录包含在.pth 文件里。\n10.10 通过字符串名导入模块\n问题\n你想导入一个模块，但是模块的名字在字符串里。你想对字符串调用导入命令。\n解决方案\n使用 importlib.import_module() 函数来手动导入名字为字符串给出的一个模块或\n者包的一部分。举个例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import importlib\nmath = importlib.import_module('math')\nmath.sin(2)\n0.9092974268256817")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("mod = importlib.import_module('urllib.request')\nu = mod.urlopen('http://www.python.org')")])])])]),e._v(" "),n("p",[e._v("import_module 只是简单地执行和 import 相同的步骤，但是返回生成的模块对象。\n你只需要将其存储在一个变量，然后像正常的模块一样使用。\n如果你正在使用的包，import_module() 也可用于相对导入。但是，你需要给它一\n个额外的参数。例如：\nimport importlib")]),e._v(" "),n("h1",{attrs:{id:"same-as-from-import-b"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#same-as-from-import-b"}},[e._v("#")]),e._v(" Same as 'from . import b'")]),e._v(" "),n("p",[e._v("b = importlib.import_module('.b', "),n("strong",[e._v("package")]),e._v(")\n讨论\n使用 import_module() 手动导入模块的问题通常出现在以某种方式编写修改或覆\n盖模块的代码时候。例如，也许你正在执行某种自定义导入机制，需要通过名称来加载\n一个模块，通过补丁加载代码。\n在旧的代码，有时你会看到用于导入的内建函数 "),n("strong",[e._v("import")]),e._v("()。尽管它能工作，\n但是 importlib.import_module() 通常更容易使用。\n自定义导入过程的高级实例见 10.11 小节\n10.11 通过钩子远程加载模块\n问题\n你想自定义 Python 的 import 语句，使得它能从远程机器上面透明的加载模块。\n解决方案\n首先要提出来的是安全问题。本节讨论的思想如果没有一些额外的安全和认知机\n制的话会很糟糕。也就是说，我们的主要目的是深入分析 Python 的 import 语句机制。\n如果你理解了本节内部原理，你就能够为其他任何目的而自定义 import。有了这些，让\n我们继续向前走。\n本节核心是设计导入语句的扩展功能。有很多种方法可以做这个，不过为了演示的\n方便，我们开始先构造下面这个 Python 代码结构：\ntestcode/\nspam.py\nfib.py\ngrok/\n"),n("strong",[e._v("init")]),e._v(".py\nblah.py\n这些文件的内容并不重要，不过我们在每个文件中放入了少量的简单语句和函数，\n这样你可以测试它们并查看当它们被导入时的输出。例如：")]),e._v(" "),n("h1",{attrs:{id:"spam-py-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spam-py-3"}},[e._v("#")]),e._v(" spam.py")]),e._v(" "),n("p",[e._v("print(\"I'm spam\")\ndef hello(name):\nprint('Hello %s' % name)")]),e._v(" "),n("h1",{attrs:{id:"fib-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fib-py"}},[e._v("#")]),e._v(" fib.py")]),e._v(" "),n("p",[e._v('print("I\'m fib")\ndef fib(n):\nif n < 2:\nreturn 1\nelse:\nreturn fib(n-1) + fib(n-2)')]),e._v(" "),n("h1",{attrs:{id:"grok-init-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#grok-init-py"}},[e._v("#")]),e._v(" grok/"),n("strong",[e._v("init")]),e._v(".py")]),e._v(" "),n("p",[e._v("print(\"I'm grok."),n("strong",[e._v("init")]),e._v('")')]),e._v(" "),n("h1",{attrs:{id:"grok-blah-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#grok-blah-py"}},[e._v("#")]),e._v(" grok/blah.py")]),e._v(" "),n("p",[e._v('print("I\'m grok.blah")\n这里的目的是允许这些文件作为模块被远程访问。也许最简单的方式就是将它们\n发布到一个 web 服务器上面。在 testcode 目录中像下面这样运行 Python：\nbash % cd testcode\nbash % python3 -m http.server 15000\nServing HTTP on 0.0.0.0 port 15000 ...\n服务器运行起来后再启动一个单独的 Python 解释器。确保你可以使用 urllib 访\n问到远程文件。例如：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from urllib.request import urlopen\nu = urlopen('http://localhost:15000/fib.py')\ndata = u.read().decode('utf-8')\nprint(data)")])])])]),e._v(" "),n("h1",{attrs:{id:"fib-py-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fib-py-2"}},[e._v("#")]),e._v(" fib.py")]),e._v(" "),n("p",[e._v('print("I\'m fib")\ndef fib(n):\nif n < 2:\nreturn 1\nelse:\nreturn fib(n-1) + fib(n-2)')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("从这个服务器加载源代码是接下来本节的基础。为了替代手动的通过 urlopen()\n来收集源文件，我们通过自定义 import 语句来在后台自动帮我们做到。\n加载远程模块的第一种方法是创建一个显示的加载函数来完成它。例如：\nimport imp\nimport urllib.request\nimport sys\ndef load_module(url):\nu = urllib.request.urlopen(url)\nsource = u.read().decode('utf-8')\nmod = sys.modules.setdefault(url, imp.new_module(url))\ncode = compile(source, url, 'exec')\nmod."),n("strong",[e._v("file")]),e._v(" = url\nmod."),n("strong",[e._v("package")]),e._v(" = ''\nexec(code, mod."),n("strong",[e._v("dict")]),e._v(")\nreturn mod\n这个函数会下载源代码，并使用 compile() 将其编译到一个代码对象中，然后在\n一个新创建的模块对象的字典中来执行它。下面是使用这个函数的方式：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("fib = load_module('http://localhost:15000/fib.py')\nI'm fib")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("fib.fib(10)\n89")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam = load_module('http://localhost:15000/spam.py')\nI'm spam")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam.hello('Guido')\nHello Guido")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("fib\n<module 'http://localhost:15000/fib.py' from 'http://localhost:15000/fib.py'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("spam\n<module 'http://localhost:15000/spam.py' from 'http://localhost:15000/spam.py\n,\n→'>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("正如你所见，对于简单的模块这个是行得通的。不过它并没有嵌入到通常的 import\n语句中，如果要支持更高级的结构比如包就需要更多的工作了。\n一个更酷的做法是创建一个自定义导入器。第一种方法是创建一个元路径导入器。\n如下：")]),e._v(" "),n("h1",{attrs:{id:"urlimport-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#urlimport-py"}},[e._v("#")]),e._v(" urlimport.py")]),e._v(" "),n("p",[e._v("import sys\nimport importlib.abc\nimport imp\nfrom urllib.request import urlopen\nfrom urllib.error import HTTPError, URLError\nfrom html.parser import HTMLParser")]),e._v(" "),n("h1",{attrs:{id:"debugging"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#debugging"}},[e._v("#")]),e._v(" Debugging")]),e._v(" "),n("p",[e._v("import logging\nlog = logging.getLogger("),n("strong",[e._v("name")]),e._v(")")]),e._v(" "),n("h1",{attrs:{id:"get-links-from-a-given-url"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-links-from-a-given-url"}},[e._v("#")]),e._v(" Get links from a given URL")]),e._v(" "),n("p",[e._v("def _get_links(url):\nclass LinkParser(HTMLParser):\ndef handle_starttag(self, tag, attrs):\nif tag == 'a':\nattrs = dict(attrs)\nlinks.add(attrs.get('href').rstrip('/'))\nlinks = set()\ntry:\nlog.debug('Getting links from %s' % url)\nu = urlopen(url)\nparser = LinkParser()\nparser.feed(u.read().decode('utf-8'))\nexcept Exception as e:\nlog.debug('Could not get links. %s', e)\nlog.debug('links: %r', links)\nreturn links\nclass UrlMetaFinder(importlib.abc.MetaPathFinder):\ndef "),n("strong",[e._v("init")]),e._v("(self, baseurl):\nself._baseurl = baseurl\nself._links = { }\nself._loaders = { baseurl : UrlModuleLoader(baseurl) }\ndef find_module(self, fullname, path=None):\nlog.debug('find_module: fullname=%r, path=%r', fullname, path)\nif path is None:\nbaseurl = self._baseurl\nelse:\nif not path[0].startswith(self._baseurl):\nreturn None\nbaseurl = path[0]\nparts = fullname.split('.')\nbasename = parts[-1]\nlog.debug('find_module: baseurl=%r, basename=%r', baseurl, basename)")]),e._v(" "),n("h1",{attrs:{id:"check-link-cache"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-link-cache"}},[e._v("#")]),e._v(" Check link cache")]),e._v(" "),n("p",[e._v("if basename not in self._links:\nself._links[baseurl] = _get_links(baseurl)")]),e._v(" "),n("h1",{attrs:{id:"check-if-it-s-a-package"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-if-it-s-a-package"}},[e._v("#")]),e._v(" Check if it's a package")]),e._v(" "),n("p",[e._v("if basename in self._links[baseurl]:\nlog.debug('find_module: trying package %r', fullname)\nfullurl = self._baseurl + '/' + basename")]),e._v(" "),n("h1",{attrs:{id:"attempt-to-load-the-package-which-accesses-init-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attempt-to-load-the-package-which-accesses-init-py"}},[e._v("#")]),e._v(" Attempt to load the package (which accesses "),n("strong",[e._v("init")]),e._v(".py)")]),e._v(" "),n("p",[e._v("loader = UrlPackageLoader(fullurl)\ntry:\nloader.load_module(fullname)\nself._links[fullurl] = _get_links(fullurl)\nself._loaders[fullurl] = UrlModuleLoader(fullurl)\nlog.debug('find_module: package %r loaded', fullname)\nexcept ImportError as e:\nlog.debug('find_module: package failed. %s', e)\nloader = None\nreturn loader")]),e._v(" "),n("h1",{attrs:{id:"a-normal-module"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-normal-module"}},[e._v("#")]),e._v(" A normal module")]),e._v(" "),n("p",[e._v("filename = basename + '.py'\nif filename in self._links[baseurl]:\nlog.debug('find_module: module %r found', fullname)\nreturn self._loaders[baseurl]\nelse:\nlog.debug('find_module: module %r not found', fullname)\nreturn None\ndef invalidate_caches(self):\nlog.debug('invalidating link cache')\nself._links.clear()")]),e._v(" "),n("h1",{attrs:{id:"module-loader-for-a-url"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#module-loader-for-a-url"}},[e._v("#")]),e._v(" Module Loader for a URL")]),e._v(" "),n("p",[e._v("class UrlModuleLoader(importlib.abc.SourceLoader):\ndef "),n("strong",[e._v("init")]),e._v("(self, baseurl):\nself._baseurl = baseurl\nself._source_cache = {}\ndef module_repr(self, module):\nreturn '<urlmodule %r from %r>' % (module."),n("strong",[e._v("name")]),e._v(", module."),n("strong",[e._v("file")]),e._v(")")]),e._v(" "),n("h1",{attrs:{id:"required-method"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#required-method"}},[e._v("#")]),e._v(" Required method")]),e._v(" "),n("p",[e._v("def load_module(self, fullname):\ncode = self.get_code(fullname)\nmod = sys.modules.setdefault(fullname, imp.new_module(fullname))\nmod."),n("strong",[e._v("file")]),e._v(" = self.get_filename(fullname)\nmod."),n("strong",[e._v("loader")]),e._v(" = self\nmod."),n("strong",[e._v("package")]),e._v(" = fullname.rpartition('.')[0]\nexec(code, mod."),n("strong",[e._v("dict")]),e._v(")\nreturn mod")]),e._v(" "),n("h1",{attrs:{id:"optional-extensions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#optional-extensions"}},[e._v("#")]),e._v(" Optional extensions")]),e._v(" "),n("p",[e._v("def get_code(self, fullname):\nsrc = self.get_source(fullname)\nreturn compile(src, self.get_filename(fullname), 'exec')\ndef get_data(self, path):\npass\ndef get_filename(self, fullname):\nreturn self._baseurl + '/' + fullname.split('.')[-1] + '.py'\ndef get_source(self, fullname):\nfilename = self.get_filename(fullname)\nlog.debug('loader: reading %r', filename)\nif filename in self._source_cache:\nlog.debug('loader: cached %r', filename)\nreturn self._source_cache[filename]\ntry:u = urlopen(filename)\nsource = u.read().decode('utf-8')\nlog.debug('loader: %r loaded', filename)\nself._source_cache[filename] = source\nreturn source\nexcept (HTTPError, URLError) as e:\nlog.debug('loader: %r failed. %s', filename, e)\nraise ImportError(\"Can't load %s\" % filename)\ndef is_package(self, fullname):\nreturn False")]),e._v(" "),n("h1",{attrs:{id:"package-loader-for-a-url"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#package-loader-for-a-url"}},[e._v("#")]),e._v(" Package loader for a URL")]),e._v(" "),n("p",[e._v("class UrlPackageLoader(UrlModuleLoader):\ndef load_module(self, fullname):\nmod = super().load_module(fullname)\nmod."),n("strong",[e._v("path")]),e._v(" = [ self._baseurl ]\nmod."),n("strong",[e._v("package")]),e._v(" = fullname\ndef get_filename(self, fullname):\nreturn self._baseurl + '/' + '"),n("strong",[e._v("init")]),e._v(".py'\ndef is_package(self, fullname):\nreturn True")]),e._v(" "),n("h1",{attrs:{id:"utility-functions-for-installing-uninstalling-the-loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#utility-functions-for-installing-uninstalling-the-loader"}},[e._v("#")]),e._v(" Utility functions for installing/uninstalling the loader")]),e._v(" "),n("p",[e._v("_installed_meta_cache = { }\ndef install_meta(address):\nif address not in _installed_meta_cache:\nfinder = UrlMetaFinder(address)\n_installed_meta_cache[address] = finder\nsys.meta_path.append(finder)\nlog.debug('%r installed on sys.meta_path', finder)\ndef remove_meta(address):\nif address in _installed_meta_cache:\nfinder = _installed_meta_cache.pop(address)\nsys.meta_path.remove(finder)\nlog.debug('%r removed from sys.meta_path', finder)\n下面是一个交互会话，演示了如何使用前面的代码：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"importing-currently-fails"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#importing-currently-fails"}},[e._v("#")]),e._v(" importing currently fails")]),e._v(" "),n("p",[e._v('import fib\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nImportError: No module named 'fib'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"load-the-importer-and-retry-it-works"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#load-the-importer-and-retry-it-works"}},[e._v("#")]),e._v(" Load the importer and retry (it works)")]),e._v(" "),n("p",[e._v("import urlimport\nurlimport.install_meta('http://localhost:15000')\nimport fib\nI'm fib")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import spam\nI'm spam")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import grok.blah\nI'm grok."),n("strong",[e._v("init")]),e._v("\nI'm grok.blah")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("grok.blah."),n("strong",[e._v("file")]),e._v("\n'http://localhost:15000/grok/blah.py'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这个特殊的方案会安装一个特别的查找器 UrlMetaFinder 实例，作为 sys.\nmeta_path 中最后的实体。当模块被导入时，会依据 sys.meta_path 中的查找器定\n位模块。在这个例子中，UrlMetaFinder 实例是最后一个查找器方案，当模块在任何一\n个普通地方都找不到的时候就触发它。\n作为常见的实现方案，UrlMetaFinder 类包装在一个用户指定的 URL 上。在内部，\n查找器通过抓取指定 URL 的内容构建合法的链接集合。导入的时候，模块名会跟已有\n的链接作对比。如果找到了一个匹配的，一个单独的 UrlModuleLoader 类被用来从远\n程机器上加载源代码并创建最终的模块对象。这里缓存链接的一个原因是避免不必要\n的 HTTP 请求重复导入。\n自定义导入的第二种方法是编写一个钩子直接嵌入到 sys.path 变量中去，识别某\n些目录命名模式。在 urlimport.py 中添加如下的类和支持函数：")]),e._v(" "),n("h1",{attrs:{id:"urlimport-py-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#urlimport-py-2"}},[e._v("#")]),e._v(" urlimport.py")]),e._v(" "),n("h1",{attrs:{id:"include-previous-code-above"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#include-previous-code-above"}},[e._v("#")]),e._v(" ... include previous code above ...")]),e._v(" "),n("h1",{attrs:{id:"path-finder-class-for-a-url"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#path-finder-class-for-a-url"}},[e._v("#")]),e._v(" Path finder class for a URL")]),e._v(" "),n("p",[e._v("class UrlPathFinder(importlib.abc.PathEntryFinder):\ndef "),n("strong",[e._v("init")]),e._v("(self, baseurl):\nself._links = None\nself._loader = UrlModuleLoader(baseurl)\nself._baseurl = baseurl\ndef find_loader(self, fullname):\nlog.debug('find_loader: %r', fullname)\nparts = fullname.split('.')\nbasename = parts[-1]")]),e._v(" "),n("h1",{attrs:{id:"check-link-cache-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-link-cache-2"}},[e._v("#")]),e._v(" Check link cache")]),e._v(" "),n("p",[e._v("if self._links is None:\nself._links = [] # See discussion\nself._links = _get_links(self._baseurl)")]),e._v(" "),n("h1",{attrs:{id:"check-if-it-s-a-package-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-if-it-s-a-package-2"}},[e._v("#")]),e._v(" Check if it's a package")]),e._v(" "),n("p",[e._v("if basename in self._links:\nlog.debug('find_loader: trying package %r', fullname)\nfullurl = self._baseurl + '/' + basename")]),e._v(" "),n("h1",{attrs:{id:"attempt-to-load-the-package-which-accesses-init-py-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attempt-to-load-the-package-which-accesses-init-py-2"}},[e._v("#")]),e._v(" Attempt to load the package (which accesses "),n("strong",[e._v("init")]),e._v(".py)")]),e._v(" "),n("p",[e._v("loader = UrlPackageLoader(fullurl)\ntry:\nloader.load_module(fullname)\nlog.debug('find_loader: package %r loaded', fullname)\nexcept ImportError as e:\nlog.debug('find_loader: %r is a namespace package', fullname)\nloader = None\nreturn (loader, [fullurl])")]),e._v(" "),n("h1",{attrs:{id:"a-normal-module-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-normal-module-2"}},[e._v("#")]),e._v(" A normal module")]),e._v(" "),n("p",[e._v("filename = basename + '.py'\nif filename in self._links:\nlog.debug('find_loader: module %r found', fullname)\nreturn (self._loader, [])\nelse:\nlog.debug('find_loader: module %r not found', fullname)\nreturn (None, [])\ndef invalidate_caches(self):\nlog.debug('invalidating link cache')\nself._links = None")]),e._v(" "),n("h1",{attrs:{id:"check-path-to-see-if-it-looks-like-a-url"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-path-to-see-if-it-looks-like-a-url"}},[e._v("#")]),e._v(" Check path to see if it looks like a URL")]),e._v(" "),n("p",[e._v("_url_path_cache = {}\ndef handle_url(path):\nif path.startswith(('http://', 'https://')):\nlog.debug('Handle path? %s. [Yes]', path)\nif path in _url_path_cache:\nfinder = _url_path_cache[path]\nelse:\nfinder = UrlPathFinder(path)\n_url_path_cache[path] = finder\nreturn finder\nelse:\nlog.debug('Handle path? %s. [No]', path)\ndef install_path_hook():\nsys.path_hooks.append(handle_url)\nsys.path_importer_cache.clear()\nlog.debug('Installing handle_url')\ndef remove_path_hook():\nsys.path_hooks.remove(handle_url)\nsys.path_importer_cache.clear()\nlog.debug('Removing handle_url')\n要使用这个路径查找器，你只需要在 sys.path 中加入 URL 链接。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"initial-import-fails"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#initial-import-fails"}},[e._v("#")]),e._v(" Initial import fails")]),e._v(" "),n("p",[e._v('import fib\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nImportError: No module named 'fib'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"install-the-path-hook"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#install-the-path-hook"}},[e._v("#")]),e._v(" Install the path hook")]),e._v(" "),n("p",[e._v("import urlimport\nurlimport.install_path_hook()")]),e._v(" "),n("h1",{attrs:{id:"imports-still-fail-not-on-path"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#imports-still-fail-not-on-path"}},[e._v("#")]),e._v(" Imports still fail (not on path)")]),e._v(" "),n("p",[e._v('import fib\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nImportError: No module named 'fib'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"add-an-entry-to-sys-path-and-watch-it-work"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-an-entry-to-sys-path-and-watch-it-work"}},[e._v("#")]),e._v(" Add an entry to sys.path and watch it work")]),e._v(" "),n("p",[e._v("import sys\nsys.path.append('http://localhost:15000')\nimport fib\nI'm fib")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import grok.blah\nI'm grok."),n("strong",[e._v("init")]),e._v("\nI'm grok.blah")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("grok.blah."),n("strong",[e._v("file")]),e._v("\n'http://localhost:15000/grok/blah.py'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("关键点就是 handle_url() 函数，它被添加到了 sys.path_hooks 变量中。当 sys.\npath 的实体被处理时，会调用 sys.path_hooks 中的函数。如果任何一个函数返回了\n一个查找器对象，那么这个对象就被用来为 sys.path 实体加载模块。\n远程模块加载跟其他的加载使用方法几乎是一样的。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("fib\n<urlmodule 'fib' from 'http://localhost:15000/fib.py'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("fib."),n("strong",[e._v("name")]),e._v("\n'fib'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("fib."),n("strong",[e._v("file")]),e._v("\n'http://localhost:15000/fib.py'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import inspect\nprint(inspect.getsource(fib))")])])])]),e._v(" "),n("h1",{attrs:{id:"fib-py-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fib-py-3"}},[e._v("#")]),e._v(" fib.py")]),e._v(" "),n("p",[e._v('print("I\'m fib")\ndef fib(n):\nif n < 2:\nreturn 1\nelse:\nreturn fib(n-1) + fib(n-2)')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n在详细讨论之前，有点要强调的是，Python 的模块、包和导入机制是整个语言中\n最复杂的部分，即使经验丰富的 Python 程序员也很少能精通它们。我在这里推荐一些\n值的去读的文档和书籍，包括 importlib module 和 PEP 302. 文档内容在这里不会被重\n复提到，不过我在这里会讨论一些最重要的部分。\n首先，如果你想创建一个新的模块对象，使用 imp.new_module() 函数：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import imp\nm = imp.new_module('spam')\nm\n<module 'spam'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m."),n("strong",[e._v("name")]),e._v("\n'spam'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("模块对象通常有一些期望属性，包括 "),n("strong",[e._v("file")]),e._v(" （运行模块加载语句的文件名）和\n"),n("strong",[e._v("package")]),e._v(" (包名)。\n其次，模块会被解释器缓存起来。模块缓存可以在字典 sys.modules 中被找到。因\n为有了这个缓存机制，通常可以将缓存和模块的创建通过一个步骤完成：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sys\nimport imp\nm = sys.modules.setdefault('spam', imp.new_module('spam'))\nm\n<module 'spam'>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果给定模块已经存在那么就会直接获得已经被创建过的模块，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import math\nm = sys.modules.setdefault('math', imp.new_module('math'))\nm\n<module 'math' from '/usr/local/lib/python3.3/lib-dynload/math.so'>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m.sin(2)\n0.9092974268256817")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m.cos(2)\n-0.4161468365471424")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("由于创建模块很简单，很容易编写简单函数比如第一部分的 load_module() 函数。\n这个方案的一个缺点是很难处理复杂情况比如包的导入。为了处理一个包，你要重新实\n现普通 import 语句的底层逻辑（比如检查目录，查找 "),n("strong",[e._v("init")]),e._v(".py 文件，执行那些文\n件，设置路径等）。这个复杂性就是为什么最好直接扩展 import 语句而不是自定义函\n数的一个原因。\n扩展 import 语句很简单，但是会有很多移动操作。最高层上，导入操作被一个位\n于 sys.meta_path 列表中的“元路径”查找器处理。如果你输出它的值，会看到下面这\n样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from pprint import pprint\npprint(sys.meta_path)\n[<class '_frozen_importlib.BuiltinImporter'>,\n<class '_frozen_importlib.FrozenImporter'>,\n<class '_frozen_importlib.PathFinder'>]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("当执行一个语句比如 import fib 时，解释器会遍历 sys.mata_path 中的查找器对\n象，调用它们的 find_module() 方法定位正确的模块加载器。可以通过实验来看看：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("class Finder:\n... def find_module(self, fullname, path):\n... print('Looking for', fullname, path)\n... return None\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import sys\nsys.meta_path.insert(0, Finder()) # Insert as first entry\nimport math\nLooking for math None")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import types\nLooking for types None")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import threading\nLooking for threading None\nLooking for time None\nLooking for traceback None\nLooking for linecache None\nLooking for tokenize None\nLooking for token None")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("注意看 find_module() 方法是怎样在每一个导入就被触发的。这个方法中的 path\n参数的作用是处理包。多个包被导入，就是一个可在包的 "),n("strong",[e._v("path")]),e._v(" 属性中找到的路径\n列表。要找到包的子组件就要检查这些路径。比如注意对于 xml.etree 和 xml.etree.\nElementTree 的路径配置：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import xml.etree.ElementTree\nLooking for xml None\nLooking for xml.etree ['/usr/local/lib/python3.3/xml']\nLooking for xml.etree.ElementTree ['/usr/local/lib/python3.3/xml/etree']\nLooking for warnings None\nLooking for contextlib None\nLooking for xml.etree.ElementPath ['/usr/local/lib/python3.3/xml/etree']\nLooking for _elementtree None\nLooking for copy None\nLooking for org None\nLooking for pyexpat None\nLooking for ElementC14N None")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在 sys.meta_path 上查找器的位置很重要，将它从队头移到队尾，然后再试试导\n入看：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("del sys.meta_path[0]\nsys.meta_path.append(Finder())\nimport urllib.request\nimport datetime\n现在你看不到任何输出了，因为导入被 sys.meta_path 中的其他实体处理。这时\n候，你只有在导入不存在模块的时候才能看到它被触发：")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('import fib\nLooking for fib None\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nImportError: No module named 'fib'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import xml.superfast\nLooking for xml.superfast ['/usr/local/lib/python3.3/xml']\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nImportError: No module named 'xml.superfast'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你之前安装过一个捕获未知模块的查找器，这个是 UrlMetaFinder 类的关键。一\n个 UrlMetaFinder 实例被添加到 sys.meta_path 的末尾，作为最后一个查找器方案。\n如果被请求的模块名不能定位，就会被这个查找器处理掉。处理包的时候需要注意，在\npath 参数中指定的值需要被检查，看它是否以查找器中注册的 URL 开头。如果不是，\n该子模块必须归属于其他查找器并被忽略掉。\n对于包的其他处理可在 UrlPackageLoader 类中被找到。这个类不会导入包名，而\n是去加载对应的 "),n("strong",[e._v("init")]),e._v(".py 文件。它也会设置模块的 "),n("strong",[e._v("path")]),e._v(" 属性，这一步很重\n要，因为在加载包的子模块时这个值会被传给后面的 find_module() 调用。基于路径\n的导入钩子是这些思想的一个扩展，但是采用了另外的方法。我们都知道，sys.path\n是一个 Python 查找模块的目录列表，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from pprint import pprint\nimport sys\npprint(sys.path)\n['',\n'/usr/local/lib/python33.zip',\n'/usr/local/lib/python3.3',\n'/usr/local/lib/python3.3/plat-darwin',\n'/usr/local/lib/python3.3/lib-dynload',\n'/usr/local/lib/...3.3/site-packages']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在 sys.path 中的每一个实体都会被额外的绑定到一个查找器对象上。你可以通过\n查看 sys.path_importer_cache 去看下这些查找器：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("pprint(sys.path_importer_cache)\n{'.': FileFinder('.'),\n'/usr/local/lib/python3.3': FileFinder('/usr/local/lib/python3.3'),\n'/usr/local/lib/python3.3/': FileFinder('/usr/local/lib/python3.3/'),\n'/usr/local/lib/python3.3/collections': FileFinder('...python3.3/collections\n,\n→'),\n'/usr/local/lib/python3.3/encodings': FileFinder('...python3.3/encodings'),\n'/usr/local/lib/python3.3/lib-dynload': FileFinder('...python3.3/lib-dynload\n,\n→'),\n'/usr/local/lib/python3.3/plat-darwin': FileFinder('...python3.3/plat-darwin\n,\n→'),\n'/usr/local/lib/python3.3/site-packages': FileFinder('...python3.3/site-\n,\n→packages'),\n'/usr/local/lib/python33.zip': None}")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("sys.path_importer_cache 比 sys.path 会更大点，因为它会为所有被加载代码的\n目录记录它们的查找器。这包括包的子目录，这些通常在 sys.path 中是不存在的。\n要执行 import fib ，会顺序检查 sys.path 中的目录。对于每个目录，名称“fib”\n会被传给相应的 sys.path_importer_cache 中的查找器。这个可以让你创建自己的查\n找器并在缓存中放入一个实体。试试这个：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("class Finder:\n... def find_loader(self, name):\n... print('Looking for', name)\n... return (None, [])\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import sys")]),e._v(" "),n("h1",{attrs:{id:"add-a-debug-entry-to-the-importer-cache"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-a-debug-entry-to-the-importer-cache"}},[e._v("#")]),e._v(' Add a "debug" entry to the importer cache')]),e._v(" "),n("p",[e._v("sys.path_importer_cache['debug'] = Finder()")]),e._v(" "),n("h1",{attrs:{id:"add-a-debug-directory-to-sys-path"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-a-debug-directory-to-sys-path"}},[e._v("#")]),e._v(' Add a "debug" directory to sys.path')]),e._v(" "),n("p",[e._v("sys.path.insert(0, 'debug')\nimport threading\nLooking for threading\nLooking for time\nLooking for traceback\nLooking for linecache\nLooking for tokenize\nLooking for token")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在这里，你可以为名字“debug”创建一个新的缓存实体并将它设置成 sys.path\n上的第一个。在所有接下来的导入中，你会看到你的查找器被触发了。不过，由于它返\n回 (None, [])，那么处理进程会继续处理下一个实体。\nsys.path_importer_cache 的使用被一个存储在 sys.path_hooks 中的函数列表\n控制。试试下面的例子，它会清除缓存并给 sys.path_hooks 添加一个新的路径检查函\n数")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("sys.path_importer_cache.clear()\ndef check_path(path):\n... print('Checking', path)\n... raise ImportError()\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('sys.path_hooks.insert(0, check_path)\nimport fib\nChecked debug\nChecking .\nChecking /usr/local/lib/python33.zip\nChecking /usr/local/lib/python3.3\nChecking /usr/local/lib/python3.3/plat-darwin\nChecking /usr/local/lib/python3.3/lib-dynload\nChecking /Users/beazley/.local/lib/python3.3/site-packages\nChecking /usr/local/lib/python3.3/site-packages\nLooking for fib\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nImportError: No module named 'fib'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("正如你所见，check_path() 函数被每个 sys.path 中的实体调用。不顾，由于抛\n出了 ImportError 异常，啥都不会发生了（仅仅将检查转移到 sys.path_hooks 的下一\n个函数）。\n知道了怎样 sys.path 是怎样被处理的，你就能构建一个自定义路径检查函数来查\n找文件名，不然 URL。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def check_url(path):\n... if path.startswith('http://'):\n... return Finder()\n... else:\n... raise ImportError()\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sys.path.append('http://localhost:15000')\nsys.path_hooks[0] = check_url\nimport fib\nLooking for fib # Finder output!\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nImportError: No module named 'fib'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"notice-installation-of-finder-in-sys-path-importer-cache"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notice-installation-of-finder-in-sys-path-importer-cache"}},[e._v("#")]),e._v(" Notice installation of Finder in sys.path_importer_cache")]),e._v(" "),n("p",[e._v("sys.path_importer_cache['http://localhost:15000']\n<"),n("strong",[e._v("main")]),e._v(".Finder object at 0x10064c850>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这就是本节最后部分的关键点。事实上，一个用来在 sys.path 中查找 URL 的自定\n义路径检查函数已经构建完毕。当它们被碰到的时候，一个新的 UrlPathFinder 实例\n被创建并被放入 sys.path_importer_cache. 之后，所有需要检查 sys.path 的导入语\n句都会使用你的自定义查找器。\n基于路径导入的包处理稍微有点复杂，并且跟 find_loader() 方法返回值有关。\n对于简单模块，find_loader() 返回一个元组 (loader, None)，其中的 loader 是一个用\n于导入模块的加载器实例。\n对于一个普通的包，find_loader() 返回一个元组 (loader, path)，其中的 loader\n是一个用于导入包（并执行 "),n("strong",[e._v("init")]),e._v(".py）的加载器实例，path 是一个会初始化包的\n"),n("strong",[e._v("path")]),e._v(" 属性的目录列表。例如，如果基础 URL 是 http://localhost:15000 并且一个\n用户执行 import grok , 那么 find_loader() 返回的 path 就会是 [ ‘http://localhost:\n15000/grok’]\nfind_loader() 还要能处理一个命名空间包。一个命名空间包中有一个合法的包\n目录名，但是不存在 "),n("strong",[e._v("init")]),e._v(".py 文件。这样的话，find_loader() 必须返回一个元\n组 (None, path)，path 是一个目录列表，由它来构建包的定义有 "),n("strong",[e._v("init")]),e._v(".py 文件的\n"),n("strong",[e._v("path")]),e._v(" 属性。对于这种情况，导入机制会继续前行去检查 sys.path 中的目录。如\n果找到了命名空间包，所有的结果路径被加到一起来构建最终的命名空间包。关于命名\n空间包的更多信息请参考 10.5 小节。\n所有的包都包含了一个内部路径设置，可以在 "),n("strong",[e._v("path")]),e._v(" 属性中看到，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import xml.etree.ElementTree\nxml."),n("strong",[e._v("path")]),e._v("\n['/usr/local/lib/python3.3/xml']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("xml.etree."),n("strong",[e._v("path")]),e._v("\n['/usr/local/lib/python3.3/xml/etree']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("之前提到，"),n("strong",[e._v("path")]),e._v(" 的设置是通过 find_loader() 方法返回值控制的。不过，\n"),n("strong",[e._v("path")]),e._v(" 接下来也被 sys.path_hooks 中的函数处理。因此，但包的子组件被加载后，\n位于 "),n("strong",[e._v("path")]),e._v(" 中的实体会被 handle_url() 函数检查。这会导致新的 UrlPathFinder\n实例被创建并且被加入到 sys.path_importer_cache 中。\n还有个难点就是 handle_url() 函数以及它跟内部使用的 _get_links() 函数之间\n的交互。如果你的查找器实现需要使用到其他模块（比如 urllib.request），有可能这些\n模块会在查找器操作期间进行更多的导入。它可以导致 handle_url() 和其他查找器部\n分陷入一种递归循环状态。为了解释这种可能性，实现中有一个被创建的查找器缓存\n（每一个 URL 一个）。它可以避免创建重复查找器的问题。另外，下面的代码片段可以\n确保查找器不会在初始化链接集合的时候响应任何导入请求：")]),e._v(" "),n("h1",{attrs:{id:"check-link-cache-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-link-cache-3"}},[e._v("#")]),e._v(" Check link cache")]),e._v(" "),n("p",[e._v("if self._links is None:\nself._links = [] # See discussion\nself._links = _get_links(self._baseurl)\n最后，查找器的 invalidate_caches() 方法是一个工具方法，用来清理内部缓\n存。这个方法再用户调用 importlib.invalidate_caches() 的时候被触发。如果你想\n让 URL 导入者重新读取链接列表的话可以使用它。\n对比下两种方案（修改 sys.meta_path 或使用一个路径钩子）。使用 sys.meta_path\n的导入者可以按照自己的需要自由处理模块。例如，它们可以从数据库中导入或以不同\n于一般模块/包处理方式导入。这种自由同样意味着导入者需要自己进行内部的一些管\n理。另外，基于路径的钩子只是适用于对 sys.path 的处理。通过这种扩展加载的模块跟\n普通方式加载的特性是一样的。\n如果到现在为止你还是不是很明白，那么可以通过增加一些日志打印来测试下本\n节。像下面这样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import logging\nlogging.basicConfig(level=logging.DEBUG)\nimport urlimport\nurlimport.install_path_hook()\nDEBUG:urlimport:Installing handle_url")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('import fib\nDEBUG:urlimport:Handle path? /usr/local/lib/python33.zip. [No]\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nImportError: No module named 'fib'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import sys\nsys.path.append('http://localhost:15000')\nimport fib\nDEBUG:urlimport:Handle path? http://localhost:15000. [Yes]\nDEBUG:urlimport:Getting links from http://localhost:15000\nDEBUG:urlimport:links: {'spam.py', 'fib.py', 'grok'}\nDEBUG:urlimport:find_loader: 'fib'\nDEBUG:urlimport:find_loader: module 'fib' found\nDEBUG:urlimport:loader: reading 'http://localhost:15000/fib.py'\nDEBUG:urlimport:loader: 'http://localhost:15000/fib.py' loaded\nI'm fib")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后，建议你花点时间看看 PEP 302 以及 importlib 的文档。\n10.12 导入模块的同时修改模块\n问题\n你想给某个已存在模块中的函数添加装饰器。不过，前提是这个模块已经被导入并\n且被使用过。\n解决方案\n这里问题的本质就是你想在模块被加载时执行某个动作。可能是你想在一个模块\n被加载时触发某个回调函数来通知你。\n这个问题可以使用 10.11 小节中同样的导入钩子机制来实现。下面是一个可能的方\n案：")]),e._v(" "),n("h1",{attrs:{id:"postimport-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#postimport-py"}},[e._v("#")]),e._v(" postimport.py")]),e._v(" "),n("p",[e._v("import importlib\nimport sys\nfrom collections import defaultdict\n_post_import_hooks = defaultdict(list)\nclass PostImportFinder:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._skip = set()\ndef find_module(self, fullname, path=None):\nif fullname in self._skip:\nreturn None\nself._skip.add(fullname)\nreturn PostImportLoader(self)\nclass PostImportLoader:\ndef "),n("strong",[e._v("init")]),e._v("(self, finder):\nself._finder = finder\ndef load_module(self, fullname):\nimportlib.import_module(fullname)\nmodule = sys.modules[fullname]\nfor func in _post_import_hooks[fullname]:\nfunc(module)\nself._finder._skip.remove(fullname)\nreturn module\ndef when_imported(fullname):\ndef decorate(func):\nif fullname in sys.modules:\nfunc(sys.modules[fullname])\nelse:\n_post_import_hooks[fullname].append(func)\nreturn func\nreturn decorate\nsys.meta_path.insert(0, PostImportFinder())\n这样，你就可以使用 when_imported() 装饰器了，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from postimport import when_imported\n@when_imported('threading')\n... def warn_threads(mod):\n... print('Threads? Are you crazy?')\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import threading\nThreads? Are you crazy?")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("作为一个更实际的例子，你可能想在已存在的定义上面添加装饰器，如下所示：\nfrom functools import wraps\nfrom postimport import when_imported\ndef logged(func):\n@wraps(func)\ndef wrapper(*args, **kwargs):\nprint('Calling', func."),n("strong",[e._v("name")]),e._v(", args, kwargs)\nreturn func(*args, **kwargs)\nreturn wrapper")]),e._v(" "),n("h1",{attrs:{id:"example-17"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-17"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v('@when_imported(\'math\')\ndef add_logging(mod):\nmod.cos = logged(mod.cos)\nmod.sin = logged(mod.sin)\n讨论\n本节技术依赖于 10.11 小节中讲述过的导入钩子，并稍作修改。\n@when_imported 装饰器的作用是注册在导入时被激活的处理器函数。该装饰器检查\nsys.modules 来查看模块是否真的已经被加载了。如果是的话，该处理器被立即调用。不然，\n处理器被添加到 _post_import_hooks 字典中的一个列表中去。_post_import_hooks\n的作用就是收集所有的为每个模块注册的处理器对象。一个模块可以注册多个处理器。\n要让模块导入后触发添加的动作，PostImportFinder 类被设置为 sys.meta_path\n第一个元素。它会捕获所有模块导入操作。\n本节中的 PostImportFinder 的作用并不是加载模块，而是自带导入完成\n后触发相应的动作。实际的导入被委派给位于 sys.meta_path 中的其他查找器。\nPostImportLoader 类中的 imp.import_module() 函数被递归的调用。为了避免陷入无\n线循环，PostImportFinder 保持了一个所有被加载过的模块集合。如果一个模块名存\n在就会直接被忽略掉。\n当一个模块被 imp.import_module() 加载后，所有在 _post_import_hooks 被注\n册的处理器被调用，使用新加载模块作为一个参数。\n有一点需要注意的是本机不适用于那些通过 imp.reload() 被显式加载的模块。也\n就是说，如果你加载一个之前已被加载过的模块，那么导入处理器将不会再被触发。另\n外，要是你从 sys.modules 中删除模块然后再重新导入，处理器又会再一次触发。\n更多关于导入后钩子信息请参考 PEP 369.\n10.13 安装私有的包\n问题\n你想要安装一个第三方包，但是没有权限将它安装到系统 Python 库中去。或者，\n你可能想要安装一个供自己使用的包，而不是系统上面所有用户。\n解决方案\nPython 有一个用户安装目录，通常类似”~/.local/lib/python3.3/site-packages”。\n要强制在这个目录中安装包，可使用安装选项“–user”。例如：\npython3 setup.py install --user\n或者\npip install --user packagename\n在 sys.path 中用户的“site-packages”目录位于系统的“site-packages”目录之前。\n因此，你安装在里面的包就比系统已安装的包优先级高（尽管并不总是这样，要取决于\n第三方包管理器，比如 distribute 或 pip）。\n讨论\n通常包会被安装到系统的 site-packages 目录中去，路径类似“/usr/local/lib/\npython3.3/site-packages”。不过，这样做需要有管理员权限并且使用 sudo 命令。就算\n你有这样的权限去执行命令，使用 sudo 去安装一个新的，可能没有被验证过的包有时\n候也不安全。\n安装包到用户目录中通常是一个有效的方案，它允许你创建一个自定义安装。\n另外，你还可以创建一个虚拟环境，这个我们在下一节会讲到。\n10.14 创建新的 Python 环境\n问题\n你想创建一个新的 Python 环境，用来安装模块和包。不过，你不想安装一个新的\nPython 克隆，也不想对系统 Python 环境产生影响。\n解决方案\n你可以使用 pyvenv 命令创建一个新的“虚拟”环境。这个命令被安装在 Python\n解释器同一目录，或 Windows 上面的 Scripts 目录中。下面是一个例子：\nbash % pyvenv Spam\nbash %\n传给 pyvenv 命令的名字是将要被创建的目录名。当被创建后，Span 目录像下面\n这样：\nbash % cd Spam\nbash % ls\nbin include lib pyvenv.cfg\nbash %在 bin 目录中，你会找到一个可以使用的 Python 解释器：\nbash % Spam/bin/python3\nPython 3.3.0 (default, Oct 6 2012, 15:45:22)\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType "help", "copyright", "credits" or "license" for more information.')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from pprint import pprint\nimport sys\npprint(sys.path)\n['', '/usr/local/lib/python33.zip', '/usr/local/lib/python3.3', '/usr/local/lib/python3.3/plat-darwin', '/usr/local/lib/python3.3/lib-dynload', '/Users/beazley/Spam/lib/python3.3/site-packages']")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这个解释器的特点就是他的 site-packages 目录被设置为新创建的环境。如果你要\n安装第三方包，它们会被安装在那里，而不是通常系统的 site-packages 目录。\n讨论\n创建虚拟环境通常是为了安装和管理第三方包。正如你在例子中看到的那样，sys.\npath 变量包含来自于系统 Python 的目录，而 site-packages 目录已经被重定位到一个\n新的目录。\n有了一个新的虚拟环境，下一步就是安装一个包管理器，比如 distribute 或 pip。\n但安装这样的工具和包的时候，你需要确保你使用的是虚拟环境的解释器。它会将包安\n装到新创建的 site-packages 目录中去。\n尽管一个虚拟环境看上去是 Python 安装的一个复制，不过它实际上只包含了少量\n几个文件和一些符号链接。所有标准库函文件和可执行解释器都来自原来的 Python 安\n装。因此，创建这样的环境是很容易的，并且几乎不会消耗机器资源。\n默认情况下，虚拟环境是空的，不包含任何额外的第三方库。如果你想将一个已经\n安装的包作为虚拟环境的一部分，可以使用“–system-site-packages”选项来创建虚拟\n环境，例如：\nbash % pyvenv --system-site-packages Spam\nbash %\n跟多关于 pyvenv 和虚拟环境的信息可以参考 PEP 405.\n10.15 分发包\n问题\n你已经编写了一个有用的库，想将它分享给其他人。\n解决方案\n如果你想分发你的代码，第一件事就是给它一个唯一的名字，并且清理它的目录结\n构。例如，一个典型的函数库包会类似下面这样：\nprojectname/\nREADME.txt\nDoc/\ndocumentation.txt\nprojectname/\n"),n("strong",[e._v("init")]),e._v(".py\nfoo.py\nbar.py\nutils/\n"),n("strong",[e._v("init")]),e._v(".py\nspam.py\ngrok.py\nexamples/\nhelloworld.py\n...\n要让你的包可以发布出去，首先你要编写一个 setup.py ，类似下面这样：")]),e._v(" "),n("h1",{attrs:{id:"setup-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setup-py"}},[e._v("#")]),e._v(" setup.py")]),e._v(" "),n("p",[e._v("from distutils.core import setup\nsetup(name='projectname',\nversion='1.0',\nauthor='Your Name',\nauthor_email='you@youraddress.com',\nurl='http://www.you.com/projectname',\npackages=['projectname', 'projectname.utils'],\n)\n下一步，就是创建一个 MANIFEST.in 文件，列出所有在你的包中需要包含进来的\n非源码文件：")]),e._v(" "),n("h1",{attrs:{id:"manifest-in"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#manifest-in"}},[e._v("#")]),e._v(" MANIFEST.in")]),e._v(" "),n("p",[e._v("include *.txt\nrecursive-include examples *\nrecursive-include Doc *\n确保 setup.py 和 MANIFEST.in 文件放在你的包的最顶级目录中。一旦你已经做\n了这些，你就可以像下面这样执行命令来创建一个源码分发包了：\n% bash python3 setup.py sdist\n它会创建一个文件比如”projectname-1.0.zip”或“projectname-1.0.tar.gz”, 具体\n依赖于你的系统平台。如果一切正常，这个文件就可以发送给别人使用或者上传至\nPython Package Index.\n讨论\n对于纯 Python 代码，编写一个普通的 setup.py 文件通常很简单。一个可能的问\n题是你必须手动列出所有构成包源码的子目录。一个常见错误就是仅仅只列出一个包\n的最顶级目录，忘记了包含包的子组件。这也是为什么在 setup.py 中对于包的说明包\n含了列表 packages=['projectname', 'projectname.utils']\n大部分 Python 程序员都知道，有很多第三方包管理器供选择，包括 setuptools、\ndistribute 等等。有些是为了替代标准库中的 distutils。注意如果你依赖这些包，用户可\n能不能安装你的软件，除非他们已经事先安装过所需要的包管理器。正因如此，你更应\n该时刻记住越简单越好的道理。最好让你的代码使用标准的 Python 3 安装。如果其他\n包也需要的话，可以通过一个可选项来支持。\n对于涉及到 C 扩展的代码打包与分发就更复杂点了。第 15 章对关于 C 扩展的这\n方面知识有一些详细讲解，特别是在 15.2 小节中。")]),e._v(" "),n("h2",{attrs:{id:"第十一章-网络与-web-编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第十一章-网络与-web-编程"}},[e._v("#")]),e._v(" 第十一章：网络与 Web 编程")]),e._v(" "),n("p",[e._v("本章是关于在网络应用和分布式应用中使用的各种主题。主题划分为使用 Python\n编写客户端程序来访问已有的服务，以及使用 Python 实现网络服务端程序。也给出了\n一些常见的技术，用于编写涉及协同或通信的的代码。\n11.1 作为客户端与 HTTP 服务交互\n问题\n你需要通过 HTTP 协议以客户端的方式访问多种服务。例如，下载数据或者与基\n于 REST 的 API 进行交互。\n解决方案\n对于简单的事情来说，通常使用 urllib.request 模块就够了。例如，发送一个简\n单的 HTTP GET 请求到远程的服务上，可以这样做：\nfrom urllib import request, parse")]),e._v(" "),n("h1",{attrs:{id:"base-url-being-accessed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#base-url-being-accessed"}},[e._v("#")]),e._v(" Base URL being accessed")]),e._v(" "),n("p",[e._v("url = 'http://httpbin.org/get'")]),e._v(" "),n("h1",{attrs:{id:"dictionary-of-query-parameters-if-any"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dictionary-of-query-parameters-if-any"}},[e._v("#")]),e._v(" Dictionary of query parameters (if any)")]),e._v(" "),n("p",[e._v("parms = { 'name1' : 'value1', 'name2' : 'value2' }")]),e._v(" "),n("h1",{attrs:{id:"encode-the-query-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#encode-the-query-string"}},[e._v("#")]),e._v(" Encode the query string")]),e._v(" "),n("p",[e._v("querystring = parse.urlencode(parms)")]),e._v(" "),n("h1",{attrs:{id:"make-a-get-request-and-read-the-response"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-get-request-and-read-the-response"}},[e._v("#")]),e._v(" Make a GET request and read the response")]),e._v(" "),n("p",[e._v("u = request.urlopen(url+'?' + querystring)\nresp = u.read()\n如果你需要使用 POST 方法在请求主体中发送查询参数，可以将参数编码后作为\n可选参数提供给 urlopen() 函数，就像这样：\nfrom urllib import request, parse")]),e._v(" "),n("h1",{attrs:{id:"base-url-being-accessed-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#base-url-being-accessed-2"}},[e._v("#")]),e._v(" Base URL being accessed")]),e._v(" "),n("p",[e._v("url = 'http://httpbin.org/post'")]),e._v(" "),n("h1",{attrs:{id:"dictionary-of-query-parameters-if-any-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dictionary-of-query-parameters-if-any-2"}},[e._v("#")]),e._v(" Dictionary of query parameters (if any)")]),e._v(" "),n("p",[e._v("parms = { 'name1' : 'value1',\n'name2' : 'value2' }")]),e._v(" "),n("h1",{attrs:{id:"encode-the-query-string-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#encode-the-query-string-2"}},[e._v("#")]),e._v(" Encode the query string")]),e._v(" "),n("p",[e._v("querystring = parse.urlencode(parms)")]),e._v(" "),n("h1",{attrs:{id:"make-a-post-request-and-read-the-response"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-post-request-and-read-the-response"}},[e._v("#")]),e._v(" Make a POST request and read the response")]),e._v(" "),n("p",[e._v("u = request.urlopen(url, querystring.encode('ascii'))\nresp = u.read()\n如果你需要在发出的请求中提供一些自定义的 HTTP 头，例如修改 user-agent 字 段, 可以创建一个包含字段值的字典，并创建一个 Request 实例然后将其传给 urlopen()\n，如下：\nfrom urllib import request, parse\n...")]),e._v(" "),n("h1",{attrs:{id:"extra-headers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#extra-headers"}},[e._v("#")]),e._v(" Extra headers")]),e._v(" "),n("p",[e._v("headers = { 'User-agent' : 'none/ofyourbusiness', 'Spam' : 'Eggs' }\nreq = request.Request(url, querystring.encode('ascii'), headers=headers)")]),e._v(" "),n("h1",{attrs:{id:"make-a-request-and-read-the-response"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-a-request-and-read-the-response"}},[e._v("#")]),e._v(" Make a request and read the response")]),e._v(" "),n("p",[e._v("u = request.urlopen(req)\nresp = u.read()\n如果需要交互的服务比上面的例子都要复杂，也许应该去看看 requests 库（https:\n//pypi.python.org/pypi/requests）。例如，下面这个示例采用 requests 库重新实现了上\n面的操作：\nimport requests")]),e._v(" "),n("h1",{attrs:{id:"base-url-being-accessed-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#base-url-being-accessed-3"}},[e._v("#")]),e._v(" Base URL being accessed")]),e._v(" "),n("p",[e._v("url = 'http://httpbin.org/post'")]),e._v(" "),n("h1",{attrs:{id:"dictionary-of-query-parameters-if-any-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dictionary-of-query-parameters-if-any-3"}},[e._v("#")]),e._v(" Dictionary of query parameters (if any)")]),e._v(" "),n("p",[e._v("parms = { 'name1' : 'value1', 'name2' : 'value2' }")]),e._v(" "),n("h1",{attrs:{id:"extra-headers-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#extra-headers-2"}},[e._v("#")]),e._v(" Extra headers")]),e._v(" "),n("p",[e._v("headers = { 'User-agent' : 'none/ofyourbusiness', 'Spam' : 'Eggs' }\nresp = requests.post(url, data=parms, headers=headers)")]),e._v(" "),n("h1",{attrs:{id:"decoded-text-returned-by-the-request"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decoded-text-returned-by-the-request"}},[e._v("#")]),e._v(" Decoded text returned by the request")]),e._v(" "),n("p",[e._v("text = resp.text\n关于 requests 库，一个值得一提的特性就是它能以多种方式从请求中返回响应结\n果的内容。从上面的代码来看，resp.text 带给我们的是以 Unicode 解码的响应文本。\n但是，如果去访问 resp.content ，就会得到原始的二进制数据。另一方面，如果访问\nresp.json ，那么就会得到 JSON 格式的响应内容。\n下面这个示例利用 requests 库发起一个 HEAD 请求，并从响应中提取出一些\nHTTP 头数据的字段：\nimport requests\nresp = requests.head('http://www.python.org/index.html')\nstatus = resp.status_code\nlast_modified = resp.headers['last-modified']\ncontent_type = resp.headers['content-type']\ncontent_length = resp.headers['content-length']\n下面是一个利用 requests 通过基本认证登录 Pypi 的例子：\nimport requests\nresp = requests.get('http://pypi.python.org/pypi?:action=login',\nauth=('user','password'))\n下面是一个利用 requests 将 HTTP cookies 从一个请求传递到另一个的例子：\nimport requests")]),e._v(" "),n("h1",{attrs:{id:"first-request"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#first-request"}},[e._v("#")]),e._v(" First request")]),e._v(" "),n("p",[e._v("resp1 = requests.get(url)\n...")]),e._v(" "),n("h1",{attrs:{id:"second-requests-with-cookies-received-on-first-requests"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#second-requests-with-cookies-received-on-first-requests"}},[e._v("#")]),e._v(" Second requests with cookies received on first requests")]),e._v(" "),n("p",[e._v("resp2 = requests.get(url, cookies=resp1.cookies)\n最后但并非最不重要的一个例子是用 requests 上传内容：\nimport requests\nurl = 'http://httpbin.org/post'\nfiles = { 'file': ('data.csv', open('data.csv', 'rb')) }\nr = requests.post(url, files=files)\n讨论\n对于真的很简单 HTTP 客户端代码，用内置的 urllib 模块通常就足够了。但是，\n如果你要做的不仅仅只是简单的 GET 或 POST 请求，那就真的不能再依赖它的功能\n了。这时候就是第三方模块比如 requests 大显身手的时候了。\n例如，如果你决定坚持使用标准的程序库而不考虑像 requests 这样的第三方库，\n那么也许就不得不使用底层的 http.client 模块来实现自己的代码。比方说，下面的\n代码展示了如何执行一个 HEAD 请求：\nfrom http.client import HTTPConnection\nfrom urllib import parse\nc = HTTPConnection('www.python.org', 80) c.request('HEAD', '/index.html')\nresp = c.getresponse()\nprint('Status', resp.status)\nfor name, value in resp.getheaders():\nprint(name, value)\n同样地，如果必须编写涉及代理、认证、cookies 以及其他一些细节方面的代码，那\n么使用 urllib 就显得特别别扭和啰嗦。比方说，下面这个示例实现在 Python 包索引\n上的认证：\nimport urllib.request\nauth = urllib.request.HTTPBasicAuthHandler()\nauth.add_password('pypi','http://pypi.python.org','username','password')\nopener = urllib.request.build_opener(auth)\nr = urllib.request.Request('http://pypi.python.org/pypi?:action=login') u = opener.open(r)\nresp = u.read()")]),e._v(" "),n("h1",{attrs:{id:"from-here-you-can-access-more-pages-using-opener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#from-here-you-can-access-more-pages-using-opener"}},[e._v("#")]),e._v(" From here. You can access more pages using opener")]),e._v(" "),n("p",[e._v("...\n坦白说，所有的这些操作在 requests 库中都变得简单的多。\n在开发过程中测试 HTTP 客户端代码常常是很令人沮丧的，因为所有棘手的细节\n问题都需要考虑（例如 cookies、认证、HTTP 头、编码方式等）。要完成这些任务，考\n虑使用 httpbin 服务（http://httpbin.org）。这个站点会接收发出的请求，然后以 JSON\n的形式将相应信息回传回来。下面是一个交互式的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import requests\nr = requests.get('http://httpbin.org/get?name=Dave&n=37',\n... headers = { 'User-agent': 'goaway/1.0' })")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("resp = r.json\nresp['headers']\n{'User-Agent': 'goaway/1.0', 'Content-Length': '', 'Content-Type': '',\n'Accept-Encoding': 'gzip, deflate, compress', 'Connection':\n'keep-alive', 'Host': 'httpbin.org', 'Accept': '"),n("em",[e._v("/")]),e._v("'}")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("resp['args']\n{'name': 'Dave', 'n': '37'}")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在要同一个真正的站点进行交互前，先在 httpbin.org 这样的网站上做实验常常是\n可取的办法。尤其是当我们面对 3 次登录失败就会关闭账户这样的风险时尤为有用（不\n要尝试自己编写 HTTP 认证客户端来登录你的银行账户）。\n尽管本节没有涉及，request 库还对许多高级的 HTTP 客户端协议提供了支持，\n比如 OAuth。requests 模块的文档（http://docs.python-requests.org) 质量很高（坦白\n说比在这短短的一节的篇幅中所提供的任何信息都好），可以参考文档以获得更多地信\n息。\n11.2 创建 TCP 服务器\n问题\n你想实现一个服务器，通过 TCP 协议和客户端通信。\n解决方案\n创建一个 TCP 服务器的一个简单方法是使用 socketserver 库。例如，下面是一\n个简单的应答服务器：\nfrom socketserver import BaseRequestHandler, TCPServer\nclass EchoHandler(BaseRequestHandler):\ndef handle(self):\nprint('Got connection from', self.client_address)\nwhile True:\nmsg = self.request.recv(8192)\nif not msg:\nbreak\nself.request.send(msg)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nserv = TCPServer(('', 20000), EchoHandler)\nserv.serve_forever()\n在这段代码中，你定义了一个特殊的处理类，实现了一个 handle() 方法，用来为\n客户端连接服务。request 属性是客户端 socket，client_address 有客户端地址。为\n了测试这个服务器，运行它并打开另外一个 Python 进程连接这个服务器：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from socket import socket, AF_INET, SOCK_STREAM\ns = socket(AF_INET, SOCK_STREAM)\ns.connect(('localhost', 20000))\ns.send(b'Hello') 5\ns.recv(8192)\nb'Hello'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("很 多 时 候， 可 以 很 容 易 的 定 义 一 个 不 同 的 处 理 器。 下 面 是 一 个 使 用\nStreamRequestHandler 基类将一个类文件接口放置在底层 socket 上的例子：\nfrom socketserver import StreamRequestHandler, TCPServer\nclass EchoHandler(StreamRequestHandler):\ndef handle(self):\nprint('Got connection from', self.client_address)")]),e._v(" "),n("h1",{attrs:{id:"self-rfile-is-a-file-like-object-for-reading"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#self-rfile-is-a-file-like-object-for-reading"}},[e._v("#")]),e._v(" self.rfile is a file-like object for reading")]),e._v(" "),n("p",[e._v("for line in self.rfile:")]),e._v(" "),n("h1",{attrs:{id:"self-wfile-is-a-file-like-object-for-writing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#self-wfile-is-a-file-like-object-for-writing"}},[e._v("#")]),e._v(" self.wfile is a file-like object for writing")]),e._v(" "),n("p",[e._v("self.wfile.write(line)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nserv = TCPServer(('', 20000), EchoHandler)\nserv.serve_forever()\n讨论\nsocketserver 可以让我们很容易的创建简单的 TCP 服务器。但是，你需要注意\n的是，默认情况下这种服务器是单线程的，一次只能为一个客户端连接服务。如果你想\n处理多个客户端，可以初始化一个 ForkingTCPServer 或者是 ThreadingTCPServer 对\n象。例如：\nfrom socketserver import ThreadingTCPServer\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nserv = ThreadingTCPServer(('', 20000), EchoHandler)\nserv.serve_forever()\n使用 fork 或线程服务器有个潜在问题就是它们会为每个客户端连接创建一个新的\n进程或线程。由于客户端连接数是没有限制的，因此一个恶意的黑客可以同时发送大量\n的连接让你的服务器奔溃。\n如果你担心这个问题，你可以创建一个预先分配大小的工作线程池或进程池。你先\n创建一个普通的非线程服务器，然后在一个线程池中使用 serve_forever() 方法来启\n动它们。\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nfrom threading import Thread\nNWORKERS = 16\nserv = TCPServer(('', 20000), EchoHandler)\nfor n in range(NWORKERS):\nt = Thread(target=serv.serve_forever)\nt.daemon = True\nt.start()\nserv.serve_forever()\n一般来讲，一个 TCPServer 在实例化的时候会绑定并激活相应的 socket\n。不过，有时候你想通过设置某些选项去调整底下的 socket‘ ，可以设置参数\nbind_and_activate=False 。如下：\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nserv = TCPServer(('', 20000), EchoHandler, bind_and_activate=False)")]),e._v(" "),n("h1",{attrs:{id:"set-up-various-socket-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-up-various-socket-options"}},[e._v("#")]),e._v(" Set up various socket options")]),e._v(" "),n("p",[e._v("serv.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)")]),e._v(" "),n("h1",{attrs:{id:"bind-and-activate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bind-and-activate"}},[e._v("#")]),e._v(" Bind and activate")]),e._v(" "),n("p",[e._v("serv.server_bind()\nserv.server_activate()\nserv.serve_forever()\n上面的 socket 选项是一个非常普遍的配置项，它允许服务器重新绑定一个之前使\n用过的端口号。由于要被经常使用到，它被放置到类变量中，可以直接在 TCPServer 上\n面设置。在实例化服务器的时候去设置它的值，如下所示：\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nTCPServer.allow_reuse_address = True\nserv = TCPServer(('', 20000), EchoHandler)\nserv.serve_forever()\n在上面示例中，我们演示了两种不同的处理器基类（BaseRequestHandler 和\nStreamRequestHandler ）。StreamRequestHandler 更加灵活点，能通过设置其他的类\n变量来支持一些新的特性。比如：\nimport socket\nclass EchoHandler(StreamRequestHandler):")]),e._v(" "),n("h1",{attrs:{id:"optional-settings-defaults-shown"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#optional-settings-defaults-shown"}},[e._v("#")]),e._v(" Optional settings (defaults shown)")]),e._v(" "),n("p",[e._v("timeout = 5 # Timeout on all socket operations\nrbufsize = -1 # Read buffer size\nwbufsize = 0 # Write buffer size\ndisable_nagle_algorithm = False # Sets TCP_NODELAY socket option\ndef handle(self):\nprint('Got connection from', self.client_address)\ntry:\nfor line in self.rfile:")]),e._v(" "),n("h1",{attrs:{id:"self-wfile-is-a-file-like-object-for-writing-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#self-wfile-is-a-file-like-object-for-writing-2"}},[e._v("#")]),e._v(" self.wfile is a file-like object for writing")]),e._v(" "),n("p",[e._v("self.wfile.write(line)\nexcept socket.timeout:\nprint('Timed out!')\n最后，还需要注意的是巨大部分 Python 的高层网络模块（比如 HTTP、XML-RPC\n等）都是建立在 socketserver 功能之上。也就是说，直接使用 socket 库来实现服务\n器也并不是很难。下面是一个使用 socket 直接编程实现的一个服务器简单例子：\nfrom socket import socket, AF_INET, SOCK_STREAM\ndef echo_handler(address, client_sock):\nprint('Got connection from {}'.format(address))\nwhile True:\nmsg = client_sock.recv(8192)\nif not msg:\nbreak\nclient_sock.sendall(msg)\nclient_sock.close()\ndef echo_server(address, backlog=5):\nsock = socket(AF_INET, SOCK_STREAM)\nsock.bind(address)\nsock.listen(backlog)\nwhile True:\nclient_sock, client_addr = sock.accept()\necho_handler(client_addr, client_sock)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\necho_server(('', 20000))\n11.3 创建 UDP 服务器\n问题\n你想实现一个基于 UDP 协议的服务器来与客户端通信。\n解决方案\n跟 TCP 一样，UDP 服务器也可以通过使用 socketserver 库很容易的被创建。例\n如，下面是一个简单的时间服务器：\nfrom socketserver import BaseRequestHandler, UDPServer\nimport time\nclass TimeHandler(BaseRequestHandler):\ndef handle(self):\nprint('Got connection from', self.client_address)")]),e._v(" "),n("h1",{attrs:{id:"get-message-and-client-socket"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-message-and-client-socket"}},[e._v("#")]),e._v(" Get message and client socket")]),e._v(" "),n("p",[e._v("msg, sock = self.request\nresp = time.ctime()\nsock.sendto(resp.encode('ascii'), self.client_address)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nserv = UDPServer(('', 20000), TimeHandler)\nserv.serve_forever()\n跟之前一样，你先定义一个实现 handle() 特殊方法的类，为客户端连接服务。这\n个类的 request 属性是一个包含了数据报和底层 socket 对象的元组。client_address\n包含了客户端地址。\n我们来测试下这个服务器，首先运行它，然后打开另外一个 Python 进程向服务器\n发送消息：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from socket import socket, AF_INET, SOCK_DGRAM\ns = socket(AF_INET, SOCK_DGRAM)\ns.sendto(b'', ('localhost', 20000))\n0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.recvfrom(8192)\n(b'Wed Aug 15 20:35:08 2012', ('127.0.0.1', 20000))")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n一个典型的 UDP 服务器接收到达的数据报 (消息) 和客户端地址。如果服务器需\n要做应答，它要给客户端回发一个数据报。对于数据报的传送，你应该使用 socket 的\nsendto() 和 recvfrom() 方法。尽管传统的 send() 和 recv() 也可以达到同样的效果，\n但是前面的两个方法对于 UDP 连接而言更普遍。\n由于没有底层的连接，UPD 服务器相对于 TCP 服务器来讲实现起来更加简单。不\n过，UDP 天生是不可靠的（因为通信没有建立连接，消息可能丢失）。因此需要由你自\n己来决定该怎样处理丢失消息的情况。这个已经不在本书讨论范围内了，不过通常来\n说，如果可靠性对于你程序很重要，你需要借助于序列号、重试、超时以及一些其他方\n法来保证。UDP 通常被用在那些对于可靠传输要求不是很高的场合。例如，在实时应\n用如多媒体流以及游戏领域，无需返回恢复丢失的数据包（程序只需简单的忽略它并\n继续向前运行）。\nUDPServer 类是单线程的，也就是说一次只能为一个客户端连接服务。实际使用\n中，这个无论是对于 UDP 还是 TCP 都不是什么大问题。如果你想要并发操作，可以\n实例化一个 ForkingUDPServer 或 ThreadingUDPServer 对象：\nfrom socketserver import ThreadingUDPServer\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nserv = ThreadingUDPServer(('',20000), TimeHandler)\nserv.serve_forever()\n直接使用 socket 来实现一个 UDP 服务器也不难，下面是一个例子：\nfrom socket import socket, AF_INET, SOCK_DGRAM\nimport time\ndef time_server(address):\nsock = socket(AF_INET, SOCK_DGRAM)\nsock.bind(address)\nwhile True:\nmsg, addr = sock.recvfrom(8192)\nprint('Got message from', addr)\nresp = time.ctime()\nsock.sendto(resp.encode('ascii'), addr)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\ntime_server(('', 20000))\n11.4 通过 CIDR 地址生成对应的 IP 地址集\n问题\n你有一个 CIDR 网络地址比如“123.45.67.89/27”，你想将其转换成它所代表的所\n有 IP （比如，“123.45.67.64”, “123.45.67.65”, …, “123.45.67.95”)）\n解决方案\n可以使用 ipaddress 模块很容易的实现这样的计算。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import ipaddress\nnet = ipaddress.ip_network('123.45.67.64/27')\nnet\nIPv4Network('123.45.67.64/27')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for a in net:\n... print(a)\n...\n123.45.67.64\n123.45.67.65\n123.45.67.66\n123.45.67.67\n123.45.67.68\n...\n123.45.67.95")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("net6 = ipaddress.ip_network('12:3456:78:90ab💿ef01:23:30/125')\nnet6\nIPv6Network('12:3456:78:90ab💿ef01:23:30/125')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("for a in net6:\n... print(a)\n...\n12:3456:78:90ab💿ef01:23:30\n12:3456:78:90ab💿ef01:23:31\n12:3456:78:90ab💿ef01:23:32\n12:3456:78:90ab💿ef01:23:33\n12:3456:78:90ab💿ef01:23:34\n12:3456:78:90ab💿ef01:23:35\n12:3456:78:90ab💿ef01:23:36\n12:3456:78:90ab💿ef01:23:37")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("Network 也允许像数组一样的索引取值，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("net.num_addresses\n32")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("net[0]\nIPv4Address('123.45.67.64')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("net[1]\nIPv4Address('123.45.67.65')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("net[-1]\nIPv4Address('123.45.67.95')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("net[-2]\nIPv4Address('123.45.67.94')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("另外，你还可以执行网络成员检查之类的操作：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = ipaddress.ip_address('123.45.67.69')\na in net\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("b = ipaddress.ip_address('123.45.67.123')\nb in net\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一个 IP 地址和网络地址能通过一个 IP 接口来指定，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("inet = ipaddress.ip_interface('123.45.67.73/27')\ninet.network\nIPv4Network('123.45.67.64/27')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("inet.ip\nIPv4Address('123.45.67.73')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\nipaddress 模块有很多类可以表示 IP 地址、网络和接口。当你需要操作网络地址\n（比如解析、打印、验证等）的时候会很有用。\n要注意的是，ipaddress 模块跟其他一些和网络相关的模块比如 socket 库交集很\n少。所以，你不能使用 IPv4Address 的实例来代替一个地址字符串，你首先得显式的\n使用 str() 转换它。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("a = ipaddress.ip_address('127.0.0.1')\nfrom socket import socket, AF_INET, SOCK_STREAM\ns = socket(AF_INET, SOCK_STREAM)\ns.connect((a, 8080))\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: Can't convert 'IPv4Address' object to str implicitly")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.connect((str(a), 8080))")])])])]),e._v(" "),n("p",[e._v("更多相关内容，请参考 An Introduction to the ipaddress Module\n11.5 创建一个简单的 REST 接口\n问题\n你想使用一个简单的 REST 接口通过网络远程控制或访问你的应用程序，但是你\n又不想自己去安装一个完整的 web 框架。\n解决方案\n构建一个 REST 风格的接口最简单的方法是创建一个基于 WSGI 标准（PEP\n3333）的很小的库，下面是一个例子：")]),e._v(" "),n("h1",{attrs:{id:"resty-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#resty-py"}},[e._v("#")]),e._v(" resty.py")]),e._v(" "),n("p",[e._v("import cgi\ndef notfound_404(environ, start_response):\nstart_response('404 Not Found', [ ('Content-type', 'text/plain') ])\nreturn [b'Not Found']\nclass PathDispatcher:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself.pathmap = { }\ndef "),n("strong",[e._v("call")]),e._v("(self, environ, start_response):\npath = environ['PATH_INFO']\nparams = cgi.FieldStorage(environ['wsgi.input'],\nenviron=environ)\nmethod = environ['REQUEST_METHOD'].lower()\nenviron['params'] = { key: params.getvalue(key) for key in params }\nhandler = self.pathmap.get((method,path), notfound_404)\nreturn handler(environ, start_response)\ndef register(self, method, path, function):\nself.pathmap[method.lower(), path] = function\nreturn function\n为了使用这个调度器，你只需要编写不同的处理器，就像下面这样：\nimport time\n_hello_resp = '''"),n("br")]),n("html",[n("head",[n("title",[e._v("Hello {name}")])]),e._v(" "),n("body",[n("h1",[e._v("Hello {name}!")])])]),e._v("'''\ndef hello_world(environ, start_response):\nstart_response('200 OK', [ ('Content-type','text/html')])\nparams = environ['params']\nresp = _hello_resp.format(name=params.get('name'))\nyield resp.encode('utf-8')\n_localtime_resp = '''"),n("br"),e._v('\n<?xml version="1.0"?>\n'),n("time",[n("year",[e._v("{t.tm_year}")]),e._v(" "),n("month",[e._v("{t.tm_mon}")]),e._v(" "),n("day",[e._v("{t.tm_mday}")]),e._v(" "),n("hour",[e._v("{t.tm_hour}")]),e._v(" "),n("minute",[e._v("{t.tm_min}")]),e._v(" "),n("second",[e._v("{t.tm_sec}")])],1),e._v("'''\ndef localtime(environ, start_response):\nstart_response('200 OK', [ ('Content-type', 'application/xml') ])\nresp = _localtime_resp.format(t=time.localtime())\nyield resp.encode('utf-8')\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nfrom resty import PathDispatcher\nfrom wsgiref.simple_server import make_server"),n("p"),e._v(" "),n("h1",{attrs:{id:"create-the-dispatcher-and-register-functions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-the-dispatcher-and-register-functions"}},[e._v("#")]),e._v(" Create the dispatcher and register functions")]),e._v(" "),n("p",[e._v("dispatcher = PathDispatcher()\ndispatcher.register('GET', '/hello', hello_world)\ndispatcher.register('GET', '/localtime', localtime)")]),e._v(" "),n("h1",{attrs:{id:"launch-a-basic-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#launch-a-basic-server"}},[e._v("#")]),e._v(" Launch a basic server")]),e._v(" "),n("p",[e._v("httpd = make_server('', 8080, dispatcher)\nprint('Serving on port 8080...')\nhttpd.serve_forever()\n要测试下这个服务器，你可以使用一个浏览器或 urllib 和它交互。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("u = urlopen('http://localhost:8080/hello?name=Guido')\nprint(u.read().decode('utf-8'))\n")]),n("html",[n("head",[n("title",[e._v("Hello Guido")])]),e._v(" "),n("body",[n("h1",[e._v("Hello Guido!")])])]),n("p")])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("u = urlopen('http://localhost:8080/localtime')\nprint(u.read().decode('utf-8'))\n<?xml version=\"1.0\"?>\n"),n("time",[n("year",[e._v("2012")]),e._v(" "),n("month",[e._v("11")]),e._v(" "),n("day",[e._v("24")]),e._v(" "),n("hour",[e._v("14")]),e._v(" "),n("minute",[e._v("49")]),e._v(" "),n("second",[e._v("17")])],1)])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n在编写 REST 接口时，通常都是服务于普通的 HTTP 请求。但是跟那些功能完\n整的网站相比，你通常只需要处理数据。这些数据以各种标准格式编码，比如 XML、\nJSON 或 CSV。尽管程序看上去很简单，但是以这种方式提供的 API 对于很多应用程\n序来讲是非常有用的。\n例如，长期运行的程序可能会使用一个 REST API 来实现监控或诊断。大数据应\n用程序可以使用 REST 来构建一个数据查询或提取系统。REST 还能用来控制硬件设\n备比如机器人、传感器、工厂或灯泡。更重要的是，REST API 已经被大量客户端编程\n环境所支持，比如 Javascript, Android, iOS 等。因此，利用这种接口可以让你开发出更\n加复杂的应用程序。\n为了实现一个简单的 REST 接口，你只需让你的程序代码满足 Python 的 WSGI\n标准即可。WSGI 被标准库支持，同时也被绝大部分第三方 web 框架支持。因此，如\n果你的代码遵循这个标准，在后面的使用过程中就会更加的灵活！\n在 WSGI 中，你可以像下面这样约定的方式以一个可调用对象形式来实现你的程\n序。\nimport cgi\ndef wsgi_app(environ, start_response):\npass\nenviron 属性是一个字典，包含了从 web 服务器如 Apache[参考 Internet RFC\n3875] 提供的 CGI 接口中获取的值。要将这些不同的值提取出来，你可以像这么这样\n写：\ndef wsgi_app(environ, start_response):\nmethod = environ['REQUEST_METHOD']\npath = environ['PATH_INFO']")]),e._v(" "),n("h1",{attrs:{id:"parse-the-query-parameters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parse-the-query-parameters"}},[e._v("#")]),e._v(" Parse the query parameters")]),e._v(" "),n("p",[e._v("params = cgi.FieldStorage(environ['wsgi.input'], environ=environ)\n我们展示了一些常见的值。environ['REQUEST_METHOD'] 代表请求类型如 GET、\nPOST、HEAD 等。environ['PATH_INFO'] 表 示 被 请 求 资 源 的 路 径。调 用 cgi.\nFieldStorage() 可以从请求中提取查询参数并将它们放入一个类字典对象中以便\n后面使用。\nstart_response 参数是一个为了初始化一个请求对象而必须被调用的函数。第一\n个参数是返回的 HTTP 状态值，第二个参数是一个 (名, 值) 元组列表，用来构建返回\n的 HTTP 头。例如：\ndef wsgi_app(environ, start_response):\npass\nstart_response('200 OK', [('Content-type', 'text/plain')])\n为了返回数据，一个 WSGI 程序必须返回一个字节字符串序列。可以像下面这样\n使用一个列表来完成：\ndef wsgi_app(environ, start_response):\npass\nstart_response('200 OK', [('Content-type', 'text/plain')])\nresp = []\nresp.append(b'Hello World\\n')\nresp.append(b'Goodbye!\\n')\nreturn resp\n或者，你还可以使用 yield ：\ndef wsgi_app(environ, start_response):\npass\nstart_response('200 OK', [('Content-type', 'text/plain')])\nyield b'Hello World\\n'\nyield b'Goodbye!\\n'\n这里要强调的一点是最后返回的必须是字节字符串。如果返回结果包含文本字符\n串，必须先将其编码成字节。当然，并没有要求你返回的一定是文本，你可以很轻松的\n编写一个生成图片的程序。\n尽管 WSGI 程序通常被定义成一个函数，不过你也可以使用类实例来实现，只要\n它实现了合适的 "),n("strong",[e._v("call")]),e._v("() 方法。例如：\nclass WSGIApplication:\ndef "),n("strong",[e._v("init")]),e._v("(self):\n...\ndef "),n("strong",[e._v("call")]),e._v("(self, environ, start_response)\n...\n我们已经在上面使用这种技术创建 PathDispatcher 类。这个分发器仅仅只是管理\n一个字典，将 (方法, 路径) 对映射到处理器函数上面。当一个请求到来时，它的方法和\n路径被提取出来，然后被分发到对应的处理器上面去。另外，任何查询变量会被解析后\n放到一个字典中，以 environ['params'] 形式存储。后面这个步骤太常见，所以建议\n你在分发器里面完成，这样可以省掉很多重复代码。使用分发器的时候，你只需简单的\n创建一个实例，然后通过它注册各种 WSGI 形式的函数。编写这些函数应该超级简单\n了，只要你遵循 start_response() 函数的编写规则，并且最后返回字节字符串即可。\n当编写这种函数的时候还需注意的一点就是对于字符串模板的使用。没人愿意写\n那种到处混合着 print() 函数、XML 和大量格式化操作的代码。我们上面使用了三引\n号包含的预先定义好的字符串模板。这种方式的可以让我们很容易的在以后修改输出\n格式 (只需要修改模板本身，而不用动任何使用它的地方)。\n最后，使用 WSGI 还有一个很重要的部分就是没有什么地方是针对特定 web 服务\n器的。因为标准对于服务器和框架是中立的，你可以将你的程序放入任何类型服务器\n中。我们使用下面的代码测试测试本节代码：\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nfrom wsgiref.simple_server import make_server")]),e._v(" "),n("h1",{attrs:{id:"create-the-dispatcher-and-register-functions-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-the-dispatcher-and-register-functions-2"}},[e._v("#")]),e._v(" Create the dispatcher and register functions")]),e._v(" "),n("p",[e._v("dispatcher = PathDispatcher()\npass")]),e._v(" "),n("h1",{attrs:{id:"launch-a-basic-server-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#launch-a-basic-server-2"}},[e._v("#")]),e._v(" Launch a basic server")]),e._v(" "),n("p",[e._v("httpd = make_server('', 8080, dispatcher)\nprint('Serving on port 8080...')\nhttpd.serve_forever()\n上面代码创建了一个简单的服务器，然后你就可以来测试下你的实现是否能正常\n工作。最后，当你准备进一步扩展你的程序的时候，你可以修改这个代码，让它可以为\n特定服务器工作。\nWSGI 本身是一个很小的标准。因此它并没有提供一些高级的特性比如认证、\ncookies、重定向等。这些你自己实现起来也不难。不过如果你想要更多的支持，可以考\n虑第三方库，比如 WebOb 或者 Paste\n11.6 通过 XML-RPC 实现简单的远程调用\n问题\n你想找到一个简单的方式去执行运行在远程机器上面的 Python 程序中的函数或方\n法。\n解决方案\n实现一个远程方法调用的最简单方式是使用 XML-RPC。下面我们演示一下一个\n实现了键-值存储功能的简单服务器：\nfrom xmlrpc.server import SimpleXMLRPCServer\nclass KeyValueServer:\n"),n("em",[e._v("rpc_methods")]),e._v(" = ['get', 'set', 'delete', 'exists', 'keys']\ndef "),n("strong",[e._v("init")]),e._v("(self, address):\nself._data = {}\nself._serv = SimpleXMLRPCServer(address, allow_none=True)\nfor name in self."),n("em",[e._v("rpc_methods")]),e._v(":\nself._serv.register_function(getattr(self, name))\ndef get(self, name):\nreturn self._data[name]\ndef set(self, name, value):\nself._data[name] = value\ndef delete(self, name):\ndel self._data[name]\ndef exists(self, name):\nreturn name in self._data\ndef keys(self):\nreturn list(self._data)\ndef serve_forever(self):\nself._serv.serve_forever()")]),e._v(" "),n("h1",{attrs:{id:"example-18"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-18"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("if "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nkvserv = KeyValueServer(('', 15000))\nkvserv.serve_forever()\n下面我们从一个客户端机器上面来访问服务器：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from xmlrpc.client import ServerProxy\ns = ServerProxy('http://localhost:15000', allow_none=True)\ns.set('foo', 'bar')\ns.set('spam', [1, 2, 3])\ns.keys()\n['spam', 'foo']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.get('foo')\n'bar'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.get('spam')\n[1, 2, 3]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.delete('spam')\ns.exists('spam')\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\nXML-RPC 可以让我们很容易的构造一个简单的远程调用服务。你所需要做的仅\n仅是创建一个服务器实例，通过它的方法 register_function() 来注册函数，然后使\n用方法 serve_forever() 启动它。在上面我们将这些步骤放在一起写到一个类中，不\n够这并不是必须的。比如你还可以像下面这样创建一个服务器：\nfrom xmlrpc.server import SimpleXMLRPCServer\ndef add(x,y):\nreturn x+y\nserv = SimpleXMLRPCServer(('', 15000))\nserv.register_function(add)\nserv.serve_forever()\nXML-RPC 暴露出来的函数只能适用于部分数据类型，比如字符串、整形、列表和\n字典。对于其他类型就得需要做些额外的功课了。例如，如果你想通过 XML-RPC 传\n递一个对象实例，实际上只有他的实例字典被处理：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("class Point:\n... def "),n("strong",[e._v("init")]),e._v("(self, x, y):\n... self.x = x\n... self.y = y\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p = Point(2, 3)\ns.set('foo', p)\ns.get('foo')\n{'x': 2, 'y': 3}")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("类似的，对于二进制数据的处理也跟你想象的不太一样：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s.set('foo', b'Hello World')\ns.get('foo')\n<xmlrpc.client.Binary object at 0x10131d410>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("_.data\nb'Hello World'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一般来讲，你不应该将 XML-RPC 服务以公共 API 的方式暴露出来。对于这种情\n况，通常分布式应用程序会是一个更好的选择。\nXML-RPC 的一个缺点是它的性能。SimpleXMLRPCServer 的实现是单线程的，所\n以它不适合于大型程序，尽管我们在 11.2 小节中演示过它是可以通过多线程来执行的。\n另外，由于 XML-RPC 将所有数据都序列化为 XML 格式，所以它会比其他的方式运\n行的慢一些。但是它也有优点，这种方式的编码可以被绝大部分其他编程语言支持。通\n过使用这种方式，其他语言的客户端程序都能访问你的服务。\n虽然 XML-RPC 有很多缺点，但是如果你需要快速构建一个简单远程过程调用系\n统的话，它仍然值得去学习的。有时候，简单的方案就已经足够了。\n11.7 在不同的 Python 解释器之间交互\n问题\n你在不同的机器上面运行着多个 Python 解释器实例，并希望能够在这些解释器之\n间通过消息来交换数据。\n解决方案\n通过使用 multiprocessing.connection 模块可以很容易的实现解释器之间的通\n信。下面是一个简单的应答服务器例子：\nfrom multiprocessing.connection import Listener\nimport traceback\ndef echo_client(conn):\ntry:\nwhile True:\nmsg = conn.recv()\nconn.send(msg)\nexcept EOFError:\nprint('Connection closed')\ndef echo_server(address, authkey):\nserv = Listener(address, authkey=authkey)\nwhile True:\ntry:\nclient = serv.accept()\necho_client(client)\nexcept Exception:\ntraceback.print_exc()\necho_server(('', 25000), authkey=b'peekaboo')\n然后客户端连接服务器并发送消息的简单示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from multiprocessing.connection import Client\nc = Client(('localhost', 25000), authkey=b'peekaboo')\nc.send('hello')\nc.recv()\n'hello'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.send(42)\nc.recv()\n42")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.send([1, 2, 3, 4, 5])\nc.recv()\n[1, 2, 3, 4, 5]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("跟底层 socket 不同的是，每个消息会完整保存（每一个通过 send() 发送的对象能\n通过 recv() 来完整接受）。另外，所有对象会通过 pickle 序列化。因此，任何兼容 pickle\n的对象都能在此连接上面被发送和接受。\n讨论\n目前有很多用来实现各种消息传输的包和函数库，比如 ZeroMQ、Celery 等。你还\n有另外一种选择就是自己在底层 socket 基础之上来实现一个消息传输层。但是你想要\n简单一点的方案，那么这时候 multiprocessing.connection 就派上用场了。仅仅使用\n一些简单的语句即可实现多个解释器之间的消息通信。\n如果你的解释器运行在同一台机器上面，那么你可以使用另外的通信机制，比如\nUnix 域套接字或者是 Windows 命名管道。要想使用 UNIX 域套接字来创建一个连接，\n只需简单的将地址改写一个文件名即可：\ns = Listener('/tmp/myconn', authkey=b'peekaboo')\n要想使用 Windows 命名管道来创建连接，只需像下面这样使用一个文件名：\ns = Listener(r'\\.\\pipe\\myconn', authkey=b'peekaboo')\n一个通用准则是，你不要使用 multiprocessing 来实现一个对外的公共服务。\nClient() 和 Listener() 中的 authkey 参数用来认证发起连接的终端用户。如果密钥\n不对会产生一个异常。此外，该模块最适合用来建立长连接（而不是大量的短连接），\n例如，两个解释器之间启动后就开始建立连接并在处理某个问题过程中会一直保持连\n接状态。\n如果你需要对底层连接做更多的控制，比如需要支持超时、非阻塞 I/O 或其他类\n似的特性，你最好使用另外的库或者是在高层 socket 上来实现这些特性。\n11.8 实现远程方法调用\n问题\n你想在一个消息传输层如 sockets 、multiprocessing connections 或 ZeroMQ 的\n基础之上实现一个简单的远程过程调用（RPC）。\n解决方案\n将函数请求、参数和返回值使用 pickle 编码后，在不同的解释器直接传送 pickle 字\n节字符串，可以很容易的实现 RPC。下面是一个简单的 PRC 处理器，可以被整合到一\n个服务器中去：")]),e._v(" "),n("h1",{attrs:{id:"rpcserver-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rpcserver-py"}},[e._v("#")]),e._v(" rpcserver.py")]),e._v(" "),n("p",[e._v("import pickle\nclass RPCHandler:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._functions = { }\ndef register_function(self, func):\nself._functions[func."),n("strong",[e._v("name")]),e._v("] = func\ndef handle_connection(self, connection):\ntry:\nwhile True:")]),e._v(" "),n("h1",{attrs:{id:"receive-a-message"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#receive-a-message"}},[e._v("#")]),e._v(" Receive a message")]),e._v(" "),n("p",[e._v("func_name, args, kwargs = pickle.loads(connection.recv())")]),e._v(" "),n("h1",{attrs:{id:"run-the-rpc-and-send-a-response"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-the-rpc-and-send-a-response"}},[e._v("#")]),e._v(" Run the RPC and send a response")]),e._v(" "),n("p",[e._v("try:r = self._functions"),n("a",{attrs:{href:"*args,**kwargs"}},[e._v("func_name")]),e._v("\nconnection.send(pickle.dumps(r))\nexcept Exception as e:\nconnection.send(pickle.dumps(e))\nexcept EOFError:\npass\n要使用这个处理器，你需要将它加入到一个消息服务器中。你有很多种选择，但是\n使用 multiprocessing 库是最简单的。下面是一个 RPC 服务器例子：\nfrom multiprocessing.connection import Listener\nfrom threading import Thread\ndef rpc_server(handler, address, authkey):\nsock = Listener(address, authkey=authkey)\nwhile True:\nclient = sock.accept()\nt = Thread(target=handler.handle_connection, args=(client,))\nt.daemon = True\nt.start()")]),e._v(" "),n("h1",{attrs:{id:"some-remote-functions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#some-remote-functions"}},[e._v("#")]),e._v(" Some remote functions")]),e._v(" "),n("p",[e._v("def add(x, y):\nreturn x + y\ndef sub(x, y):\nreturn x - y")]),e._v(" "),n("h1",{attrs:{id:"register-with-a-handler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#register-with-a-handler"}},[e._v("#")]),e._v(" Register with a handler")]),e._v(" "),n("p",[e._v("handler = RPCHandler()\nhandler.register_function(add)\nhandler.register_function(sub)")]),e._v(" "),n("h1",{attrs:{id:"run-the-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-the-server"}},[e._v("#")]),e._v(" Run the server")]),e._v(" "),n("p",[e._v("rpc_server(handler, ('localhost', 17000), authkey=b'peekaboo')\n为了从一个远程客户端访问服务器，你需要创建一个对应的用来传送请求的 RPC\n代理类。例如\nimport pickle\nclass RPCProxy:\ndef "),n("strong",[e._v("init")]),e._v("(self, connection):\nself._connection = connection\ndef "),n("strong",[e._v("getattr")]),e._v("(self, name):\ndef do_rpc(*args, **kwargs):\nself._connection.send(pickle.dumps((name, args, kwargs)))\nresult = pickle.loads(self._connection.recv())\nif isinstance(result, Exception):\nraise result\nreturn result\nreturn do_rpc\n要使用这个代理类，你需要将其包装到一个服务器的连接上面，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from multiprocessing.connection import Client\nc = Client(('localhost', 17000), authkey=b'peekaboo')\nproxy = RPCProxy(c)\nproxy.add(2, 3) 5\nproxy.sub(2, 3)\n-1")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('proxy.sub([1, 2], 4)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFile \"rpcserver.py\", line 37, in do_rpc\nraise result\nTypeError: unsupported operand type(s) for -: 'list' and 'int'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("要注意的是很多消息层（比如 multiprocessing ）已经使用 pickle 序列化了数据。\n如果是这样的话，对 pickle.dumps() 和 pickle.loads() 的调用要去掉。\n讨论\nRPCHandler 和 RPCProxy 的基本思路是很比较简单的。如果一个客户端想要调用\n一个远程函数，比如 foo(1, 2, z=3) , 代理类创建一个包含了函数名和参数的元组\n('foo', (1, 2), {'z': 3}) 。这个元组被 pickle 序列化后通过网络连接发生出去。\n这一步在 RPCProxy 的 "),n("strong",[e._v("getattr")]),e._v("() 方法返回的 do_rpc() 闭包中完成。服务器接\n收后通过 pickle 反序列化消息，查找函数名看看是否已经注册过，然后执行相应的函\n数。执行结果 (或异常) 被 pickle 序列化后返回发送给客户端。我们的实例需要依赖\nmultiprocessing 进行通信。不过，这种方式可以适用于其他任何消息系统。例如，如果\n你想在 ZeroMQ 之上实习 RPC，仅仅只需要将连接对象换成合适的 ZeroMQ 的 socket\n对象即可。\n由于底层需要依赖 pickle，那么安全问题就需要考虑了（因为一个聪明的黑客可以\n创建特定的消息，能够让任意函数通过 pickle 反序列化后被执行）。因此你永远不要允\n许来自不信任或未认证的客户端的 RPC。特别是你绝对不要允许来自 Internet 的任意\n机器的访问，这种只能在内部被使用，位于防火墙后面并且不要对外暴露。\n作为 pickle 的替代，你也许可以考虑使用 JSON、XML 或一些其他的编码格\n式来序列化消息。例如，本机实例可以很容易的改写成 JSON 编码方案。还需要将\npickle.loads() 和 pickle.dumps() 替换成 json.loads() 和 json.dumps() 即可：")]),e._v(" "),n("h1",{attrs:{id:"jsonrpcserver-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsonrpcserver-py"}},[e._v("#")]),e._v(" jsonrpcserver.py")]),e._v(" "),n("p",[e._v("import json\nclass RPCHandler:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._functions = { }\ndef register_function(self, func):\nself._functions[func."),n("strong",[e._v("name")]),e._v("] = func\ndef handle_connection(self, connection):\ntry:\nwhile True:")]),e._v(" "),n("h1",{attrs:{id:"receive-a-message-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#receive-a-message-2"}},[e._v("#")]),e._v(" Receive a message")]),e._v(" "),n("p",[e._v("func_name, args, kwargs = json.loads(connection.recv())")]),e._v(" "),n("h1",{attrs:{id:"run-the-rpc-and-send-a-response-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-the-rpc-and-send-a-response-2"}},[e._v("#")]),e._v(" Run the RPC and send a response")]),e._v(" "),n("p",[e._v("try:r = self._functions"),n("a",{attrs:{href:"*args,**kwargs"}},[e._v("func_name")]),e._v("\nconnection.send(json.dumps(r))\nexcept Exception as e:\nconnection.send(json.dumps(str(e)))\nexcept EOFError:\npass")]),e._v(" "),n("h1",{attrs:{id:"jsonrpcclient-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsonrpcclient-py"}},[e._v("#")]),e._v(" jsonrpcclient.py")]),e._v(" "),n("p",[e._v("import json\nclass RPCProxy:\ndef "),n("strong",[e._v("init")]),e._v("(self, connection):\nself._connection = connection\ndef "),n("strong",[e._v("getattr")]),e._v("(self, name):\ndef do_rpc(*args, **kwargs):\nself._connection.send(json.dumps((name, args, kwargs)))\nresult = json.loads(self._connection.recv())\nreturn result\nreturn do_rpc\n实现 RPC 的一个比较复杂的问题是如何去处理异常。至少，当方法产生异常时服\n务器不应该奔溃。因此，返回给客户端的异常所代表的含义就要好好设计了。如果你使\n用 pickle，异常对象实例在客户端能被反序列化并抛出。如果你使用其他的协议，那得\n想想另外的方法了。不过至少，你应该在响应中返回异常字符串。我们在 JSON 的例子\n中就是使用的这种方式。\n对 于 其 他 的 RPC 实 现 例 子， 我 推 荐 你 看 看 在 XML-RPC 中 使 用 的\nSimpleXMLRPCServer 和 ServerProxy 的实现，也就是 11.6 小节中的内容。\n11.9 简单的客户端认证\n问题\n你想在分布式系统中实现一个简单的客户端连接认证功能，又不想像 SSL 那样的\n复杂。\n解决方案\n可以利用 hmac 模块实现一个连接握手，从而实现一个简单而高效的认证过程。下\n面是代码示例：\nimport hmac\nimport os\ndef client_authenticate(connection, secret_key):\n'''\nAuthenticate client to a remote service.\nconnection represents a network connection.\nsecret_key is a key known only to both client/server.\n'''\nmessage = connection.recv(32)\nhash = hmac.new(secret_key, message)\ndigest = hash.digest()\nconnection.send(digest)\ndef server_authenticate(connection, secret_key):\n'''\nRequest client authentication.\n'''\nmessage = os.urandom(32)\nconnection.send(message)\nhash = hmac.new(secret_key, message)\ndigest = hash.digest()\nresponse = connection.recv(len(digest))\nreturn hmac.compare_digest(digest,response)\n基本原理是当连接建立后，服务器给客户端发送一个随机的字节消息（这里例子\n中使用了 os.urandom() 返回值）。客户端和服务器同时利用 hmac 和一个只有双方知\n道的密钥来计算出一个加密哈希值。然后客户端将它计算出的摘要发送给服务器，服务\n器通过比较这个值和自己计算的是否一致来决定接受或拒绝连接。摘要的比较需要使\n用 hmac.compare_digest() 函数。使用这个函数可以避免遭到时间分析攻击，不要用\n简单的比较操作符（==）。为了使用这些函数，你需要将它集成到已有的网络或消息\n代码中。例如，对于 sockets，服务器代码应该类似下面：\nfrom socket import socket, AF_INET, SOCK_STREAM\nsecret_key = b'peekaboo'\ndef echo_handler(client_sock):\nif not server_authenticate(client_sock, secret_key):\nclient_sock.close()\nreturn\nwhile True:\nmsg = client_sock.recv(8192)\nif not msg:\nbreak\nclient_sock.sendall(msg)\ndef echo_server(address):\ns = socket(AF_INET, SOCK_STREAM)\ns.bind(address)\ns.listen(5)\nwhile True:\nc,a = s.accept()\necho_handler(c)\necho_server(('', 18000))\nWithin a client, you would do this:\nfrom socket import socket, AF_INET, SOCK_STREAM\nsecret_key = b'peekaboo' s = socket(AF_INET, SOCK_STREAM)\ns.connect(('localhost', 18000))\nclient_authenticate(s, secret_key)\ns.send(b'Hello World')\nresp = s.recv(1024)\n讨论\nhmac 认证的一个常见使用场景是内部消息通信系统和进程间通信。例如，如果你\n编写的系统涉及到一个集群中多个处理器之间的通信，你可以使用本节方案来确保只\n有被允许的进程之间才能彼此通信。事实上，基于 hmac 的认证被 multiprocessing 模\n块使用来实现子进程直接的通信。\n还有一点需要强调的是连接认证和加密是两码事。认证成功之后的通信消息是以\n明文形式发送的，任何人只要想监听这个连接线路都能看到消息（尽管双方的密钥不\n会被传输）。\nhmac 认证算法基于哈希函数如 MD5 和 SHA-1，关于这个在 IETF RFC 2104 中\n有详细介绍。\n11.10 在网络服务中加入 SSL\n问题\n你想实现一个基于 sockets 的网络服务，客户端和服务器通过 SSL 协议认证并加\n密传输的数据。\n解决方案\nssl 模块能为底层 socket 连接添加 SSL 的支持。ssl.wrap_socket() 函数接受一\n个已存在的 socket 作为参数并使用 SSL 层来包装它。例如，下面是一个简单的应答服\n务器，能在服务器端为所有客户端连接做认证。\nfrom socket import socket, AF_INET, SOCK_STREAM\nimport ssl\nKEYFILE = 'server_key.pem' # Private key of the server\nCERTFILE = 'server_cert.pem' # Server certificate (given to client)\ndef echo_client(s):\nwhile True:\ndata = s.recv(8192)\nif data == b'':\nbreak\ns.send(data)\ns.close()\nprint('Connection closed')\ndef echo_server(address):\ns = socket(AF_INET, SOCK_STREAM)\ns.bind(address)\ns.listen(1)")]),e._v(" "),n("h1",{attrs:{id:"wrap-with-an-ssl-layer-requiring-client-certs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wrap-with-an-ssl-layer-requiring-client-certs"}},[e._v("#")]),e._v(" Wrap with an SSL layer requiring client certs")]),e._v(" "),n("p",[e._v("s_ssl = ssl.wrap_socket(s,\nkeyfile=KEYFILE,\ncertfile=CERTFILE,\nserver_side=True\n)")]),e._v(" "),n("h1",{attrs:{id:"wait-for-connections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wait-for-connections"}},[e._v("#")]),e._v(" Wait for connections")]),e._v(" "),n("p",[e._v("while True:\ntry:\nc,a = s_ssl.accept()\nprint('Got connection', c, a)\necho_client(c)\nexcept Exception as e:\nprint('{}: {}'.format(e."),n("strong",[e._v("class")]),e._v("."),n("strong",[e._v("name")]),e._v(", e))\necho_server(('', 20000))\n下面我们演示一个客户端连接服务器的交互例子。客户端会请求服务器来认证并\n确认连接：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from socket import socket, AF_INET, SOCK_STREAM\nimport ssl\ns = socket(AF_INET, SOCK_STREAM)\ns_ssl = ssl.wrap_socket(s,\ncert_reqs=ssl.CERT_REQUIRED,\nca_certs = 'server_cert.pem')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s_ssl.connect(('localhost', 20000))\ns_ssl.send(b'Hello World?')\n12")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s_ssl.recv(8192)\nb'Hello World?'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这种直接处理底层 socket 方式有个问题就是它不能很好的跟标准库中已存在的\n网络服务兼容。例如，绝大部分服务器代码（HTTP、XML-RPC 等）实际上是基于\nsocketserver 库的。客户端代码在一个较高层上实现。我们需要另外一种稍微不同的\n方式来将 SSL 添加到已存在的服务中：\n首先，对于服务器而言，可以通过像下面这样使用一个 mixin 类来添加 SSL：\nimport ssl\nclass SSLMixin:\n'''\nMixin class that adds support for SSL to existing servers based\non the socketserver module.\n'''\ndef "),n("strong",[e._v("init")]),e._v("(self, *args,\nkeyfile=None, certfile=None, ca_certs=None,\ncert_reqs=ssl.CERT_NONE,\n**kwargs):\nself._keyfile = keyfile\nself._certfile = certfile\nself._ca_certs = ca_certs\nself._cert_reqs = cert_reqs\nsuper()."),n("strong",[e._v("init")]),e._v("(*args, **kwargs)\ndef get_request(self):\nclient, addr = super().get_request()\nclient_ssl = ssl.wrap_socket(client,\nkeyfile = self._keyfile,\ncertfile = self._certfile,\nca_certs = self._ca_certs,\ncert_reqs = self._cert_reqs,\nserver_side = True)\nreturn client_ssl, addr\n为了使用这个 mixin 类，你可以将它跟其他服务器类混合。例如，下面是定义一个\n基于 SSL 的 XML-RPC 服务器例子：")]),e._v(" "),n("h1",{attrs:{id:"xml-rpc-server-with-ssl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#xml-rpc-server-with-ssl"}},[e._v("#")]),e._v(" XML-RPC server with SSL")]),e._v(" "),n("p",[e._v("from xmlrpc.server import SimpleXMLRPCServer\nclass SSLSimpleXMLRPCServer(SSLMixin, SimpleXMLRPCServer):\npass\nHere's the XML-RPC server from Recipe 11.6 modified only slightly to use SSL:\nimport ssl\nfrom xmlrpc.server import SimpleXMLRPCServer\nfrom sslmixin import SSLMixin\nclass SSLSimpleXMLRPCServer(SSLMixin, SimpleXMLRPCServer):\npass\nclass KeyValueServer:\n"),n("em",[e._v("rpc_methods")]),e._v(" = ['get', 'set', 'delete', 'exists', 'keys']\ndef "),n("strong",[e._v("init")]),e._v("(self, *args, **kwargs):\nself._data = {}\nself._serv = SSLSimpleXMLRPCServer(*args, allow_none=True, **kwargs)\nfor name in self."),n("em",[e._v("rpc_methods")]),e._v(":\nself._serv.register_function(getattr(self, name))\ndef get(self, name):\nreturn self._data[name]\ndef set(self, name, value):\nself._data[name] = value\ndef delete(self, name):\ndel self._data[name]\ndef exists(self, name):\nreturn name in self._data\ndef keys(self):\nreturn list(self._data)\ndef serve_forever(self):\nself._serv.serve_forever()\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nKEYFILE='server_key.pem' # Private key of the server\nCERTFILE='server_cert.pem' # Server certificate\nkvserv = KeyValueServer(('', 15000),\nkeyfile=KEYFILE,\ncertfile=CERTFILE)\nkvserv.serve_forever()\n使用这个服务器时，你可以使用普通的 xmlrpc.client 模块来连接它。只需要在\nURL 中指定 https: 即可，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from xmlrpc.client import ServerProxy\ns = ServerProxy('https://localhost:15000', allow_none=True)\ns.set('foo','bar')\ns.set('spam', [1, 2, 3])\ns.keys()\n['spam', 'foo']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.get('foo')\n'bar'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.get('spam')\n[1, 2, 3]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.delete('spam')\ns.exists('spam')\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对于 SSL 客户端来讲一个比较复杂的问题是如何确认服务器证书或为服务器提供\n客户端认证（比如客户端证书）。不幸的是，暂时还没有一个标准方法来解决这个问题，\n需要自己去研究。不过，下面给出一个例子，用来建立一个安全的 XML-RPC 连接来\n确认服务器证书：\nfrom xmlrpc.client import SafeTransport, ServerProxy\nimport ssl\nclass VerifyCertSafeTransport(SafeTransport):\ndef "),n("strong",[e._v("init")]),e._v("(self, cafile, certfile=None, keyfile=None):\nSafeTransport."),n("strong",[e._v("init")]),e._v("(self)\nself._ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)\nself._ssl_context.load_verify_locations(cafile)\nif certfile:\nself._ssl_context.load_cert_chain(certfile, keyfile)\nself._ssl_context.verify_mode = ssl.CERT_REQUIRED\ndef make_connection(self, host):")]),e._v(" "),n("h1",{attrs:{id:"items-in-the-passed-dictionary-are-passed-as-keyword"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#items-in-the-passed-dictionary-are-passed-as-keyword"}},[e._v("#")]),e._v(" Items in the passed dictionary are passed as keyword")]),e._v(" "),n("h1",{attrs:{id:"arguments-to-the-http-client-httpsconnection-constructor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arguments-to-the-http-client-httpsconnection-constructor"}},[e._v("#")]),e._v(" arguments to the http.client.HTTPSConnection() constructor.")]),e._v(" "),n("h1",{attrs:{id:"the-context-argument-allows-an-ssl-sslcontext-instance-to"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-context-argument-allows-an-ssl-sslcontext-instance-to"}},[e._v("#")]),e._v(" The context argument allows an ssl.SSLContext instance to")]),e._v(" "),n("h1",{attrs:{id:"be-passed-with-information-about-the-ssl-configuration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#be-passed-with-information-about-the-ssl-configuration"}},[e._v("#")]),e._v(" be passed with information about the SSL configuration")]),e._v(" "),n("p",[e._v("s = super().make_connection((host, {'context': self._ssl_context}))\nreturn s")]),e._v(" "),n("h1",{attrs:{id:"create-the-client-proxy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-the-client-proxy"}},[e._v("#")]),e._v(" Create the client proxy")]),e._v(" "),n("p",[e._v("s = ServerProxy('https://localhost:15000',\ntransport=VerifyCertSafeTransport('server_cert.pem'),\nallow_none=True)\n服务器将证书发送给客户端，客户端来确认它的合法性。这种确认可以是相互的。\n如果服务器想要确认客户端，可以将服务器启动代码修改如下：\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nKEYFILE='server_key.pem' # Private key of the server\nCERTFILE='server_cert.pem' # Server certificate\nCA_CERTS='client_cert.pem' # Certificates of accepted clients\nkvserv = KeyValueServer(('', 15000),\nkeyfile=KEYFILE,\ncertfile=CERTFILE,\nca_certs=CA_CERTS,\ncert_reqs=ssl.CERT_REQUIRED,\n)\nkvserv.serve_forever()\n为了让 XML-RPC 客户端发送证书，修改 ServerProxy 的初始化代码如下：")]),e._v(" "),n("h1",{attrs:{id:"create-the-client-proxy-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-the-client-proxy-2"}},[e._v("#")]),e._v(" Create the client proxy")]),e._v(" "),n("p",[e._v("s = ServerProxy('https://localhost:15000',\ntransport=VerifyCertSafeTransport('server_cert.pem', 'client_cert.pem', 'client_key.pem'),\nallow_none=True)\n讨论\n试着去运行本节的代码能测试你的系统配置能力和理解 SSL。可能最大的挑战是\n如何一步步的获取初始配置 key、证书和其他所需依赖。\n我解释下到底需要啥，每一个 SSL 连接终端一般都会有一个私钥和一个签名证\n书文件。这个证书包含了公钥并在每一次连接的时候都会发送给对方。对于公共服务\n器，它们的证书通常是被权威证书机构比如 Verisign、Equifax 或其他类似机构（需要\n付费的）签名过的。为了确认服务器签名，客户端回保存一份包含了信任授权机构的\n证书列表文件。例如，web 浏览器保存了主要的认证机构的证书，并使用它来为每一个\nHTTPS 连接确认证书的合法性。对本小节示例而言，只是为了测试，我们可以创建自\n签名的证书，下面是主要步骤：\nbash % openssl req -new -x509 -days 365 -nodes -out server_cert.pem\n-keyout server_key.pem\nGenerating a 1024 bit RSA private key ……………………………………++\n++++ …++++++\nwriting new private key to ‘server_key.pem’\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request. What you are about to enter is what is called a\nDistinguished Name or a DN. There are quite a few fields but you can leave\nsome blank For some fields there will be a default value, If you enter ‘.’,\nthe field will be left blank.\nCountry Name (2 letter code) [AU]:US State or Province Name (full name)\n[Some-State]:Illinois Locality Name (eg, city) []:Chicago Organization Name\n(eg, company) [Internet Widgits Pty Ltd]:Dabeaz, LLC Organizational Unit\nName (eg, section) []: Common Name (eg, YOUR name) []:localhost Email\nAddress []: bash %\n在创建证书的时候，各个值的设定可以是任意的，但是”Common Name“的值通\n常要包含服务器的 DNS 主机名。如果你只是在本机测试，那么就使用”localhost“，否\n则使用服务器的域名。\n—–BEGIN RSA PRIVATE KEY —– MIICXQIBAAKBgQCZrCN￾LoEyAKF+f9UNcFaz5Osa6jf7qkbUl8si5xQrY3ZYC7juu nL1dZLn/ VbE￾FIITaUOgvBtPv1qUWTJGwga62VSG1oFE0ODIx3g2Nh4sRf+rySsx2\nL4442nx0z4O5vJQ7k6eRNHAZUUnCL50+YvjyLyt7ryLSjSuKhCcJsbZgPwIDAQAB\nAoGAB5evrr7eyL4160tM5rHTeATlaLY3UBOe5Z8XN8Z6gLiB/\nucSX9AysviVD/6F 3oD6z2aL8jbeJc1vHqjt0dC2dwwm32vVl8mRdyoAsQpWmiqXrkvP4Bsl04VpBeHw\nQt8xNSW9SFhceL3LEvw9M8i9MV39viih1ILyH8OuHdvJyFECQQDLEjl2d2ppxND9\nPoLqVFAirDfX2JnLTdWbc+M11a9Jdn3hKF8TcxfEnFVs5Gav1MusicY5KB0ylYPb\nYbTvqKc7AkEAwbnRBO2VYEZsJZp2X0IZqP9ovWokkpYx+PE4+c6MySDgaMcigL7v\nWDIHJG1CHudD09GbqENasDzyb2HAIW4CzQJBAKDdkv+xoW6gJx42Auc2WzTcUHCA\neXR/+BLpPrhKykzbvOQ8YvS5W764SUO1u1LWs3G+wnRMvrRvlMCZKgggBjkCQQCG\nJewto2+a+WkOKQXrNNScCDE5aPTmZQc5waCYq4UmCZQcOjkUOiN3ST1U5iuxRqfb\nV/ yX6fw0qh+fLWtkOs/ JAkA+okMSxZwqRtfgOFGBfwQ8/\niKrnizeanTQ3L6scFXI CHZXdJ3XQ6qUmNxNn7iJ7S/\nLDawo1QfWkCfD9FYoxBlg —–END RSA PRIVATE KEY—–\n服务器证书文件 server_cert.pem 内容类似下面这样：\n—–BEGIN CERTIFICATE—– MIIC+DCCAmGgAwIBAgIJAPMd+vi45js3MA0GCSqGSIb3DQEBBQUAMFwxCzAJBgNV\nBAYTAlVTMREwDwYDVQQIEwhJbGxpbm9pczEQMA4GA1UEBxMHQ2hpY2FnbzEUMBIG\nA1UEChMLRGFiZWF6LCBMTEMxEjAQBgNVBAMTCWxvY2FsaG9zdDAeFw0xMzAxMTEx\nODQyMjdaFw0xNDAxMTExODQyMjdaMFwxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhJ\nbGxpbm9pczEQMA4GA1UEBxMHQ2hpY2FnbzEUMBIGA1UEChMLRGFiZWF6LCBMTEMx\nEjAQBgNVBAMTCWxvY2FsaG9zdDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\nmawjS6BMgChfn/VDXBWs+TrGuo3+6pG1JfLIucUK2N2WAu47rpy9XWS5/1WxBSCE\n2lDoLwbT79alFkyRsIGutlUhtaBRNDgyMd4NjYeLEX/\nq8krMdi+OONp8dM+DubyU\nO5OnkTRwGVFJwi+dPmL48i8re68i0o0rioQnCbG2YD8CAwEAAaOBwTCBvjAdBgNV\nHQ4EFgQUrtoLHHgXiDZTr26NMmgKJLJLFtIwgY4GA1UdIwSBhjCBg4AUrtoLHHgX\niDZTr26NMmgKJLJLFtKhYKReMFwxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhJbGxp\nbm9pczEQMA4GA1UEBxMHQ2hpY2FnbzEUMBIGA1UEChMLRGFiZWF6LCBMTEMxEjAQ\nBgNVBAMTCWxvY2FsaG9zdIIJAPMd+vi45js3MAwGA1UdEwQFMAMBAf8wDQYJKoZI\nhvcNAQEFBQADgYEAFci+dqvMG4xF8UTnbGVvZJPIzJDRee6Nbt6AHQo9pOdAIMAu\nWsGCplSOaDNdKKzl+b2UT2Zp3AIW4Qd51bouSNnR4M/\ngnr9ZD1ZctFd3jS+C5XRp D3vvcW5lAnCCC80P6rXy7d7hTeFu5EYKtRGXNvVNd/\n06NALGDflrrOwxF3Y= —–END CERTIFICATE—–\n在服务器端代码中，私钥和证书文件会被传给 SSL 相关的包装函数。证书来自于\n客户端，私钥应该在保存在服务器中，并加以安全保护。\n在客户端代码中，需要保存一个合法证书授权文件来确认服务器证书。如果你没有\n这个文件，你可以在客户端复制一份服务器的证书并使用它来确认。连接建立后，服务\n器会提供它的证书，然后你就能使用已经保存的证书来确认它是否正确。\n服务器也能选择是否要确认客户端的身份。如果要这样做的话，客户端需要有自己\n的私钥和认证文件。服务器也需要保存一个被信任证书授权文件来确认客户端证书。\n如果你要在真实环境中为你的网络服务加上 SSL 的支持，这小节只是一个入门介\n绍而已。你还应该参考其他的文档，做好花费不少时间来测试它正常工作的准备。反\n正，就是得慢慢折腾吧 ~ ^_^\n11.11 进程间传递 Socket 文件描述符\n问题\n你有多个 Python 解释器进程在同时运行，你想将某个打开的文件描述符从一个解\n释器传递给另外一个。比如，假设有个服务器进程相应连接请求，但是实际的相应逻辑\n是在另一个解释器中执行的。\n解决方案\n为了在多个进程中传递文件描述符，你首先需要将它们连接到一起。在 Unix 机器\n上，你可能需要使用 Unix 域套接字，而在 windows 上面你需要使用命名管道。不过你\n无需真的需要去操作这些底层，通常使用 multiprocessing 模块来创建这样的连接会\n更容易一些。\n一 旦 一 个 连 接 被 创 建， 你 可 以 使 用 multiprocessing.reduction 中 的\nsend_handle() 和 recv_handle() 函数在不同的处理器直接传递文件描述符。下面\n的例子演示了最基本的用法：\nimport multiprocessing\nfrom multiprocessing.reduction import recv_handle, send_handle\nimport socket\ndef worker(in_p, out_p):\nout_p.close()\nwhile True:\nfd = recv_handle(in_p)\nprint('CHILD: GOT FD', fd)\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM, fileno=fd) as␣ , →s:\nwhile True:\nmsg = s.recv(1024)\nif not msg:\nbreak\nprint('CHILD: RECV {!r}'.format(msg))\ns.send(msg)\ndef server(address, in_p, out_p, worker_pid):\nin_p.close()\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True) s.bind(address)\ns.listen(1)\nwhile True:\nclient, addr = s.accept()\nprint('SERVER: Got connection from', addr)\nsend_handle(out_p, client.fileno(), worker_pid)\nclient.close()\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nc1, c2 = multiprocessing.Pipe()\nworker_p = multiprocessing.Process(target=worker, args=(c1,c2))\nworker_p.start()\nserver_p = multiprocessing.Process(target=server,\nargs=(('', 15000), c1, c2, worker_p.pid))\nserver_p.start()\nc1.close()\nc2.close()\n在这个例子中，两个进程被创建并通过一个 multiprocessing 管道连接起来。服\n务器进程打开一个 socket 并等待客户端连接请求。工作进程仅仅使用 recv_handle()\n在管道上面等待接收一个文件描述符。当服务器接收到一个连接，它将产生的 socket\n文件描述符通过 send_handle() 传递给工作进程。工作进程接收到 socket 后向客户端\n回应数据，然后此次连接关闭。\n如果你使用 Telnet 或类似工具连接到服务器，下面是一个演示例子：\nbash % python3 passfd.py SERVER: Got connection from (‘127.0.0.1’,\n55543) CHILD: GOT FD 7 CHILD: RECV b’Hellorn’CHILD: RECV b’\nWorldrn’\n此例最重要的部分是服务器接收到的客户端 socket 实际上被另外一个不同的进程\n处理。服务器仅仅只是将其转手并关闭此连接，然后等待下一个连接。\n讨论\n对于大部分程序员来讲在不同进程之间传递文件描述符好像没什么必要。但是，有\n时候它是构建一个可扩展系统的很有用的工具。例如，在一个多核机器上面，你可以有\n多个 Python 解释器实例，将文件描述符传递给其它解释器来实现负载均衡。\nsend_handle() 和 recv_handle() 函数只能够用于 multiprocessing 连接。使用\n它们来代替管道的使用（参考 11.7 节），只要你使用的是 Unix 域套接字或 Windows\n管道。例如，你可以让服务器和工作者各自以单独的程序来启动。下面是服务器的实现\n例子：")]),e._v(" "),n("h1",{attrs:{id:"servermp-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#servermp-py"}},[e._v("#")]),e._v(" servermp.py")]),e._v(" "),n("p",[e._v("from multiprocessing.connection import Listener\nfrom multiprocessing.reduction import send_handle\nimport socket\ndef server(work_address, port):")]),e._v(" "),n("h1",{attrs:{id:"wait-for-the-worker-to-connect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wait-for-the-worker-to-connect"}},[e._v("#")]),e._v(" Wait for the worker to connect")]),e._v(" "),n("p",[e._v("work_serv = Listener(work_address, authkey=b'peekaboo')\nworker = work_serv.accept()\nworker_pid = worker.recv()")]),e._v(" "),n("h1",{attrs:{id:"now-run-a-tcp-ip-server-and-send-clients-to-worker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#now-run-a-tcp-ip-server-and-send-clients-to-worker"}},[e._v("#")]),e._v(" Now run a TCP/IP server and send clients to worker")]),e._v(" "),n("p",[e._v("s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True) s.bind(('', port))\ns.listen(1)\nwhile True:\nclient, addr = s.accept()\nprint('SERVER: Got connection from', addr)\nsend_handle(worker, client.fileno(), worker_pid)\nclient.close()\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nimport sys\nif len(sys.argv) != 3:\nprint('Usage: server.py server_address port', file=sys.stderr)\nraise SystemExit(1)\nserver(sys.argv[1], int(sys.argv[2]))\n运行这个服务器，只需要执行 python3 servermp.py /tmp/servconn 15000 ，下面是\n相应的工作者代码：")]),e._v(" "),n("h1",{attrs:{id:"workermp-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#workermp-py"}},[e._v("#")]),e._v(" workermp.py")]),e._v(" "),n("p",[e._v("from multiprocessing.connection import Client\nfrom multiprocessing.reduction import recv_handle\nimport os\nfrom socket import socket, AF_INET, SOCK_STREAM\ndef worker(server_address):\nserv = Client(server_address, authkey=b'peekaboo')\nserv.send(os.getpid())\nwhile True:\nfd = recv_handle(serv)\nprint('WORKER: GOT FD', fd)\nwith socket(AF_INET, SOCK_STREAM, fileno=fd) as client:\nwhile True:\nmsg = client.recv(1024)\nif not msg:\nbreak\nprint('WORKER: RECV {!r}'.format(msg))\nclient.send(msg)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nimport sys\nif len(sys.argv) != 2:\nprint('Usage: worker.py server_address', file=sys.stderr)\nraise SystemExit(1)\nworker(sys.argv[1])\n要运行工作者，执行执行命令 python3 workermp.py /tmp/servconn . 效果跟使用\nPipe() 例子是完全一样的。文件描述符的传递会涉及到 UNIX 域套接字的创建和套接\n字的 sendmsg() 方法。不过这种技术并不常见，下面是使用套接字来传递描述符的另\n外一种实现：")]),e._v(" "),n("h1",{attrs:{id:"server-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-py"}},[e._v("#")]),e._v(" server.py")]),e._v(" "),n("p",[e._v("import socket\nimport struct\ndef send_fd(sock, fd):\n'''\nSend a single file descriptor.\n'''\nsock.sendmsg([b'x'],\n[(socket.SOL_SOCKET, socket.SCM_RIGHTS, struct.pack('i',␣ , →fd))])\nack = sock.recv(2)\nassert ack == b'OK'\ndef server(work_address, port):")]),e._v(" "),n("h1",{attrs:{id:"wait-for-the-worker-to-connect-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wait-for-the-worker-to-connect-2"}},[e._v("#")]),e._v(" Wait for the worker to connect")]),e._v(" "),n("p",[e._v("work_serv = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\nwork_serv.bind(work_address)\nwork_serv.listen(1)\nworker, addr = work_serv.accept()")]),e._v(" "),n("h1",{attrs:{id:"now-run-a-tcp-ip-server-and-send-clients-to-worker-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#now-run-a-tcp-ip-server-and-send-clients-to-worker-2"}},[e._v("#")]),e._v(" Now run a TCP/IP server and send clients to worker")]),e._v(" "),n("p",[e._v("s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True) s.bind(('',port))\ns.listen(1)\nwhile True:\nclient, addr = s.accept()\nprint('SERVER: Got connection from', addr)\nsend_fd(worker, client.fileno())\nclient.close()\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nimport sys\nif len(sys.argv) != 3:\nprint('Usage: server.py server_address port', file=sys.stderr)\nraise SystemExit(1)\nserver(sys.argv[1], int(sys.argv[2]))\n下面是使用套接字的工作者实现：")]),e._v(" "),n("h1",{attrs:{id:"worker-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#worker-py"}},[e._v("#")]),e._v(" worker.py")]),e._v(" "),n("p",[e._v("import socket\nimport struct\ndef recv_fd(sock):\n'''\nReceive a single file descriptor\n'''\nmsg, ancdata, flags, addr = sock.recvmsg(1,\nsocket.CMSG_LEN(struct.calcsize('i')))\ncmsg_level, cmsg_type, cmsg_data = ancdata[0]\nassert cmsg_level == socket.SOL_SOCKET and cmsg_type == socket.SCM_RIGHTS\nsock.sendall(b'OK')\nreturn struct.unpack('i', cmsg_data)[0]\ndef worker(server_address):\nserv = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\nserv.connect(server_address)\nwhile True:\nfd = recv_fd(serv)\nprint('WORKER: GOT FD', fd)\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM, fileno=fd) as␣ , →client:\nwhile True:\nmsg = client.recv(1024)\nif not msg:\nbreak\nprint('WORKER: RECV {!r}'.format(msg))\nclient.send(msg)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nimport sys\nif len(sys.argv) != 2:\nprint('Usage: worker.py server_address', file=sys.stderr)\nraise SystemExit(1)\nworker(sys.argv[1])\n如果你想在你的程序中传递文件描述符，建议你参阅其他一些更加高级的文档，\n比如 Unix Network Programming by W. Richard Stevens (Prentice Hall, 1990) . 在 Windows 上传递文件描述符跟 Unix 是不一样的，建议你研究下 multiprocessing.\nreduction 中的源代码看看其工作原理。\n11.12 理解事件驱动的 IO\n问题\n你应该已经听过基于事件驱动或异步 I/O 的包，但是你还不能完全理解它的底层\n到底是怎样工作的，或者是如果使用它的话会对你的程序产生什么影响。\n解决方案\n事件驱动 I/O 本质上来讲就是将基本 I/O 操作（比如读和写）转化为你程序需要\n处理的事件。例如，当数据在某个 socket 上被接受后，它会转换成一个 receive 事件，\n然后被你定义的回调方法或函数来处理。作为一个可能的起始点，一个事件驱动的框架\n可能会以一个实现了一系列基本事件处理器方法的基类开始：\nclass EventHandler:\ndef fileno(self):\n'Return the associated file descriptor'\nraise NotImplemented('must implement')\ndef wants_to_receive(self):\n'Return True if receiving is allowed'\nreturn False\ndef handle_receive(self):\n'Perform the receive operation'\npass\ndef wants_to_send(self):\n'Return True if sending is requested'\nreturn False\ndef handle_send(self):\n'Send outgoing data'\npass\n这个类的实例作为插件被放入类似下面这样的事件循环中：\nimport select\ndef event_loop(handlers):\nwhile True:\nwants_recv = [h for h in handlers if h.wants_to_receive()]\nwants_send = [h for h in handlers if h.wants_to_send()]\ncan_recv, can_send, _ = select.select(wants_recv, wants_send, [])\nfor h in can_recv:\nh.handle_receive()\nfor h in can_send:\nh.handle_send()\n事件循环的关键部分是 select() 调用，它会不断轮询文件描述符从而激活它。在\n调用 select() 之前，时间循环会询问所有的处理器来决定哪一个想接受或发生。然后\n它将结果列表提供给 select() 。然后 select() 返回准备接受或发送的对象组成的列\n表。然后相应的 handle_receive() 或 handle_send() 方法被触发。\n编写应用程序的时候，EventHandler 的实例会被创建。例如，下面是两个简单的\n基于 UDP 网络服务的处理器例子：\nimport socket\nimport time\nclass UDPServer(EventHandler):\ndef "),n("strong",[e._v("init")]),e._v("(self, address):\nself.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nself.sock.bind(address)\ndef fileno(self):\nreturn self.sock.fileno()\ndef wants_to_receive(self):\nreturn True\nclass UDPTimeServer(UDPServer):\ndef handle_receive(self):\nmsg, addr = self.sock.recvfrom(1)\nself.sock.sendto(time.ctime().encode('ascii'), addr)\nclass UDPEchoServer(UDPServer):\ndef handle_receive(self):\nmsg, addr = self.sock.recvfrom(8192)\nself.sock.sendto(msg, addr)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nhandlers = [ UDPTimeServer(('',14000)), UDPEchoServer(('',15000)) ]\nevent_loop(handlers)\n测试这段代码，试着从另外一个 Python 解释器连接它：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from socket import *\ns = socket(AF_INET, SOCK_DGRAM)\ns.sendto(b'',('localhost',14000))\n0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.recvfrom(128)\n(b'Tue Sep 18 14:29:23 2012', ('127.0.0.1', 14000))")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.sendto(b'Hello',('localhost',15000))\n5")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.recvfrom(128)\n(b'Hello', ('127.0.0.1', 15000))")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("实现一个 TCP 服务器会更加复杂一点，因为每一个客户端都要初始化一个新的处\n理器对象。下面是一个 TCP 应答客户端例子：\nclass TCPServer(EventHandler):\ndef "),n("strong",[e._v("init")]),e._v("(self, address, client_handler, handler_list):\nself.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nself.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\nself.sock.bind(address)\nself.sock.listen(1)\nself.client_handler = client_handler\nself.handler_list = handler_list\ndef fileno(self):\nreturn self.sock.fileno()\ndef wants_to_receive(self):\nreturn True\ndef handle_receive(self):\nclient, addr = self.sock.accept()")]),e._v(" "),n("h1",{attrs:{id:"add-the-client-to-the-event-loop-s-handler-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-the-client-to-the-event-loop-s-handler-list"}},[e._v("#")]),e._v(" Add the client to the event loop's handler list")]),e._v(" "),n("p",[e._v("self.handler_list.append(self.client_handler(client, self.handler_\n,\n→list))\nclass TCPClient(EventHandler):\ndef "),n("strong",[e._v("init")]),e._v("(self, sock, handler_list):\nself.sock = sock\nself.handler_list = handler_list\nself.outgoing = bytearray()\ndef fileno(self):\nreturn self.sock.fileno()\ndef close(self):\nself.sock.close()")]),e._v(" "),n("h1",{attrs:{id:"remove-myself-from-the-event-loop-s-handler-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#remove-myself-from-the-event-loop-s-handler-list"}},[e._v("#")]),e._v(" Remove myself from the event loop's handler list")]),e._v(" "),n("p",[e._v("self.handler_list.remove(self)\ndef wants_to_send(self):\nreturn True if self.outgoing else False\ndef handle_send(self):\nnsent = self.sock.send(self.outgoing)\nself.outgoing = self.outgoing[nsent:]\nclass TCPEchoClient(TCPClient):\ndef wants_to_receive(self):\nreturn True\ndef handle_receive(self):\ndata = self.sock.recv(8192)\nif not data:\nself.close()\nelse:\nself.outgoing.extend(data)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nhandlers = []\nhandlers.append(TCPServer(('',16000), TCPEchoClient, handlers))\nevent_loop(handlers)\nTCP 例子的关键点是从处理器中列表增加和删除客户端的操作。对每一个连接，\n一个新的处理器被创建并加到列表中。当连接被关闭后，每个客户端负责将其从列表中\n删除。如果你运行程序并试着用 Telnet 或类似工具连接，它会将你发送的消息回显给\n你。并且它能很轻松的处理多客户端连接。\n讨论\n实际上所有的事件驱动框架原理跟上面的例子相差无几。实际的实现细节和软件\n架构可能不一样，但是在最核心的部分，都会有一个轮询的循环来检查活动 socket，并\n执行响应操作。\n事件驱动 I/O 的一个可能好处是它能处理非常大的并发连接，而不需要使用多线\n程或多进程。也就是说，select() 调用（或其他等效的）能监听大量的 socket 并响应\n它们中任何一个产生事件的。在循环中一次处理一个事件，并不需要其他的并发机制。\n事件驱动 I/O 的缺点是没有真正的同步机制。如果任何事件处理器方法阻塞或执\n行一个耗时计算，它会阻塞所有的处理进程。调用那些并不是事件驱动风格的库函数也\n会有问题，同样要是某些库函数调用会阻塞，那么也会导致整个事件循环停止。\n对于阻塞或耗时计算的问题可以通过将事件发送个其他单独的现场或进程来处理。\n不过，在事件循环中引入多线程和多进程是比较棘手的，下面的例子演示了如何使用\nconcurrent.futures 模块来实现：\nfrom concurrent.futures import ThreadPoolExecutor\nimport os\nclass ThreadPoolHandler(EventHandler):\ndef "),n("strong",[e._v("init")]),e._v("(self, nworkers):\nif os.name == 'posix':\nself.signal_done_sock, self.done_sock = socket.socketpair()\nelse:\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind(('127.0.0.1', 0))\nserver.listen(1)\nself.signal_done_sock = socket.socket(socket.AF_INET,\nsocket.SOCK_STREAM)\nself.signal_done_sock.connect(server.getsockname())\nself.done_sock, _ = server.accept()\nserver.close()\nself.pending = []\nself.pool = ThreadPoolExecutor(nworkers)\ndef fileno(self):\nreturn self.done_sock.fileno()")]),e._v(" "),n("h1",{attrs:{id:"callback-that-executes-when-the-thread-is-done"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#callback-that-executes-when-the-thread-is-done"}},[e._v("#")]),e._v(" Callback that executes when the thread is done")]),e._v(" "),n("p",[e._v("def _complete(self, callback, r):\nself.pending.append((callback, r.result()))\nself.signal_done_sock.send(b'x')")]),e._v(" "),n("h1",{attrs:{id:"run-a-function-in-a-thread-pool"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-a-function-in-a-thread-pool"}},[e._v("#")]),e._v(" Run a function in a thread pool")]),e._v(" "),n("p",[e._v("def run(self, func, args=(), kwargs={},*,callback):\nr = self.pool.submit(func, *args, **kwargs)\nr.add_done_callback(lambda r: self._complete(callback, r))\ndef wants_to_receive(self):\nreturn True")]),e._v(" "),n("h1",{attrs:{id:"run-callback-functions-of-completed-work"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-callback-functions-of-completed-work"}},[e._v("#")]),e._v(" Run callback functions of completed work")]),e._v(" "),n("p",[e._v("def handle_receive(self):")]),e._v(" "),n("h1",{attrs:{id:"invoke-all-pending-callback-functions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#invoke-all-pending-callback-functions"}},[e._v("#")]),e._v(" Invoke all pending callback functions")]),e._v(" "),n("p",[e._v("for callback, result in self.pending:\ncallback(result)\nself.done_sock.recv(1)\nself.pending = []\n在代码中，run() 方法被用来将工作提交给回调函数池，处理完成后被激发。实际\n工作被提交给 ThreadPoolExecutor 实例。不过一个难点是协调计算结果和事件循环，\n为了解决它，我们创建了一对 socket 并将其作为某种信号量机制来使用。当线程池完\n成工作后，它会执行类中的 _complete() 方法。这个方法再某个 socket 上写入字节之\n前会讲挂起的回调函数和结果放入队列中。fileno() 方法返回另外的那个 socket。因\n此，这个字节被写入时，它会通知事件循环，然后 handle_receive() 方法被激活并为\n所有之前提交的工作执行回调函数。坦白讲，说了这么多连我自己都晕了。下面是一个\n简单的服务器，演示了如何使用线程池来实现耗时的计算：")]),e._v(" "),n("h1",{attrs:{id:"a-really-bad-fibonacci-implementation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-really-bad-fibonacci-implementation"}},[e._v("#")]),e._v(" A really bad Fibonacci implementation")]),e._v(" "),n("p",[e._v("def fib(n):\nif n < 2:\nreturn 1\nelse:\nreturn fib(n - 1) + fib(n - 2)\nclass UDPFibServer(UDPServer):\ndef handle_receive(self):\nmsg, addr = self.sock.recvfrom(128) n = int(msg)\npool.run(fib, (n,), callback=lambda r: self.respond(r, addr))\ndef respond(self, result, addr):\nself.sock.sendto(str(result).encode('ascii'), addr)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\npool = ThreadPoolHandler(16)\nhandlers = [ pool, UDPFibServer(('',16000))]\nevent_loop(handlers)\n运行这个服务器，然后试着用其它 Python 程序来测试它：\nfrom socket import *\nsock = socket(AF_INET, SOCK_DGRAM)\nfor x in range(40):\nsock.sendto(str(x).encode('ascii'), ('localhost', 16000))\nresp = sock.recvfrom(8192)\nprint(resp[0])\n你应该能在不同窗口中重复的执行这个程序，并且不会影响到其他程序，尽管当数\n字便越来越大时候它会变得越来越慢。\n已经阅读完了这一小节，那么你应该使用这里的代码吗？也许不会。你应该选择一\n个可以完成同样任务的高级框架。不过，如果你理解了基本原理，你就能理解这些框架\n所使用的核心技术。作为对回调函数编程的替代，事件驱动编码有时候会使用到协程，\n参考 12.12 小节的一个例子。\n11.13 发送与接收大型数组\n问题\n你要通过网络连接发送和接受连续数据的大型数组，并尽量减少数据的复制操作。\n解决方案\n下面的函数利用 memoryviews 来发送和接受大数组：")]),e._v(" "),n("h1",{attrs:{id:"zerocopy-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#zerocopy-py"}},[e._v("#")]),e._v(" zerocopy.py")]),e._v(" "),n("p",[e._v("def send_from(arr, dest):\nview = memoryview(arr).cast('B')\nwhile len(view):\nnsent = dest.send(view)\nview = view[nsent:]\ndef recv_into(arr, source):\nview = memoryview(arr).cast('B')\nwhile len(view):\nnrecv = source.recv_into(view)\nview = view[nrecv:]\n为了测试程序，首先创建一个通过 socket 连接的服务器和客户端程序：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from socket import *\ns = socket(AF_INET, SOCK_STREAM)\ns.bind(('', 25000))\ns.listen(1)\nc,a = s.accept()")])])])]),e._v(" "),n("p",[e._v("在客户端（另外一个解释器中）：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from socket import *\nc = socket(AF_INET, SOCK_STREAM)\nc.connect(('localhost', 25000))")])])])]),e._v(" "),n("p",[e._v("本节的目标是你能通过连接传输一个超大数组。这种情况的话，可以通过 array\n模块或 numpy 模块来创建数组：")]),e._v(" "),n("h1",{attrs:{id:"server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server"}},[e._v("#")]),e._v(" Server")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import numpy\na = numpy.arange(0.0, 50000000.0)\nsend_from(a, c)")])])])]),e._v(" "),n("h1",{attrs:{id:"client"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#client"}},[e._v("#")]),e._v(" Client")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import numpy\na = numpy.zeros(shape=50000000, dtype=float)\na[0:10]\narray([ 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("recv_into(a, c)\na[0:10]\narray([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n在数据密集型分布式计算和平行计算程序中，自己写程序来实现发送/接受大量数\n据并不常见。不过，要是你确实想这样做，你可能需要将你的数据转换成原始字节，以\n便给低层的网络函数使用。你可能还需要将数据切割成多个块，因为大部分和网络相关\n的函数并不能一次性发送或接受超大数据块。\n一种方法是使用某种机制序列化数据——可能将其转换成一个字节字符串。不过，\n这样最终会创建数据的一个复制。就算你只是零碎的做这些，你的代码最终还是会有大\n量的小型复制操作。\n本节通过使用内存视图展示了一些魔法操作。本质上，一个内存视图就是一个已存\n在数组的覆盖层。不仅仅是那样，内存视图还能以不同的方式转换成不同类型来表现数\n据。这个就是下面这个语句的目的：\nview = memoryview(arr).cast('B')\n它接受一个数组 arr 并将其转换为一个无符号字节的内存视图。这个视图能被传递\n给 socket 相关函数，比如 socket.send() 或 send.recv_into() 。在内部，这些方法\n能够直接操作这个内存区域。例如，sock.send() 直接从内存中发生数据而不需要复\n制。send.recv_into() 使用这个内存区域作为接受操作的输入缓冲区。\n剩下的一个难点就是 socket 函数可能只操作部分数据。通常来讲，我们得使用很\n多不同的 send() 和 recv_into() 来传输整个数组。不用担心，每次操作后，视图会通\n过发送或接受字节数量被切割成新的视图。新的视图同样也是内存覆盖层。因此，还是\n没有任何的复制操作。\n这里有个问题就是接受者必须事先知道有多少数据要被发送，以便它能预分配一\n个数组或者确保它能将接受的数据放入一个已经存在的数组中。如果没办法知道的话，\n发送者就得先将数据大小发送过来，然后再发送实际的数组数据。")]),e._v(" "),n("h2",{attrs:{id:"第十二章-并发编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第十二章-并发编程"}},[e._v("#")]),e._v(" 第十二章：并发编程")]),e._v(" "),n("h3",{attrs:{id:"_12-1-启动与停止线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-1-启动与停止线程"}},[e._v("#")]),e._v(" 12.1 启动与停止线程")]),e._v(" "),n("p",[e._v("问题\n你要为需要并发执行的代码创建/销毁线程\n解决方案\nthreading 库可以在单独的线程中执行任何的在 Python 中可以调用的对象。你可以创建一个 Thread 对象并将你要执行的对象以 target 参数的形式提供给该对象。")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Code to execute in an independent thread")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" time\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("countdown")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'T-minus'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tn "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\ttime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("sleep"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create and launch a thread")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" threading "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Thread\nt "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("countdown"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" args"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("当你创建好一个线程对象后，该对象并不会立即执行，除非你调用它的 start()方法（当你调用 start() 方法时，它会调用你传递进来的函数，并把你传递进来的参数传递给该函数）。Python 中的线程会在一个单独的系统级线程中执行（比如说一个POSIX 线程或者一个 Windows 线程），这些线程将由操作系统来全权管理。线程一旦启动，将独立执行直到目标函数返回。你可以查询一个线程对象的状态，看它是否还在执行：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("is_alive"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Still running'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Completed'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("你也可以将一个线程加入到当前线程，并等待它终止：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[e._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("join"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("Python 解释器直到所有线程都终止前仍保持运行。对于需要长时间运行的线程或者需要一直运行的后台任务，你应当考虑使用后台线程。例如：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[e._v("t "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("countdown"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" args"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" daemon"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" \nt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("后台线程无法等待，不过，这些线程会在主线程终止时自动销毁。除了如上所示的两个操作，并没有太多可以对线程做的事情。你无法结束一个线程，无法给它发送信号，无法调整它的调度，也无法执行其他高级操作。如果需要这些特性，你需要自己添加。比如说，如果你需要终止线程，那么这个线程必须通过编程在某个特定点轮询来退出。你可以像下边这样把线程放入一个类中：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("CountdownTask")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_running "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("terminate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_running "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("False")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_running "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("and")]),e._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'T-minus'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t\tn "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\t\t\ttime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("sleep"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" \nc "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" CountdownTask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("run"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" args"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("terminate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Signal termination")]),e._v("\nt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("join"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Wait for actual termination (if needed)")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("如果线程执行一些像 I/O 这样的阻塞操作，那么通过轮询来终止线程将使得线程之间的协调变得非常棘手。比如，如果一个线程一直阻塞在一个 I/O 操作上，它就永远无法返回，也就无法检查自己是否已经被结束了。要正确处理这些问题，你需要利用超时循环来小心操作线程。例子如下：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("IOTask")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("terminate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_running "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("False")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# sock is a socket")]),e._v("\n\t\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("settimeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set timeout period")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_running"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Perform a blocking I/O operation w/ timeout")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("try")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t\tdata "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("recv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("8192")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("break")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("except")]),e._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("continue")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Continued processing")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Terminated")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br")])]),n("ul",[n("li",[e._v("由于全局解释锁（GIL）的原因，Python 的线程被限制到同一时刻只允许一个线程执行这样一个执行模型。所以，Python 的线程更适用于处理 I/O 和其他需要并发执行的阻塞操作（比如等待 I/O、等待从数据库获取数据等等），而不是需要多处理器并行的计算密集型任务。")]),e._v(" "),n("li",[e._v("有时你会看到下边这种通过继承 Thread 类来实现的线程：")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" threading "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Thread\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("CountdownThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("__init__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'T-minus'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\t\t\ttime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("sleep"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" \nc "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" CountdownThread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" \nc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v("尽管这样也可以工作，但这使得你的代码依赖于 threading 库，所以你的这些代码只能在线程上下文中使用。上文所写的那些代码、函数都是与 threading 库无关的，这样就使得这些代码可以被用在其他的上下文中，可能与线程有关，也可能与线程无关。比如，你可以通过 multiprocessing 模块在一个单独的进程中执行你的代码：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" multiprocessing\nc "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" CountdownTask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" \np "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" multiprocessing"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("run"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\np"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("再次重申，这段代码仅适用于 CountdownTask 类是以独立于实际的并发手段（多线程、多进程等等）实现的情况。")]),e._v(" "),n("h3",{attrs:{id:"_12-2-判断线程是否已经启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-2-判断线程是否已经启动"}},[e._v("#")]),e._v(" 12.2 判断线程是否已经启动")]),e._v(" "),n("p",[e._v("线程的一个关键特性是每个线程都是独立运行且状态不可预测。如果程序中的其他线程需要通过判断某个线程的状态来确定自己下一步的操作，这时线程同步问题就会变得非常棘手。为了解决这些问题，我们需要使用 threading 库中的 Event 对象。Event 对象包含一个可由线程设置的信号标志，它允许线程等待某些事件的发生。在初始情况下，event 对象中的信号标志被设置为假。如果有线程等待一个 event 对象，而这个 event 对象的标志为假，那么这个线程将会被一直阻塞直至该标志为真。一个线程如果将一个 event 对象的信号标志设置为真，它将唤醒所有等待这个 event 对象的线程。如果一个线程等待一个已经被设置为真的 event 对象，那么它将忽略这个事件，继续执行。下边的代码展示了如何使用 Event 来协调线程的启动：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" threading "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" Event\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" time\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Code to execute in an independent thread")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("countdown")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" started_evt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'countdown starting'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tstarted_evt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'T-minus'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\tn "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\t\ttime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("sleep"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create the event object that will be used to signal startup")]),e._v("\nstarted_evt "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Launch the thread and pass the startup event")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Launching countdown'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" \nt "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("countdown"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" args"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("started_evt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Wait for the thread to start")]),e._v("\nstarted_evt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("wait"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'countdown is running'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br")])]),n("ul",[n("li",[e._v("当你执行这段代码，“countdown is running”总是显示在“countdown starting”之后显示。这是由于使用 event 来协调线程，使得主线程要等到 countdown() 函数输出启动信息后，才能继续执行。")]),e._v(" "),n("li",[e._v("event 对象最好单次使用，就是说，你创建一个 event 对象，让某个线程等待这个对象，一旦这个对象被设置为真，你就应该丢弃它。尽管可以通过 clear() 方法来重置 event 对象，但是很难确保安全地清理 event 对象并对它重新赋值。很可能会发生错过事件、死锁或者其他问题（特别是，你无法保证重置 event 对象的代码会在线程再次等待这个 event 对象之前执行）。如果一个线程需要不停地重复使用 event 对象，你最好使用 Condition 对象来代替。下面的代码使用 Condition 对象实现了一个周期定时器，每当定时器超时的时候，其他线程都可以监测到：\nimport threading\nimport time\nclass PeriodicTimer:\ndef "),n("strong",[e._v("init")]),e._v("(self, interval):\nself._interval = interval\nself._flag = 0\nself._cv = threading.Condition()\ndef start(self):\nt = threading.Thread(target=self.run)\nt.daemon = True\nt.start()\ndef run(self):\n'''\nRun the timer and notify waiting threads after each interval\n'''\nwhile True:\ntime.sleep(self._interval)\nwith self._cv:\nself._flag ^= 1\nself._cv.notify_all()\ndef wait_for_tick(self):\n'''\nWait for the next tick of the timer\n'''\nwith self._cv:\nlast_flag = self._flag\nwhile last_flag == self._flag:\nself._cv.wait()")])]),e._v(" "),n("h1",{attrs:{id:"example-use-of-the-timer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-of-the-timer"}},[e._v("#")]),e._v(" Example use of the timer")]),e._v(" "),n("p",[e._v("ptimer = PeriodicTimer(5)\nptimer.start()")]),e._v(" "),n("h1",{attrs:{id:"two-threads-that-synchronize-on-the-timer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#two-threads-that-synchronize-on-the-timer"}},[e._v("#")]),e._v(" Two threads that synchronize on the timer")]),e._v(" "),n("p",[e._v("def countdown(nticks):\nwhile nticks > 0:\nptimer.wait_for_tick()\nprint('T-minus', nticks)\nnticks -= 1\ndef countup(last):\nn = 0\nwhile n < last:\nptimer.wait_for_tick()\nprint('Counting', n)\nn += 1\nthreading.Thread(target=countdown, args=(10,)).start()\nthreading.Thread(target=countup, args=(5,)).start()\nevent 对象的一个重要特点是当它被设置为真时会唤醒所有等待它的线程。如果你\n只想唤醒单个线程，最好是使用信号量或者 Condition 对象来替代。考虑一下这段使\n用信号量实现的代码：")]),e._v(" "),n("h1",{attrs:{id:"worker-thread"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#worker-thread"}},[e._v("#")]),e._v(" Worker thread")]),e._v(" "),n("p",[e._v("def worker(n, sema):")]),e._v(" "),n("h1",{attrs:{id:"wait-to-be-signaled"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wait-to-be-signaled"}},[e._v("#")]),e._v(" Wait to be signaled")]),e._v(" "),n("p",[e._v("sema.acquire()")]),e._v(" "),n("h1",{attrs:{id:"do-some-work"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#do-some-work"}},[e._v("#")]),e._v(" Do some work")]),e._v(" "),n("p",[e._v("print('Working', n)")]),e._v(" "),n("h1",{attrs:{id:"create-some-threads"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-some-threads"}},[e._v("#")]),e._v(" Create some threads")]),e._v(" "),n("p",[e._v("sema = threading.Semaphore(0)\nnworkers = 10\nfor n in range(nworkers):\nt = threading.Thread(target=worker, args=(n, sema,))\nt.start()\n运行上边的代码将会启动一个线程池，但是并没有什么事情发生。这是因为所有的\n线程都在等待获取信号量。每次信号量被释放，只有一个线程会被唤醒并执行，示例如\n下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("sema.release()\nWorking 0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sema.release()\nWorking 1")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("编写涉及到大量的线程间同步问题的代码会让你痛不欲生。比较合适的方式是使\n用队列来进行线程间通信或者每个把线程当作一个 Actor，利用 Actor 模型来控制并\n发。下一节将会介绍到队列，而 Actor 模型将在 12.10 节介绍。")]),e._v(" "),n("h3",{attrs:{id:"_12-3-线程间通信"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-3-线程间通信"}},[e._v("#")]),e._v(" 12.3 线程间通信")]),e._v(" "),n("p",[e._v("从一个线程向另一个线程发送数据最安全的方式可能就是使用 queue 库中的队列了。创建一个被多个线程共享的 Queue 对象，这些线程通过使用 put() 和 get() 操作来向队列中添加或者删除元素。例如：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" queue "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Queue\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" threading "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Thread\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A thread that produces data")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("producer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("out_q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Produce some data")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\t\tout_q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("put"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A thread that consumes data")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("consumer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("in_q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get some data")]),e._v("\n\t\tdata "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" in_q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("get"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Process the data")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create the shared queue and launch both threads")]),e._v("\nq "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("consumer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" args"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("producer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" args"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br")])]),n("p",[e._v("Queue 对象已经包含了必要的锁，所以你可以通过它在多个线程间多安全地共享数据。当使用队列时，协调生产者和消费者的关闭问题可能会有一些麻烦。一个通用的解决方法是在队列中放置一个特殊的值，当消费者读到这个值的时候，终止执行。例如：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" queue "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Queue\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" threading "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Thread\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Object that signals shutdown")]),e._v("\n_sentinel "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A thread that produces data")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("producer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("out_q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" running"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Produce some data")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\t\tout_q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("put"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Put the sentinel on the queue to indicate completion")]),e._v("\n\tout_q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("put"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("_sentinel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A thread that consumes data")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("consumer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("in_q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get some data")]),e._v("\n\t\tdata "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" in_q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("get"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Check for termination")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" data "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("is")]),e._v(" _sentinel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\tin_q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("put"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("_sentinel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("break")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Process the data")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br")])]),n("p",[e._v("本例中有一个特殊的地方：消费者在读到这个特殊值之后立即又把它放回到队列中，将之传递下去。这样，所有监听这个队列的消费者线程就可以全部关闭了。尽管队列是最常见的线程间通信机制，但是仍然可以自己通过创建自己的数据结构并添加所需的锁和同步机制来实现线程间通信。最常见的方法是使用 Condition 变量来包装你的数据结构。下边这个例子演示了如何创建一个线程安全的优先级队列，如同 1.5 节中介绍的那样。\nimport heapq\nimport threading\nclass PriorityQueue:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._queue = []\nself._count = 0\nself._cv = threading.Condition()\ndef put(self, item, priority):\nwith self._cv:\nheapq.heappush(self._queue, (-priority, self._count, item))\nself._count += 1\nself._cv.notify()\ndef get(self):\nwith self._cv:\nwhile len(self._queue) == 0:\nself._cv.wait()\nreturn heapq.heappop(self._queue)[-1]\n使用队列来进行线程间通信是一个单向、不确定的过程。通常情况下，你没有办法\n知道接收数据的线程是什么时候接收到的数据并开始工作的。不过队列对象提供一些\n基本完成的特性，比如下边这个例子中的 task_done() 和 join() ：\nfrom queue import Queue\nfrom threading import Thread")]),e._v(" "),n("h1",{attrs:{id:"a-thread-that-produces-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-thread-that-produces-data"}},[e._v("#")]),e._v(" A thread that produces data")]),e._v(" "),n("p",[e._v("def producer(out_q):\nwhile running:")]),e._v(" "),n("h1",{attrs:{id:"produce-some-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#produce-some-data"}},[e._v("#")]),e._v(" Produce some data")]),e._v(" "),n("p",[e._v("...\nout_q.put(data)")]),e._v(" "),n("h1",{attrs:{id:"a-thread-that-consumes-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-thread-that-consumes-data"}},[e._v("#")]),e._v(" A thread that consumes data")]),e._v(" "),n("p",[e._v("def consumer(in_q):\nwhile True:")]),e._v(" "),n("h1",{attrs:{id:"get-some-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-some-data"}},[e._v("#")]),e._v(" Get some data")]),e._v(" "),n("p",[e._v("data = in_q.get()")]),e._v(" "),n("h1",{attrs:{id:"process-the-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-the-data"}},[e._v("#")]),e._v(" Process the data")]),e._v(" "),n("p",[e._v("...")]),e._v(" "),n("h1",{attrs:{id:"indicate-completion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#indicate-completion"}},[e._v("#")]),e._v(" Indicate completion")]),e._v(" "),n("p",[e._v("in_q.task_done()")]),e._v(" "),n("h1",{attrs:{id:"create-the-shared-queue-and-launch-both-threads"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-the-shared-queue-and-launch-both-threads"}},[e._v("#")]),e._v(" Create the shared queue and launch both threads")]),e._v(" "),n("p",[e._v("q = Queue()\nt1 = Thread(target=consumer, args=(q,))\nt2 = Thread(target=producer, args=(q,))\nt1.start()\nt2.start()")]),e._v(" "),n("h1",{attrs:{id:"wait-for-all-produced-items-to-be-consumed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wait-for-all-produced-items-to-be-consumed"}},[e._v("#")]),e._v(" Wait for all produced items to be consumed")]),e._v(" "),n("p",[e._v("q.join()\n如果一个线程需要在一个“消费者”线程处理完特定的数据项时立即得到通知，\n你可以把要发送的数据和一个 Event 放到一起使用，这样“生产者”就可以通过这个\nEvent 对象来监测处理的过程了。示例如下：\nfrom queue import Queue\nfrom threading import Thread, Event")]),e._v(" "),n("h1",{attrs:{id:"a-thread-that-produces-data-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-thread-that-produces-data-2"}},[e._v("#")]),e._v(" A thread that produces data")]),e._v(" "),n("p",[e._v("def producer(out_q):\nwhile running:")]),e._v(" "),n("h1",{attrs:{id:"produce-some-data-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#produce-some-data-2"}},[e._v("#")]),e._v(" Produce some data")]),e._v(" "),n("p",[e._v("...")]),e._v(" "),n("h1",{attrs:{id:"make-an-data-event-pair-and-hand-it-to-the-consumer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-an-data-event-pair-and-hand-it-to-the-consumer"}},[e._v("#")]),e._v(" Make an (data, event) pair and hand it to the consumer")]),e._v(" "),n("p",[e._v("evt = Event()\nout_q.put((data, evt))\n...")]),e._v(" "),n("h1",{attrs:{id:"wait-for-the-consumer-to-process-the-item"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wait-for-the-consumer-to-process-the-item"}},[e._v("#")]),e._v(" Wait for the consumer to process the item")]),e._v(" "),n("p",[e._v("evt.wait()")]),e._v(" "),n("h1",{attrs:{id:"a-thread-that-consumes-data-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-thread-that-consumes-data-2"}},[e._v("#")]),e._v(" A thread that consumes data")]),e._v(" "),n("p",[e._v("def consumer(in_q):\nwhile True:")]),e._v(" "),n("h1",{attrs:{id:"get-some-data-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-some-data-2"}},[e._v("#")]),e._v(" Get some data")]),e._v(" "),n("p",[e._v("data, evt = in_q.get()")]),e._v(" "),n("h1",{attrs:{id:"process-the-data-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-the-data-2"}},[e._v("#")]),e._v(" Process the data")]),e._v(" "),n("p",[e._v("...")]),e._v(" "),n("h1",{attrs:{id:"indicate-completion-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#indicate-completion-2"}},[e._v("#")]),e._v(" Indicate completion")]),e._v(" "),n("p",[e._v("evt.set()\n讨论\n基于简单队列编写多线程程序在多数情况下是一个比较明智的选择。从线程安全\n队列的底层实现来看，你无需在你的代码中使用锁和其他底层的同步机制，这些只会把\n你的程序弄得乱七八糟。此外，使用队列这种基于消息的通信机制可以被扩展到更大的\n应用范畴，比如，你可以把你的程序放入多个进程甚至是分布式系统而无需改变底层的\n队列结构。使用线程队列有一个要注意的问题是，向队列中添加数据项时并不会复制此\n数据项，线程间通信实际上是在线程间传递对象引用。如果你担心对象的共享状态，那\n你最好只传递不可修改的数据结构（如：整型、字符串或者元组）或者一个对象的深拷\n贝。例如：\nfrom queue import Queue\nfrom threading import Thread\nimport copy")]),e._v(" "),n("h1",{attrs:{id:"a-thread-that-produces-data-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-thread-that-produces-data-3"}},[e._v("#")]),e._v(" A thread that produces data")]),e._v(" "),n("p",[e._v("def producer(out_q):\nwhile True:")]),e._v(" "),n("h1",{attrs:{id:"produce-some-data-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#produce-some-data-3"}},[e._v("#")]),e._v(" Produce some data")]),e._v(" "),n("p",[e._v("...\nout_q.put(copy.deepcopy(data))")]),e._v(" "),n("h1",{attrs:{id:"a-thread-that-consumes-data-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-thread-that-consumes-data-3"}},[e._v("#")]),e._v(" A thread that consumes data")]),e._v(" "),n("p",[e._v("def consumer(in_q):\nwhile True:")]),e._v(" "),n("h1",{attrs:{id:"get-some-data-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-some-data-3"}},[e._v("#")]),e._v(" Get some data")]),e._v(" "),n("p",[e._v("data = in_q.get()")]),e._v(" "),n("h1",{attrs:{id:"process-the-data-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-the-data-3"}},[e._v("#")]),e._v(" Process the data")]),e._v(" "),n("p",[e._v("...\nQueue 对象提供一些在当前上下文很有用的附加特性。比如在创建 Queue 对象时\n提供可选的 size 参数来限制可以添加到队列中的元素数量。对于“生产者”与“消费\n者”速度有差异的情况，为队列中的元素数量添加上限是有意义的。比如，一个“生产\n者”产生项目的速度比“消费者”“消费”的速度快，那么使用固定大小的队列就可以\n在队列已满的时候阻塞队列，以免未预期的连锁效应扩散整个程序造成死锁或者程序\n运行失常。在通信的线程之间进行“流量控制”是一个看起来容易实现起来困难的问\n题。如果你发现自己曾经试图通过摆弄队列大小来解决一个问题，这也许就标志着你的\n程序可能存在脆弱设计或者固有的可伸缩问题。get() 和 put() 方法都支持非阻塞方\n式和设定超时，例如：\nimport queue\nq = queue.Queue()\ntry:\ndata = q.get(block=False)\nexcept queue.Empty:\n...\ntry:q.put(item, block=False)\nexcept queue.Full:\n...\ntry:\ndata = q.get(timeout=5.0)\nexcept queue.Empty:\n...\n这些操作都可以用来避免当执行某些特定队列操作时发生无限阻塞的情况，比如，\n一个非阻塞的 put() 方法和一个固定大小的队列一起使用，这样当队列已满时就可以\n执行不同的代码。比如输出一条日志信息并丢弃。\ndef producer(q):\n...\ntry:q.put(item, block=False)\nexcept queue.Full:\nlog.warning('queued item %r discarded!', item)\n如果你试图让消费者线程在执行像 q.get() 这样的操作时，超时自动终止以便检\n查终止标志，你应该使用 q.get() 的可选参数 timeout ，如下：\n_running = True\ndef consumer(q):\nwhile _running:\ntry:\nitem = q.get(timeout=5.0)")]),e._v(" "),n("h1",{attrs:{id:"process-item-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-item-4"}},[e._v("#")]),e._v(" Process item")]),e._v(" "),n("p",[e._v("...\nexcept queue.Empty:\npass\n最后，有 q.qsize() ，q.full() ，q.empty() 等实用方法可以获取一个队列的当前\n大小和状态。但要注意，这些方法都不是线程安全的。可能你对一个队列使用 empty()\n判断出这个队列为空，但同时另外一个线程可能已经向这个队列中插入一个数据项。所\n以，你最好不要在你的代码中使用这些方法。")]),e._v(" "),n("h3",{attrs:{id:"_12-4-给关键部分加锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-4-给关键部分加锁"}},[e._v("#")]),e._v(" 12.4 给关键部分加锁")]),e._v(" "),n("p",[e._v("要在多线程程序中安全使用可变对象，你需要使用 threading 库中的 Lock 对象")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" threading\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("SharedCounter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\tA counter object that can be shared by multiple threads.\n\t'''")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" initial_value "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_value "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" initial_value\n\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_value_lock "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("incr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("delta"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\t\tIncrement the counter with locking\n\t\t'''")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_value_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_value "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" delta\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("decr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("delta"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\t\tDecrement the counter with locking\n\t\t'''")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_value_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_value "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-=")]),e._v(" delta\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br")])]),n("ul",[n("li",[e._v("Lock 对象和 with 语句块一起使用可以保证互斥执行，就是每次只有一个线程可以执行 with 语句包含的代码块。with 语句会在这个代码块执行前自动获取锁，在执行结束后自动释放锁。")]),e._v(" "),n("li",[e._v("为了避免出现死锁的情况，使用锁机制的程序应该设定为每个线程一次只允许获取一个锁。如果不能这样做的话，你就需要更高级的死锁避免机制，我们将在 12.5 节介绍。在 threading 库中还提供了其他的同步原语，比如 RLock 和 Semaphore 对象。但是根据以往经验，这些原语是用于一些特殊的情况，如果你只是需要简单地对可变对象进行锁定，那就不应该使用它们。一个RLock （可重入锁）可以被同一个线程多次获取，主要用来实现基于监测对象模式的锁定和同步。在使用这种锁的情况下，当锁被持有时，只有一个线程可以使用完整的函数或者类中的方法。比如，你可以实现一个这样的 SharedCounter 类：")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" threading\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("SharedCounter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\tA counter object that can be shared by multiple threads.\n\t'''")]),e._v("\n\t_lock "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("RLock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" initial_value "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_value "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" initial_value\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("incr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("delta"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\t\tIncrement the counter with locking\n\t\t'''")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" SharedCounter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_value "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" delta\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("decr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("delta"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\t\tDecrement the counter with locking\n\t\t'''")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" SharedCounter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tself"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("incr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("delta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br")])]),n("p",[e._v("在上边这个例子中，没有对每一个实例中的可变对象加锁，取而代之的是一个被所有实例共享的类级锁。这个锁用来同步类方法，具体来说就是，这个锁可以保证一次只有一个线程可以调用这个类方法。不过，与一个标准的锁不同的是，已经持有这个锁的方法在调用同样使用这个锁的方法时，无需再次获取锁。比如 decr 方法。这种实现方式的一个特点是，无论这个类有多少个实例都只用一个锁。因此在需要大量使用计数器的情况下内存效率更高。不过这样做也有缺点，就是在程序中使用大量线程并频繁更新计数器时会有争用锁的问题。信号量对象是一个建立在共享计数器基础上的同步原语。如果计数器不为 0，with 语句将计数器减 1，线程被允许执行。with 语句执行结束后，计数器加１。如果计数器为 0，线程将被阻塞，直到其他线程结束将计数器加1。尽管你可以在程序中像标准锁一样使用信号量来做线程同步，但是这种方式并不被推荐，因为使用信号量为程序增加的复杂性会影响程序性能。相对于简单地作为锁使用，信号量更适用于那些需要在线程之间引入信号或者限制的程序。比如，你需要限制一段代码的并发访问量，你就可以像下面这样使用信号量完成：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" threading "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Semaphore\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" urllib"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("request\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# At most, five threads allowed to run at once")]),e._v("\n_fetch_url_sema "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Semaphore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("fetch_url")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" _fetch_url_sema"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" urllib"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("urlopen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("h3",{attrs:{id:"_12-5-防止死锁的加锁机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-5-防止死锁的加锁机制"}},[e._v("#")]),e._v(" 12.5 防止死锁的加锁机制")]),e._v(" "),n("p",[e._v("在多线程程序中，死锁问题很大一部分是由于线程同时获取多个锁造成的。举个例子：一个线程获取了第一个锁，然后在获取第二个锁的时候发生阻塞，那么这个线程就可能阻塞其他线程的执行，从而导致整个程序假死。解决死锁问题的一种方案是为程序中的每一个锁分配一个唯一的 id，然后只允许按照升序规则来使用多个锁，这个规则使用上下文管理器是非常容易实现的，示例如下：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" threading\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" contextlib "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" contextmanager\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Thread-local state to stored information on locks already acquired")]),e._v("\n_local "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("local"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[e._v("@contextmanager")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("acquire")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v("locks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Sort locks by object identifier")]),e._v("\n\tlocks "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("sorted")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("locks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" key"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("lambda")]),e._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Make sure lock order of previously acquired locks is not violated")]),e._v("\n\tacquired "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("getattr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("_local"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'acquired'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" acquired "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("and")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("max")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" lock "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" acquired"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("locks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("raise")]),e._v(" RuntimeError"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Lock Order Violation'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Acquire all of the locks")]),e._v("\n\tacquired"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("extend"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("locks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t_local"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("acquired "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" acquired\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("try")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" lock "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" locks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\tlock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("acquire"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("yield")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("finally")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Release locks in reverse order of acquisition")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" lock "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("reversed")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("locks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tlock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("release"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("del")]),e._v(" acquired"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("locks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br")])]),n("p",[e._v("如何使用这个上下文管理器呢？你可以按照正常途径创建一个锁对象，但不论是单个锁还是多个锁中都使用 acquire() 函数来申请锁，示例如下：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" threading\nx_lock "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\ny_lock "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("thread_1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" acquire"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" y_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Thread-1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("thread_2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" acquire"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("y_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" x_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Thread-2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("thread_1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("daemon "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 什么时候需要设置为守护线程？如果希望子线程一直运行，可以把子线程的代码写在while True里面一直循环，但同时要设置为守护线程，不然主线程结束了，子线程还一直运行，程序结束不了")]),e._v("\nt1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("thread_2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("daemon "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),e._v("\nt2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br")])]),n("p",[e._v("如果你执行这段代码，你会发现它即使在不同的函数中以不同的顺序获取锁也没有发生死锁。其关键在于，在第一段代码中，我们对这些锁进行了排序。通过排序，使得不管用户以什么样的顺序来请求锁，这些锁都会按照固定的顺序被获取。如果有多个acquire() 操作被嵌套调用，可以通过线程本地存储（TLS）来检测潜在的死锁问题。")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" threading\nx_lock "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\ny_lock "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("thread_1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" acquire"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" acquire"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("y_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Thread-1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("thread_2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" acquire"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("y_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" acquire"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x_lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Thread-2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("thread_1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("daemon "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),e._v("\nt1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("thread_2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("daemon "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),e._v("\nt2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br")])]),n("ul",[n("li",[e._v("如果你运行这个版本的代码，必定会有一个线程发生崩溃。发生崩溃的原因在于，每个线程都记录着自己已经获取到的锁。acquire() 函数会检查之前已经获取的锁列表，由于锁是按照升序排列获取的，所以函数会认为之前已获取的锁的 id 必定小于新申请到的锁，这时就会触发异常。")]),e._v(" "),n("li",[e._v("死锁是每一个多线程程序都会面临的一个问题（就像它是每一本操作系统课本的共同话题一样）。根据经验来讲，尽可能保证每一个线程只能同时保持一个锁，这样程序就不会被死锁问题所困扰。一旦有线程同时申请多个锁，一切就不可预料了。")]),e._v(" "),n("li",[e._v("死锁的检测与恢复是一个几乎没有优雅的解决方案的扩展话题。一个比较常用的死锁检测与恢复的方案是引入看门狗计数器。当线程正常运行的时候会每隔一段时间重置计数器，在没有发生死锁的情况下，一切都正常进行。一旦发生死锁，由于无法重置计数器导致定时器超时，这时程序会通过重启自身恢复到正常状态。")]),e._v(" "),n("li",[e._v("避免死锁是另外一种解决死锁问题的方式，在进程获取锁的时候会严格按照对象id 升序排列获取，经过数学证明，这样保证程序不会进入死锁状态。证明就留给读者作为练习了。避免死锁的主要思想是，单纯地按照对象 id 递增的顺序加锁不会产生循环依赖，而循环依赖是死锁的一个必要条件，从而避免程序进入死锁状态。")]),e._v(" "),n("li",[e._v("下面以一个关于线程死锁的经典问题：“哲学家就餐问题”，作为本节最后一个例子。题目是这样的：五位哲学家围坐在一张桌子前，每个人面前有一碗饭和一只筷子。在这里每个哲学家可以看做是一个独立的线程，而每只筷子可以看做是一个锁。每个哲学家可以处在静坐、思考、吃饭三种状态中的一个。需要注意的是，每个哲学家吃饭是需要两只筷子的，这样问题就来了：如果每个哲学家都拿起自己左边的筷子，那么他们五个都只能拿着一只筷子坐在那儿，直到饿死。此时他们就进入了死锁状态。下面是一个简单的使用死锁避免机制解决“哲学家就餐问题”的实现：")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" threading\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The philosopher thread")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("philosopher")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" acquire"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("currentThread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'eating'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The chopsticks (represented by locks)")]),e._v("\nNSTICKS "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("\nchopsticks "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Lock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("NSTICKS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create all of the philosophers")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("NSTICKS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\nt "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" threading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("philosopher"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("chopsticks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("chopsticks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" NSTICKS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("p",[e._v("最后，要特别注意到，为了避免死锁，所有的加锁操作必须使用 acquire() 函数。如果代码中的某部分绕过 acquire 函数直接申请锁，那么整个死锁避免机制就不起作用了。")]),e._v(" "),n("h3",{attrs:{id:"_12-6-保存线程的状态信息"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-6-保存线程的状态信息"}},[e._v("#")]),e._v(" 12.6 保存线程的状态信息")]),e._v(" "),n("p",[e._v("问题\n你需要保存正在运行线程的状态，这个状态对于其他的线程是不可见的。\n解决方案\n有时在多线程编程中，你需要只保存当前运行线程的状态。要这么做，可使用\nthread.local() 创建一个本地线程存储对象。对这个对象的属性的保存和读取操作都\n只会对执行线程可见，而其他线程并不可见。\n作 为 使 用 本 地 存 储 的 一 个 有 趣 的 实 际 例 子，考 虑 在 8.3 小 节 定 义 过 的\nLazyConnection 上下文管理器类。下面我们对它进行一些小的修改使得它可以适\n用于多线程：\nfrom socket import socket, AF_INET, SOCK_STREAM\nimport threading\nclass LazyConnection:\ndef "),n("strong",[e._v("init")]),e._v("(self, address, family=AF_INET, type=SOCK_STREAM):\nself.address = address\nself.family = AF_INET\nself.type = SOCK_STREAM\nself.local = threading.local()\ndef "),n("strong",[e._v("enter")]),e._v("(self):\nif hasattr(self.local, 'sock'):\nraise RuntimeError('Already connected')\nself.local.sock = socket(self.family, self.type)\nself.local.sock.connect(self.address)\nreturn self.local.sock\ndef "),n("strong",[e._v("exit")]),e._v("(self, exc_ty, exc_val, tb):\nself.local.sock.close()\ndel self.local.sock\n代码中，自己观察对于 self.local 属性的使用。它被初始化尾一个 threading.\nlocal() 实例。其他方法操作被存储为 self.local.sock 的套接字对象。有了这些就\n可以在多线程中安全的使用 LazyConnection 实例了。例如：\nfrom functools import partial\ndef test(conn):\nwith conn as s:\ns.send(b'GET /index.html HTTP/1.0\\r\\n')\ns.send(b'Host: www.python.org\\r\\n') s.send(b'\\r\\n')\nresp = b''.join(iter(partial(s.recv, 8192), b''))\nprint('Got {} bytes'.format(len(resp)))\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nconn = LazyConnection(('www.python.org', 80))\nt1 = threading.Thread(target=test, args=(conn,))\nt2 = threading.Thread(target=test, args=(conn,))\nt1.start()\nt2.start()\nt1.join()\nt2.join()\n它之所以行得通的原因是每个线程会创建一个自己专属的套接字连接（存储为\nself.local.sock）。因此，当不同的线程执行套接字操作时，由于操作的是不同的套接字，\n因此它们不会相互影响。\n讨论\n在大部分程序中创建和操作线程特定状态并不会有什么问题。不过，当出了问题的\n时候，通常是因为某个对象被多个线程使用到，用来操作一些专用的系统资源，比如一\n个套接字或文件。你不能让所有线程贡献一个单独对象，因为多个线程同时读和写的时\n候会产生混乱。本地线程存储通过让这些资源只能在被使用的线程中可见来解决这个\n问题。\n本节中，使用 thread.local() 可以让 LazyConnection 类支持一个线程一个连接，\n而不是对于所有的进程都只有一个连接。\n其原理是，每个 threading.local() 实例为每个线程维护着一个单独的实例字典。\n所有普通实例操作比如获取、修改和删除值仅仅操作这个字典。每个线程使用一个独立\n的字典就可以保证数据的隔离了。")]),e._v(" "),n("h3",{attrs:{id:"_12-7-创建一个线程池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-7-创建一个线程池"}},[e._v("#")]),e._v(" 12.7 创建一个线程池")]),e._v(" "),n("p",[e._v("concurrent.futures 函数库有一个 ThreadPoolExecutor 类可以被用来完成这个任务。下面是一个简单的 TCP 服务器，使用了一个线程池来响应客户端：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" socket "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" SOCK_STREAM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" socket\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" concurrent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("futures "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" ThreadPoolExecutor\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("echo_client")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\tHandle a client connection\n\t'''")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Got connection from'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tmsg "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("recv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("65536")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("not")]),e._v(" msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("break")]),e._v("\n\t\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("sendall"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Client closed connection'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("close"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("echo_server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\tpool "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" ThreadPoolExecutor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("128")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tsock "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" SOCK_STREAM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("bind"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("listen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tclient_sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("accept"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\tpool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("submit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("echo_client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\necho_server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("15000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br")])]),n("p",[e._v("如果你想手动创建你自己的线程池，通常可以使用一个 Queue 来轻松实现。下面是一个稍微不同但是手动实现的例子：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" socket "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" SOCK_STREAM\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" threading "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Thread\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" queue "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Queue\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("echo_client")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\tHandle a client connection\n\t'''")]),e._v("\n\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("get"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Got connection from'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tmsg "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("recv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("65536")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("not")]),e._v(" msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("break")]),e._v("\n\t\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("sendall"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Client closed connection'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("close"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("echo_server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" nworkers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Launch the client workers")]),e._v("\n\tq "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("nworkers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tt "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("echo_client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" args"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\tt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("daemon "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),e._v("\n\t\tt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Run the server")]),e._v("\n\tsock "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" SOCK_STREAM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("bind"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("listen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tclient_sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("accept"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\tq"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("put"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("client_sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\necho_server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("15000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("128")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br")])]),n("p",[e._v("使用 ThreadPoolExecutor 相对于手动实现的一个好处在于它使得任务提交者更方便的从被调用函数中获取返回值。例如，你可能会像下面这样写：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" concurrent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("futures "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" ThreadPoolExecutor\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" urllib"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("request\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("fetch_url")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\tu "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" urllib"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("request"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("urlopen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tdata "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" u"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("read"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" data\npool "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" ThreadPoolExecutor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Submit work to the pool")]),e._v("\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("submit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("fetch_url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'http://www.python.org'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" \nb "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("submit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("fetch_url"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'http://www.pypy.org'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get the results back")]),e._v("\nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\ny "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("ul",[n("li",[e._v("例子中返回的 handle 对象会帮你处理所有的阻塞与协作，然后从工作线程中返回数据给你。特别的，a.result() 操作会阻塞进程直到对应的函数执行完成并返回一个结果。")]),e._v(" "),n("li",[e._v("通常来讲，你应该避免编写线程数量可以无限制增长的程序。例如，看看下面这个服务器：")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" threading "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" Thread\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" socket "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" SOCK_STREAM\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("echo_client")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\tHandle a client connection\n\t'''")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Got connection from'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tmsg "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("recv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("65536")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("not")]),e._v(" msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("break")]),e._v("\n\t\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("sendall"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("msg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Client closed connection'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("close"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("echo_server")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" nworkers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Run the server")]),e._v("\n\tsock "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("AF_INET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" SOCK_STREAM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("bind"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tsock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("listen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tclient_sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("accept"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\tt "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("target"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("echo_client"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" args"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("client_sock"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" client_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\tt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("daemon "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),e._v("\n\t\tt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\necho_server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("15000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br")])]),n("ul",[n("li",[e._v("尽管这个也可以工作，但是它不能抵御有人试图通过创建大量线程让你服务器资源枯竭而崩溃的攻击行为。通过使用预先初始化的线程池，你可以设置同时运行线程的上限数量。")]),e._v(" "),n("li",[e._v("你可能会关心创建大量线程会有什么后果。现代操作系统可以很轻松的创建几千个线程的线程池。甚至，同时几千个线程等待工作并不会对其他代码产生性能影响。当然了，如果所有线程同时被唤醒并立即在 CPU 上执行，那就不同了——特别是有了全局解释器锁 GIL。通常，你应该只在 I/O 处理相关代码中使用线程池。")]),e._v(" "),n("li",[e._v("创建大的线程池的一个可能需要关注的问题是内存的使用。例如，如果你在 OS X系统上面创建 2000 个线程，系统显示 Python 进程使用了超过 9GB 的虚拟内存。不过，这个计算通常是有误差的。当创建一个线程时，操作系统会预留一个虚拟内存区域来放置线程的执行栈（通常是 8MB 大小）。但是这个内存只有一小片段被实际映射到真实内存中。因此，Python 进程使用到的真实内存其实很小（比如，对于 2000 个线程来讲，只使用到了 70MB 的真实内存，而不是 9GB）。如果你担心虚拟内存大小，可以使用 threading.stack_size() 函数来降低它。例如：")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" threading\nthreading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("stack_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("65536")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("如果你加上这条语句并再次运行前面的创建 2000 个线程试验，你会发现 Python进程只使用到了大概 210MB 的虚拟内存，而真实内存使用量没有变。注意线程栈大小必须至少为 32768 字节，通常是系统内存页大小（4096、8192 等）的整数倍。")]),e._v(" "),n("h3",{attrs:{id:"_12-8-简单的并行编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-8-简单的并行编程"}},[e._v("#")]),e._v(" 12.8 简单的并行编程")]),e._v(" "),n("p",[e._v("concurrent.futures 库提供了一个 ProcessPoolExecutor 类，可被用来在一个单独的 Python 解释器中执行计算密集型函数。不过，要使用它，你首先要有一些计算密集型的任务。我们通过一个简单而实际的例子来演示它。假定你有个 Apache web 服务器日志目录的 gzip 压缩包：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("logs/\n20120701.log.gz\n20120702.log.gz\n20120703.log.gz\n20120704.log.gz\n20120705.log.gz\n20120706.log.gz\n...\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("进一步假设每个日志文件内容类似下面这样：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('124.115.6.12 - - [10/Jul/2012:00:18:50 -0500] "GET /robots.txt ..." 200 71\n210.212.209.67 - - [10/Jul/2012:00:18:51 -0500] "GET /ply/ ..." 200 11875\n210.212.209.67 - - [10/Jul/2012:00:18:51 -0500] "GET /favicon.ico ..." 404 369\n61.135.216.105 - - [10/Jul/2012:00:20:04 -0500] "GET /blog/atom.xml ..." 304 - \n...\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("下面是一个脚本，在这些日志文件中查找出所有访问过 robots.txt 文件的主机：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" gzip\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" io\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" glob\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("find_robots")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("filename"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\tFind all of the hosts that access robots.txt in a single log file\n\t'''")]),e._v("\n\trobots "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" gzip"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("filename"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" line "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" io"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("TextIOWrapper"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("encoding"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'ascii'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\tfields "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" line"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("split"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" fields"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/robots.txt'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t\trobots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("fields"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" robots\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("find_all_robots")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("logdir"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\tFind all hosts across and entire sequence of files\n\t'''")]),e._v("\n\tfiles "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" glob"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("glob"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("logdir"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/*.log.gz'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tall_robots "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" robots "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("find_robots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" files"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\tall_robots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("update"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("robots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" all_robots\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'__main__'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\trobots "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" find_all_robots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'logs'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" ipaddr "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" robots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("ipaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br")])]),n("p",[e._v("前面的程序使用了通常的 map-reduce 风格来编写。函数 find_robots() 在一个文件名集合上做 map 操作，并将结果汇总为一个单独的结果，也就是 find_all_robots()函数中的 all_robots 集合。现在，假设你想要修改这个程序让它使用多核 CPU。很简单——只需要将 map() 操作替换为一个 concurrent.futures 库中生成的类似操作即可。下面是一个简单修改版本：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" gzip\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" io\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" glob\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" concurrent "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" futures\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("find_robots")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("filename"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\tFind all of the hosts that access robots.txt in a single log file\n\t'''")]),e._v("\n\trobots "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" gzip"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("filename"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" line "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" io"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("TextIOWrapper"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("encoding"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'ascii'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\tfields "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" line"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("split"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" fields"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/robots.txt'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\t\trobots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("fields"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" robots\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("find_all_robots")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("logdir"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n\tFind all hosts across and entire sequence of files\n\t'''")]),e._v("\n\tfiles "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" glob"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("glob"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("logdir"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/*.log.gz'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tall_robots "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" futures"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ProcessPoolExecutor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" robots "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("find_robots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" files"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t\tall_robots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("update"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("robots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" all_robots\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'__main__'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\trobots "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" find_all_robots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'logs'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" ipaddr "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" robots"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("ipaddr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br")])]),n("ul",[n("li",[e._v("通过这个修改后，运行这个脚本产生同样的结果，但是在四核机器上面比之前快了3.5 倍。实际的性能优化效果根据你的机器 CPU 数量的不同而不同。")]),e._v(" "),n("li",[e._v("ProcessPoolExecutor 的典型用法如下：")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" concurrent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("futures "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" ProcessPoolExecutor\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" ProcessPoolExecutor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\tdo work "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" parallel using pool\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("ul",[n("li",[e._v("其原理是，一个 ProcessPoolExecutor 创建 N 个独立的 Python 解释器，N 是系统上面可用 CPU 的个数。你可以通过提供可选参数给 ProcessPoolExecutor(N) 来修改处理器数量。这个处理池会一直运行到 with 块中最后一个语句执行完成，然后处理池被关闭。不过，程序会一直等待直到所有提交的工作被处理完成。")]),e._v(" "),n("li",[e._v("被提交到池中的工作必须被定义为一个函数。有两种方法去提交。如果你想让一个列表推导或一个 map() 操作并行执行的话，可使用 pool.map() :")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A function that performs a lot of work")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("work")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" result\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Nonparallel code")]),e._v("\nresults "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("work"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Parallel implementation")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" ProcessPoolExecutor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\tresults "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("work"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("另外，你可以使用 pool.submit() 来手动的提交单个任务：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Some function")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("work")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" result\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" ProcessPoolExecutor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Example of submitting work to the pool")]),e._v("\n\tfuture_result "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("submit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("work"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" arg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Obtaining the result (blocks until done)")]),e._v("\n\tr "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" future_result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("如果你手动提交一个任务，结果是一个 Future 实例。要获取最终结果，你需要调用它的 result() 方法。它会阻塞进程直到结果被返回来。如果不想阻塞，你还可以使用一个回调函数，例如：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("when_done")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Got:'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("with")]),e._v(" ProcessPoolExecutor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\tfuture_result "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("submit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("work"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" arg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\tfuture_result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("add_done_callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("when_done"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("ul",[n("li",[e._v("回调函数接受一个 Future 实例，被用来获取最终的结果（比如通过调用它的result() 方法）。尽管处理池很容易使用，在设计大程序的时候还是有很多需要注意的地方，如下几点：\n"),n("ul",[n("li",[e._v("这种并行处理技术只适用于那些可以被分解为互相独立部分的问题。")]),e._v(" "),n("li",[e._v("被提交的任务必须是简单函数形式。对于方法、闭包和其他类型的并行执行还不支持。")]),e._v(" "),n("li",[e._v("函数参数和返回值必须兼容 pickle，因为要使用到进程间的通信，所有解释器之间的交换数据必须被序列化")]),e._v(" "),n("li",[e._v("被提交的任务函数不应保留状态或有副作用。除了打印日志之类简单的事情，一旦启动你不能控制子进程的任何行为，因此最好保持简单和纯洁——函数不要去修改环境。")]),e._v(" "),n("li",[e._v("在 Unix 上进程池通过调用 fork() 系统调用被创建，它会克隆 Python 解释器，包括 fork 时的所有程序状态。而在 Windows 上，克隆解释器时不会克隆状态。实际的 fork 操作会在第一次调用 pool.map() 或 pool.submit()后发生。")]),e._v(" "),n("li",[e._v("当你混合使用进程池和多线程的时候要特别小心。你应该在创建任何线程之前先创建并激活进程池（比如在程序启动的 main 线程中创建进程池）。")])])])]),e._v(" "),n("h3",{attrs:{id:"_12-9-python-的全局锁问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-9-python-的全局锁问题"}},[e._v("#")]),e._v(" 12.9 Python 的全局锁问题")]),e._v(" "),n("ul",[n("li",[e._v("尽管 Python 完全支持多线程编程，但是解释器的 C 语言实现部分在完全并行执行时并不是线程安全的。实际上，解释器被一个全局解释器锁保护着，它确保任何时候都只有一个 Python 线程执行。GIL 最大的问题就是 Python 的多线程程序并不能利用多核 CPU 的优势（比如一个使用了多个线程的计算密集型程序只会在一个单 CPU 上面运行）。")]),e._v(" "),n("li",[e._v("在讨论普通的 GIL 之前，有一点要强调的是 GIL 只会影响到那些严重依赖 CPU的程序（比如计算型的）。如果你的程序大部分只会涉及到 I/O，比如网络交互，那么使用多线程就很合适，因为它们大部分时间都在等待。实际上，你完全可以放心的创建几千个 Python 线程，现代操作系统运行这么多线程没有任何压力，没啥可担心的。而对于依赖 CPU 的程序，你需要弄清楚执行的计算的特点。例如，优化底层算法要比使用多线程运行快得多。类似的，由于 Python 是解释执行的，如果你将那些性能瓶颈代码移到一个 C 语言扩展模块中，速度也会提升的很快。如果你要操作数组，那么使用 NumPy 这样的扩展会非常的高效。最后，你还可以考虑下其他可选实现方案，比如 PyPy，它通过一个 JIT 编译器来优化执行效率（不过在写这本书的时候它还不能支持 Python 3）。")]),e._v(" "),n("li",[e._v("还有一点要注意的是，线程不是专门用来优化性能的。一个 CPU 依赖型程序可能会使用线程来管理一个图形用户界面、一个网络连接或其他服务。这时候，GIL 会产生一些问题，因为如果一个线程长期持有 GIL 的话会导致其他非 CPU 型线程一直等待。事实上，一个写的不好的 C 语言扩展会导致这个问题更加严重，尽管代码的计算部分会比之前运行的更快些。")]),e._v(" "),n("li",[e._v("说了这么多，现在想说的是我们有两种策略来解决 GIL 的缺点。首先，如果你完全工作于 Python 环境中，你可以使用 multiprocessing 模块来创建一个进程池，并像协同处理器一样的使用它。例如，假如你有如下的线程代码：")])]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Performs a large calculation (CPU bound)")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("some_work")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" result\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A thread that calls the above function")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("some_thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" r "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" some_work"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("修改代码，使用进程池：")]),e._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Processing pool (see below for initiazation)")]),e._v("\npool "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("None")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Performs a large calculation (CPU bound)")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("some_work")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" result\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A thread that calls the above function")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("some_thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" \n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" \n\t\tr "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("apply")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("some_work"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Initiaze the pool")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'__main__'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" multiprocessing\n\tpool "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" multiprocessing"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Pool"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("ul",[n("li",[e._v("这个通过使用一个技巧利用进程池解决了 GIL 的问题。当一个线程想要执行 CPU密集型工作时，会将任务发给进程池。然后进程池会在另外一个进程中启动一个单独的Python 解释器来工作。当线程等待结果的时候会释放 GIL。并且，由于计算任务在单独解释器中执行，那么就不会受限于 GIL 了。在一个多核系统上面，你会发现这个技术可以让你很好的利用多 CPU 的优势。")]),e._v(" "),n("li",[e._v("另外一个解决 GIL 的策略是使用 C 扩展编程技术。主要思想是将计算密集型任务转移给 C，跟 Python 独立，在工作的时候在 C 代码中释放 GIL。这可以通过在 C 代码中插入下面这样的特殊宏来完成：")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('#include "Python.h"\n...\nPyObject *pyfunc(PyObject *self, PyObject *args) {\n...\nPy_BEGIN_ALLOW_THREADS\n// Threaded C code\n...\nPy_END_ALLOW_THREADS\n... }\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("ul",[n("li",[e._v("如果你使用其他工具访问 C 语言，比如对于 Cython 的 ctypes 库，你不需要做任何事。例如，ctypes 在调用 C 时会自动释放 GIL。")]),e._v(" "),n("li",[e._v("许多程序员在面对线程性能问题的时候，马上就会怪罪 GIL，什么都是它的问题。其实这样子太不厚道也太天真了点。作为一个真实的例子，在多线程的网络编程中神秘的 stalls 可能是因为其他原因比如一个 DNS 查找延时，而跟 GIL 毫无关系。最后你真的需要先去搞懂你的代码是否真的被 GIL 影响到。同时还要明白 GIL 大部分都应该只关注 CPU 的处理而不是 I/O.")]),e._v(" "),n("li",[e._v("如果你准备使用一个处理器池，注意的是这样做涉及到数据序列化和在不同Python 解释器通信。被执行的操作需要放在一个通过 def 语句定义的 Python 函数中，不能是 lambda、闭包可调用实例等，并且函数参数和返回值必须要兼容 pickle。同样，要执行的任务量必须足够大以弥补额外的通信开销。")]),e._v(" "),n("li",[e._v("另外一个难点是当混合使用线程和进程池的时候会让你很头疼。如果你要同时使用两者，最好在程序启动时，创建任何线程之前先创建一个单例的进程池。然后线程使用同样的进程池来进行它们的计算密集型工作。")]),e._v(" "),n("li",[e._v("C 扩展最重要的特征是它们和 Python 解释器是保持独立的。也就是说，如果你准备将 Python 中的任务分配到 C 中去执行，你需要确保 C 代码的操作跟 Python 保持独立，这就意味着不要使用 Python 数据结构以及不要调用 Python 的 C API。另外一个就是你要确保 C 扩展所做的工作是足够的，值得你这样做。也就是说 C 扩展担负起了大量的计算任务，而不是少数几个计算。")]),e._v(" "),n("li",[e._v("这些解决 GIL 的方案并不能适用于所有问题。例如，某些类型的应用程序如果被分解为多个进程处理的话并不能很好的工作，也不能将它的部分代码改成 C 语言执行。对于这些应用程序，你就要自己需求解决方案了（比如多进程访问共享内存区，多解析器运行于同一个进程等）。或者，你还可以考虑下其他的解释器实现，比如 PyPy。")])]),e._v(" "),n("h3",{attrs:{id:"_12-10-定义一个-actor-任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-10-定义一个-actor-任务"}},[e._v("#")]),e._v(" 12.10 定义一个 Actor 任务")]),e._v(" "),n("p",[e._v("问题\n你想定义跟 actor 模式中类似“actors”角色的任务\n解决方案\nactor 模式是一种最古老的也是最简单的并行和分布式计算解决方案。事实上，它\n天生的简单性是它如此受欢迎的重要原因之一。简单来讲，一个 actor 就是一个并发执\n行的任务，只是简单的执行发送给它的消息任务。响应这些消息时，它可能还会给其他\nactor 发送更进一步的消息。actor 之间的通信是单向和异步的。因此，消息发送者不知\n道消息是什么时候被发送，也不会接收到一个消息已被处理的回应或通知。\n结合使用一个线程和一个队列可以很容易的定义 actor，例如：\nfrom queue import Queue\nfrom threading import Thread, Event")]),e._v(" "),n("h1",{attrs:{id:"sentinel-used-for-shutdown"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sentinel-used-for-shutdown"}},[e._v("#")]),e._v(" Sentinel used for shutdown")]),e._v(" "),n("p",[e._v("class ActorExit(Exception):\npass\nclass Actor:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._mailbox = Queue()\ndef send(self, msg):\n'''\nSend a message to the actor\n'''\nself._mailbox.put(msg)\ndef recv(self):\n'''\nReceive an incoming message\n'''\nmsg = self._mailbox.get()\nif msg is ActorExit:\nraise ActorExit()\nreturn msg\ndef close(self):\n'''\nClose the actor, thus shutting it down\n'''\nself.send(ActorExit)\ndef start(self):\n'''\nStart concurrent execution\n'''\nself._terminated = Event()\nt = Thread(target=self._bootstrap)\nt.daemon = True\nt.start()\ndef _bootstrap(self):\ntry:\nself.run()\nexcept ActorExit:\npass\nfinally:\nself._terminated.set()\ndef join(self):\nself._terminated.wait()\ndef run(self):\n'''\nRun method to be implemented by the user\n'''\nwhile True:\nmsg = self.recv()")]),e._v(" "),n("h1",{attrs:{id:"sample-actortask"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sample-actortask"}},[e._v("#")]),e._v(" Sample ActorTask")]),e._v(" "),n("p",[e._v("class PrintActor(Actor):\ndef run(self):\nwhile True:\nmsg = self.recv()\nprint('Got:', msg)")]),e._v(" "),n("h1",{attrs:{id:"sample-use-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sample-use-2"}},[e._v("#")]),e._v(" Sample use")]),e._v(" "),n("p",[e._v("p = PrintActor()\np.start()\np.send('Hello') p.send('World') p.close()\np.join()\n这个例子中，你使用 actor 实例的 send() 方法发送消息给它们。其机制是，这个方\n法会将消息放入一个队里中，然后将其转交给处理被接受消息的一个内部线程。close()\n方法通过在队列中放入一个特殊的哨兵值（ActorExit）来关闭这个 actor。用户可以通\n过继承 Actor 并定义实现自己处理逻辑 run() 方法来定义新的 actor。ActorExit 异常\n的使用就是用户自定义代码可以在需要的时候来捕获终止请求（异常被 get() 方法抛出\n并传播出去）。\n如果你放宽对于同步和异步消息发送的要求，类 actor 对象还可以通过生成器来简\n化定义。例如：\ndef print_actor():\nwhile True:\ntry:\nmsg = yield # Get a message\nprint('Got:', msg)\nexcept GeneratorExit:\nprint('Actor terminating')")]),e._v(" "),n("h1",{attrs:{id:"sample-use-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sample-use-3"}},[e._v("#")]),e._v(" Sample use")]),e._v(" "),n("p",[e._v("p = print_actor()\nnext(p) # Advance to the yield (ready to receive)\np.send('Hello') p.send('World') p.close()\n讨论\nactor 模式的魅力就在于它的简单性。实际上，这里仅仅只有一个核心操作 send()\n. 甚至，对于在基于 actor 系统中的“消息”的泛化概念可以已多种方式被扩展。例如，\n你可以以元组形式传递标签消息，让 actor 执行不同的操作，如下：\nclass TaggedActor(Actor):\ndef run(self):\nwhile True:\ntag, *payload = self.recv()\ngetattr(self,'do_'+tag)(*payload)")]),e._v(" "),n("h1",{attrs:{id:"methods-correponding-to-different-message-tags"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#methods-correponding-to-different-message-tags"}},[e._v("#")]),e._v(" Methods correponding to different message tags")]),e._v(" "),n("p",[e._v("def do_A(self, x):\nprint('Running A', x)\ndef do_B(self, x, y):\nprint('Running B', x, y)")]),e._v(" "),n("h1",{attrs:{id:"example-19"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-19"}},[e._v("#")]),e._v(" Example")]),e._v(" "),n("p",[e._v("a = TaggedActor()\na.start()\na.send(('A', 1)) # Invokes do_A(1)\na.send(('B', 2, 3)) # Invokes do_B(2,3)\n作为另外一个例子，下面的 actor 允许在一个工作者中运行任意的函数，并且通过\n一个特殊的 Result 对象返回结果：\nfrom threading import Event\nclass Result:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._evt = Event()\nself._result = None\ndef set_result(self, value):\nself._result = value\nself._evt.set()\ndef result(self):\nself._evt.wait()\nreturn self._result\nclass Worker(Actor):\ndef submit(self, func, *args, **kwargs):\nr = Result()\nself.send((func, args, kwargs, r))\nreturn r\ndef run(self):\nwhile True:\nfunc, args, kwargs, r = self.recv()\nr.set_result(func(*args, **kwargs))")]),e._v(" "),n("h1",{attrs:{id:"example-use-13"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-13"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("worker = Worker()\nworker.start()\nr = worker.submit(pow, 2, 3)\nprint(r.result())\n最后，“发送”一个任务消息的概念可以被扩展到多进程甚至是大型分布式系统中\n去。例如，一个类 actor 对象的 send() 方法可以被编程让它能在一个套接字连接上传\n输数据或通过某些消息中间件（比如 AMQP、ZMQ 等）来发送。\n12.11 实现消息发布/订阅模型\n问题\n你有一个基于线程通信的程序，想让它们实现发布/订阅模式的消息通信。\n解决方案\n要实现发布/订阅的消息通信模式，你通常要引入一个单独的“交换机”或“网关”\n对象作为所有消息的中介。也就是说，不直接将消息从一个任务发送到另一个，而是将\n其发送给交换机，然后由交换机将它发送给一个或多个被关联任务。下面是一个非常简\n单的交换机实现例子：\nfrom collections import defaultdict\nclass Exchange:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._subscribers = set()\ndef attach(self, task):\nself._subscribers.add(task)\ndef detach(self, task):\nself._subscribers.remove(task)\ndef send(self, msg):\nfor subscriber in self._subscribers:\nsubscriber.send(msg)")]),e._v(" "),n("h1",{attrs:{id:"dictionary-of-all-created-exchanges"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dictionary-of-all-created-exchanges"}},[e._v("#")]),e._v(" Dictionary of all created exchanges")]),e._v(" "),n("p",[e._v("_exchanges = defaultdict(Exchange)")]),e._v(" "),n("h1",{attrs:{id:"return-the-exchange-instance-associated-with-a-given-name"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#return-the-exchange-instance-associated-with-a-given-name"}},[e._v("#")]),e._v(" Return the Exchange instance associated with a given name")]),e._v(" "),n("p",[e._v("def get_exchange(name):\nreturn _exchanges[name]\n一个交换机就是一个普通对象，负责维护一个活跃的订阅者集合，并为绑定、解绑\n和发送消息提供相应的方法。每个交换机通过一个名称定位，get_exchange() 通过给\n定一个名称返回相应的 Exchange 实例。\n下面是一个简单例子，演示了如何使用一个交换机：")]),e._v(" "),n("h1",{attrs:{id:"example-of-a-task-any-object-with-a-send-method"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-of-a-task-any-object-with-a-send-method"}},[e._v("#")]),e._v(" Example of a task. Any object with a send() method")]),e._v(" "),n("p",[e._v("class Task: ...\ndef send(self, msg):\n...\ntask_a = Task()\ntask_b = Task()")]),e._v(" "),n("h1",{attrs:{id:"example-of-getting-an-exchange"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-of-getting-an-exchange"}},[e._v("#")]),e._v(" Example of getting an exchange")]),e._v(" "),n("p",[e._v("exc = get_exchange('name')")]),e._v(" "),n("h1",{attrs:{id:"examples-of-subscribing-tasks-to-it"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#examples-of-subscribing-tasks-to-it"}},[e._v("#")]),e._v(" Examples of subscribing tasks to it")]),e._v(" "),n("p",[e._v("exc.attach(task_a)\nexc.attach(task_b)")]),e._v(" "),n("h1",{attrs:{id:"example-of-sending-messages"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-of-sending-messages"}},[e._v("#")]),e._v(" Example of sending messages")]),e._v(" "),n("p",[e._v("exc.send('msg1')\nexc.send('msg2')")]),e._v(" "),n("h1",{attrs:{id:"example-of-unsubscribing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-of-unsubscribing"}},[e._v("#")]),e._v(" Example of unsubscribing")]),e._v(" "),n("p",[e._v("exc.detach(task_a)\nexc.detach(task_b)\n尽管对于这个问题有很多的变种，不过万变不离其宗。消息会被发送给一个交换\n机，然后交换机会将它们发送给被绑定的订阅者。\n讨论\n通过队列发送消息的任务或线程的模式很容易被实现并且也非常普遍。不过，使用\n发布/订阅模式的好处更加明显。\n首先，使用一个交换机可以简化大部分涉及到线程通信的工作。无需去写通过多进\n程模块来操作多个线程，你只需要使用这个交换机来连接它们。某种程度上，这个就跟\n日志模块的工作原理类似。实际上，它可以轻松的解耦程序中多个任务。\n其次，交换机广播消息给多个订阅者的能力带来了一个全新的通信模式。例如，你\n可以使用多任务系统、广播或扇出。你还可以通过以普通订阅者身份绑定来构建调试和\n诊断工具。例如，下面是一个简单的诊断类，可以显示被发送的消息：\nclass DisplayMessages:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself.count = 0\ndef send(self, msg):\nself.count += 1\nprint('msg[{}]: {!r}'.format(self.count, msg))\nexc = get_exchange('name') d = DisplayMessages()\nexc.attach(d)\n最后，该实现的一个重要特点是它能兼容多个“task-like”对象。例如，消息接受\n者可以是 actor（12.10 小节介绍）、协程、网络连接或任何实现了正确的 send() 方法\n的东西。\n关于交换机的一个可能问题是对于订阅者的正确绑定和解绑。为了正确的管理资\n源，每一个绑定的订阅者必须最终要解绑。在代码中通常会是像下面这样的模式：\nexc = get_exchange('name')\nexc.attach(some_task)\ntry:...\nfinally:\nexc.detach(some_task)\n某种意义上，这个和使用文件、锁和类似对象很像。通常很容易会忘记最后的\ndetach() 步骤。为了简化这个，你可以考虑使用上下文管理器协议。例如，在交换机\n对象上增加一个 subscribe() 方法，如下：\nfrom contextlib import contextmanager\nfrom collections import defaultdict\nclass Exchange:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._subscribers = set()\ndef attach(self, task):\nself._subscribers.add(task)\ndef detach(self, task):\nself._subscribers.remove(task)\n@contextmanager\ndef subscribe(self, *tasks):\nfor task in tasks:\nself.attach(task)\ntry:\nyield\nfinally:\nfor task in tasks:\nself.detach(task)\ndef send(self, msg):\nfor subscriber in self._subscribers:\nsubscriber.send(msg)")]),e._v(" "),n("h1",{attrs:{id:"dictionary-of-all-created-exchanges-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dictionary-of-all-created-exchanges-2"}},[e._v("#")]),e._v(" Dictionary of all created exchanges")]),e._v(" "),n("p",[e._v("_exchanges = defaultdict(Exchange)")]),e._v(" "),n("h1",{attrs:{id:"return-the-exchange-instance-associated-with-a-given-name-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#return-the-exchange-instance-associated-with-a-given-name-2"}},[e._v("#")]),e._v(" Return the Exchange instance associated with a given name")]),e._v(" "),n("p",[e._v("def get_exchange(name):\nreturn _exchanges[name]")]),e._v(" "),n("h1",{attrs:{id:"example-of-using-the-subscribe-method"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-of-using-the-subscribe-method"}},[e._v("#")]),e._v(" Example of using the subscribe() method")]),e._v(" "),n("p",[e._v("exc = get_exchange('name')\nwith exc.subscribe(task_a, task_b):\n...\nexc.send('msg1')\nexc.send('msg2') ...")]),e._v(" "),n("h1",{attrs:{id:"task-a-and-task-b-detached-here"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#task-a-and-task-b-detached-here"}},[e._v("#")]),e._v(" task_a and task_b detached here")]),e._v(" "),n("p",[e._v("最后还应该注意的是关于交换机的思想有很多种的扩展实现。例如，交换机可以实\n现一整个消息通道集合或提供交换机名称的模式匹配规则。交换机还可以被扩展到分\n布式计算程序中（比如，将消息路由到不同机器上面的任务中去）。\n12.12 使用生成器代替线程\n问题\n你想使用生成器（协程）替代系统线程来实现并发。这个有时又被称为用户级线程\n或绿色线程。\n解决方案\n要使用生成器实现自己的并发，你首先要对生成器函数和 yield 语句有深刻理解。\nyield 语句会让一个生成器挂起它的执行，这样就可以编写一个调度器，将生成器当做\n某种“任务”并使用任务协作切换来替换它们的执行。要演示这种思想，考虑下面两个\n使用简单的 yield 语句的生成器函数：")]),e._v(" "),n("h1",{attrs:{id:"two-simple-generator-functions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#two-simple-generator-functions"}},[e._v("#")]),e._v(" Two simple generator functions")]),e._v(" "),n("p",[e._v("def countdown(n):\nwhile n > 0:\nprint('T-minus', n)\nyield\nn -= 1\nprint('Blastoff!')\ndef countup(n):\nx = 0\nwhile x < n:\nprint('Counting up', x)\nyield\nx += 1\n这些函数在内部使用 yield 语句，下面是一个实现了简单任务调度器的代码：\nfrom collections import deque\nclass TaskScheduler:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._task_queue = deque()\ndef new_task(self, task):\n'''\nAdmit a newly started task to the scheduler\n'''\nself._task_queue.append(task)\ndef run(self):\n'''\nRun until there are no more tasks\n'''\nwhile self._task_queue:\ntask = self._task_queue.popleft()\ntry:")]),e._v(" "),n("h1",{attrs:{id:"run-until-the-next-yield-statement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-until-the-next-yield-statement"}},[e._v("#")]),e._v(" Run until the next yield statement")]),e._v(" "),n("p",[e._v("next(task)\nself._task_queue.append(task)\nexcept StopIteration:")]),e._v(" "),n("h1",{attrs:{id:"generator-is-no-longer-executing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generator-is-no-longer-executing"}},[e._v("#")]),e._v(" Generator is no longer executing")]),e._v(" "),n("p",[e._v("pass")]),e._v(" "),n("h1",{attrs:{id:"example-use-14"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-14"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("sched = TaskScheduler()\nsched.new_task(countdown(10))\nsched.new_task(countdown(5))\nsched.new_task(countup(15))\nsched.run()\nTaskScheduler 类在一个循环中运行生成器集合——每个都运行到碰到 yield 语句\n为止。运行这个例子，输出如下：\nT-minus 10\nT-minus 5\nCounting up 0 T-minus 9 T-minus 4\nCounting up 1 T-minus 8 T-minus 3\nCounting up 2 T-minus 7 T-minus 2 ...\n到此为止，我们实际上已经实现了一个“操作系统”的最小核心部分。生成器函数\n就是认为，而 yield 语句是任务挂起的信号。调度器循环检查任务列表直到没有任务要\n执行为止。\n实际上，你可能想要使用生成器来实现简单的并发。那么，在实现 actor 或网络服\n务器的时候你可以使用生成器来替代线程的使用。\n下面的代码演示了使用生成器来实现一个不依赖线程的 actor：\nfrom collections import deque\nclass ActorScheduler:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._actors = { } # Mapping of names to actors\nself._msg_queue = deque() # Message queue\ndef new_actor(self, name, actor):\n'''\nAdmit a newly started actor to the scheduler and give it a name\n'''\nself._msg_queue.append((actor,None))\nself._actors[name] = actor\ndef send(self, name, msg):\n'''\nSend a message to a named actor\n'''\nactor = self._actors.get(name)\nif actor:\nself._msg_queue.append((actor,msg))\ndef run(self):\n'''\nRun as long as there are pending messages.\n'''\nwhile self._msg_queue:\nactor, msg = self._msg_queue.popleft()\ntry:\nactor.send(msg)\nexcept StopIteration:\npass")]),e._v(" "),n("h1",{attrs:{id:"example-use-15"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-use-15"}},[e._v("#")]),e._v(" Example use")]),e._v(" "),n("p",[e._v("if "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\ndef printer():\nwhile True:\nmsg = yield\nprint('Got:', msg)\ndef counter(sched):\nwhile True:")]),e._v(" "),n("h1",{attrs:{id:"receive-the-current-count"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#receive-the-current-count"}},[e._v("#")]),e._v(" Receive the current count")]),e._v(" "),n("p",[e._v("n = yield\nif n == 0:\nbreak")]),e._v(" "),n("h1",{attrs:{id:"send-to-the-printer-task"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#send-to-the-printer-task"}},[e._v("#")]),e._v(" Send to the printer task")]),e._v(" "),n("p",[e._v("sched.send('printer', n)")]),e._v(" "),n("h1",{attrs:{id:"send-the-next-count-to-the-counter-task-recursive"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#send-the-next-count-to-the-counter-task-recursive"}},[e._v("#")]),e._v(" Send the next count to the counter task (recursive)")]),e._v(" "),n("p",[e._v("sched.send('counter', n-1)\nsched = ActorScheduler()")]),e._v(" "),n("h1",{attrs:{id:"create-the-initial-actors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-the-initial-actors"}},[e._v("#")]),e._v(" Create the initial actors")]),e._v(" "),n("p",[e._v("sched.new_actor('printer', printer())\nsched.new_actor('counter', counter(sched))")]),e._v(" "),n("h1",{attrs:{id:"send-an-initial-message-to-the-counter-to-initiate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#send-an-initial-message-to-the-counter-to-initiate"}},[e._v("#")]),e._v(" Send an initial message to the counter to initiate")]),e._v(" "),n("p",[e._v("sched.send('counter', 10000)\nsched.run()\n完全弄懂这段代码需要更深入的学习，但是关键点在于收集消息的队列。本质上，\n调度器在有需要发送的消息时会一直运行着。计数生成器会给自己发送消息并在一个\n递归循环中结束。\n下面是一个更加高级的例子，演示了使用生成器来实现一个并发网络应用程序：\nfrom collections import deque\nfrom select import select")]),e._v(" "),n("h1",{attrs:{id:"this-class-represents-a-generic-yield-event-in-the-scheduler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this-class-represents-a-generic-yield-event-in-the-scheduler"}},[e._v("#")]),e._v(" This class represents a generic yield event in the scheduler")]),e._v(" "),n("p",[e._v("class YieldEvent:\ndef handle_yield(self, sched, task):\npass\ndef handle_resume(self, sched, task):\npass")]),e._v(" "),n("h1",{attrs:{id:"task-scheduler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#task-scheduler"}},[e._v("#")]),e._v(" Task Scheduler")]),e._v(" "),n("p",[e._v("class Scheduler:\ndef "),n("strong",[e._v("init")]),e._v("(self):\nself._numtasks = 0 # Total num of tasks\nself._ready = deque() # Tasks ready to run\nself._read_waiting = {} # Tasks waiting to read\nself._write_waiting = {} # Tasks waiting to write")]),e._v(" "),n("h1",{attrs:{id:"poll-for-i-o-events-and-restart-waiting-tasks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#poll-for-i-o-events-and-restart-waiting-tasks"}},[e._v("#")]),e._v(" Poll for I/O events and restart waiting tasks")]),e._v(" "),n("p",[e._v("def _iopoll(self):\nrset,wset,eset = select(self._read_waiting,\nself._write_waiting,[])\nfor r in rset:\nevt, task = self._read_waiting.pop(r)\nevt.handle_resume(self, task)\nfor w in wset:\nevt, task = self._write_waiting.pop(w)\nevt.handle_resume(self, task)\ndef new(self,task):\n'''\nAdd a newly started task to the scheduler\n'''\nself._ready.append((task, None))\nself._numtasks += 1\ndef add_ready(self, task, msg=None):\n'''\nAppend an already started task to the ready queue.\nmsg is what to send into the task when it resumes.\n'''\nself._ready.append((task, msg))")]),e._v(" "),n("h1",{attrs:{id:"add-a-task-to-the-reading-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-a-task-to-the-reading-set"}},[e._v("#")]),e._v(" Add a task to the reading set")]),e._v(" "),n("p",[e._v("def _read_wait(self, fileno, evt, task):\nself._read_waiting[fileno] = (evt, task)")]),e._v(" "),n("h1",{attrs:{id:"add-a-task-to-the-write-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#add-a-task-to-the-write-set"}},[e._v("#")]),e._v(" Add a task to the write set")]),e._v(" "),n("p",[e._v("def _write_wait(self, fileno, evt, task):\nself._write_waiting[fileno] = (evt, task)\ndef run(self):\n'''\nRun the task scheduler until there are no tasks\n'''\nwhile self._numtasks:\nif not self._ready:\nself._iopoll()\ntask, msg = self._ready.popleft()\ntry:")]),e._v(" "),n("h1",{attrs:{id:"run-the-coroutine-to-the-next-yield"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-the-coroutine-to-the-next-yield"}},[e._v("#")]),e._v(" Run the coroutine to the next yield")]),e._v(" "),n("p",[e._v("r = task.send(msg)\nif isinstance(r, YieldEvent):\nr.handle_yield(self, task)\nelse:\nraise RuntimeError('unrecognized yield event')\nexcept StopIteration:\nself._numtasks -= 1")]),e._v(" "),n("h1",{attrs:{id:"example-implementation-of-coroutine-based-socket-i-o"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-implementation-of-coroutine-based-socket-i-o"}},[e._v("#")]),e._v(" Example implementation of coroutine-based socket I/O")]),e._v(" "),n("p",[e._v("class ReadSocket(YieldEvent):\ndef "),n("strong",[e._v("init")]),e._v("(self, sock, nbytes):\nself.sock = sock\nself.nbytes = nbytes\ndef handle_yield(self, sched, task):\nsched._read_wait(self.sock.fileno(), self, task)\ndef handle_resume(self, sched, task):\ndata = self.sock.recv(self.nbytes)\nsched.add_ready(task, data)\nclass WriteSocket(YieldEvent):\ndef "),n("strong",[e._v("init")]),e._v("(self, sock, data):\nself.sock = sock\nself.data = data\ndef handle_yield(self, sched, task):\nsched._write_wait(self.sock.fileno(), self, task)\ndef handle_resume(self, sched, task):\nnsent = self.sock.send(self.data)\nsched.add_ready(task, nsent)\nclass AcceptSocket(YieldEvent):\ndef "),n("strong",[e._v("init")]),e._v("(self, sock):\nself.sock = sock\ndef handle_yield(self, sched, task):\nsched._read_wait(self.sock.fileno(), self, task)\ndef handle_resume(self, sched, task):\nr = self.sock.accept()\nsched.add_ready(task, r)")]),e._v(" "),n("h1",{attrs:{id:"wrapper-around-a-socket-object-for-use-with-yield"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wrapper-around-a-socket-object-for-use-with-yield"}},[e._v("#")]),e._v(" Wrapper around a socket object for use with yield")]),e._v(" "),n("p",[e._v("class Socket(object):\ndef "),n("strong",[e._v("init")]),e._v("(self, sock):\nself._sock = sock\ndef recv(self, maxbytes):\nreturn ReadSocket(self._sock, maxbytes)\ndef send(self, data):\nreturn WriteSocket(self._sock, data)\ndef accept(self):\nreturn AcceptSocket(self._sock)\ndef "),n("strong",[e._v("getattr")]),e._v("(self, name):\nreturn getattr(self._sock, name)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nfrom socket import socket, AF_INET, SOCK_STREAM\nimport time")]),e._v(" "),n("h1",{attrs:{id:"example-of-a-function-involving-generators-this-should"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-of-a-function-involving-generators-this-should"}},[e._v("#")]),e._v(" Example of a function involving generators. This should")]),e._v(" "),n("h1",{attrs:{id:"be-called-using-line-yield-from-readline-sock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#be-called-using-line-yield-from-readline-sock"}},[e._v("#")]),e._v(" be called using line = yield from readline(sock)")]),e._v(" "),n("p",[e._v("def readline(sock):\nchars = []\nwhile True: c = yield sock.recv(1)\nif not c:\nbreak\nchars.append(c)\nif c == b'\\n':\nbreak\nreturn b''.join(chars)")]),e._v(" "),n("h1",{attrs:{id:"echo-server-using-generators"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#echo-server-using-generators"}},[e._v("#")]),e._v(" Echo server using generators")]),e._v(" "),n("p",[e._v("class EchoServer:\ndef "),n("strong",[e._v("init")]),e._v("(self,addr,sched):\nself.sched = sched\nsched.new(self.server_loop(addr))\ndef server_loop(self,addr):\ns = Socket(socket(AF_INET,SOCK_STREAM))\ns.bind(addr)\ns.listen(5)\nwhile True:\nc,a = yield s.accept()\nprint('Got connection from ', a)\nself.sched.new(self.client_handler(Socket(c)))\ndef client_handler(self,client):\nwhile True:\nline = yield from readline(client)\nif not line:\nbreak\nline = b'GOT:' + line\nwhile line:\nnsent = yield client.send(line)\nline = line[nsent:]\nclient.close()\nprint('Client closed')\nsched = Scheduler()\nEchoServer(('',16000),sched)\nsched.run()\n这段代码有点复杂。不过，它实现了一个小型的操作系统。有一个就绪的任务队\n列，并且还有因 I/O 休眠的任务等待区域。还有很多调度器负责在就绪队列和 I/O 等\n待区域之间移动任务。\n讨论\n在构建基于生成器的并发框架时，通常会使用更常见的 yield 形式：\ndef some_generator():\n...\nresult = yield data\n...\n使用这种形式的 yield 语句的函数通常被称为“协程”。通过调度器，yield 语句在\n一个循环中被处理，如下：\nf = some_generator()")]),e._v(" "),n("h1",{attrs:{id:"initial-result-is-none-to-start-since-nothing-has-been-computed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#initial-result-is-none-to-start-since-nothing-has-been-computed"}},[e._v("#")]),e._v(" Initial result. Is None to start since nothing has been computed")]),e._v(" "),n("p",[e._v("result = None\nwhile True:\ntry:\ndata = f.send(result)\nresult = ... do some calculation ...\nexcept StopIteration:\nbreak\n这里的逻辑稍微有点复杂。不过，被传给 send() 的值定义了在 yield 语句醒来时\n的返回值。因此，如果一个 yield 准备在对之前 yield 数据的回应中返回结果时，会在\n下一次 send() 操作返回。如果一个生成器函数刚开始运行，发送一个 None 值会让它\n排在第一个 yield 语句前面。\n除了发送值外，还可以在一个生成器上面执行一个 close() 方法。它会导致在执\n行 yield 语句时抛出一个 GeneratorExit 异常，从而终止执行。如果进一步设计，一个\n生成器可以捕获这个异常并执行清理操作。同样还可以使用生成器的 throw() 方法在\nyield 语句执行时生成一个任意的执行指令。一个任务调度器可利用它来在运行的生成\n器中处理错误。\n最后一个例子中使用的 yield from 语句被用来实现协程，可以被其它生成器作为\n子程序或过程来调用。本质上就是将控制权透明的传输给新的函数。不像普通的生成\n器，一个使用 yield from 被调用的函数可以返回一个作为 yield from 语句结果的值。\n关于 yield from 的更多信息可以在 PEP 380 中找到。\n最后，如果使用生成器编程，要提醒你的是它还是有很多缺点的。特别是，你得不\n到任何线程可以提供的好处。例如，如果你执行 CPU 依赖或 I/O 阻塞程序，它会将整\n个任务挂起知道操作完成。为了解决这个问题，你只能选择将操作委派给另外一个可以\n独立运行的线程或进程。另外一个限制是大部分 Python 库并不能很好的兼容基于生成\n器的线程。如果你选择这个方案，你会发现你需要自己改写很多标准库函数。作为本节\n提到的协程和相关技术的一个基础背景，可以查看 PEP 342 和 “协程和并发的一门有\n趣课程”\nPEP 3156 同样有一个关于使用协程的异步 I/O 模型。特别的，你不可能自己去实\n现一个底层的协程调度器。不过，关于协程的思想是很多流行库的基础，包括 gevent,\ngreenlet, Stackless Python 以及其他类似工程。\n12.13 多个线程队列轮询\n问题\n你有一个线程队列集合，想为到来的元素轮询它们，就跟你为一个客户端请求去轮\n询一个网络连接集合的方式一样。\n解决方案\n对于轮询问题的一个常见解决方案中有个很少有人知道的技巧，包含了一个隐藏\n的回路网络连接。本质上讲其思想就是：对于每个你想要轮询的队列，你创建一对连接\n的套接字。然后你在其中一个套接字上面编写代码来标识存在的数据，另外一个套接字\n被传给 select() 或类似的一个轮询数据到达的函数。下面的例子演示了这个思想：\nimport queue\nimport socket\nimport os\nclass PollableQueue(queue.Queue):\ndef "),n("strong",[e._v("init")]),e._v("(self):\nsuper()."),n("strong",[e._v("init")]),e._v("()")]),e._v(" "),n("h1",{attrs:{id:"create-a-pair-of-connected-sockets"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-pair-of-connected-sockets"}},[e._v("#")]),e._v(" Create a pair of connected sockets")]),e._v(" "),n("p",[e._v("if os.name == 'posix':\nself._putsocket, self._getsocket = socket.socketpair()\nelse:")]),e._v(" "),n("h1",{attrs:{id:"compatibility-on-non-posix-systems"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compatibility-on-non-posix-systems"}},[e._v("#")]),e._v(" Compatibility on non-POSIX systems")]),e._v(" "),n("p",[e._v("server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind(('127.0.0.1', 0))\nserver.listen(1)\nself."),n("em",[e._v("putsocket = socket.socket(socket.AF_INET, socket.SOCK")]),e._v("\n,\n→STREAM)\nself._putsocket.connect(server.getsockname())\nself._getsocket, _ = server.accept()\nserver.close()\ndef fileno(self):\nreturn self._getsocket.fileno()\ndef put(self, item):\nsuper().put(item)\nself._putsocket.send(b'x')\ndef get(self):\nself._getsocket.recv(1)\nreturn super().get()\n在这个代码中，一个新的 Queue 实例类型被定义，底层是一个被连接套接字对。在\nUnix 机器上的 socketpair() 函数能轻松的创建这样的套接字。在 Windows 上面，你\n必须使用类似代码来模拟它。然后定义普通的 get() 和 put() 方法在这些套接字上面\n来执行 I/O 操作。put() 方法再将数据放入队列后会写一个单字节到某个套接字中去。\n而 get() 方法在从队列中移除一个元素时会从另外一个套接字中读取到这个单字节数\n据。\nfileno() 方法使用一个函数比如 select() 来让这个队列可以被轮询。它仅仅只\n是暴露了底层被 get() 函数使用到的 socket 的文件描述符而已。\n下面是一个例子，定义了一个为到来的元素监控多个队列的消费者：\nimport select\nimport threading\ndef consumer(queues):\n'''\nConsumer that reads data on multiple queues simultaneously\n'''\nwhile True:\ncan_read, _, _ = select.select(queues,[],[])\nfor r in can_read:\nitem = r.get()\nprint('Got:', item)\nq1 = PollableQueue()\nq2 = PollableQueue()\nq3 = PollableQueue()\nt = threading.Thread(target=consumer, args=([q1,q2,q3],))\nt.daemon = True\nt.start()")]),e._v(" "),n("h1",{attrs:{id:"feed-data-to-the-queues"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#feed-data-to-the-queues"}},[e._v("#")]),e._v(" Feed data to the queues")]),e._v(" "),n("p",[e._v("q1.put(1)\nq2.put(10)\nq3.put('hello')\nq2.put(15) ...\n如果你试着运行它，你会发现这个消费者会接受到所有的被放入的元素，不管元素\n被放进了哪个队列中。\n讨论\n对于轮询非类文件对象，比如队列通常都是比较棘手的问题。例如，如果你不使用\n上面的套接字技术，你唯一的选择就是编写代码来循环遍历这些队列并使用一个定时\n器。像下面这样：\nimport time\ndef consumer(queues):\nwhile True:\nfor q in queues:\nif not q.empty():\nitem = q.get()\nprint('Got:', item)")]),e._v(" "),n("h1",{attrs:{id:"sleep-briefly-to-avoid-100-cpu"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sleep-briefly-to-avoid-100-cpu"}},[e._v("#")]),e._v(" Sleep briefly to avoid 100% CPU")]),e._v(" "),n("p",[e._v("time.sleep(0.01)\n这样做其实不合理，还会引入其他的性能问题。例如，如果新的数据被加入到一个\n队列中，至少要花 10 毫秒才能被发现。如果你之前的轮询还要去轮询其他对象，比如\n网络套接字那还会有更多问题。例如，如果你想同时轮询套接字和队列，你可能要像下\n面这样使用：\nimport select\ndef event_loop(sockets, queues):\nwhile True:")]),e._v(" "),n("h1",{attrs:{id:"polling-with-a-timeout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#polling-with-a-timeout"}},[e._v("#")]),e._v(" polling with a timeout")]),e._v(" "),n("p",[e._v("can_read, _, _ = select.select(sockets, [], [], 0.01)\nfor r in can_read:\nhandle_read(r)\nfor q in queues:\nif not q.empty():\nitem = q.get()\nprint('Got:', item)\n这个方案通过将队列和套接字等同对待来解决了大部分的问题。一个单独的\nselect() 调用可被同时用来轮询。使用超时或其他基于时间的机制来执行周期性检查\n并没有必要。甚至，如果数据被加入到一个队列，消费者几乎可以实时的被通知。尽管\n会有一点点底层的 I/O 损耗，使用它通常会获得更好的响应时间并简化编程。\n12.14 在 Unix 系统上面启动守护进程\n问题\n你想编写一个作为一个在 Unix 或类 Unix 系统上面运行的守护进程运行的程序。\n解决方案\n创建一个正确的守护进程需要一个精确的系统调用序列以及对于细节的控制。下\n面的代码展示了怎样定义一个守护进程，可以启动后很容易的停止它。\n#!/usr/bin/env python3")]),e._v(" "),n("h1",{attrs:{id:"daemon-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#daemon-py"}},[e._v("#")]),e._v(" daemon.py")]),e._v(" "),n("p",[e._v("import os\nimport sys\nimport atexit\nimport signal\ndef daemonize(pidfile, *, stdin='/dev/null',\nstdout='/dev/null',\nstderr='/dev/null'):\nif os.path.exists(pidfile):\nraise RuntimeError('Already running')")]),e._v(" "),n("h1",{attrs:{id:"first-fork-detaches-from-parent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#first-fork-detaches-from-parent"}},[e._v("#")]),e._v(" First fork (detaches from parent)")]),e._v(" "),n("p",[e._v("try:\nif os.fork() > 0:\nraise SystemExit(0) # Parent exit\nexcept OSError as e:\nraise RuntimeError('fork #1 failed.')\nos.chdir('/')\nos.umask(0)\nos.setsid()")]),e._v(" "),n("h1",{attrs:{id:"second-fork-relinquish-session-leadership"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#second-fork-relinquish-session-leadership"}},[e._v("#")]),e._v(" Second fork (relinquish session leadership)")]),e._v(" "),n("p",[e._v("try:\nif os.fork() > 0:\nraise SystemExit(0)\nexcept OSError as e:\nraise RuntimeError('fork #2 failed.')")]),e._v(" "),n("h1",{attrs:{id:"flush-i-o-buffers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flush-i-o-buffers"}},[e._v("#")]),e._v(" Flush I/O buffers")]),e._v(" "),n("p",[e._v("sys.stdout.flush()\nsys.stderr.flush()")]),e._v(" "),n("h1",{attrs:{id:"replace-file-descriptors-for-stdin-stdout-and-stderr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#replace-file-descriptors-for-stdin-stdout-and-stderr"}},[e._v("#")]),e._v(" Replace file descriptors for stdin, stdout, and stderr")]),e._v(" "),n("p",[e._v("with open(stdin, 'rb', 0) as f:\nos.dup2(f.fileno(), sys.stdin.fileno())\nwith open(stdout, 'ab', 0) as f:\nos.dup2(f.fileno(), sys.stdout.fileno())\nwith open(stderr, 'ab', 0) as f:\nos.dup2(f.fileno(), sys.stderr.fileno())")]),e._v(" "),n("h1",{attrs:{id:"write-the-pid-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#write-the-pid-file"}},[e._v("#")]),e._v(" Write the PID file")]),e._v(" "),n("p",[e._v("with open(pidfile,'w') as f:\nprint(os.getpid(),file=f)")]),e._v(" "),n("h1",{attrs:{id:"arrange-to-have-the-pid-file-removed-on-exit-signal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arrange-to-have-the-pid-file-removed-on-exit-signal"}},[e._v("#")]),e._v(" Arrange to have the PID file removed on exit/signal")]),e._v(" "),n("p",[e._v("atexit.register(lambda: os.remove(pidfile))")]),e._v(" "),n("h1",{attrs:{id:"signal-handler-for-termination-required"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#signal-handler-for-termination-required"}},[e._v("#")]),e._v(" Signal handler for termination (required)")]),e._v(" "),n("p",[e._v("def sigterm_handler(signo, frame):\nraise SystemExit(1)\nsignal.signal(signal.SIGTERM, sigterm_handler)\ndef main():\nimport time\nsys.stdout.write('Daemon started with pid {}\\n'.format(os.getpid()))\nwhile True:\nsys.stdout.write('Daemon Alive! {}\\n'.format(time.ctime()))\ntime.sleep(10)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nPIDFILE = '/tmp/daemon.pid'\nif len(sys.argv) != 2:\nprint('Usage: {} [start|stop]'.format(sys.argv[0]), file=sys.stderr)\nraise SystemExit(1)\nif sys.argv[1] == 'start':\ntry:\ndaemonize(PIDFILE,\nstdout='/tmp/daemon.log',\nstderr='/tmp/dameon.log')\nexcept RuntimeError as e:\nprint(e, file=sys.stderr)\nraise SystemExit(1)\nmain()\nelif sys.argv[1] == 'stop':\nif os.path.exists(PIDFILE):\nwith open(PIDFILE) as f:\nos.kill(int(f.read()), signal.SIGTERM)\nelse:\nprint('Not running', file=sys.stderr)\nraise SystemExit(1)\nelse:\nprint('Unknown command {!r}'.format(sys.argv[1]), file=sys.stderr)\nraise SystemExit(1)\n要启动这个守护进程，用户需要使用如下的命令：\nbash % daemon.py start\nbash % cat /tmp/daemon.pid\n2882\nbash % tail -f /tmp/daemon.log\nDaemon started with pid 2882\nDaemon Alive! Fri Oct 12 13:45:37 2012\nDaemon Alive! Fri Oct 12 13:45:47 2012\n...\n守护进程可以完全在后台运行，因此这个命令会立即返回。不过，你可以像上面那\n样查看与它相关的 pid 文件和日志。要停止这个守护进程，使用：\nbash % daemon.py stop\nbash %\n讨论\n本节定义了一个函数 daemonize() ，在程序启动时被调用使得程序以一个守护进\n程来运行。daemonize() 函数只接受关键字参数，这样的话可选参数在被使用时就更清\n晰了。它会强制用户像下面这样使用它：\ndaemonize('daemon.pid',\nstdin='/dev/null,\nstdout='/tmp/daemon.log',\nstderr='/tmp/daemon.log')\n而不是像下面这样含糊不清的调用：")]),e._v(" "),n("h1",{attrs:{id:"illegal-must-use-keyword-arguments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#illegal-must-use-keyword-arguments"}},[e._v("#")]),e._v(" Illegal. Must use keyword arguments")]),e._v(" "),n("p",[e._v("daemonize('daemon.pid', '/dev/null', '/tmp/daemon.log','/tmp/daemon.log')\n创建一个守护进程的步骤看上去不是很易懂，但是大体思想是这样的，首先，一个\n守护进程必须要从父进程中脱离。这是由 os.fork() 操作来完成的，并立即被父进程\n终止。\n在子进程变成孤儿后，调用 os.setsid() 创建了一个全新的进程会话，并设置子\n进程为首领。它会设置这个子进程为新的进程组的首领，并确保不会再有控制终端。如\n果这些听上去太魔幻，因为它需要将守护进程同终端分离开并确保信号机制对它不起\n作用。调用 os.chdir() 和 os.umask(0) 改变了当前工作目录并重置文件权限掩码。修\n改目录通常是个好主意，因为这样可以使得它不再工作在被启动时的目录。\n另外一个调用 os.fork() 在这里更加神秘点。这一步使得守护进程失去了获取新\n的控制终端的能力并且让它更加独立（本质上，该 daemon 放弃了它的会话首领低位，\n因此再也没有权限去打开控制终端了）。尽管你可以忽略这一步，但是最好不要这么做。\n一旦守护进程被正确的分离，它会重新初始化标准 I/O 流指向用户指定的文件。\n这一部分有点难懂。跟标准 I/O 流相关的文件对象的引用在解释器中多个地方被找到\n（sys.stdout, sys."),n("strong",[e._v("stdout")]),e._v(" 等）。仅仅简单的关闭 sys.stdout 并重新指定它是行不\n通的，因为没办法知道它是否全部都是用的是 sys.stdout 。这里，我们打开了一个单\n独的文件对象，并调用 os.dup2() ，用它来代替被 sys.stdout 使用的文件描述符。这\n样，sys.stdout 使用的原始文件会被关闭并由新的来替换。还要强调的是任何用于文\n件编码或文本处理的标准 I/O 流还会保留原状。\n守护进程的一个通常实践是在一个文件中写入进程 ID，可以被其他程序后面使用\n到。daemonize() 函数的最后部分写了这个文件，但是在程序终止时删除了它。atexit.\nregister() 函数注册了一个函数在 Python 解释器终止时执行。一个对于 SIGTERM 的\n信号处理器的定义同样需要被优雅的关闭。信号处理器简单的抛出了 SystemExit() 异\n常。或许这一步看上去没必要，但是没有它，终止信号会使得不执行 atexit.register()\n注册的清理操作的时候就杀掉了解释器。一个杀掉进程的例子代码可以在程序最后的\nstop 命令的操作中看到。\n更多关于编写守护进程的信息可以查看《UNIX 环境高级编程》, 第二版 by W.\nRichard Stevens and Stephen A. Rago (Addison-Wesley, 2005)。尽管它是关注与 C 语言\n编程，但是所有的内容都适用于 Python，因为所有需要的 POSIX 函数都可以在标准\n库中找到。\n第十三章：脚本编程与系统管理\n许多人使用 Python 作为一个 shell 脚本的替代，用来实现常用系统任务的自动化，\n如文件的操作，系统的配置等。本章的主要目标是描述关于编写脚本时候经常遇到的一\n些功能。例如，解析命令行选项、获取有用的系统配置数据等等。第 5 章也包含了与文\n件和目录相关的一般信息。\n13.1 通过重定向/管道/文件接受输入\n问题\n你希望你的脚本接受任何用户认为最简单的输入方式。包括将命令行的输出通过\n管道传递给该脚本、重定向文件到该脚本，或在命令行中传递一个文件名或文件名列表\n给该脚本。\n解决方案\nPython 内置的 fileinput 模块让这个变得简单。如果你有一个下面这样的脚本：\n#!/usr/bin/env python3\nimport fileinput\nwith fileinput.input() as f_input:\nfor line in f_input:\nprint(line, end='')\n那么你就能以前面提到的所有方式来为此脚本提供输入。假设你将此脚本保存为\nfilein.py 并将其变为可执行文件，那么你可以像下面这样调用它，得到期望的输出：\n$ ls | ./filein.py # Prints a directory listing to stdout.\n$ ./filein.py /etc/passwd # Reads /etc/passwd to stdout.\n$ ./filein.py < /etc/passwd # Reads /etc/passwd to stdout.\n讨论\nfileinput.input() 创建并返回一个 FileInput 类的实例。该实例除了拥有一些\n有用的帮助方法外，它还可被当做一个上下文管理器使用。因此，整合起来，如果我们\n要写一个打印多个文件输出的脚本，那么我们需要在输出中包含文件名和行号，如下所\n示：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import fileinput\nwith fileinput.input('/etc/passwd') as f:\nfor line in f:\n... print(f.filename(), f.lineno(), line, end='')\n...\n/etc/passwd 1 ##\n/etc/passwd 2 # User Database\n/etc/passwd 3 #\n"),n("other",{attrs:{output:"",omitted:""}},[e._v("\n通过将它作为一个上下文管理器使用，可以确保它不再使用时文件能自动关闭，而\n且我们在之后还演示了 FileInput 的一些有用的帮助方法来获取输出中的一些其他信\n息。\n13.2 终止程序并给出错误信息\n问题\n你想向标准错误打印一条消息并返回某个非零状态码来终止程序运行\n解决方案\n你有一个程序像下面这样终止，抛出一个 SystemExit 异常，使用错误消息作为参\n数。例如：\nraise SystemExit('It failed!')\n它会将消息在 sys.stderr 中打印，然后程序以状态码 1 退出。\n讨论\n本节虽然很短小，但是它能解决在写脚本时的一个常见问题。也就是说，当你想要\n终止某个程序时，你可能会像下面这样写：\nimport sys\nsys.stderr.write('It failed!\\n')\nraise SystemExit(1)\n如果你直接将消息作为参数传给 SystemExit() ，那么你可以省略其他步骤，比如\nimport 语句或将错误消息写入 sys.stderr\n13.3 解析命令行选项\n问题\n你的程序如何能够解析命令行选项（位于 sys.argv 中）\n解决方案\nargparse 模块可被用来解析命令行选项。下面一个简单例子演示了最基本的用法：")])],1)])])]),e._v(" "),n("h1",{attrs:{id:"search-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#search-py"}},[e._v("#")]),e._v(" search.py")]),e._v(" "),n("p",[e._v("'''\nHypothetical command-line tool for searching a collection of\nfiles for one or more text patterns.\n'''\nimport argparse\nparser = argparse.ArgumentParser(description='Search some files')\nparser.add_argument(dest='filenames',metavar='filename', nargs='*')\nparser.add_argument('-p', '--pat',metavar='pattern', required=True,\ndest='patterns', action='append',\nhelp='text pattern to search for')\nparser.add_argument('-v', dest='verbose', action='store_true',\nhelp='verbose mode')\nparser.add_argument('-o', dest='outfile', action='store',\nhelp='output file')\nparser.add_argument('--speed', dest='speed', action='store',\nchoices={'slow','fast'}, default='slow',\nhelp='search speed')\nargs = parser.parse_args()")]),e._v(" "),n("h1",{attrs:{id:"output-the-collected-arguments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#output-the-collected-arguments"}},[e._v("#")]),e._v(" Output the collected arguments")]),e._v(" "),n("p",[e._v("print(args.filenames)\nprint(args.patterns)\nprint(args.verbose)\nprint(args.outfile)\nprint(args.speed)\n该程序定义了一个如下使用的命令行解析器：\nbash % python3 search.py -h\nusage: search.py [-h] [-p pattern] [-v] [-o OUTFILE] [--speed {slow,fast}]\n[filename [filename ...]]\nSearch some files\npositional arguments:\nfilename\noptional arguments:\n-h, --help show this help message and exit\n-p pattern, --pat pattern\ntext pattern to search for\n-v verbose mode\n-o OUTFILE output file\n--speed {slow,fast} search speed\n下面的部分演示了程序中的数据部分。仔细观察 print() 语句的打印输出。\nbash % python3 search.py foo.txt bar.txt\nusage: search.py [-h] -p pattern [-v] [-o OUTFILE] [--speed {fast,slow}]\n[filename [filename ...]]\nsearch.py: error: the following arguments are required: -p/--pat\nbash % python3 search.py -v -p spam --pat=eggs foo.txt bar.txt\nfilenames = ['foo.txt', 'bar.txt']\npatterns = ['spam', 'eggs']\nverbose = True\noutfile = None\nspeed = slow\nbash % python3 search.py -v -p spam --pat=eggs foo.txt bar.txt -o results\nfilenames = ['foo.txt', 'bar.txt']\npatterns = ['spam', 'eggs']\nverbose = True\noutfile = results\nspeed = slow\nbash % python3 search.py -v -p spam --pat=eggs foo.txt bar.txt -o results "),n("br"),e._v("\n--speed=fast\nfilenames = ['foo.txt', 'bar.txt']\npatterns = ['spam', 'eggs']\nverbose = True\noutfile = results\nspeed = fast\n对于选项值的进一步处理由程序来决定，用你自己的逻辑来替代 print() 函数。\n讨论\nargparse 模块是标准库中最大的模块之一，拥有大量的配置选项。本节只是演示\n了其中最基础的一些特性，帮助你入门。\n为 了 解 析 命 令 行 选 项， 你 首 先 要 创 建 一 个 ArgumentParser 实 例，并 使 用\nadd_argument() 方法声明你想要支持的选项。在每个 add_argument() 调用中，dest\n参数指定解析结果被指派给属性的名字。metavar 参数被用来生成帮助信息。action\n参数指定跟属性对应的处理逻辑，通常的值为 store , 被用来存储某个值或讲多个参数\n值收集到一个列表中。下面的参数收集所有剩余的命令行参数到一个列表中。在本例中\n它被用来构造一个文件名列表：\nparser.add_argument(dest='filenames',metavar='filename', nargs='*')\n下面的参数根据参数是否存在来设置一个 Boolean 标志：\nparser.add_argument('-v', dest='verbose', action='store_true',\nhelp='verbose mode')\n下面的参数接受一个单独值并将其存储为一个字符串：\nparser.add_argument('-o', dest='outfile', action='store',\nhelp='output file')\n下面的参数说明允许某个参数重复出现多次，并将它们追加到一个列表中去。\nrequired 标志表示该参数至少要有一个。-p 和 --pat 表示两个参数名形式都可使用。\nparser.add_argument('-p', '--pat',metavar='pattern', required=True,\ndest='patterns', action='append',\nhelp='text pattern to search for')\n最后，下面的参数说明接受一个值，但是会将其和可能的选择值做比较，以检测其\n合法性：\nparser.add_argument('--speed', dest='speed', action='store',\nchoices={'slow','fast'}, default='slow',\nhelp='search speed')\n一旦参数选项被指定，你就可以执行 parser.parse() 方法了。它会处理 sys.argv\n的值并返回一个结果实例。每个参数值会被设置成该实例中 add_argument() 方法的\ndest 参数指定的属性值。\n还很多种其他方法解析命令行选项。例如，你可能会手动的处理 sys.argv 或者使\n用 getopt 模块。但是，如果你采用本节的方式，将会减少很多冗余代码，底层细节\nargparse 模块已经帮你处理了。你可能还会碰到使用 optparse 库解析选项的代码。尽\n管 optparse 和 argparse 很像，但是后者更先进，因此在新的程序中你应该使用它。\n13.4 运行时弹出密码输入提示\n问题\n你写了个脚本，运行时需要一个密码。此脚本是交互式的，因此不能将密码在脚本\n中硬编码，而是需要弹出一个密码输入提示，让用户自己输入。\n解决方案\n这时候 Python 的 getpass 模块正是你所需要的。你可以让你很轻松的弹出密码\n输入提示，并且不会在用户终端回显密码。下面是具体代码：\nimport getpass\nuser = getpass.getuser()\npasswd = getpass.getpass()\nif svc_login(user, passwd): # You must write svc_login()\nprint('Yay!')\nelse:\nprint('Boo!')\n在此代码中，svc_login() 是你要实现的处理密码的函数，具体的处理过程你自己\n决定。\n讨论\n注意在前面代码中 getpass.getuser() 不会弹出用户名的输入提示。它会根据该\n用户的 shell 环境或者会依据本地系统的密码库（支持 pwd 模块的平台）来使用当前用\n户的登录名，\n如果你想显示的弹出用户名输入提示，使用内置的 input 函数：\nuser = input('Enter your username: ')\n还有一点很重要，有些系统可能不支持 getpass() 方法隐藏输入密码。这种情况\n下，Python 会提前警告你这些问题（例如它会警告你说密码会以明文形式显示）\n13.5 获取终端的大小\n问题\n你需要知道当前终端的大小以便正确的格式化输出。\n解决方案\n使用 os.get_terminal_size() 函数来做到这一点。\n代码示例：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import os\nsz = os.get_terminal_size()\nsz\nos.terminal_size(columns=80, lines=24)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sz.columns\n80")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sz.lines\n24")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n有太多方式来得知终端大小了，从读取环境变量到执行底层的 ioctl() 函数等等。\n不过，为什么要去研究这些复杂的办法而不是仅仅调用一个简单的函数呢？\n13.6 执行外部命令并获取它的输出\n问题\n你想执行一个外部命令并以 Python 字符串的形式获取执行结果。\n解决方案\n使用 subprocess.check_output() 函数。例如：\nimport subprocess\nout_bytes = subprocess.check_output(['netstat','-a'])\n这段代码执行一个指定的命令并将执行结果以一个字节字符串的形式返回。如果\n你需要文本形式返回，加一个解码步骤即可。例如：\nout_text = out_bytes.decode('utf-8')\n如果被执行的命令以非零码返回，就会抛出异常。下面的例子捕获到错误并获取返\n回码：\ntry:\nout_bytes = subprocess.check_output(['cmd','arg1','arg2'])\nexcept subprocess.CalledProcessError as e:\nout_bytes = e.output # Output generated before error\ncode = e.returncode # Return code\n默认情况下，check_output() 仅仅返回输入到标准输出的值。如果你需要同时收\n集标准输出和错误输出，使用 stderr 参数：\nout_bytes = subprocess.check_output(['cmd','arg1','arg2'],\nstderr=subprocess.STDOUT)\n如果你需要用一个超时机制来执行命令，使用 timeout 参数：\ntry:\nout_bytes = subprocess.check_output(['cmd','arg1','arg2'], timeout=5)\nexcept subprocess.TimeoutExpired as e:\n...\n通常来讲，命令的执行不需要使用到底层 shell 环境（比如 sh、bash）。一个字符串\n列表会被传递给一个低级系统命令，比如 os.execve() 。如果你想让命令被一个 shell\n执行，传递一个字符串参数，并设置参数 shell=True . 有时候你想要 Python 去执行\n一个复杂的 shell 命令的时候这个就很有用了，比如管道流、I/O 重定向和其他特性。\n例如：\nout_bytes = subprocess.check_output('grep python | wc > out', shell=True)\n需要注意的是在 shell 中执行命令会存在一定的安全风险，特别是当参数来自于用\n户输入时。这时候可以使用 shlex.quote() 函数来讲参数正确的用双引用引起来。\n讨论\n使用 check_output() 函数是执行外部命令并获取其返回值的最简单方式。但是，\n如果你需要对子进程做更复杂的交互，比如给它发送输入，你得采用另外一种方法。这\n时候可直接使用 subprocess.Popen 类。例如：\nimport subprocess")]),e._v(" "),n("h1",{attrs:{id:"some-text-to-send"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#some-text-to-send"}},[e._v("#")]),e._v(" Some text to send")]),e._v(" "),n("p",[e._v("text = b'''\nhello world\nthis is a test\ngoodbye\n'''")]),e._v(" "),n("h1",{attrs:{id:"launch-a-command-with-pipes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#launch-a-command-with-pipes"}},[e._v("#")]),e._v(" Launch a command with pipes")]),e._v(" "),n("p",[e._v("p = subprocess.Popen(['wc'],\nstdout = subprocess.PIPE,\nstdin = subprocess.PIPE)")]),e._v(" "),n("h1",{attrs:{id:"send-the-data-and-get-the-output"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#send-the-data-and-get-the-output"}},[e._v("#")]),e._v(" Send the data and get the output")]),e._v(" "),n("p",[e._v("stdout, stderr = p.communicate(text)")]),e._v(" "),n("h1",{attrs:{id:"to-interpret-as-text-decode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#to-interpret-as-text-decode"}},[e._v("#")]),e._v(" To interpret as text, decode")]),e._v(" "),n("p",[e._v("out = stdout.decode('utf-8')\nerr = stderr.decode('utf-8')\nsubprocess 模块对于依赖 TTY 的外部命令不合适用。例如，你不能使用它来自\n动化一个用户输入密码的任务（比如一个 ssh 会话）。这时候，你需要使用到第三方模\n块了，比如基于著名的 expect 家族的工具（pexpect 或类似的）\n13.7 复制或者移动文件和目录\n问题\n你想要复制或移动文件和目录，但是又不想调用 shell 命令。\n解决方案\nshutil 模块有很多便捷的函数可以复制文件和目录。使用起来非常简单，比如：\nimport shutil")]),e._v(" "),n("h1",{attrs:{id:"copy-src-to-dst-cp-src-dst"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copy-src-to-dst-cp-src-dst"}},[e._v("#")]),e._v(" Copy src to dst. (cp src dst)")]),e._v(" "),n("p",[e._v("shutil.copy(src, dst)")]),e._v(" "),n("h1",{attrs:{id:"copy-files-but-preserve-metadata-cp-p-src-dst"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copy-files-but-preserve-metadata-cp-p-src-dst"}},[e._v("#")]),e._v(" Copy files, but preserve metadata (cp -p src dst)")]),e._v(" "),n("p",[e._v("shutil.copy2(src, dst)")]),e._v(" "),n("h1",{attrs:{id:"copy-directory-tree-cp-r-src-dst"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#copy-directory-tree-cp-r-src-dst"}},[e._v("#")]),e._v(" Copy directory tree (cp -R src dst)")]),e._v(" "),n("p",[e._v("shutil.copytree(src, dst)")]),e._v(" "),n("h1",{attrs:{id:"move-src-to-dst-mv-src-dst"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#move-src-to-dst-mv-src-dst"}},[e._v("#")]),e._v(" Move src to dst (mv src dst)")]),e._v(" "),n("p",[e._v("shutil.move(src, dst)\n这些函数的参数都是字符串形式的文件或目录名。底层语义模拟了类似的 Unix 命\n令，如上面的注释部分。\n默认情况下，对于符号链接而已这些命令处理的是它指向的东西。例如，如果源文\n件是一个符号链接，那么目标文件将会是符号链接指向的文件。如果你只想复制符号链\n接本身，那么需要指定关键字参数 follow_symlinks , 如下：\n如果你想保留被复制目录中的符号链接，像这样做：\nshutil.copytree(src, dst, symlinks=True)\ncopytree() 可以让你在复制过程中选择性的忽略某些文件或目录。你可以提供一\n个忽略函数，接受一个目录名和文件名列表作为输入，返回一个忽略的名称列表。例如：\ndef ignore_pyc_files(dirname, filenames):\nreturn [name in filenames if name.endswith('.pyc')]\nshutil.copytree(src, dst, ignore=ignore_pyc_files)\n由于忽略某种模式的文件名是很常见的，因此一个便捷的函数 ignore_patterns()\n已经包含在里面了。例如：\nshutil.copytree(src, dst, ignore=shutil.ignore_patterns('"),n("em",[e._v("~', '")]),e._v(".pyc'))\n讨论\n使用 shutil 复制文件和目录也忒简单了点吧。不过，对于文件元数据信息，copy2()\n这样的函数只能尽自己最大能力来保留它。访问时间、创建时间和权限这些基本信息\n会被保留，但是对于所有者、ACLs、资源 fork 和其他更深层次的文件元信息就说不准\n了，这个还得依赖于底层操作系统类型和用户所拥有的访问权限。你通常不会去使用\nshutil.copytree() 函数来执行系统备份。当处理文件名的时候，最好使用 os.path\n中的函数来确保最大的可移植性（特别是同时要适用于 Unix 和 Windows）。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("filename = '/Users/guido/programs/spam.py'\nimport os.path\nos.path.basename(filename)\n'spam.py'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("os.path.dirname(filename)\n'/Users/guido/programs'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("os.path.split(filename)\n('/Users/guido/programs', 'spam.py')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("os.path.join('/new/dir', os.path.basename(filename))\n'/new/dir/spam.py'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("os.path.expanduser('~/guido/programs/spam.py')\n'/Users/guido/programs/spam.py'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("使用 copytree() 复制文件夹的一个棘手的问题是对于错误的处理。例如，在复制\n过程中，函数可能会碰到损坏的符号链接，因为权限无法访问文件的问题等等。为了解\n决这个问题，所有碰到的问题会被收集到一个列表中并打包为一个单独的异常，到了最\n后再抛出。下面是一个例子：\ntry:\nshutil.copytree(src, dst)\nexcept shutil.Error as e:\nfor src, dst, msg in e.args[0]:")]),e._v(" "),n("h1",{attrs:{id:"src-is-source-name"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#src-is-source-name"}},[e._v("#")]),e._v(" src is source name")]),e._v(" "),n("h1",{attrs:{id:"dst-is-destination-name"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dst-is-destination-name"}},[e._v("#")]),e._v(" dst is destination name")]),e._v(" "),n("h1",{attrs:{id:"msg-is-error-message-from-exception"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#msg-is-error-message-from-exception"}},[e._v("#")]),e._v(" msg is error message from exception")]),e._v(" "),n("p",[e._v("print(dst, src, msg)\n如果你提供关键字参数 ignore_dangling_symlinks=True ，这时候 copytree()\n会忽略掉无效符号链接。\n本节演示的这些函数都是最常见的。不过，shutil 还有更多的和复制数据相关的\n操作。它的文档很值得一看，参考 Python documentation\n13.8 创建和解压归档文件\n问题\n你需要创建或解压常见格式的归档文件（比如.tar, .tgz 或.zip）\n解决方案\nshutil 模块拥有两个函数——make_archive() 和 unpack_archive() 可派上用\n场。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import shutil\nshutil.unpack_archive('Python-3.3.0.tgz')\nshutil.make_archive('py33','zip','Python-3.3.0')\n'/Users/beazley/Downloads/py33.zip'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("make_archive() 的 第 二 个 参 数 是 期 望 的 输 出 格 式。可 以 使 用\nget_archive_formats() 获取所有支持的归档格式列表。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("shutil.get_archive_formats()\n[('bztar', \"bzip2'ed tar-file\"), ('gztar', \"gzip'ed tar-file\"),\n('tar', 'uncompressed tar file'), ('zip', 'ZIP file')]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\nPython 还有其他的模块可用来处理多种归档格式（比如 tarfile, zipfile, gzip, bz2）\n的底层细节。不过，如果你仅仅只是要创建或提取某个归档，就没有必要使用底层库\n了。可以直接使用 shutil 中的这些高层函数。\n这些函数还有很多其他选项，用于日志打印、预检、文件权限等等。参考 shutil 文 档\n13.9 通过文件名查找文件\n问题\n你需要写一个涉及到文件查找操作的脚本，比如对日志归档文件的重命名工具，你\n不想在 Python 脚本中调用 shell，或者你要实现一些 shell 不能做的功能。\n解决方案\n查找文件，可使用 os.walk() 函数，传一个顶级目录名给它。下面是一个例子，查\n找特定的文件名并答应所有符合条件的文件全路径：\n#!/usr/bin/env python3.3\nimport os\ndef findfile(start, name):\nfor relpath, dirs, files in os.walk(start):\nif name in files:\nfull_path = os.path.join(start, relpath, name)\nprint(os.path.normpath(os.path.abspath(full_path)))\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nfindfile(sys.argv[1], sys.argv[2])\n保存脚本为文件 findfile.py，然后在命令行中执行它。指定初始查找目录以及名字\n作为位置参数，如下：\n讨论\nos.walk() 方法为我们遍历目录树，每次进入一个目录，它会返回一个三元组，包\n含相对于查找目录的相对路径，一个该目录下的目录名列表，以及那个目录下面的文件\n名列表。\n对于每个元组，只需检测一下目标文件名是否在文件列表中。如果是就使用 os.\npath.join() 合并路径。为了避免奇怪的路径名比如 ././foo//bar ，使用了另外两个\n函数来修正结果。第一个是 os.path.abspath() , 它接受一个路径，可能是相对路径，\n最后返回绝对路径。第二个是 os.path.normpath() ，用来返回正常路径，可以解决双\n斜杆、对目录的多重引用的问题等。\n尽管这个脚本相对于 UNIX 平台上面的很多查找来讲要简单很多，它还有跨平台\n的优势。并且，还能很轻松的加入其他的功能。我们再演示一个例子，下面的函数打印\n所有最近被修改过的文件：\n#!/usr/bin/env python3.3\nimport os\nimport time\ndef modified_within(top, seconds):\nnow = time.time()\nfor path, dirs, files in os.walk(top):\nfor name in files:\nfullpath = os.path.join(path, name)\nif os.path.exists(fullpath):\nmtime = os.path.getmtime(fullpath)\nif mtime > (now - seconds):\nprint(fullpath)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nimport sys\nif len(sys.argv) != 3:\nprint('Usage: {} dir seconds'.format(sys.argv[0]))\nraise SystemExit(1)\nmodified_within(sys.argv[1], float(sys.argv[2]))\n在此函数的基础之上，使用 os,os.path,glob 等类似模块，你就能实现更加复杂的操\n作了。可参考 5.11 小节和 5.13 小节等相关章节。\n13.10 读取配置文件\n问题\n怎样读取普通.ini 格式的配置文件？\n解决方案\nconfigparser 模块能被用来读取配置文件。例如，假设你有如下的配置文件：\n; config.ini\n; Sample configuration file\n[installation]\nlibrary=%(prefix)s/lib\ninclude=%(prefix)s/include\nbin=%(prefix)s/bin\nprefix=/usr/local")]),e._v(" "),n("h1",{attrs:{id:"setting-related-to-debug-configuration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setting-related-to-debug-configuration"}},[e._v("#")]),e._v(" Setting related to debug configuration")]),e._v(" "),n("h1",{attrs:{id:"debug-log-errors-trueshow-warnings-false-server-port-8080nworkers-32pid-file-tmp-spam-pidroot-www-rootsignature"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#debug-log-errors-trueshow-warnings-false-server-port-8080nworkers-32pid-file-tmp-spam-pidroot-www-rootsignature"}},[e._v("#")]),e._v(" [debug]\nlog_errors=true\nshow_warnings=False\n[server]\nport: 8080\nnworkers: 32\npid-file=/tmp/spam.pid\nroot=/www/root\nsignature:")]),e._v(" "),n("h1",{attrs:{id:"brought-to-you-by-the-python-cookbook"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#brought-to-you-by-the-python-cookbook"}},[e._v("#")]),e._v(" Brought to you by the Python Cookbook")]),e._v(" "),n("p",[e._v("下面是一个读取和提取其中值的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from configparser import ConfigParser\ncfg = ConfigParser()\ncfg.read('config.ini')\n['config.ini']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cfg.sections()\n['installation', 'debug', 'server']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cfg.get('installation','library')\n'/usr/local/lib'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cfg.getboolean('debug','log_errors')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cfg.getint('server','port')\n8080")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cfg.getint('server','nworkers')\n32")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print(cfg.get('server','signature'))\n=================================\nBrought to you by the Python Cookbook\n=================================")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果有需要，你还能修改配置并使用 cfg.write() 方法将其写回到文件中。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("cfg.set('server','port','9000')\ncfg.set('debug','log_errors','False')\nimport sys\ncfg.write(sys.stdout)\n[installation]\nlibrary = %(prefix)s/lib\ninclude = %(prefix)s/include\nbin = %(prefix)s/bin\nprefix = /usr/local\n[debug]\nlog_errors = False\nshow_warnings = False\n[server]\nport = 9000\nnworkers = 32\npid-file = /tmp/spam.pid\nroot = /www/root\nsignature =\n=================================\nBrought to you by the Python Cookbook\n=================================")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n配置文件作为一种可读性很好的格式，非常适用于存储程序中的配置数据。在每个\n配置文件中，配置数据会被分组（比如例子中的“installation”、“debug”和“server”）。\n每个分组在其中指定对应的各个变量值。\n对于可实现同样功能的配置文件和 Python 源文件是有很大的不同的。首先，配置\n文件的语法要更自由些，下面的赋值语句是等效的：\nprefix=/usr/local\nprefix: /usr/local\n配置文件中的名字是不区分大小写的。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("cfg.get('installation','PREFIX')\n'/usr/local'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cfg.get('installation','prefix')\n'/usr/local'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在解析值的时候，getboolean() 方法查找任何可行的值。例如下面都是等价的：\nlog_errors = true\nlog_errors = TRUE\nlog_errors = Yes\nlog_errors = 1\n或许配置文件和 Python 代码最大的不同在于，它并不是从上而下的顺序执行。文\n件是安装一个整体被读取的。如果碰到了变量替换，它实际上已经被替换完成了。例\n如，在下面这个配置中，prefix 变量在使用它的变量之前或之后定义都是可以的：\n[installation]\nlibrary=%(prefix)s/lib\ninclude=%(prefix)s/include\nbin=%(prefix)s/bin\nprefix=/usr/local\nConfigParser 有个容易被忽视的特性是它能一次读取多个配置文件然后合并成一\n个配置。例如，假设一个用户像下面这样构造了他们的配置文件：\n; ~/.config.ini\n[installation]\nprefix=/Users/beazley/test\n[debug]\nlog_errors=False\n读取这个文件，它就能跟之前的配置合并起来。如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"previously-read-configuration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#previously-read-configuration"}},[e._v("#")]),e._v(" Previously read configuration")]),e._v(" "),n("p",[e._v("cfg.get('installation', 'prefix')\n'/usr/local'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"merge-in-user-specific-configuration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#merge-in-user-specific-configuration"}},[e._v("#")]),e._v(" Merge in user-specific configuration")]),e._v(" "),n("p",[e._v("import os\ncfg.read(os.path.expanduser('~/.config.ini'))\n['/Users/beazley/.config.ini']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cfg.get('installation', 'prefix')\n'/Users/beazley/test'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cfg.get('installation', 'library')\n'/Users/beazley/test/lib'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cfg.getboolean('debug', 'log_errors')\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("仔细观察下 prefix 变量是怎样覆盖其他相关变量的，比如 library 的设定值。产\n生这种结果的原因是变量的改写采取的是后发制人策略，以最后一个为准。你可以像下\n面这样做试验：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("cfg.get('installation','library')\n'/Users/beazley/test/lib'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("cfg.set('installation','prefix','/tmp/dir')\ncfg.get('installation','library')\n'/tmp/dir/lib'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后还有很重要一点要注意的是 Python 并不能支持.ini 文件在其他程序（比如\nwindows 应用程序）中的所有特性。确保你已经参阅了 configparser 文档中的语法详情\n以及支持特性。\n13.11 给简单脚本增加日志功能\n问题\n你希望在脚本和程序中将诊断信息写入日志文件。\n解决方案\n打印日志最简单方式是使用 logging 模块。例如：\nimport logging\ndef main():")]),e._v(" "),n("h1",{attrs:{id:"configure-the-logging-system"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configure-the-logging-system"}},[e._v("#")]),e._v(" Configure the logging system")]),e._v(" "),n("p",[e._v("logging.basicConfig(\nfilename='app.log',\nlevel=logging.ERROR\n)")]),e._v(" "),n("h1",{attrs:{id:"variables-to-make-the-calls-that-follow-work"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#variables-to-make-the-calls-that-follow-work"}},[e._v("#")]),e._v(" Variables (to make the calls that follow work)")]),e._v(" "),n("p",[e._v("hostname = 'www.python.org'\nitem = 'spam'\nfilename = 'data.csv'\nmode = 'r'")]),e._v(" "),n("h1",{attrs:{id:"example-logging-calls-insert-into-your-program"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-logging-calls-insert-into-your-program"}},[e._v("#")]),e._v(" Example logging calls (insert into your program)")]),e._v(" "),n("p",[e._v("logging.critical('Host %s unknown', hostname)\nlogging.error(\"Couldn't find %r\", item)\nlogging.warning('Feature is deprecated')\nlogging.info('Opening file %r, mode=%r', filename, mode)\nlogging.debug('Got here')\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nmain()\n上面五个日志调用（critical(), error(), warning(), info(), debug()）以降序方式表示\n不同的严重级别。basicConfig() 的 level 参数是一个过滤器。所有级别低于此级别\n的日志消息都会被忽略掉。每个 logging 操作的参数是一个消息字符串，后面再跟一个\n或多个参数。构造最终的日志消息的时候我们使用了% 操作符来格式化消息字符串。\n运行这个程序后，在文件 app.log 中的内容应该是下面这样：\nCRITICAL:root:Host www.python.org unknown\nERROR:root:Could not find 'spam'\n如果你想改变输出等级，你可以修改 basicConfig() 调用中的参数。例如：\nlogging.basicConfig(\nfilename='app.log',\nlevel=logging.WARNING,\nformat='%(levelname)s:%(asctime)s:%(message)s')\n最后输出变成如下：\nCRITICAL:2012-11-20 12:27:13,595:Host www.python.org unknown\nERROR:2012-11-20 12:27:13,595:Could not find 'spam'\nWARNING:2012-11-20 12:27:13,595:Feature is deprecated\n上面的日志配置都是硬编码到程序中的。如果你想使用配置文件，可以像下面这样\n修改 basicConfig() 调用：\nimport logging\nimport logging.config\ndef main():")]),e._v(" "),n("h1",{attrs:{id:"configure-the-logging-system-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configure-the-logging-system-2"}},[e._v("#")]),e._v(" Configure the logging system")]),e._v(" "),n("p",[e._v("logging.config.fileConfig('logconfig.ini') ...\n创建一个下面这样的文件，名字叫 logconfig.ini ：\n[loggers]\nkeys=root\n[handlers]\nkeys=defaultHandler\n[formatters]\nkeys=defaultFormatter\n[logger_root]\nlevel=INFO\nhandlers=defaultHandler\nqualname=root\n[handler_defaultHandler]\nclass=FileHandler\nformatter=defaultFormatter\nargs=('app.log', 'a')\n[formatter_defaultFormatter]\nformat=%(levelname)s:%(name)s:%(message)s\n如果你想修改配置，可以直接编辑文件 logconfig.ini 即可。\n讨论\n尽管对于 logging 模块而已有很多更高级的配置选项，不过这里的方案对于简单\n的程序和脚本已经足够了。只想在调用日志操作前先执行下 basicConfig() 函数方法，你\n的程序就能产生日志输出了。\n如 果 你 想 要 你 的 日 志 消 息 写 到 标 准 错 误 中， 而 不 是 日 志 文 件 中， 调 用\nbasicConfig() 时不传文件名参数即可。例如：\nlogging.basicConfig(level=logging.INFO)\nbasicConfig() 在程序中只能被执行一次。如果你稍后想改变日志配置，就需要先\n获取 root logger ，然后直接修改它。例如：\nlogging.getLogger().level = logging.DEBUG\n需要强调的是本节只是演示了 logging 模块的一些基本用法。它可以做更多更高\n级的定制。关于日志定制化一个很好的资源是 Logging Cookbook\n13.12 给函数库增加日志功能\n问题\n你想给某个函数库增加日志功能，但是又不能影响到那些不使用日志功能的程序。\n解决方案\n对于想要执行日志操作的函数库而已，你应该创建一个专属的 logger 对象，并且\n像下面这样初始化配置：")]),e._v(" "),n("h1",{attrs:{id:"somelib-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#somelib-py"}},[e._v("#")]),e._v(" somelib.py")]),e._v(" "),n("p",[e._v("import logging\nlog = logging.getLogger("),n("strong",[e._v("name")]),e._v(")\nlog.addHandler(logging.NullHandler())")]),e._v(" "),n("h1",{attrs:{id:"example-function-for-testing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-function-for-testing"}},[e._v("#")]),e._v(" Example function (for testing)")]),e._v(" "),n("p",[e._v("def func():\nlog.critical('A Critical Error!')\nlog.debug('A debug message')\n使用这个配置，默认情况下不会打印日志。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import somelib\nsomelib.func()")])])])]),e._v(" "),n("p",[e._v("不过，如果配置过日志系统，那么日志消息打印就开始生效，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import logging\nlogging.basicConfig()\nsomelib.func()\nCRITICAL:somelib:A Critical Error!")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n通常来讲，你不应该在函数库代码中自己配置日志系统，或者是已经假定有个已经\n存在的日志配置了。\n调用 getLogger("),n("strong",[e._v("name")]),e._v(") 创建一个和调用模块同名的 logger 模块。由于模块都\n是唯一的，因此创建的 logger 也将是唯一的。\nlog.addHandler(logging.NullHandler()) 操作将一个空处理器绑定到刚刚已经\n创建好的 logger 对象上。一个空处理器默认会忽略调用所有的日志消息。因此，如果使\n用该函数库的时候还没有配置日志，那么将不会有消息或警告出现。\n还有一点就是对于各个函数库的日志配置可以是相互独立的，不影响其他库的日\n志配置。例如，对于如下的代码：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import logging\nlogging.basicConfig(level=logging.ERROR)\nimport somelib\nsomelib.func()\nCRITICAL:somelib:A Critical Error!")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"change-the-logging-level-for-somelib-only"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#change-the-logging-level-for-somelib-only"}},[e._v("#")]),e._v(" Change the logging level for 'somelib' only")]),e._v(" "),n("p",[e._v("logging.getLogger('somelib').level=logging.DEBUG\nsomelib.func()\nCRITICAL:somelib:A Critical Error!\nDEBUG:somelib:A debug message")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在这里，根日志被配置成仅仅输出 ERROR 或更高级别的消息。不过，somelib 的\n日志级别被单独配置成可以输出 debug 级别的消息，它的优先级比全局配置高。像这\n样更改单独模块的日志配置对于调试来讲是很方便的，因为你无需去更改任何的全局\n日志配置——只需要修改你想要更多输出的模块的日志等级。\nLogging HOWTO 详细介绍了如何配置日志模块和其他有用技巧，可以参阅下。\n13.13 实现一个计时器\n问题\n你想记录程序执行多个任务所花费的时间\n解决方案\ntime 模块包含很多函数来执行跟时间有关的函数。尽管如此，通常我们会在此基\n础之上构造一个更高级的接口来模拟一个计时器。例如：\nimport time\nclass Timer:\ndef "),n("strong",[e._v("init")]),e._v("(self, func=time.perf_counter):\nself.elapsed = 0.0\nself._func = func\nself._start = None\ndef start(self):\nif self._start is not None:\nraise RuntimeError('Already started')\nself._start = self._func()\ndef stop(self):\nif self._start is None:\nraise RuntimeError('Not started')\nend = self._func()\nself.elapsed += end - self._start\nself._start = None\ndef reset(self):\nself.elapsed = 0.0\n@property\ndef running(self):\nreturn self._start is not None\ndef "),n("strong",[e._v("enter")]),e._v("(self):\nself.start()\nreturn self\ndef "),n("strong",[e._v("exit")]),e._v("(self, *args):\nself.stop()\n这个类定义了一个可以被用户根据需要启动、停止和重置的计时器。它会在 elapsed\n属性中记录整个消耗时间。下面是一个例子来演示怎样使用它：\ndef countdown(n):\nwhile n > 0:\nn -= 1")]),e._v(" "),n("h1",{attrs:{id:"use-1-explicit-start-stop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#use-1-explicit-start-stop"}},[e._v("#")]),e._v(" Use 1: Explicit start/stop")]),e._v(" "),n("p",[e._v("t = Timer()\nt.start()\ncountdown(1000000) t.stop()\nprint(t.elapsed)")]),e._v(" "),n("h1",{attrs:{id:"use-2-as-a-context-manager"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#use-2-as-a-context-manager"}},[e._v("#")]),e._v(" Use 2: As a context manager")]),e._v(" "),n("p",[e._v('with t:\ncountdown(1000000)\nprint(t.elapsed)\nwith Timer() as t2:\ncountdown(1000000)\nprint(t2.elapsed)\n讨论\n本节提供了一个简单而实用的类来实现时间记录以及耗时计算。同时也是对使用\nwith 语句以及上下文管理器协议的一个很好的演示。\n在计时中要考虑一个底层的时间函数问题。一般来说，使用 time.time() 或 time.\nclock() 计算的时间精度因操作系统的不同会有所不同。而使用 time.perf_counter()\n函数可以确保使用系统上面最精确的计时器。\n上述代码中由 Timer 类记录的时间是钟表时间，并包含了所有休眠时间。如果你\n只想计算该进程所花费的 CPU 时间，应该使用 time.process_time() 来代替：\nt = Timer(time.process_time)\nwith t:\ncountdown(1000000)\nprint(t.elapsed)\ntime.perf_counter() 和 time.process_time() 都会返回小数形式的秒数时间。\n实际的时间值没有任何意义，为了得到有意义的结果，你得执行两次函数然后计算它们\n的差值。\n更多关于计时和性能分析的例子请参考 14.13 小节。\n13.14 限制内存和 CPU 的使用量\n问题\n你想对在 Unix 系统上面运行的程序设置内存或 CPU 的使用限制。\n解决方案\nresource 模块能同时执行这两个任务。例如，要限制 CPU 时间，可以像下面这样\n做：\nimport signal\nimport resource\nimport os\ndef time_exceeded(signo, frame):\nprint("Time\'s up!")\nraise SystemExit(1)\ndef set_max_runtime(seconds):')]),e._v(" "),n("h1",{attrs:{id:"install-the-signal-handler-and-set-a-resource-limit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#install-the-signal-handler-and-set-a-resource-limit"}},[e._v("#")]),e._v(" Install the signal handler and set a resource limit")]),e._v(" "),n("p",[e._v("soft, hard = resource.getrlimit(resource.RLIMIT_CPU)\nresource.setrlimit(resource.RLIMIT_CPU, (seconds, hard))\nsignal.signal(signal.SIGXCPU, time_exceeded)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nset_max_runtime(15)\nwhile True:\npass\n程序运行时，SIGXCPU 信号在时间过期时被生成，然后执行清理并退出。\n要限制内存使用，设置可使用的总内存值即可，如下：\nimport resource\ndef limit_memory(maxsize):\nsoft, hard = resource.getrlimit(resource.RLIMIT_AS)\nresource.setrlimit(resource.RLIMIT_AS, (maxsize, hard))\n像这样设置了内存限制后，程序运行到没有多余内存时会抛出 MemoryError 异常。\n讨论\n在本节例子中，setrlimit() 函数被用来设置特定资源上面的软限制和硬限制。软\n限制是一个值，当超过这个值的时候操作系统通常会发送一个信号来限制或通知该进\n程。硬限制是用来指定软限制能设定的最大值。通常来讲，这个由系统管理员通过设置\n系统级参数来决定。尽管硬限制可以改小一点，但是最好不要使用用户进程去修改。\nsetrlimit() 函数还能被用来设置子进程数量、打开文件数以及类似系统资源的\n限制。更多详情请参考 resource 模块的文档。\n需要注意的是本节内容只能适用于 Unix 系统，并且不保证所有系统都能如期工\n作。比如我们在测试的时候，它能在 Linux 上面正常运行，但是在 OS X 上却不能。\n13.15 启动一个 WEB 浏览器\n问题\n你想通过脚本启动浏览器并打开指定的 URL 网页\n解决方案\nwebbrowser 模块能被用来启动一个浏览器，并且与平台无关。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import webbrowser\nwebbrowser.open('http://www.python.org')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("它会使用默认浏览器打开指定网页。如果你还想对网页打开方式做更多控制，还可\n以使用下面这些函数：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"open-the-page-in-a-new-browser-window"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#open-the-page-in-a-new-browser-window"}},[e._v("#")]),e._v(" Open the page in a new browser window")]),e._v(" "),n("p",[e._v("webbrowser.open_new('http://www.python.org')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"open-the-page-in-a-new-browser-tab"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#open-the-page-in-a-new-browser-tab"}},[e._v("#")]),e._v(" Open the page in a new browser tab")]),e._v(" "),n("p",[e._v("webbrowser.open_new_tab('http://www.python.org')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这样就可以打开一个新的浏览器窗口或者标签，只要浏览器支持就行。\n如果你想指定浏览器类型，可以使用 webbrowser.get() 函数来指定某个特定浏览\n器。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("c = webbrowser.get('firefox')\nc.open('http://www.python.org')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c.open_new_tab('http://docs.python.org')\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对于支持的浏览器名称列表可查阅 ‘Python 文档 <http://docs.python.org/3/\nlibrary/webbrowser.html>‘_\n讨论\n在脚本中打开浏览器有时候会很有用。例如，某个脚本执行某个服务器发布任务，\n你想快速打开一个浏览器来确保它已经正常运行了。或者是某个程序以 HTML 网页格\n式输出数据，你想打开浏览器查看结果。不管是上面哪种情况，使用 webbrowser 模块\n都是一个简单实用的解决方案。\n第十四章：测试、调试和异常\n试验还是很棒的，但是调试？就没那么有趣了。事实是，在 Python 测试代码之前\n没有编译器来分析你的代码，因此使的测试成为开发的一个重要部分。本章的目标是讨\n论一些关于测试、调试和异常处理的常见问题。但是并不是为测试驱动开发或者单元测\n试模块做一个简要的介绍。因此，笔者假定读者熟悉测试概念。\n14.1 测试 stdout 输出\n问题\n你的程序中有个方法会输出到标准输出中（sys.stdout）。也就是说它会将文本打印\n到屏幕上面。你想写个测试来证明它，给定一个输入，相应的输出能正常显示出来。\n解决方案\n使用 unittest.mock 模块中的 patch() 函数，使用起来非常简单，可以为单个测\n试模拟 sys.stdout 然后回滚，并且不产生大量的临时变量或在测试用例直接暴露状态\n变量。\n作为一个例子，我们在 mymodule 模块中定义如下一个函数：")]),e._v(" "),n("h1",{attrs:{id:"mymodule-py-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mymodule-py-2"}},[e._v("#")]),e._v(" mymodule.py")]),e._v(" "),n("p",[e._v("def urlprint(protocol, host, domain):\nurl = '{}😕/{}.{}'.format(protocol, host, domain)\nprint(url)\n默认情况下内置的 print 函数会将输出发送到 sys.stdout 。为了测试输出真的在\n那里，你可以使用一个替身对象来模拟它，然后使用断言来确认结果。使用 unittest.\nmock 模块的 patch() 方法可以很方便的在测试运行的上下文中替换对象，并且当测试\n完成时候自动返回它们的原有状态。下面是对 mymodule 模块的测试代码：\nfrom io import StringIO\nfrom unittest import TestCase\nfrom unittest.mock import patch\nimport mymodule\nclass TestURLPrint(TestCase):\ndef test_url_gets_to_stdout(self):\nprotocol = 'http'\nhost = 'www'\ndomain = 'example.com'\nexpected_url = '{}😕/{}.{}\\n'.format(protocol, host, domain)\nwith patch('sys.stdout', new=StringIO()) as fake_out:\nmymodule.urlprint(protocol, host, domain)\nself.assertEqual(fake_out.getvalue(), expected_url)\n讨论\nurlprint() 函数接受三个参数，测试方法开始会先设置每一个参数的值。\nexpected_url 变量被设置成包含期望的输出的字符串。\nunittest.mock.patch() 函数被用作一个上下文管理器，使用 StringIO 对象来代\n替 sys.stdout . fake_out 变量是在该进程中被创建的模拟对象。在 with 语句中使用\n它可以执行各种检查。当 with 语句结束时，patch 会将所有东西恢复到测试开始前的\n状态。有一点需要注意的是某些对 Python 的 C 扩展可能会忽略掉 sys.stdout 的配\n置二直接写入到标准输出中。限于篇幅，本节不会涉及到这方面的讲解，它适用于纯\nPython 代码。如果你真的需要在 C 扩展中捕获 I/O，你可以先打开一个临时文件，然\n后将标准输出重定向到该文件中。更多关于捕获以字符串形式捕获 I/O 和 StringIO 对\n象请参阅 5.6 小节。\n14.2 在单元测试中给对象打补丁\n问题\n你写的单元测试中需要给指定的对象打补丁，用来断言它们在测试中的期望行为\n（比如，断言被调用时的参数个数，访问指定的属性等）。\n解决方案\nunittest.mock.patch() 函数可被用来解决这个问题。patch() 还可被用作一个\n装饰器、上下文管理器或单独使用，尽管并不常见。例如，下面是一个将它当做装饰器\n使用的例子：\nfrom unittest.mock import patch\nimport example\n@patch('example.func')\ndef test1(x, mock_func):\nexample.func(x) # Uses patched example.func\nmock_func.assert_called_with(x)\n它还可以被当做一个上下文管理器：\nwith patch('example.func') as mock_func:\nexample.func(x) # Uses patched example.func\nmock_func.assert_called_with(x)\n最后，你还可以手动的使用它打补丁：\np = patch('example.func')\nmock_func = p.start()\nexample.func(x)\nmock_func.assert_called_with(x)\np.stop()\n如果可能的话，你能够叠加装饰器和上下文管理器来给多个对象打补丁。例如：\n@patch('example.func1')\n@patch('example.func2')\n@patch('example.func3')\ndef test1(mock1, mock2, mock3):\n...\ndef test2():\nwith patch('example.patch1') as mock1, "),n("br"),e._v("\npatch('example.patch2') as mock2, "),n("br"),e._v("\npatch('example.patch3') as mock3:\n...\n讨论\npatch() 接受一个已存在对象的全路径名，将其替换为一个新的值。原来的值会在\n装饰器函数或上下文管理器完成后自动恢复回来。默认情况下，所有值会被 MagicMock\n实例替代。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = 42\nwith patch('"),n("strong",[e._v("main")]),e._v(".x'):\n... print(x)\n...\n"),n("MagicMock",{attrs:{name:"x",id:"4314230032"}})],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x\n42")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("不过，你可以通过给 patch() 提供第二个参数来将值替换成任何你想要的：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x\n42")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("with patch('"),n("strong",[e._v("main")]),e._v(".x', 'patched_value'):\n... print(x)\n...\npatched_value")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x\n42")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("被用来作为替换值的 MagicMock 实例能够模拟可调用对象和实例。他们记录对象\n的使用信息并允许你执行断言检查，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from unittest.mock import MagicMock\nm = MagicMock(return_value = 10)\nm(1, 2, debug=True)\n10")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('m.assert_called_with(1, 2, debug=True)\nm.assert_called_with(1, 2)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile ".../unittest/mock.py", line 726, in assert_called_with\nraise AssertionError(msg)\nAssertionError: Expected call: mock(1, 2)\nActual call: mock(1, 2, debug=True)')])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m.upper.return_value = 'HELLO'\nm.upper('hello')\n'HELLO'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("assert m.upper.called\nm.split.return_value = ['hello', 'world']\nm.split('hello world')\n['hello', 'world']")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m.split.assert_called_with('hello world')")]),e._v(" "),n("p",[e._v("m['blah']\n"),n("MagicMock",{attrs:{name:"mock.__getitem__()",id:"4314412048"}})],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m."),n("strong",[e._v("getitem")]),e._v(".called\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("m."),n("strong",[e._v("getitem")]),e._v(".assert_called_with('blah')")])])])]),e._v(" "),n("p",[e._v("一般来讲，这些操作会在一个单元测试中完成。例如，假设你已经有了像下面这样\n的函数：")]),e._v(" "),n("h1",{attrs:{id:"example-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-py"}},[e._v("#")]),e._v(" example.py")]),e._v(" "),n("p",[e._v("from urllib.request import urlopen\nimport csv\ndef dowprices():\nu = urlopen('http://finance.yahoo.com/d/quotes.csv?s=@^DJI&f=sl1')\nlines = (line.decode('utf-8') for line in u)\nrows = (row for row in csv.reader(lines) if len(row) == 2)\nprices = { name:float(price) for name, price in rows }\nreturn prices\n正常来讲，这个函数会使用 urlopen() 从 Web 上面获取数据并解析它。在单元测\n试中，你可以给它一个预先定义好的数据集。下面是使用补丁操作的例子:\nimport unittest\nfrom unittest.mock import patch\nimport io\nimport example\nsample_data = io.BytesIO(b'''\\ \"IBM\",91.1\\r\n\"AA\",13.25\\r\n\"MSFT\",27.72\\r\n\\r\n''')\nclass Tests(unittest.TestCase):\n@patch('example.urlopen', return_value=sample_data)\ndef test_dowprices(self, mock_urlopen):\np = example.dowprices()\nself.assertTrue(mock_urlopen.called)\nself.assertEqual(p,\n{'IBM': 91.1, 'AA': 13.25, 'MSFT' : 27.72})\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nunittest.main()\n本例中，位于 example 模块中的 urlopen() 函数被一个模拟对象替代，该对象会\n返回一个包含测试数据的 ByteIO().\n还有一点，在打补丁时我们使用了 example.urlopen 来代替 urllib.request.\nurlopen 。当你创建补丁的时候，你必须使用它们在测试代码中的名称。由于测试代\n码使用了 from urllib.request import urlopen , 那么 dowprices() 函数中使用的\nurlopen() 函数实际上就位于 example 模块了。\n本节实际上只是对 unittest.mock 模块的一次浅尝辄止。更多更高级的特性，请\n参考 官方文档\n14.3 在单元测试中测试异常情况\n问题\n你想写个测试用例来准确的判断某个异常是否被抛出。\n解决方案\n对于异常的测试可使用 assertRaises() 方法。例如，如果你想测试某个函数抛出\n了 ValueError 异常，像下面这样写：\nimport unittest")]),e._v(" "),n("h1",{attrs:{id:"a-simple-function-to-illustrate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-simple-function-to-illustrate"}},[e._v("#")]),e._v(" A simple function to illustrate")]),e._v(" "),n("h2",{attrs:{id:"def-parse-int-s-return-int-s-class-testconversion-unittest-testcase-def-test-bad-int-self-self-assertraises-valueerror-parse-int-n-a-如果你想测试异常的具体值-需要用到另外一种方法-import-errnoclass-testio-unittest-testcase-def-test-file-not-found-self-try-f-open-file-not-found-except-ioerror-as-e-self-assertequal-e-errno-errno-enoent-else-self-fail-ioerror-not-raised-讨论assertraises-方法为测试异常存在性提供了一个简便方法。一个常见的陷阱是手动去进行异常检测。比如-class-testconversion-unittest-testcase-def-test-bad-int-self-try-r-parse-int-n-a-except-valueerror-as-e-self-assertequal-type-e-valueerror-这种方法的问题在于它很容易遗漏其他情况-比如没有任何异常抛出的时候。那么你还得需要增加另外的检测过程-如下面这样-class-testconversion-unittest-testcase-def-test-bad-int-self-try-r-parse-int-n-a-except-valueerror-as-e-self-assertequal-type-e-valueerror-else-self-fail-valueerror-not-raised-assertraises-方法会处理所有细节-因此你应该使用它。assertraises-的一个缺点是它测不了异常具体的值是多少。为了测试异常值-可以使用-assertraisesregex-方法-它可同时测试异常的存在以及通过正则式匹配异常的字符串表示。例如-class-testconversion-unittest-testcase-def-test-bad-int-self-self-assertraisesregex-valueerror-invalid-literal-parse-int-n-a-assertraises-和-assertraisesregex-还有一个容易忽略的地方就是它们还能被当做上下文管理器使用-class-testconversion-unittest-testcase-def-test-bad-int-self-with-self-assertraisesregex-valueerror-invalid-literal-r-parse-int-n-a-但你的测试涉及到多个执行步骤的时候这种方法就很有用了。14-4-将测试输出用日志记录到文件中问题你希望将单元测试的输出写到到某个文件中去-而不是打印到标准输出。解决方案运行单元测试一个常见技术就是在测试文件底部加入下面这段代码片段-import-unittestclass-mytest-unittest-testcase-passif-name-main-unittest-main-这样的话测试文件就是可执行的-并且会将运行测试的结果打印到标准输出上。如果你想重定向输出-就需要像下面这样修改-main-函数-import-sysdef-main-out-sys-stderr-verbosity-2-loader-unittest-testloader-suite-loader-loadtestsfrommodule-sys-modules-name-unittest-texttestrunner-out-verbosity-verbosity-run-suite-if-name-main-with-open-testing-out-w-as-f-main-f-讨论本节感兴趣的部分并不是将测试结果重定向到一个文件中-而是通过这样做向你展示了-unittest-模块中一些值得关注的内部工作原理。unittest-模块首先会组装一个测试套件。这个测试套件包含了你定义的各种方法。一旦套件组装完成-它所包含的测试就可以被执行了。这-两-步-是-分-开-的-unittest-testloader-实-例-被-用-来-组-装-测-试-套-件。loadtestsfrommodule-是它定义的方法之一-用来收集测试用例。它会为-testcase类扫描某个模块并将其中的测试方法提取出来。如果你想进行细粒度的控制-可以使用-loadtestsfromtestcase-方法来从某个继承-testcase-的类中提取测试方法。texttestrunner-类是一个测试运行类的例子-这个类的主要用途是执行某个测试套件中包含的测试方法。这个类跟执行-unittest-main-函数所使用的测试运行器是一样的。不过-我们在这里对它进行了一些列底层配置-包括输出文件和提升级别。尽管本节例子代码很少-但是能指导你如何对-unittest-框架进行更进一步的自定义。要想自定义测试套件的装配方式-你可以对-testloader-类执行更多的操作。为了自定义测试运行-你可以构造一个自己的测试运行类来模拟-texttestrunner-的功能。而这些已经超出了本节的范围。unittest-模块的文档对底层实现原理有更深入的讲解-可以去看看。14-5-忽略或期望测试失败问题你想在单元测试中忽略或标记某些测试会按照预期运行失败。解决方案unittest-模块有装饰器可用来控制对指定测试方法的处理-例如-import-unittestimport-osimport-platformclass-tests-unittest-testcase-def-test-0-self-self-asserttrue-true-unittest-skip-skipped-test-def-test-1-self-self-fail-should-have-failed-unittest-skipif-os-name-posix-not-supported-on-unix-def-test-2-self-import-winreg-unittest-skipunless-platform-system-darwin-mac-specific-test-def-test-3-self-self-asserttrue-true-unittest-expectedfailuredef-test-4-self-self-assertequal-2-2-5-if-name-main-unittest-main-如果你在-mac-上运行这段代码-你会得到如下输出-bash-python3-testsample-py-vtest-0-main-tests-oktest-1-main-tests-skipped-skipped-test-test-2-main-tests-skipped-not-supported-on-unix-test-3-main-tests-oktest-4-main-tests-expected-failure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#def-parse-int-s-return-int-s-class-testconversion-unittest-testcase-def-test-bad-int-self-self-assertraises-valueerror-parse-int-n-a-如果你想测试异常的具体值-需要用到另外一种方法-import-errnoclass-testio-unittest-testcase-def-test-file-not-found-self-try-f-open-file-not-found-except-ioerror-as-e-self-assertequal-e-errno-errno-enoent-else-self-fail-ioerror-not-raised-讨论assertraises-方法为测试异常存在性提供了一个简便方法。一个常见的陷阱是手动去进行异常检测。比如-class-testconversion-unittest-testcase-def-test-bad-int-self-try-r-parse-int-n-a-except-valueerror-as-e-self-assertequal-type-e-valueerror-这种方法的问题在于它很容易遗漏其他情况-比如没有任何异常抛出的时候。那么你还得需要增加另外的检测过程-如下面这样-class-testconversion-unittest-testcase-def-test-bad-int-self-try-r-parse-int-n-a-except-valueerror-as-e-self-assertequal-type-e-valueerror-else-self-fail-valueerror-not-raised-assertraises-方法会处理所有细节-因此你应该使用它。assertraises-的一个缺点是它测不了异常具体的值是多少。为了测试异常值-可以使用-assertraisesregex-方法-它可同时测试异常的存在以及通过正则式匹配异常的字符串表示。例如-class-testconversion-unittest-testcase-def-test-bad-int-self-self-assertraisesregex-valueerror-invalid-literal-parse-int-n-a-assertraises-和-assertraisesregex-还有一个容易忽略的地方就是它们还能被当做上下文管理器使用-class-testconversion-unittest-testcase-def-test-bad-int-self-with-self-assertraisesregex-valueerror-invalid-literal-r-parse-int-n-a-但你的测试涉及到多个执行步骤的时候这种方法就很有用了。14-4-将测试输出用日志记录到文件中问题你希望将单元测试的输出写到到某个文件中去-而不是打印到标准输出。解决方案运行单元测试一个常见技术就是在测试文件底部加入下面这段代码片段-import-unittestclass-mytest-unittest-testcase-passif-name-main-unittest-main-这样的话测试文件就是可执行的-并且会将运行测试的结果打印到标准输出上。如果你想重定向输出-就需要像下面这样修改-main-函数-import-sysdef-main-out-sys-stderr-verbosity-2-loader-unittest-testloader-suite-loader-loadtestsfrommodule-sys-modules-name-unittest-texttestrunner-out-verbosity-verbosity-run-suite-if-name-main-with-open-testing-out-w-as-f-main-f-讨论本节感兴趣的部分并不是将测试结果重定向到一个文件中-而是通过这样做向你展示了-unittest-模块中一些值得关注的内部工作原理。unittest-模块首先会组装一个测试套件。这个测试套件包含了你定义的各种方法。一旦套件组装完成-它所包含的测试就可以被执行了。这-两-步-是-分-开-的-unittest-testloader-实-例-被-用-来-组-装-测-试-套-件。loadtestsfrommodule-是它定义的方法之一-用来收集测试用例。它会为-testcase类扫描某个模块并将其中的测试方法提取出来。如果你想进行细粒度的控制-可以使用-loadtestsfromtestcase-方法来从某个继承-testcase-的类中提取测试方法。texttestrunner-类是一个测试运行类的例子-这个类的主要用途是执行某个测试套件中包含的测试方法。这个类跟执行-unittest-main-函数所使用的测试运行器是一样的。不过-我们在这里对它进行了一些列底层配置-包括输出文件和提升级别。尽管本节例子代码很少-但是能指导你如何对-unittest-框架进行更进一步的自定义。要想自定义测试套件的装配方式-你可以对-testloader-类执行更多的操作。为了自定义测试运行-你可以构造一个自己的测试运行类来模拟-texttestrunner-的功能。而这些已经超出了本节的范围。unittest-模块的文档对底层实现原理有更深入的讲解-可以去看看。14-5-忽略或期望测试失败问题你想在单元测试中忽略或标记某些测试会按照预期运行失败。解决方案unittest-模块有装饰器可用来控制对指定测试方法的处理-例如-import-unittestimport-osimport-platformclass-tests-unittest-testcase-def-test-0-self-self-asserttrue-true-unittest-skip-skipped-test-def-test-1-self-self-fail-should-have-failed-unittest-skipif-os-name-posix-not-supported-on-unix-def-test-2-self-import-winreg-unittest-skipunless-platform-system-darwin-mac-specific-test-def-test-3-self-self-asserttrue-true-unittest-expectedfailuredef-test-4-self-self-assertequal-2-2-5-if-name-main-unittest-main-如果你在-mac-上运行这段代码-你会得到如下输出-bash-python3-testsample-py-vtest-0-main-tests-oktest-1-main-tests-skipped-skipped-test-test-2-main-tests-skipped-not-supported-on-unix-test-3-main-tests-oktest-4-main-tests-expected-failure"}},[e._v("#")]),e._v(" def parse_int(s):\nreturn int(s)\nclass TestConversion(unittest.TestCase):\ndef test_bad_int(self):\nself.assertRaises(ValueError, parse_int, 'N/A')\n如果你想测试异常的具体值，需要用到另外一种方法：\nimport errno\nclass TestIO(unittest.TestCase):\ndef test_file_not_found(self):\ntry:f = open('/file/not/found')\nexcept IOError as e:\nself.assertEqual(e.errno, errno.ENOENT)\nelse:\nself.fail('IOError not raised')\n讨论\nassertRaises() 方法为测试异常存在性提供了一个简便方法。一个常见的陷阱是\n手动去进行异常检测。比如：\nclass TestConversion(unittest.TestCase):\ndef test_bad_int(self):\ntry:r = parse_int('N/A')\nexcept ValueError as e:\nself.assertEqual(type(e), ValueError)\n这种方法的问题在于它很容易遗漏其他情况，比如没有任何异常抛出的时候。那么\n你还得需要增加另外的检测过程，如下面这样：\nclass TestConversion(unittest.TestCase):\ndef test_bad_int(self):\ntry:r = parse_int('N/A')\nexcept ValueError as e:\nself.assertEqual(type(e), ValueError)\nelse:\nself.fail('ValueError not raised')\nassertRaises() 方法会处理所有细节，因此你应该使用它。\nassertRaises() 的一个缺点是它测不了异常具体的值是多少。为了测试异常值，\n可以使用 assertRaisesRegex() 方法，它可同时测试异常的存在以及通过正则式匹配\n异常的字符串表示。例如：\nclass TestConversion(unittest.TestCase):\ndef test_bad_int(self):\nself.assertRaisesRegex(ValueError, 'invalid literal ."),n("em",[e._v("',\nparse_int, 'N/A')\nassertRaises() 和 assertRaisesRegex() 还有一个容易忽略的地方就是它们还\n能被当做上下文管理器使用：\nclass TestConversion(unittest.TestCase):\ndef test_bad_int(self):\nwith self.assertRaisesRegex(ValueError, 'invalid literal .")]),e._v("'):\nr = parse_int('N/A')\n但你的测试涉及到多个执行步骤的时候这种方法就很有用了。\n14.4 将测试输出用日志记录到文件中\n问题\n你希望将单元测试的输出写到到某个文件中去，而不是打印到标准输出。\n解决方案\n运行单元测试一个常见技术就是在测试文件底部加入下面这段代码片段：\nimport unittest\nclass MyTest(unittest.TestCase):\npass\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nunittest.main()\n这样的话测试文件就是可执行的，并且会将运行测试的结果打印到标准输出上。如\n果你想重定向输出，就需要像下面这样修改 main() 函数：\nimport sys\ndef main(out=sys.stderr, verbosity=2):\nloader = unittest.TestLoader()\nsuite = loader.loadTestsFromModule(sys.modules["),n("strong",[e._v("name")]),e._v("])\nunittest.TextTestRunner(out,verbosity=verbosity).run(suite)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nwith open('testing.out', 'w') as f:\nmain(f)\n讨论\n本节感兴趣的部分并不是将测试结果重定向到一个文件中，而是通过这样做向你\n展示了 unittest 模块中一些值得关注的内部工作原理。\nunittest 模块首先会组装一个测试套件。这个测试套件包含了你定义的各种方法。\n一旦套件组装完成，它所包含的测试就可以被执行了。\n这 两 步 是 分 开 的，unittest.TestLoader 实 例 被 用 来 组 装 测 试 套 件。\nloadTestsFromModule() 是它定义的方法之一，用来收集测试用例。它会为 TestCase\n类扫描某个模块并将其中的测试方法提取出来。如果你想进行细粒度的控制，可以\n使用 loadTestsFromTestCase() 方法来从某个继承 TestCase 的类中提取测试方法。\nTextTestRunner 类是一个测试运行类的例子，这个类的主要用途是执行某个测试套件\n中包含的测试方法。这个类跟执行 unittest.main() 函数所使用的测试运行器是一样\n的。不过，我们在这里对它进行了一些列底层配置，包括输出文件和提升级别。尽管本\n节例子代码很少，但是能指导你如何对 unittest 框架进行更进一步的自定义。要想自\n定义测试套件的装配方式，你可以对 TestLoader 类执行更多的操作。为了自定义测试\n运行，你可以构造一个自己的测试运行类来模拟 TextTestRunner 的功能。而这些已经\n超出了本节的范围。unittest 模块的文档对底层实现原理有更深入的讲解，可以去看\n看。\n14.5 忽略或期望测试失败\n问题\n你想在单元测试中忽略或标记某些测试会按照预期运行失败。\n解决方案\nunittest 模块有装饰器可用来控制对指定测试方法的处理，例如：\nimport unittest\nimport os\nimport platform\nclass Tests(unittest.TestCase):\ndef test_0(self):\nself.assertTrue(True)\n@unittest.skip('skipped test')\ndef test_1(self):\nself.fail('should have failed!')\n@unittest.skipIf(os.name=='posix', 'Not supported on Unix')\ndef test_2(self):\nimport winreg\n@unittest.skipUnless(platform.system() == 'Darwin', 'Mac specific test')\ndef test_3(self):\nself.assertTrue(True)\n@unittest.expectedFailure\ndef test_4(self):\nself.assertEqual(2+2, 5)\nif "),n("strong",[e._v("name")]),e._v(" == '"),n("strong",[e._v("main")]),e._v("':\nunittest.main()\n如果你在 Mac 上运行这段代码，你会得到如下输出：\nbash % python3 testsample.py -v\ntest_0 ("),n("strong",[e._v("main")]),e._v(".Tests) ... ok\ntest_1 ("),n("strong",[e._v("main")]),e._v(".Tests) ... skipped 'skipped test'\ntest_2 ("),n("strong",[e._v("main")]),e._v(".Tests) ... skipped 'Not supported on Unix'\ntest_3 ("),n("strong",[e._v("main")]),e._v(".Tests) ... ok\ntest_4 ("),n("strong",[e._v("main")]),e._v(".Tests) ... expected failure")]),e._v(" "),n("p",[e._v("Ran 5 tests in 0.002s\nOK (skipped=2, expected failures=1)\n讨论\nskip() 装饰器能被用来忽略某个你不想运行的测试。skipIf() 和 skipUnless()\n对于你只想在某个特定平台或 Python 版本或其他依赖成立时才运行测试的时候非常有\n用。使用 @expected 的失败装饰器来标记那些确定会失败的测试，并且对这些测试你\n不想让测试框架打印更多信息。\n忽略方法的装饰器还可以被用来装饰整个测试类，比如：\n@unittest.skipUnless(platform.system() == 'Darwin', 'Mac specific tests')\nclass DarwinTests(unittest.TestCase):\npass\n14.6 处理多个异常\n问题\n你有一个代码片段可能会抛出多个不同的异常，怎样才能不创建大量重复代码就\n能处理所有的可能异常呢？\n解决方案\n如果你可以用单个代码块处理不同的异常，可以将它们放入一个元组中，如下所\n示：\ntry:\nclient_obj.get_url(url)\nexcept (URLError, ValueError, SocketTimeout):\nclient_obj.remove_url(url)\n在这个例子中，元祖中任何一个异常发生时都会执行 remove_url() 方法。如果你\n想对其中某个异常进行不同的处理，可以将其放入另外一个 except 语句中：\ntry:\nclient_obj.get_url(url)\nexcept (URLError, ValueError):\nclient_obj.remove_url(url)\nexcept SocketTimeout:\nclient_obj.handle_url_timeout(url)\n很多的异常会有层级关系，对于这种情况，你可能使用它们的一个基类来捕获所有\n的异常。例如，下面的代码：\ntry:f = open(filename)\nexcept (FileNotFoundError, PermissionError):\npass\n可以被重写为：\ntry:f = open(filename)\nexcept OSError:\npass\nOSError 是 FileNotFoundError 和 PermissionError 异常的基类。\n讨论\n尽管处理多个异常本身并没什么特殊的，不过你可以使用 as 关键字来获得被抛出\n异常的引用：\ntry:f = open(filename)\nexcept OSError as e:\nif e.errno == errno.ENOENT:\nlogger.error('File not found')\nelif e.errno == errno.EACCES:\nlogger.error('Permission denied')\nelse:\nlogger.error('Unexpected error: %d', e.errno)\n这个例子中，e 变量指向一个被抛出的 OSError 异常实例。这个在你想更进一步分\n析这个异常的时候会很有用，比如基于某个状态码来处理它。\n同时还要注意的时候 except 语句是顺序检查的，第一个匹配的会执行。你可以很\n容易的构造多个 except 同时匹配的情形，比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("f = open('missing')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nFileNotFoundError: [Errno 2] No such file or directory: 'missing'")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("try:\n... f = open('missing')\n... except OSError:\n... print('It failed')\n... except FileNotFoundError:\n... print('File not found')\n...\nIt failed")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这里的 FileNotFoundError 语句并没有执行的原因是 OSError 更一般，它可匹配\nFileNotFoundError 异常，于是就是第一个匹配的。在调试的时候，如果你对某个特定\n异常的类成层级关系不是很确定，你可以通过查看该异常的 "),n("strong",[e._v("mro")]),e._v(" 属性来快速浏览。\n比如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("FileNotFoundError."),n("strong",[e._v("mro")]),e._v("\n(<class 'FileNotFoundError'>, <class 'OSError'>, <class 'Exception'>,\n<class 'BaseException'>, <class 'object'>)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("上面列表中任何一个直到 BaseException 的类都能被用于 except 语句。\n14.7 捕获所有异常\n问题\n怎样捕获代码中的所有异常？\n解决方案\n想要捕获所有的异常，可以直接捕获 Exception 即可：\ntry:...\nexcept Exception as e:\n...\nlog('Reason:', e) # Important!\n这个将会捕获除了 SystemExit 、KeyboardInterrupt 和 GeneratorExit 之外的\n所有异常。如果你还想捕获这三个异常，将 Exception 改成 BaseException 即可。\n讨论\n捕获所有异常通常是由于程序员在某些复杂操作中并不能记住所有可能的异常。如\n果你不是很细心的人，这也是编写不易调试代码的一个简单方法。\n正因如此，如果你选择捕获所有异常，那么在某个地方（比如日志文件、打印异常\n到屏幕）打印确切原因就比较重要了。如果你没有这样做，有时候你看到异常打印时可\n能摸不着头脑，就像下面这样：\ndef parse_int(s):\ntry:n = int(v)\nexcept Exception:\nprint(\"Couldn't parse\")\n试着运行这个函数，结果如下：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("parse_int('n/a')\nCouldn't parse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("parse_int('42')\nCouldn't parse")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这时候你就会挠头想：“这咋回事啊？”假如你像下面这样重写这个函数：\ndef parse_int(s):\ntry:n = int(v)\nexcept Exception as e:\nprint(\"Couldn't parse\")\nprint('Reason:', e)\n这时候你能获取如下输出，指明了有个编程错误：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("parse_int('42')\nCouldn't parse\nReason: global name 'v' is not defined")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("很明显，你应该尽可能将异常处理器定义的精准一些。不过，要是你必须捕获所有\n异常，确保打印正确的诊断信息或将异常传播出去，这样不会丢失掉异常。\n14.8 创建自定义异常\n问题\n在你构建的应用程序中，你想将底层异常包装成自定义的异常。\n解决方案\n创建新的异常很简单——定义新的类，让它继承自 Exception （或者是任何一个\n已存在的异常类型）。例如，如果你编写网络相关的程序，你可能会定义一些类似如下\n的异常：\nclass NetworkError(Exception):\npass\nclass HostnameError(NetworkError):\npass\nclass TimeoutError(NetworkError):\npass\nclass ProtocolError(NetworkError):\npass\n然后用户就可以像通常那样使用这些异常了，例如：\ntry:\nmsg = s.recv()\nexcept TimeoutError as e:\n...\nexcept ProtocolError as e:\n...\n讨论\n自定义异常类应该总是继承自内置的 Exception 类，或者是继承自那些本身就是\n从 Exception 继承而来的类。尽管所有类同时也继承自 BaseException ，但你不应\n该使用这个基类来定义新的异常。BaseException 是为系统退出异常而保留的，比如\nKeyboardInterrupt 或 SystemExit 以及其他那些会给应用发送信号而退出的异常。因\n此，捕获这些异常本身没什么意义。这样的话，假如你继承 BaseException 可能会导\n致你的自定义异常不会被捕获而直接发送信号退出程序运行。\n在程序中引入自定义异常可以使得你的代码更具可读性，能清晰显示谁应该阅读\n这个代码。还有一种设计是将自定义异常通过继承组合起来。在复杂应用程序中，使用\n基类来分组各种异常类也是很有用的。它可以让用户捕获一个范围很窄的特定异常，比\n如下面这样的：\ntry:s.send(msg)\nexcept ProtocolError:\n...\n你还能捕获更大范围的异常，就像下面这样：\ntry:s.send(msg)\nexcept NetworkError:\n...\n如果你想定义的新异常重写了 "),n("strong",[e._v("init")]),e._v("() 方法，确保你使用所有参数调用\nException."),n("strong",[e._v("init")]),e._v("() ，例如：\nclass CustomError(Exception):\ndef "),n("strong",[e._v("init")]),e._v("(self, message, status):\nsuper()."),n("strong",[e._v("init")]),e._v("(message, status)\nself.message = message\nself.status = status\n看上去有点奇怪，不过 Exception 的默认行为是接受所有传递的参数并将它们以元\n组形式存储在 .args 属性中. 很多其他函数库和部分 Python 库默认所有异常都必须有\n.args 属性，因此如果你忽略了这一步，你会发现有些时候你定义的新异常不会按照期\n望运行。为了演示 .args 的使用，考虑下下面这个使用内置的 RuntimeError‘ 异常的\n交互会话，注意看 raise 语句中使用的参数个数是怎样的：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("try:\n... raise RuntimeError('It failed')\n... except RuntimeError as e:\n... print(e.args)\n...\n('It failed',)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("try:\n... raise RuntimeError('It failed', 42, 'spam')\n... except RuntimeError as e:\n... print(e.args)\n...\n('It failed', 42, 'spam')")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("关于创建自定义异常的更多信息，请参考 ‘Python 官方文档 <https://docs.python.\norg/3/tutorial/errors.html>‘_\n14.9 捕获异常后抛出另外的异常\n问题\n你想捕获一个异常后抛出另外一个不同的异常，同时还得在异常回溯中保留两个\n异常的信息。\n解决方案\n为了链接异常，使用 raise from 语句来代替简单的 raise 语句。它会让你同时保\n留两个异常的信息。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def example():\n... try:\n... int('N/A')\n... except ValueError as e:\n... raise RuntimeError('A parsing error occurred') from e\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('example()\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v("\", line 3, in example\nValueError: invalid literal for int() with base 10: 'N/A'\n上面的异常是下面的异常产生的直接原因：\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "'),n("stdin",[e._v('", line 5, in example\nRuntimeError: A parsing error occurred')])],1)],1)],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在回溯中可以看到，两个异常都被捕获。要想捕获这样的异常，你可以使用一个简\n单的 except 语句。不过，你还可以通过查看异常对象的 "),n("strong",[e._v("cause")]),e._v(' 属性来跟踪异常\n链。例如：\ntry:\nexample()\nexcept RuntimeError as e:\nprint("It didn\'t work:", e)\nif e.'),n("strong",[e._v("cause")]),e._v(":\nprint('Cause:', e."),n("strong",[e._v("cause")]),e._v(")\n当在 except 块中又有另外的异常被抛出时会导致一个隐藏的异常链的出现。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def example2():\n... try:\n... int('N/A')\n... except ValueError as e:\n... print(\"Couldn't parse:\", err)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('example2()\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v("\", line 3, in example2\nValueError: invalid literal for int() with base 10: 'N/A'\n在处理上述异常的时候，另外一个异常发生了：\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "'),n("stdin",[e._v("\", line 5, in example2\nNameError: global name 'err' is not defined")])],1)],1)],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("这个例子中，你同时获得了两个异常的信息，但是对异常的解释不同。这时候，\nNameError 异常被作为程序最终异常被抛出，而不是位于解析异常的直接回应中。\n如果，你想忽略掉异常链，可使用 raise from None :")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def example3():\n... try:\n... int('N/A')\n... except ValueError:\n... raise RuntimeError('A parsing error occurred') from None\n...")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('example3()\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "'),n("stdin",[e._v('", line 5, in example3\nRuntimeError: A parsing error occurred')])],1)],1)],1),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n在设计代码时，在另外一个 except 代码块中使用 raise 语句的时候你要特别小心\n了。大多数情况下，这种 raise 语句都应该被改成 raise from 语句。也就是说你应该\n使用下面这种形式：\ntry:...\nexcept SomeException as e:\nraise DifferentException() from e\n这样做的原因是你应该显示的将原因链接起来。也就是说，DifferentException\n是直接从 SomeException 衍生而来。这种关系可以从回溯结果中看出来。\n如果你像下面这样写代码，你仍然会得到一个链接异常，不过这个并没有很清晰的\n说明这个异常链到底是内部异常还是某个未知的编程错误。\ntry:...\nexcept SomeException:\nraise DifferentException()\n当你使用 raise from 语句的话，就很清楚的表明抛出的是第二个异常。\n最后一个例子中隐藏异常链信息。尽管隐藏异常链信息不利于回溯，同时它也丢失\n了很多有用的调试信息。不过万事皆平等，有时候只保留适当的信息也是很有用的。\n14.10 重新抛出被捕获的异常\n问题\n你在一个 except 块中捕获了一个异常，现在想重新抛出它。\n解决方案\n简单的使用一个单独的 rasie 语句即可，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def example():\n... try:\n... int('N/A')\n... except ValueError:\n... print(\"Didn't work\")\n... raise\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("example()\nDidn't work\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "'),n("stdin",[e._v("\", line 3, in example\nValueError: invalid literal for int() with base 10: 'N/A'")])],1)],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n这个问题通常是当你需要在捕获异常后执行某个操作（比如记录日志、清理等），\n但是之后想将异常传播下去。一个很常见的用法是在捕获所有异常的处理器中：\ntry:...\nexcept Exception as e:")]),e._v(" "),n("h1",{attrs:{id:"process-exception-information-in-some-way"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-exception-information-in-some-way"}},[e._v("#")]),e._v(" Process exception information in some way")]),e._v(" "),n("p",[e._v("...")]),e._v(" "),n("h1",{attrs:{id:"propagate-the-exception"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#propagate-the-exception"}},[e._v("#")]),e._v(" Propagate the exception")]),e._v(" "),n("p",[e._v("raise\n14.11 输出警告信息\n问题\n你希望自己的程序能生成警告信息（比如废弃特性或使用问题）。\n解决方案\n要输出一个警告消息，可使用 warning.warn() 函数。例如：\nimport warnings\ndef func(x, y, logfile=None, debug=False):\nif logfile is not None:\nwarnings.warn('logfile argument deprecated', DeprecationWarning) ...\nwarn() 的参数是一个警告消息和一个警告类，警告类有如下几种：UserWarning,\nDeprecationWarning, SyntaxWarning, RuntimeWarning, ResourceWarning, 或 Future￾Warning.\n对警告的处理取决于你如何运行解释器以及一些其他配置。例如，如果你使用 -W\nall 选项去运行 Python，你会得到如下的输出：\nbash % python3 -W all example.py\nexample.py:5: DeprecationWarning: logfile argument is deprecated\nwarnings.warn('logfile argument is deprecated', DeprecationWarning)\n通常来讲，警告会输出到标准错误上。如果你想讲警告转换为异常，可以使用 -W\nerror 选项：\nbash % python3 -W error example.py\nTraceback (most recent call last):\nFile \"example.py\", line 10, in "),n("module",[e._v("\nfunc(2, 3, logfile='log.txt')\nFile \"example.py\", line 5, in func\nwarnings.warn('logfile argument is deprecated', DeprecationWarning)\nDeprecationWarning: logfile argument is deprecated\nbash %\n讨论\n在你维护软件，提示用户某些信息，但是又不需要将其上升为异常级别，那么输出\n警告信息就会很有用了。例如，假设你准备修改某个函数库或框架的功能，你可以先为\n你要更改的部分输出警告信息，同时向后兼容一段时间。你还可以警告用户一些对代码\n有问题的使用方式。\n作为另外一个内置函数库的警告使用例子，下面演示了一个没有关闭文件就销毁\n它时产生的警告消息：")])],1),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import warnings\nwarnings.simplefilter('always')\nf = open('/etc/passwd')\ndel f\n"),n("strong",[e._v("main")]),e._v(":1: ResourceWarning: unclosed file <_io.TextIOWrapper name='/etc/\n,\n→passwd'\nmode='r' encoding='UTF-8'>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("默认情况下，并不是所有警告消息都会出现。-W 选项能控制警告消息的输出。-W\nall 会输出所有警告消息，-W ignore 忽略掉所有警告，-W error 将警告转换成异常。\n另外一种选择，你还可以使用 warnings.simplefilter() 函数控制输出。always 参数\n会让所有警告消息出现，`ignore 忽略调所有的警告，error 将警告转换成异常。\n对于简单的生成警告消息的情况这些已经足够了。warnings 模块对过滤和警告消\n息处理提供了大量的更高级的配置选项。更多信息请参考 Python 文档\n14.12 调试基本的程序崩溃错误\n问题\n你的程序崩溃后该怎样去调试它？\n解决方案\n如果你的程序因为某个异常而崩溃，运行 python3 -i someprogram.py 可执行简\n单的调试。-i 选项可让程序结束后打开一个交互式 shell。然后你就能查看环境，例如，\n假设你有下面的代码：")]),e._v(" "),n("h1",{attrs:{id:"sample-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sample-py"}},[e._v("#")]),e._v(" sample.py")]),e._v(" "),n("p",[e._v("def func(n):\nreturn n + 10\nfunc('Hello')\n运行 python3 -i sample.py 会有类似如下的输出：\nbash % python3 -i sample.py\nTraceback (most recent call last):\nFile \"sample.py\", line 6, in "),n("module",[e._v("\nfunc('Hello')\nFile \"sample.py\", line 4, in func\nreturn n + 10\nTypeError: Can't convert 'int' object to str implicitly")])],1),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("func(10)\n20")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你看不到上面这样的，可以在程序崩溃后打开 Python 的调试器。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import pdb\npdb.pm()\nsample.py(4)func()\n-> return n + 10\n(Pdb) w\nsample.py(6)"),n("module",[e._v("()\n-> func('Hello')\nsample.py(4)func()\n-> return n + 10\n(Pdb) print n\n'Hello'\n(Pdb) q")])],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你的代码所在的环境很难获取交互 shell（比如在某个服务器上面），通常可以\n捕获异常后自己打印跟踪信息。例如：\nimport traceback\nimport sys\ntry:\nfunc(arg)\nexcept:\nprint('**** AN ERROR OCCURRED ****')\ntraceback.print_exc(file=sys.stderr)\n要是你的程序没有崩溃，而只是产生了一些你看不懂的结果，你在感兴趣的地方插\n入一下 print() 语句也是个不错的选择。不过，要是你打算这样做，有一些小技巧可\n以帮助你。首先，traceback.print_stack() 函数会你程序运行到那个点的时候创建\n一个跟踪栈。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("def sample(n):\n... if n > 0:\n... sample(n-1)\n... else:\n... traceback.print_stack(file=sys.stderr)\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('sample(5)\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "'),n("stdin",[e._v('", line 3, in sample\nFile "'),n("stdin",[e._v('", line 3, in sample\nFile "'),n("stdin",[e._v('", line 3, in sample\nFile "'),n("stdin",[e._v('", line 3, in sample\nFile "'),n("stdin",[e._v('", line 3, in sample\nFile "'),n("stdin",[e._v('", line 5, in sample')])],1)],1)],1)],1)],1)],1)],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("另外，你还可以像下面这样使用 pdb.set_trace() 在任何地方手动的启动调试器：\nimport pdb\ndef func(arg):\n...\npdb.set_trace()\n...\n当程序比较大而你想调试控制流程以及函数参数的时候这个就比较有用了。例如，\n一旦调试器开始运行，你就能够使用 print 来观测变量值或敲击某个命令比如 w 来获\n取追踪信息。\n讨论\n不要将调试弄的过于复杂化。一些简单的错误只需要观察程序堆栈信息就能知道\n了，实际的错误一般是堆栈的最后一行。你在开发的时候，也可以在你需要调试的地方\n插入一下 print() 函数来诊断信息（只需要最后发布的时候删除这些打印语句即可）。\n调试器的一个常见用法是观测某个已经崩溃的函数中的变量。知道怎样在函数崩\n溃后进入调试器是一个很有用的技能。\n当你想解剖一个非常复杂的程序，底层的控制逻辑你不是很清楚的时候，插入\npdb.set_trace() 这样的语句就很有用了。\n实际上，程序会一直运行到碰到 set_trace() 语句位置，然后立马进入调试器。然\n后你就可以做更多的事了。\n如果你使用 IDE 来做 Python 开发，通常 IDE 都会提供自己的调试器来替代 pdb。\n更多这方面的信息可以参考你使用的 IDE 手册。\n14.13 给你的程序做性能测试\n问题\n你想测试你的程序运行所花费的时间并做性能测试。\n解决方案\n如果你只是简单的想测试下你的程序整体花费的时间，通常使用 Unix 时间函数就\n行了，比如：\nbash % time python3 someprogram.py\nreal 0m13.937s\nuser 0m12.162s\nsys 0m0.098s\nbash %\n如果你还需要一个程序各个细节的详细报告，可以使用 cProfile 模块：\nbash % python3 -m cProfile someprogram.py\n859647 function calls in 16.016 CPU seconds\nOrdered by: standard name\nncalls tottime percall cumtime percall filename:lineno(function)\n263169 0.080 0.000 0.080 0.000 someprogram.py:16(frange)\n513 0.001 0.000 0.002 0.000 someprogram.py:30(generate_\n,\n→mandel)\n262656 0.194 0.000 15.295 0.000 someprogram.py:32("),n("genexpr",[e._v(") 1 0.036 0.036 16.077 16.077 someprogram.py:4("),n("module",[e._v(")\n262144 15.021 0.000 15.021 0.000 someprogram.py:4(in_mandelbrot)\n1 0.000 0.000 0.000 0.000 os.py:746(urandom)\n1 0.000 0.000 0.000 0.000 png.py:1056(_readable)\n1 0.000 0.000 0.000 0.000 png.py:1073(Reader)\n1 0.227 0.227 0.438 0.438 png.py:163("),n("module",[e._v(")\n512 0.010 0.000 0.010 0.000 png.py:200(group)\n...\nbash %\n不过通常情况是介于这两个极端之间。比如你已经知道代码运行时在少数几个函\n数中花费了绝大部分时间。对于这些函数的性能测试，可以使用一个简单的装饰器：")])],1)],1)],1),e._v(" "),n("h1",{attrs:{id:"timethis-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#timethis-py"}},[e._v("#")]),e._v(" timethis.py")]),e._v(" "),n("p",[e._v("import time\nfrom functools import wraps\ndef timethis(func):\n@wraps(func)\ndef wrapper(*args, **kwargs):\nstart = time.perf_counter()\nr = func(*args, **kwargs)\nend = time.perf_counter()\nprint('{}.{} : {}'.format(func."),n("strong",[e._v("module")]),e._v(", func."),n("strong",[e._v("name")]),e._v(", end -␣ , →start))\nreturn r\nreturn wrapper\n要使用这个装饰器，只需要将其放置在你要进行性能测试的函数定义前即可，比\n如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("@timethis\n... def countdown(n):\n... while n > 0:\n... n -= 1\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("countdown(10000000)\n"),n("strong",[e._v("main")]),e._v(".countdown : 0.803001880645752")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("要测试某个代码块运行时间，你可以定义一个上下文管理器，例如：\nfrom contextlib import contextmanager\n@contextmanager\ndef timeblock(label):\nstart = time.perf_counter()\ntry:\nyield\nfinally:\nend = time.perf_counter()\nprint('{} : {}'.format(label, end - start))\n下面是使用这个上下文管理器的例子：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("with timeblock('counting'):\n... n = 10000000\n... while n > 0:\n... n -= 1\n...\ncounting : 1.5551159381866455")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对于测试很小的代码片段运行性能，使用 timeit 模块会很方便，例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from timeit import timeit\ntimeit('math.sqrt(2)', 'import math')\n0.1432319980012835")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("timeit('sqrt(2)', 'from math import sqrt')\n0.10836604500218527")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("timeit 会执行第一个参数中语句 100 万次并计算运行时间。第二个参数是运行测\n试之前配置环境。如果你想改变循环执行次数，可以像下面这样设置 number 参数的值：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("timeit('math.sqrt(2)', 'import math', number=10000000)\n1.434852126003534")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("timeit('sqrt(2)', 'from math import sqrt', number=10000000)\n1.0270336690009572")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n当执行性能测试的时候，需要注意的是你获取的结果都是近似值。time.\nperf_counter() 函数会在给定平台上获取最高精度的计时值。不过，它仍然还是\n基于时钟时间，很多因素会影响到它的精确度，比如机器负载。如果你对于执行时间更\n感兴趣，使用 time.process_time() 来代替它。例如：\nfrom functools import wraps\ndef timethis(func):\n@wraps(func)\ndef wrapper(*args, **kwargs):\nstart = time.process_time()\nr = func(*args, **kwargs)\nend = time.process_time()\nprint('{}.{} : {}'.format(func."),n("strong",[e._v("module")]),e._v(", func."),n("strong",[e._v("name")]),e._v(", end -␣ , →start))\nreturn r\nreturn wrapper\n最后，如果你想进行更深入的性能分析，那么你需要详细阅读 time 、timeit 和其\n他相关模块的文档。这样你可以理解和平台相关的差异以及一些其他陷阱。还可以参考\n13.13 小节中相关的一个创建计时器类的例子。\n14.14 加速程序运行\n问题\n你的程序运行太慢，你想在不使用复杂技术比如 C 扩展或 JIT 编译器的情况下加\n快程序运行速度。\n解决方案\n关于程序优化的第一个准则是“不要优化”，第二个准则是“不要优化那些无关紧\n要的部分”。如果你的程序运行缓慢，首先你得使用 14.13 小节的技术先对它进行性能\n测试找到问题所在。\n通常来讲你会发现你得程序在少数几个热点地方花费了大量时间，比如内存的数\n据处理循环。一旦你定位到这些点，你就可以使用下面这些实用技术来加速程序运行。\n使用函数\n很多程序员刚开始会使用 Python 语言写一些简单脚本。当编写脚本的时候，通常\n习惯了写毫无结构的代码，比如：")]),e._v(" "),n("h1",{attrs:{id:"somescript-py"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#somescript-py"}},[e._v("#")]),e._v(" somescript.py")]),e._v(" "),n("p",[e._v("import sys\nimport csv\nwith open(sys.argv[1]) as f:\nfor row in csv.reader(f):")]),e._v(" "),n("h1",{attrs:{id:"some-kind-of-processing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#some-kind-of-processing"}},[e._v("#")]),e._v(" Some kind of processing")]),e._v(" "),n("p",[e._v("pass\n很少有人知道，像这样定义在全局范围的代码运行起来要比定义在函数中运行慢\n的多。这种速度差异是由于局部变量和全局变量的实现方式（使用局部变量要更快些）。\n因此，如果你想让程序运行更快些，只需要将脚本语句放入函数中即可：")]),e._v(" "),n("h1",{attrs:{id:"somescript-py-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#somescript-py-2"}},[e._v("#")]),e._v(" somescript.py")]),e._v(" "),n("p",[e._v("import sys\nimport csv\ndef main(filename):\nwith open(filename) as f:\nfor row in csv.reader(f):")]),e._v(" "),n("h1",{attrs:{id:"some-kind-of-processing-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#some-kind-of-processing-2"}},[e._v("#")]),e._v(" Some kind of processing")]),e._v(" "),n("p",[e._v("pass\nmain(sys.argv[1])\n速度的差异取决于实际运行的程序，不过根据经验，使用函数带来 15-30% 的性能\n提升是很常见的。\n尽可能去掉属性访问\n每一次使用点 (.) 操作符来访问属性的时候会带来额外的开销。它会触发特定的方\n法，比如 "),n("strong",[e._v("getattribute")]),e._v("() 和 "),n("strong",[e._v("getattr")]),e._v("() ，这些方法会进行字典操作操作。\n通常你可以使用 from module import name 这样的导入形式，以及使用绑定的方\n法。假设你有如下的代码片段：\nimport math\ndef compute_roots(nums):\nresult = []\nfor n in nums:\nresult.append(math.sqrt(n))\nreturn result")]),e._v(" "),n("h1",{attrs:{id:"test"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[e._v("#")]),e._v(" Test")]),e._v(" "),n("p",[e._v("nums = range(1000000)\nfor n in range(100):\nr = compute_roots(nums)\n在我们机器上面测试的时候，这个程序花费了大概 40 秒。现在我们修改\ncompute_roots() 函数如下：\nfrom math import sqrt\ndef compute_roots(nums):\nresult = []\nresult_append = result.append\nfor n in nums:\nresult_append(sqrt(n))\nreturn result\n修改后的版本运行时间大概是 29 秒。唯一不同之处就是消除了属性访问。用 sqrt()\n代替了 math.sqrt() 。The result.append() 方法被赋给一个局部变量 result_append\n，然后在内部循环中使用它。\n不过，这些改变只有在大量重复代码中才有意义，比如循环。因此，这些优化也只\n是在某些特定地方才应该被使用。\n理解局部变量\n之前提过，局部变量会比全局变量运行速度快。对于频繁访问的名称，通过将这些\n名称变成局部变量可以加速程序运行。例如，看下之前对于 compute_roots() 函数进\n行修改后的版本：\nimport math\ndef compute_roots(nums):\nsqrt = math.sqrt\nresult = []\nresult_append = result.append\nfor n in nums:\nresult_append(sqrt(n))\nreturn result\n在这个版本中，sqrt 从 match 模块被拿出并放入了一个局部变量中。如果你运行\n这个代码，大概花费 25 秒（对于之前 29 秒又是一个改进）。这个额外的加速原因是因\n为对于局部变量 sqrt 的查找要快于全局变量 sqrt\n对于类中的属性访问也同样适用于这个原理。通常来讲，查找某个值比如 self.\nname 会比访问一个局部变量要慢一些。在内部循环中，可以将某个需要频繁访问的属\n性放入到一个局部变量中。例如：")]),e._v(" "),n("h1",{attrs:{id:"slower"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#slower"}},[e._v("#")]),e._v(" Slower")]),e._v(" "),n("p",[e._v("class SomeClass: ...\ndef method(self):\nfor x in s:\nop(self.value)")]),e._v(" "),n("h1",{attrs:{id:"faster"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#faster"}},[e._v("#")]),e._v(" Faster")]),e._v(" "),n("p",[e._v("class SomeClass: ...\ndef method(self):\nvalue = self.value\nfor x in s:\nop(value)\n避免不必要的抽象\n任何时候当你使用额外的处理层（比如装饰器、属性访问、描述器）去包装你的代\n码时，都会让程序运行变慢。比如看下如下的这个类：\nclass A:\ndef "),n("strong",[e._v("init")]),e._v("(self, x, y):\nself.x = x\nself.y = y\n@property\ndef y(self):\nreturn self._y\n@y.setter\ndef y(self, value):\nself._y = value\n现在进行一个简单测试：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from timeit import timeit\na = A(1,2)\ntimeit('a.x', 'from "),n("strong",[e._v("main")]),e._v(" import a')\n0.07817923510447145")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("timeit('a.y', 'from "),n("strong",[e._v("main")]),e._v(" import a')\n0.35766440676525235")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("可以看到，访问属性 y 相比属性 x 而言慢的不止一点点，大概慢了 4.5 倍。如果\n你在意性能的话，那么就需要重新审视下对于 y 的属性访问器的定义是否真的有必要\n了。如果没有必要，就使用简单属性吧。如果仅仅是因为其他编程语言需要使用 getter/\nsetter 函数就去修改代码风格，这个真的没有必要。\n使用内置的容器\n内置的数据类型比如字符串、元组、列表、集合和字典都是使用 C 来实现的，运\n行起来非常快。如果你想自己实现新的数据结构（比如链接列表、平衡树等），那么要\n想在性能上达到内置的速度几乎不可能，因此，还是乖乖的使用内置的吧。\n避免创建不必要的数据结构或复制\n有时候程序员想显摆下，构造一些并没有必要的数据结构。例如，有人可能会像下\n面这样写：\nvalues = [x for x in sequence]\nsquares = [x"),n("em",[e._v("x for x in values]\n也许这里的想法是首先将一些值收集到一个列表中，然后使用列表推导来执行操\n作。不过，第一个列表完全没有必要，可以简单的像下面这样写：\nsquares = [x")]),e._v("x for x in sequence]\n与此相关，还要注意下那些对 Python 的共享数据机制过于偏执的程序所写的代\n码。有些人并没有很好的理解或信任 Python 的内存模型，滥用 copy.deepcopy() 之\n类的函数。通常在这些代码中是可以去掉复制操作的。\n讨论\n在优化之前，有必要先研究下使用的算法。选择一个复杂度为 O(n log n) 的算法\n要比你去调整一个复杂度为 O(n**2) 的算法所带来的性能提升要大得多。\n如果你觉得你还是得进行优化，那么请从整体考虑。作为一般准则，不要对程序的\n每一个部分都去优化, 因为这些修改会导致代码难以阅读和理解。你应该专注于优化产\n生性能瓶颈的地方，比如内部循环。\n你还要注意微小优化的结果。例如考虑下面创建一个字典的两种方式：\na = {'name' : 'AAPL', 'shares' : 100, 'price' : 534.22\n}b = dict(name='AAPL', shares=100, price=534.22)\n后面一种写法更简洁一些（你不需要在关键字上输入引号）。不过，如果你将这两\n个代码片段进行性能测试对比时，会发现使用 dict() 的方式会慢了 3 倍。看到这个，\n你是不是有冲动把所有使用 dict() 的代码都替换成第一种。不够，聪明的程序员只会\n关注他应该关注的地方，比如内部循环。在其他地方，这点性能损失没有什么影响。\n如果你的优化要求比较高，本节的这些简单技术满足不了，那么你可以研究下基于\n即时编译（JIT）技术的一些工具。例如，PyPy 工程是 Python 解释器的另外一种实现，\n它会分析你的程序运行并对那些频繁执行的部分生成本机机器码。它有时候能极大的\n提升性能，通常可以接近 C 代码的速度。不过可惜的是，到写这本书位置，PyPy 还不\n能完全支持 Python3. 因此，这个是你将来需要去研究的。你还可以考虑下 Numba 工\n程，Numba 是一个在你使用装饰器来选择 Python 函数进行优化时的动态编译器。这些\n函数会使用 LLVM 被编译成本地机器码。它同样可以极大的提升性能。但是，跟 PyPy\n一样，它对于 Python 3 的支持现在还停留在实验阶段。\n最后我引用 John Ousterhout 说过的话作为结尾：“最好的性能优化是从不工作到\n工作状态的迁移”。直到你真的需要优化的时候再去考虑它。确保你程序正确的运行通\n常比让它运行更快要更重要一些（至少开始是这样的）.\n第十五章：C 语言扩展\n本章着眼于从 Python 访问 C 代码的问题。许多 Python 内置库是用 C 写的，访\n问 C 是让 Python 的对现有库进行交互一个重要的组成部分。这也是一个当你面临从\nPython 2 到 Python 3 扩展代码的问题。虽然 Python 提供了一个广泛的编程 API，实\n际上有很多方法来处理 C 的代码。相比试图给出对于每一个可能的工具或技术的详细\n参考，我么采用的是是集中在一个小片段的 C++ 代码，以及一些有代表性的例子来展\n示如何与代码交互。这个目标是提供一系列的编程模板，有经验的程序员可以扩展自己\n的使用。\n这里是我们将在大部分秘籍中工作的代码：\n/* sample.c "),n("em",[e._v("/_method\n#include <math.h>\n/")]),e._v(" Compute the greatest common divisor "),n("em",[e._v("/\nint gcd(int x, int y) {\nint g = y;\nwhile (x > 0) {\ng = x;\nx = y % x;\ny = g;\n}\nreturn g;\n}\n/")]),e._v(" Test if (x0,y0) is in the Mandelbrot set or not "),n("em",[e._v("/\nint in_mandel(double x0, double y0, int n) {\ndouble x=0,y=0,xtemp;\nwhile (n > 0) {\nxtemp = x")]),e._v("x - y"),n("em",[e._v("y + x0;\ny = 2")]),e._v("x"),n("em",[e._v("y + y0;\nx = xtemp;\nn -= 1;\nif (x")]),e._v("x + y"),n("em",[e._v("y > 4) return 0; }\nreturn 1; }\n/")]),e._v(" Divide two numbers */\nint divide(int a, int b, int *remainder) {\nint quot = a / b;\n"),n("em",[e._v("remainder = a % b;\nreturn quot;\n}\n/")]),e._v(" Average values in an array */\ndouble avg(double "),n("em",[e._v("a, int n) {\nint i;\ndouble total = 0.0;\nfor (i = 0; i < n; i++) {\ntotal += a[i];\n}\nreturn total / n;\n}\n/")]),e._v(" A C data structure "),n("em",[e._v("/\ntypedef struct Point {\ndouble x,y;\n} Point;\n/")]),e._v(" Function involving a C data structure */\ndouble distance(Point *p1, Point *p2) {\nreturn hypot(p1->x - p2->x, p1->y - p2->y);\n}\n这段代码包含了多种不同的 C 语言编程特性。首先，这里有很多函数比如 gcd()\n和 is_mandel() 。divide() 函数是一个返回多个值的 C 函数例子，其中有一个是通过\n指针参数的方式。avg() 函数通过一个 C 数组执行数据聚集操作。Point 和 distance()\n函数涉及到了 C 结构体。\n对于接下来的所有小节，先假定上面的代码已经被写入了一个名叫“sample.c”的\n文件中，然后它们的定义被写入一个名叫“sample.h”的头文件中，并且被编译为一个\n库叫“libsample”，能被链接到其他 C 语言代码中。编译和链接的细节依据系统的不同\n而不同，但是这个不是我们关注的。如果你要处理 C 代码，我们假定这些基础的东西\n你都掌握了。\n15.1 使用 ctypes 访问 C 代码\n问题\n你有一些 C 函数已经被编译到共享库或 DLL 中。你希望可以使用纯 Python 代码\n调用这些函数，而不用编写额外的 C 代码或使用第三方扩展工具。\n解决方案\n对于需要调用 C 代码的一些小的问题，通常使用 Python 标准库中的 ctypes 模块\n就足够了。要使用 ctypes ，你首先要确保你要访问的 C 代码已经被编译到和 Python\n解释器兼容（同样的架构、字大小、编译器等）的某个共享库中了。为了进行本节的演\n示，假设你有一个共享库名字叫 libsample.so ，里面的内容就是 15 章介绍部分那样。\n另外还假设这个 libsample.so 文件被放置到位于 sample.py 文件相同的目录中了。\n要访问这个函数库，你要先构建一个包装它的 Python 模块，如下这样：")]),e._v(" "),n("h1",{attrs:{id:"sample-py-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sample-py-2"}},[e._v("#")]),e._v(" sample.py")]),e._v(" "),n("p",[e._v("import ctypes\nimport os")]),e._v(" "),n("h1",{attrs:{id:"try-to-locate-the-so-file-in-the-same-directory-as-this-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#try-to-locate-the-so-file-in-the-same-directory-as-this-file"}},[e._v("#")]),e._v(" Try to locate the .so file in the same directory as this file")]),e._v(" "),n("p",[e._v("_file = 'libsample.so'\n_path = os.path.join(*(os.path.split("),n("strong",[e._v("file")]),e._v(")[:-1] + (_file,)))\n_mod = ctypes.cdll.LoadLibrary(_path)")]),e._v(" "),n("h1",{attrs:{id:"int-gcd-int-int"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#int-gcd-int-int"}},[e._v("#")]),e._v(" int gcd(int, int)")]),e._v(" "),n("p",[e._v("gcd = _mod.gcd\ngcd.argtypes = (ctypes.c_int, ctypes.c_int)\ngcd.restype = ctypes.c_int")]),e._v(" "),n("h1",{attrs:{id:"int-in-mandel-double-double-int"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#int-in-mandel-double-double-int"}},[e._v("#")]),e._v(" int in_mandel(double, double, int)")]),e._v(" "),n("p",[e._v("in_mandel = _mod.in_mandel\nin_mandel.argtypes = (ctypes.c_double, ctypes.c_double, ctypes.c_int)\nin_mandel.restype = ctypes.c_int")]),e._v(" "),n("h1",{attrs:{id:"int-divide-int-int-int"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#int-divide-int-int-int"}},[e._v("#")]),e._v(" int divide(int, int, int *)")]),e._v(" "),n("p",[e._v("_divide = _mod.divide\n_divide.argtypes = (ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.c_int))\n_divide.restype = ctypes.c_int\ndef divide(x, y):\nrem = ctypes.c_int()\nquot = _divide(x, y, rem)\nreturn quot,rem.value")]),e._v(" "),n("h1",{attrs:{id:"void-avg-double-int-n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#void-avg-double-int-n"}},[e._v("#")]),e._v(" void avg(double *, int n)")]),e._v(" "),n("h1",{attrs:{id:"define-a-special-type-for-the-double-argument"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#define-a-special-type-for-the-double-argument"}},[e._v("#")]),e._v(" Define a special type for the 'double *' argument")]),e._v(" "),n("p",[e._v("class DoubleArrayType:\ndef from_param(self, param):\ntypename = type(param)."),n("strong",[e._v("name")]),e._v("\nif hasattr(self, 'from_' + typename):\nreturn getattr(self, 'from_' + typename)(param)\nelif isinstance(param, ctypes.Array):\nreturn param\nelse:\nraise TypeError(\"Can't convert %s\" % typename)")]),e._v(" "),n("h1",{attrs:{id:"cast-from-array-array-objects"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cast-from-array-array-objects"}},[e._v("#")]),e._v(" Cast from array.array objects")]),e._v(" "),n("p",[e._v("def from_array(self, param):\nif param.typecode != 'd':\nraise TypeError('must be an array of doubles')\nptr, _ = param.buffer_info()\nreturn ctypes.cast(ptr, ctypes.POINTER(ctypes.c_double))")]),e._v(" "),n("h1",{attrs:{id:"cast-from-lists-tuples"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cast-from-lists-tuples"}},[e._v("#")]),e._v(" Cast from lists/tuples")]),e._v(" "),n("p",[e._v("def from_list(self, param):\nval = ((ctypes.c_double)*len(param))(*param)\nreturn val\nfrom_tuple = from_list")]),e._v(" "),n("h1",{attrs:{id:"cast-from-a-numpy-array"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cast-from-a-numpy-array"}},[e._v("#")]),e._v(" Cast from a numpy array")]),e._v(" "),n("p",[e._v("def from_ndarray(self, param):\nreturn param.ctypes.data_as(ctypes.POINTER(ctypes.c_double))\nDoubleArray = DoubleArrayType()\n_avg = _mod.avg\n_avg.argtypes = (DoubleArray, ctypes.c_int)\n_avg.restype = ctypes.c_double\ndef avg(values):\nreturn _avg(values, len(values))")]),e._v(" "),n("h1",{attrs:{id:"struct-point"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#struct-point"}},[e._v("#")]),e._v(" struct Point { }")]),e._v(" "),n("p",[e._v("class Point(ctypes.Structure):\n"),n("em",[e._v("fields")]),e._v(" = [('x', ctypes.c_double),\n('y', ctypes.c_double)]")]),e._v(" "),n("h1",{attrs:{id:"double-distance-point-point"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#double-distance-point-point"}},[e._v("#")]),e._v(" double distance(Point *, Point *)")]),e._v(" "),n("p",[e._v("distance = _mod.distance\ndistance.argtypes = (ctypes.POINTER(Point), ctypes.POINTER(Point))\ndistance.restype = ctypes.c_double\n如果一切正常，你就可以加载并使用里面定义的 C 函数了。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sample\nsample.gcd(35,42) 7\nsample.in_mandel(0,0,500) 1\nsample.in_mandel(2.0,1.0,500) 0\nsample.divide(42,8)\n(5, 2)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.avg([1,2,3])\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p1 = sample.Point(1,2)\np2 = sample.Point(4,5)\nsample.distance(p1,p2)\n4.242640687119285")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n本小节有很多值得我们详细讨论的地方。首先是对于 C 和 Python 代码一起打包\n的问题，如果你在使用 ctypes 来访问编译后的 C 代码，那么需要确保这个共享库放在\nsample.py 模块同一个地方。一种可能是将生成的 .so 文件放置在要使用它的 Python\n代码同一个目录下。我们在 recipe—sample.py 中使用 "),n("strong",[e._v("file")]),e._v(" 变量来查看它被安装\n的位置，然后构造一个指向同一个目录中的 libsample.so 文件的路径。\n如果 C 函数库被安装到其他地方，那么你就要修改相应的路径。如果 C 函数库在\n你机器上被安装为一个标准库了，那么可以使用 ctypes.util.find_library() 函数\n来查找：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from ctypes.util import find_library\nfind_library('m')\n'/usr/lib/libm.dylib'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("find_library('pthread')\n'/usr/lib/libpthread.dylib'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("find_library('sample')\n'/usr/local/lib/libsample.so'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("一旦你知道了 C 函数库的位置，那么就可以像下面这样使用 ctypes.cdll.\nLoadLibrary() 来加载它，其中 _path 是标准库的全路径：\n_mod = ctypes.cdll.LoadLibrary(_path)\n函数库被加载后，你需要编写几个语句来提取特定的符号并指定它们的类型。就像\n下面这个代码片段一样：")]),e._v(" "),n("h1",{attrs:{id:"int-in-mandel-double-double-int-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#int-in-mandel-double-double-int-2"}},[e._v("#")]),e._v(" int in_mandel(double, double, int)")]),e._v(" "),n("p",[e._v("in_mandel = _mod.in_mandel\nin_mandel.argtypes = (ctypes.c_double, ctypes.c_double, ctypes.c_int)\nin_mandel.restype = ctypes.c_int\n在这段代码中，.argtypes 属性是一个元组，包含了某个函数的输入按时，而 .\nrestype 就是相应的返回类型。ctypes 定义了大量的类型对象（比如 c_double, c_int,\nc_short, c_float 等），代表了对应的 C 数据类型。如果你想让 Python 能够传递正确\n的参数类型并且正确的转换数据的话，那么这些类型签名的绑定是很重要的一步。如\n果你没有这么做，不但代码不能正常运行，还可能会导致整个解释器进程挂掉。使用\nctypes 有一个麻烦点的地方是原生的 C 代码使用的术语可能跟 Python 不能明确的对\n应上来。divide() 函数是一个很好的例子，它通过一个参数除以另一个参数返回一个\n结果值。尽管这是一个很常见的 C 技术，但是在 Python 中却不知道怎样清晰的表达出\n来。例如，你不能像下面这样简单的做：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("divide = "),n("em",[e._v("mod.divide\ndivide.argtypes = (ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.c")]),e._v("\n,\n→int))")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('x = 0\ndivide(10, 3, x)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nctypes.ArgumentError: argument 3: <class 'TypeError'>: expected LP_c_int\ninstance instead of int")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("就算这个能正确的工作，它会违反 Python 对于整数的不可更改原则，并且可能会\n导致整个解释器陷入一个黑洞中。对于涉及到指针的参数，你通常需要先构建一个相应\n的 ctypes 对象并像下面这样传进去：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("x = ctypes.c_int()\ndivide(10, 3, x)\n3")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("x.value\n1")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在这里，一个 ctypes.c_int 实例被创建并作为一个指针被传进去。跟普通 Python\n整形不同的是，一个 c_int 对象是可以被修改的。.value 属性可被用来获取或更改这\n个值。\n对于那些不像 Python 的 C 调用，通常可以写一个小的包装函数。这里，我们让\ndivide() 函数通过元组来返回两个结果：")]),e._v(" "),n("h1",{attrs:{id:"int-divide-int-int-int-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#int-divide-int-int-int-2"}},[e._v("#")]),e._v(" int divide(int, int, int *)")]),e._v(" "),n("p",[e._v("_divide = _mod.divide\n_divide.argtypes = (ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.c_int))\n_divide.restype = ctypes.c_int\ndef divide(x, y):\nrem = ctypes.c_int()\nquot = _divide(x,y,rem)\nreturn quot, rem.value\navg() 函数又是一个新的挑战。C 代码期望接受到一个指针和一个数组的长度值。\n但是，在 Python 中，我们必须考虑这个问题：数组是啥？它是一个列表？一个元组？\n还是 array 模块中的一个数组？还是一个 numpy 数组？还是说所有都是？实际上，一\n个 Python“数组”有多种形式，你可能想要支持多种可能性。\nDoubleArrayType 演示了怎样处理这种情况。在这个类中定义了一个单个方法\nfrom_param() 。这个方法的角色是接受一个单个参数然后将其向下转换为一个合适的\nctypes 对象（本例中是一个 ctypes.c_double 的指针）。在 from_param() 中，你可以\n做任何你想做的事。参数的类型名被提取出来并被用于分发到一个更具体的方法中去。\n例如，如果一个列表被传递过来，那么 typename 就是 list ，然后 from_list 方法被\n调用。\n对于列表和元组，from_list 方法将其转换为一个 ctypes 的数组对象。这个看上\n去有点奇怪，下面我们使用一个交互式例子来将一个列表转换为一个 ctypes 数组：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("nums = [1, 2, 3]\na = (ctypes.c_double * len(nums))(*nums)\na\n<"),n("strong",[e._v("main")]),e._v(".c_double_Array_3 object at 0x10069cd40>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a[0]\n1.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a[1]\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("a[2]\n3.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("对于数组对象，from_array() 提取底层的内存指针并将其转换为一个 ctypes 指\n针对象。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import array\na = array.array('d',[1,2,3])\na\narray('d', [1.0, 2.0, 3.0])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("ptr_ = a.buffer_info()\nptr\n4298687200")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("ctypes.cast(ptr, ctypes.POINTER(ctypes.c_double))\n<"),n("strong",[e._v("main")]),e._v(".LP_c_double object at 0x10069cd40>")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("from_ndarray() 演示了对于 numpy 数组的转换操作。通过定义 DoubleArrayType\n类并在 avg() 类型签名中使用它，那么这个函数就能接受多个不同的类数组输入了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sample\nsample.avg([1,2,3])\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.avg((1,2,3))\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import array\nsample.avg(array.array('d',[1,2,3]))\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import numpy\nsample.avg(numpy.array([1.0,2.0,3.0]))\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("本节最后一部分向你演示了怎样处理一个简单的 C 结构。对于结构体，你只需要\n像下面这样简单的定义一个类，包含相应的字段和类型即可：\nclass Point(ctypes.Structure):\n"),n("em",[e._v("fields")]),e._v(" = [('x', ctypes.c_double),\n('y', ctypes.c_double)]\n一旦类被定义后，你就可以在类型签名中或者是需要实例化结构体的代码中使用\n它。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("p1 = sample.Point(1,2)\np2 = sample.Point(4,5)\np1.x\n1.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p1.y\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.distance(p1,p2)\n4.242640687119285")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后一些小的提示：如果你想在 Python 中访问一些小的 C 函数，那么 ctypes 是\n一个很有用的函数库。尽管如此，如果你想要去访问一个很大的库，那么可能就需要其\n他的方法了，比如 Swig (15.9 节会讲到) 或 Cython（15.10 节）。\n对于大型库的访问有个主要问题，由于 ctypes 并不是完全自动化，那么你就必须\n花费大量时间来编写所有的类型签名，就像例子中那样。如果函数库够复杂，你还得去\n编写很多小的包装函数和支持类。另外，除非你已经完全精通了所有底层的 C 接口细\n节，包括内存分配和错误处理机制，通常一个很小的代码缺陷、访问越界或其他类似错\n误就能让 Python 程序奔溃。\n作为 ctypes 的一个替代，你还可以考虑下 CFFI。CFFI 提供了很多类似的功能，\n但是使用 C 语法并支持更多高级的 C 代码类型。到写这本书为止，CFFI 还是一个相\n对较新的工程，但是它的流行度正在快速上升。甚至还有在讨论在 Python 将来的版本\n中将它包含进去。因此，这个真的值得一看。\n15.2 简单的 C 扩展模块\n问题\n你想不依靠其他工具，直接使用 Python 的扩展 API 来编写一些简单的 C 扩展模\n块。\n解决方案\n对于简单的 C 代码，构建一个自定义扩展模块是很容易的。作为第一步，你需要\n确保你的 C 代码有一个正确的头文件。例如：\n/* sample.h */\n#include <math.h>\nextern int gcd(int, int);\nextern int in_mandel(double x0, double y0, int n);\nextern int divide(int a, int b, int *remainder);\nextern double avg(double *a, int n);\ntypedef struct Point {\ndouble x,y;\n} Point;\nextern double distance(Point *p1, Point "),n("em",[e._v('p2);\n通常来讲，这个头文件要对应一个已经被单独编译过的库。有了这些，下面我们演\n示下编写扩展函数的一个简单例子：\n#include "Python.h"\n#include "sample.h"\n/')]),e._v(" int gcd(int, int) */\nstatic PyObject *py_gcd(PyObject *self, PyObject "),n("em",[e._v('args) {\nint x, y, result;\nif (!PyArg_ParseTuple(args,"ii", &x, &y)) {\nreturn NULL;\n}\nresult = gcd(x,y);\nreturn Py_BuildValue("i", result);\n}\n/')]),e._v(" int in_mandel(double, double, int) */\nstatic PyObject *py_in_mandel(PyObject *self, PyObject "),n("em",[e._v('args) {\ndouble x0, y0;\nint n;\nint result;\nif (!PyArg_ParseTuple(args, "ddi", &x0, &y0, &n)) {\nreturn NULL;\n}\nresult = in_mandel(x0,y0,n);\nreturn Py_BuildValue("i", result);\n}\n/')]),e._v(" int divide(int, int, int *) */\nstatic PyObject *py_divide(PyObject *self, PyObject "),n("em",[e._v('args) {\nint a, b, quotient, remainder;\nif (!PyArg_ParseTuple(args, "ii", &a, &b)) {\nreturn NULL;\n}\nquotient = divide(a,b, &remainder);\nreturn Py_BuildValue("(ii)", quotient, remainder);\n}\n/')]),e._v(" Module method table "),n("em",[e._v('/\nstatic PyMethodDef SampleMethods[] = {\n{"gcd", py_gcd, METH_VARARGS, "Greatest common divisor"},\n{"in_mandel", py_in_mandel, METH_VARARGS, "Mandelbrot test"},\n{"divide", py_divide, METH_VARARGS, "Integer division"},\n{ NULL, NULL, 0, NULL}\n};\n/')]),e._v(" Module structure "),n("em",[e._v('/\nstatic struct PyModuleDef samplemodule = {\nPyModuleDef_HEAD_INIT,\n"sample", /')]),e._v(" name of module "),n("em",[e._v('/\n"A sample module", /')]),e._v(" Doc string (may be NULL) "),n("em",[e._v("/\n-1, /")]),e._v(" Size of per-interpreter state or -1 "),n("em",[e._v("/\nSampleMethods /")]),e._v(" Method table "),n("em",[e._v("/\n};\n/")]),e._v(" Module initialization function */\nPyMODINIT_FUNC\nPyInit_sample(void) {\nreturn PyModule_Create(&samplemodule);\n}\n要绑定这个扩展模块，像下面这样创建一个 setup.py 文件：")]),e._v(" "),n("h1",{attrs:{id:"setup-py-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setup-py-2"}},[e._v("#")]),e._v(" setup.py")]),e._v(" "),n("p",[e._v("from distutils.core import setup, Extension\nsetup(name='sample',\next_modules=[\nExtension('sample', ['pysample.c'],\ninclude_dirs = ['/some/dir'],\ndefine_macros = [('FOO','1')],\nundef_macros = ['BAR'],\nlibrary_dirs = ['/usr/local/lib'],\nlibraries = ['sample'] ) ] )\n为了构建最终的函数库，只需简单的使用 python3 buildlib.py build_ext\n--inplace 命令即可：\nbash % python3 setup.py build_ext --inplace\nrunning build_ext\nbuilding 'sample' extension\ngcc -fno-strict-aliasing -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes\n-I/usr/local/include/python3.3m -c pysample.c -o build/temp.macosx-10.6-x86_64-3.3/pysample.o\ngcc -bundle -undefined dynamic_lookup\nbuild/temp.macosx-10.6-x86_64-3.3/pysample.o "),n("br"),e._v("\n-L/usr/local/lib -lsample -o sample.so\nbash %\n如上所示，它会创建一个名字叫 sample.so 的共享库。当被编译后，你就能将它\n作为一个模块导入进来了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sample\nsample.gcd(35, 42) 7\nsample.in_mandel(0, 0, 500) 1\nsample.in_mandel(2.0, 1.0, 500) 0\nsample.divide(42, 8)\n(5, 2)")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('如果你是在 Windows 机器上面尝试这些步骤，可能会遇到各种环境和编译问题，\n你需要花更多点时间去配置。Python 的二进制分发通常使用了 Microsoft Visual Studio\n来构建。为了让这些扩展能正常工作，你需要使用同样或兼容的工具来编译它。参考相\n应的 Python 文档\n讨论\n在尝试任何手写扩展之前，最好能先参考下 Python 文档中的 扩展和嵌入 Python\n解释器 . Python 的 C 扩展 API 很大，在这里整个去讲述它没什么实际意义。不过对\n于最核心的部分还是可以讨论下的。\n首先，在扩展模块中，你写的函数都是像下面这样的一个普通原型：\nstatic PyObject *py_func(PyObject *self, PyObject *args) {\n... }\nPyObject 是一个能表示任何 Python 对象的 C 数据类型。在一个高级层面，一个\n扩展函数就是一个接受一个 Python 对象（在 PyObject *args 中）元组并返回一个新\nPython 对象的 C 函数。函数的 self 参数对于简单的扩展函数没有被使用到，不过如\n果你想定义新的类或者是 C 中的对象类型的话就能派上用场了。比如如果扩展函数是\n一个类的一个方法，那么 self 就能引用那个实例了。\nPyArg_ParseTuple() 函数被用来将 Python 中的值转换成 C 中对应表示。它接受\n一个指定输入格式的格式化字符串作为输入，比如“i”代表整数，“d”代表双精度浮\n点数，同样还有存放转换后结果的 C 变量的地址。如果输入的值不匹配这个格式化字\n符串，就会抛出一个异常并返回一个 NULL 值。通过检查并返回 NULL，一个合适的\n异常会在调用代码中被抛出。\nPy_BuildValue() 函数被用来根据 C 数据类型创建 Python 对象。它同样接受\n一个格式化字符串来指定期望类型。在扩展函数中，它被用来返回结果给 Python。\nPy_BuildValue() 的一个特性是它能构建更加复杂的对象类型，比如元组和字典。在\npy_divide() 代码中，一个例子演示了怎样返回一个元组。不过，下面还有一些实例：\nreturn Py_BuildValue("i", 34); // Return an integer\nreturn Py_BuildValue("d", 3.4); // Return a double\nreturn Py_BuildValue("s", "Hello"); // Null-terminated UTF-8 string\nreturn Py_BuildValue("(ii)", 3, 4); // Tuple (3, 4)\n在扩展模块底部，你会发现一个函数表，比如本节中的 SampleMethods 表。这个\n表可以列出 C 函数、Python 中使用的名字、文档字符串。所有模块都需要指定这个表，\n因为它在模块初始化时要被使用到。\n最后的函数 PyInit_sample() 是模块初始化函数，但该模块第一次被导入时执行。\n这个函数的主要工作是在解释器中注册模块对象。\n最后一个要点需要提出来，使用 C 函数来扩展 Python 要考虑的事情还有很多，本\n节只是一小部分。（实际上，C API 包含了超过 500 个函数）。你应该将本节当做是一\n个入门篇。更多高级内容，可以看看 PyArg_ParseTuple() 和 Py_BuildValue() 函数\n的文档，然后进一步扩展开。\n15.3 编写扩展函数操作数组\n问题\n你想编写一个 C 扩展函数来操作数组，可能是被 array 模块或类似 Numpy 库所创\n建。不过，你想让你的函数更加通用，而不是针对某个特定的库所生成的数组。\n解决方案\n为了能让接受和处理数组具有可移植性，你需要使用到 Buffer Protocol . 下面是\n一个手写的 C 扩展函数例子，用来接受数组数据并调用本章开篇部分的 avg(double\n'),n("em",[e._v("buf, int len) 函数：\n/")]),e._v(" Call double avg(double *, int) */\nstatic PyObject *py_avg(PyObject *self, PyObject *args) {\nPyObject "),n("em",[e._v("bufobj;\nPy_buffer view;\ndouble result;\n/")]),e._v(" Get the passed Python object "),n("em",[e._v('/\nif (!PyArg_ParseTuple(args, "O", &bufobj)) {\nreturn NULL;\n}\n/')]),e._v(" Attempt to extract buffer information from it "),n("em",[e._v('/\nif (PyObject_GetBuffer(bufobj, &view,\nPyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) == -1) {\nreturn NULL;\n}\nif (view.ndim != 1) {\nPyErr_SetString(PyExc_TypeError, "Expected a 1-dimensional array");\nPyBuffer_Release(&view);\nreturn NULL;\n}\n/')]),e._v(" Check the type of items in the array "),n("em",[e._v('/\nif (strcmp(view.format,"d") != 0) {\nPyErr_SetString(PyExc_TypeError, "Expected an array of doubles");\nPyBuffer_Release(&view);\nreturn NULL;\n}\n/')]),e._v(" Pass the raw buffer and size to the C function "),n("em",[e._v("/\nresult = avg(view.buf, view.shape[0]);\n/")]),e._v(' Indicate we\'re done working with the buffer */\nPyBuffer_Release(&view);\nreturn Py_BuildValue("d", result);\n}\n下面我们演示下这个扩展函数是如何工作的：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import array\navg(array.array('d',[1,2,3]))\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import numpy\navg(numpy.array([1.0,2.0,3.0]))\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('avg([1,2,3])\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: 'list' does not support the buffer interface")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("avg(b'Hello')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: Expected an array of doubles")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('a = numpy.array([[1.,2.,3.],[4.,5.,6.]])\navg(a[:,2])\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nValueError: ndarray is not contiguous")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('sample.avg(a)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: Expected a 1-dimensional array")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.avg(a[0])\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n将一个数组对象传给 C 函数可能是一个扩展函数做的最常见的事。很多 Python\n应用程序，从图像处理到科学计算，都是基于高性能的数组处理。通过编写能接受并操\n作数组的代码，你可以编写很好的兼容这些应用程序的自定义代码，而不是只能兼容你\n自己的代码。\n代 码 的 关 键 点 在 于 PyBuffer_GetBuffer() 函 数。给 定 一 个 任 意 的 Python\n对 象， 它 会 试 着 去 获 取 底 层 内 存 信 息， 它 简 单 的 抛 出 一 个 异 常 并 返 回-1.\n传 给 PyBuffer_GetBuffer() 的 特 殊 标 志 给 出 了 所 需 的 内 存 缓 冲 类 型。例 如，\nPyBUF_ANY_CONTIGUOUS 表示是一个联系的内存区域。\n对于数组、字节字符串和其他类似对象而言，一个 Py_buffer 结构体包含了所有\n底层内存的信息。它包含一个指向内存地址、大小、元素大小、格式和其他细节的指针。\n下面是这个结构体的定义：\ntypedef struct bufferinfo {\nvoid "),n("em",[e._v("buf; /")]),e._v(" Pointer to buffer memory */\nPyObject "),n("em",[e._v("obj; /")]),e._v(" Python object that is the owner "),n("em",[e._v("/\nPy_ssize_t len; /")]),e._v(" Total size in bytes "),n("em",[e._v("/\nPy_ssize_t itemsize; /")]),e._v(" Size in bytes of a single item "),n("em",[e._v("/\nint readonly; /")]),e._v(" Read-only access flag "),n("em",[e._v("/\nint ndim; /")]),e._v(" Number of dimensions */\nchar "),n("em",[e._v("format; /")]),e._v(" struct code of a single item */\nPy_ssize_t "),n("em",[e._v("shape; /")]),e._v(" Array containing dimensions */\nPy_ssize_t "),n("em",[e._v("strides; /")]),e._v(" Array containing strides */\nPy_ssize_t "),n("em",[e._v("suboffsets; /")]),e._v(" Array containing suboffsets */\n} Py_buffer;\n本节中，我们只关注接受一个双精度浮点数数组作为参数。要检查元素是否是一个\n双精度浮点数，只需验证 format 属性是不是字符串”d”. 这个也是 struct 模块用来\n编码二进制数据的。通常来讲，format 可以是任何兼容 struct 模块的格式化字符串，\n并且如果数组包含了 C 结构的话它可以包含多个值。一旦我们已经确定了底层的缓存\n区信息，那只需要简单的将它传给 C 函数，然后会被当做是一个普通的 C 数组了。实\n际上，我们不必担心是怎样的数组类型或者它是被什么库创建出来的。这也是为什么这\n个函数能兼容 array 模块也能兼容 numpy 模块中的数组了。\n在返回最终结果之前，底层的缓冲区视图必须使用 PyBuffer_Release() 释放掉。\n之所以要这一步是为了能正确的管理对象的引用计数。\n同样，本节也仅仅只是演示了接受数组的一个小的代码片段。如果你真的要处理数\n组，你可能会碰到多维数据、大数据、不同的数据类型等等问题，那么就得去学更高级\n的东西了。你需要参考官方文档来获取更多详细的细节。\n如果你需要编写涉及到数组处理的多个扩展，那么通过 Cython 来实现会更容易\n下。参考 15.11 节。\n15.4 在 C 扩展模块中操作隐形指针\n问题\n你有一个扩展模块需要处理 C 结构体中的指针，但是你又不想暴露结构体中任何\n内部细节给 Python。\n解决方案\n隐形结构体可以很容易的通过将它们包装在胶囊对象中来处理。考虑我们例子代\n码中的下列 C 代码片段：\ntypedef struct Point {\ndouble x,y;\n} Point;\nextern double distance(Point *p1, Point "),n("em",[e._v("p2);\n下面是一个使用胶囊包装 Point 结构体和 distance() 函数的扩展代码实例：\n/")]),e._v(" Destructor function for points */\nstatic void del_Point(PyObject "),n("em",[e._v('obj) {\nfree(PyCapsule_GetPointer(obj,"Point"));\n}\n/')]),e._v(' Utility functions */\nstatic Point *PyPoint_AsPoint(PyObject *obj) {\nreturn (Point *) PyCapsule_GetPointer(obj, "Point");\n}\nstatic PyObject *PyPoint_FromPoint(Point '),n("em",[e._v('p, int must_free) {\nreturn PyCapsule_New(p, "Point", must_free ? del_Point : NULL);\n}\n/')]),e._v(' Create a new Point object */\nstatic PyObject *py_Point(PyObject *self, PyObject *args) {\nPoint *p;\ndouble x,y;\nif (!PyArg_ParseTuple(args,"dd",&x,&y)) {\nreturn NULL;\n}\np = (Point *) malloc(sizeof(Point));\np->x = x;\np->y = y;\nreturn PyPoint_FromPoint(p, 1);\n}\nstatic PyObject *py_distance(PyObject *self, PyObject *args) {\nPoint *p1, *p2;\nPyObject *py_p1, *py_p2;\ndouble result;\nif (!PyArg_ParseTuple(args,"OO",&py_p1, &py_p2)) {\nreturn NULL;\n}\nif (!(p1 = PyPoint_AsPoint(py_p1))) {\nreturn NULL;\n}\nif (!(p2 = PyPoint_AsPoint(py_p2))) {\nreturn NULL;\n}\nresult = distance(p1,p2);\nreturn Py_BuildValue("d", result);\n}\n在 Python 中可以像下面这样来使用这些函数：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('import sample\np1 = sample.Point(2,3)\np2 = sample.Point(4,5)\np1\n<capsule object "Point" at 0x1004ea330>')])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('p2\n<capsule object "Point" at 0x1005d1db0>')])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.distance(p1,p2)\n2.8284271247461903")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n胶囊和 C 指针类似。在内部，它们获取一个通用指针和一个名称，可以使用\nPyCapsule_New() 函数很容易的被创建。另外，一个可选的析构函数能被绑定到胶囊\n上，用来在胶囊对象被垃圾回收时释放底层的内存。\n要提取胶囊中的指针，可使用 PyCapsule_GetPointer() 函数并指定名称。如果提\n供的名称和胶囊不匹配或其他错误出现，那么就会抛出异常并返回 NULL。\n本节中，一对工具函数——PyPoint_FromPoint() 和 PyPoint_AsPoint() 被用来\n创建和从胶囊对象中提取 Point 实例。在任何扩展函数中，我们会使用这些函数而不是\n直接使用胶囊对象。这种设计使得我们可以很容易的应对将来对 Point 底下的包装的更\n改。例如，如果你决定使用另外一个胶囊了，那么只需要更改这两个函数即可。\n对于胶囊对象一个难点在于垃圾回收和内存管理。PyPoint_FromPoint() 函数接\n受一个 must_free 参数，用来指定当胶囊被销毁时底层 Point * 结构体是否应该被回\n收。在某些 C 代码中，归属问题通常很难被处理（比如一个 Point 结构体被嵌入到一个\n被单独管理的大结构体中）。程序员可以使用 extra 参数来控制，而不是单方面的决定\n垃圾回收。要注意的是和现有胶囊有关的析构器能使用 PyCapsule_SetDestructor()\n函数来更改。\n对于涉及到结构体的 C 代码而言，使用胶囊是一个比较合理的解决方案。例如，有\n时候你并不关心暴露结构体的内部信息或者将其转换成一个完整的扩展类型。通过使\n用胶囊，你可以在它上面放一个轻量级的包装器，然后将它传给其他的扩展函数。\n15.5 从扩展模块中定义和导出 C 的 API\n问题\n你有一个 C 扩展模块，在内部定义了很多有用的函数，你想将它们导出为一个公\n共的 C API 供其他地方使用。你想在其他扩展模块中使用这些函数，但是不知道怎样\n将它们链接起来，并且通过 C 编译器/链接器来做看上去特别复杂（或者不可能做到）。\n解决方案\n本节主要问题是如何处理 15.4 小节中提到的 Point 对象。仔细回一下，在 C 代码\n中包含了如下这些工具函数：\n/* Destructor function for points */\nstatic void del_Point(PyObject "),n("em",[e._v('obj) {\nfree(PyCapsule_GetPointer(obj,"Point"));\n}\n/')]),e._v(' Utility functions */\nstatic Point *PyPoint_AsPoint(PyObject *obj) {\nreturn (Point *) PyCapsule_GetPointer(obj, "Point");\n}\nstatic PyObject *PyPoint_FromPoint(Point '),n("em",[e._v('p, int must_free) {\nreturn PyCapsule_New(p, "Point", must_free ? del_Point : NULL);\n}\n现在的问题是怎样将 PyPoint_AsPoint() 和 Point_FromPoint() 函数作为 API\n导出，这样其他扩展模块能使用并链接它们，比如如果你有其他扩展也想使用包装的\nPoint 对象。\n要解决这个问题，首先要为 sample 扩展写个新的头文件名叫 pysample.h ，如下：\n/')]),e._v(" pysample.h "),n("em",[e._v('/\n#include "Python.h"\n#include "sample.h"\n#ifdef __cplusplus\nextern "C" {\n#endif\n/')]),e._v(" Public API Table */\ntypedef struct {\nPoint *(*aspoint)(PyObject *);\nPyObject *(*frompoint)(Point "),n("em",[e._v(", int);\n} _PointAPIMethods;\n#ifndef PYSAMPLE_MODULE\n/")]),e._v(" Method table in external module */\nstatic _PointAPIMethods "),n("em",[e._v("_point_api = 0;\n/")]),e._v(" Import the API table from sample */\nstatic int import_sample(void) {\n_point_api = (_PointAPIMethods "),n("em",[e._v(') PyCapsule_Import("sample._point_api",0);\nreturn (_point_api != NULL) ? 1 : 0;\n}\n/')]),e._v(" Macros to implement the programming interface "),n("em",[e._v("/\n#define PyPoint_AsPoint(obj) (_point_api->aspoint)(obj)\n#define PyPoint_FromPoint(obj) (_point_api->frompoint)(obj)\n#endif\n#ifdef __cplusplus\n}\n#endif\n这里最重要的部分是函数指针表 _PointAPIMethods . 它会在导出模块时被初始\n化，然后导入模块时被查找到。修改原始的扩展模块来填充表格并将它像下面这样导\n出：\n/")]),e._v(" pysample.c "),n("em",[e._v('/\n#include "Python.h"\n#define PYSAMPLE_MODULE\n#include "pysample.h"\n...\n/')]),e._v(" Destructor function for points */\nstatic void del_Point(PyObject "),n("em",[e._v('obj) {\nprintf("Deleting point\\n");\nfree(PyCapsule_GetPointer(obj,"Point"));\n}\n/')]),e._v(' Utility functions */\nstatic Point *PyPoint_AsPoint(PyObject *obj) {\nreturn (Point *) PyCapsule_GetPointer(obj, "Point");\n}\nstatic PyObject *PyPoint_FromPoint(Point '),n("em",[e._v('p, int free) {\nreturn PyCapsule_New(p, "Point", free ? del_Point : NULL);\n}\nstatic _PointAPIMethods _point_api = {\nPyPoint_AsPoint,\nPyPoint_FromPoint\n};\n...\n/')]),e._v(" Module initialization function */\nPyMODINIT_FUNC\nPyInit_sample(void) {\nPyObject *m;\nPyObject "),n("em",[e._v("py_point_api;\nm = PyModule_Create(&samplemodule);\nif (m == NULL)\nreturn NULL;\n/")]),e._v(" Add the Point C API functions */\npy_point_api = PyCapsule_New((void "),n("em",[e._v(') &_point_api, "sample._point_api",␣ , →NULL);\nif (py_point_api) {\nPyModule_AddObject(m, "_point_api", py_point_api);\n}\nreturn m;\n}\n最后，下面是一个新的扩展模块例子，用来加载并使用这些 API 函数：\n/')]),e._v(" ptexample.c "),n("em",[e._v("/\n/")]),e._v(" Include the header associated with the other module "),n("em",[e._v('/\n#include "pysample.h"\n/')]),e._v(" An extension function that uses the exported API */\nstatic PyObject *print_point(PyObject *self, PyObject *args) {\nPyObject *obj;\nPoint "),n("em",[e._v('p;\nif (!PyArg_ParseTuple(args,"O", &obj)) {\nreturn NULL;\n}\n/')]),e._v(" Note: This is defined in a different module "),n("em",[e._v('/\np = PyPoint_AsPoint(obj);\nif (!p) {\nreturn NULL;\n}\nprintf("%f %f\\n", p->x, p->y);\nreturn Py_BuildValue("");\n}\nstatic PyMethodDef PtExampleMethods[] = {\n{"print_point", print_point, METH_VARARGS, "output a point"},\n{ NULL, NULL, 0, NULL}\n};\nstatic struct PyModuleDef ptexamplemodule = {\nPyModuleDef_HEAD_INIT,\n"ptexample", /')]),e._v(" name of module "),n("em",[e._v('/\n"A module that imports an API", /')]),e._v(" Doc string (may be NULL) "),n("em",[e._v("/\n-1, /")]),e._v(" Size of per-interpreter state or -1 "),n("em",[e._v("/\nPtExampleMethods /")]),e._v(" Method table "),n("em",[e._v("/\n};\n/")]),e._v(" Module initialization function */\nPyMODINIT_FUNC\nPyInit_ptexample(void) {\nPyObject "),n("em",[e._v("m;\nm = PyModule_Create(&ptexamplemodule);\nif (m == NULL)\nreturn NULL;\n/")]),e._v(" Import sample, loading its API functions */\nif (!import_sample()) {\nreturn NULL;\n}\nreturn m;\n}\n编译这个新模块时，你甚至不需要去考虑怎样将函数库或代码跟其他模块链接起\n来。例如，你可以像下面这样创建一个简单的 setup.py 文件：")]),e._v(" "),n("h1",{attrs:{id:"setup-py-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setup-py-3"}},[e._v("#")]),e._v(" setup.py")]),e._v(" "),n("p",[e._v("from distutils.core import setup, Extension\nsetup(name='ptexample',\next_modules=[\nExtension('ptexample', ['ptexample.c'],\ninclude_dirs = [], # May need pysample.h directory\n) ] )\n如果一切正常，你会发现你的新扩展函数能和定义在其他模块中的 C API 函数一\n起运行的很好。")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('import sample\np1 = sample.Point(2,3)\np1\n<capsule object "Point *" at 0x1004ea330>')])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import ptexample\nptexample.print_point(p1)\n2.000000 3.000000")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n本节基于一个前提就是，胶囊对象能获取任何你想要的对象的指针。这样的话，定\n义模块会填充一个函数指针的结构体，创建一个指向它的胶囊，并在一个模块级属性中\n保存这个胶囊，例如 sample._point_api .\n其他模块能够在导入时获取到这个属性并提取底层的指针。事实上，Python 提供\n了 PyCapsule_Import() 工具函数，为了完成所有的步骤。你只需提供属性的名字即可\n（比如 sample._point_api），然后他就会一次性找到胶囊对象并提取出指针来。\n在将被导出函数变为其他模块中普通函数时，有一些 C 编程陷阱需要指出来。在\npysample.h 文件中，一个 _point_api 指针被用来指向在导出模块中被初始化的方法\n表。一个相关的函数 import_sample() 被用来指向胶囊导入并初始化这个指针。这个\n函数必须在任何函数被使用之前被调用。通常来讲，它会在模块初始化时被调用到。最\n后，C 的预处理宏被定义，被用来通过方法表去分发这些 API 函数。用户只需要使用\n这些原始函数名称即可，不需要通过宏去了解其他信息。\n最后，还有一个重要的原因让你去使用这个技术来链接模块——它非常简单并且\n可以使得各个模块很清晰的解耦。如果你不想使用本机的技术，那你就必须使用共享库\n的高级特性和动态加载器来链接模块。例如，将一个普通的 API 函数放入一个共享库\n并确保所有扩展模块链接到那个共享库。这种方法确实可行，但是它相对繁琐，特别是\n在大型系统中。本节演示了如何通过 Python 的普通导入机制和仅仅几个胶囊调用来将\n多个模块链接起来的魔法。对于模块的编译，你只需要定义头文件，而不需要考虑函数\n库的内部细节。\n更多关于利用 C API 来构造扩展模块的信息可以参考 Python 的文档\n15.6 从 C 语言中调用 Python 代码\n问题\n你想在 C 中安全的执行某个 Python 调用并返回结果给 C。例如，你想在 C 语言\n中使用某个 Python 函数作为一个回调。\n解决方案\n在 C 语言中调用 Python 非常简单，不过设计到一些小窍门。下面的 C 代码告诉\n你怎样安全的调用：\n#include <Python.h>\n/* Execute func(x,y) in the Python interpreter. The\narguments and return result of the function must\nbe Python floats */\ndouble call_func(PyObject *func, double x, double y) {\nPyObject *args;\nPyObject *kwargs;\nPyObject "),n("em",[e._v("result = 0;\ndouble retval;\n/")]),e._v(" Make sure we own the GIL "),n("em",[e._v("/\nPyGILState_STATE state = PyGILState_Ensure();\n/")]),e._v(" Verify that func is a proper callable "),n("em",[e._v('/\nif (!PyCallable_Check(func)) {\nfprintf(stderr,"call_func: expected a callable\\n");\ngoto fail;\n}\n/')]),e._v(" Build arguments "),n("em",[e._v('/\nargs = Py_BuildValue("(dd)", x, y);\nkwargs = NULL;\n/')]),e._v(" Call the function "),n("em",[e._v("/\nresult = PyObject_Call(func, args, kwargs);\nPy_DECREF(args);\nPy_XDECREF(kwargs);\n/")]),e._v(" Check for Python exceptions (if any) "),n("em",[e._v("/\nif (PyErr_Occurred()) {\nPyErr_Print();\ngoto fail;\n}\n/")]),e._v(" Verify the result is a float object "),n("em",[e._v('/\nif (!PyFloat_Check(result)) {\nfprintf(stderr,"call_func: callable didn\'t return a float\\n");\ngoto fail;\n}\n/')]),e._v(" Create the return value "),n("em",[e._v("/\nretval = PyFloat_AsDouble(result);\nPy_DECREF(result);\n/")]),e._v(" Restore previous GIL state and return "),n("em",[e._v("/\nPyGILState_Release(state);\nreturn retval;\nfail:\nPy_XDECREF(result);\nPyGILState_Release(state);\nabort(); // Change to something more appropriate\n}\n要使用这个函数，你需要获取传递过来的某个已存在 Python 调用的引用。有很多\n种方法可以让你这样做，比如将一个可调用对象传给一个扩展模块或直接写 C 代码从\n已存在模块中提取出来。\n下面是一个简单例子用来掩饰从一个嵌入的 Python 解释器中调用一个函数：\n#include <Python.h>\n/")]),e._v(" Definition of call_func() same as above "),n("em",[e._v("/ ... /")]),e._v(" Load a symbol from a module */\nPyObject *import_name(const char *modname, const char *symbol) {\nPyObject *u_name, "),n("em",[e._v("module;\nu_name = PyUnicode_FromString(modname);\nmodule = PyImport_Import(u_name);\nPy_DECREF(u_name);\nreturn PyObject_GetAttrString(module, symbol);\n}/")]),e._v(" Simple embedding example */\nint main() {\nPyObject "),n("em",[e._v("pow_func;\ndouble x;\nPy_Initialize();\n/")]),e._v(" Get a reference to the math.pow function "),n("em",[e._v('/\npow_func = import_name("math","pow");\n/')]),e._v(" Call it using our call_func() code "),n("em",[e._v('/\nfor (x = 0.0; x < 10.0; x += 0.1) {\nprintf("%0.2f %0.2f\\n", x, call_func(pow_func,x,2.0));\n}/')]),e._v(" Done "),n("em",[e._v("/\nPy_DECREF(pow_func);\nPy_Finalize();\nreturn 0; }\n要构建例子代码，你需要编译 C 并将它链接到 Python 解释器。下面的 Makefile\n可以教你怎样做（不过在你机器上面需要一些配置）。\nall::\ncc -g embed.c -I/usr/local/include/python3.3m "),n("br"),e._v("\n-L/usr/local/lib/python3.3/config-3.3m -lpython3.3m\n编译并运行会产生类似下面的输出：\n0.00 0.00\n0.10 0.01\n0.20 0.04\n0.30 0.09\n0.40 0.16\n...\n下面是一个稍微不同的例子，展示了一个扩展函数，它接受一个可调用对象和其他\n参数，并将它们传递给 call_func() 来做测试：\n/")]),e._v(' Extension function for testing the C-Python callback */\nPyObject *py_call_func(PyObject *self, PyObject *args) {\nPyObject *func;\ndouble x, y, result;\nif (!PyArg_ParseTuple(args,"Odd", &func,&x,&y)) {\nreturn NULL;\n}\nresult = call_func(func, x, y);\nreturn Py_BuildValue("d", result);\n}\n使用这个扩展函数，你要像下面这样测试它：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sample\ndef add(x,y):\n... return x+y\n...")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.call_func(add,3,4)\n7.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n如果你在 C 语言中调用 Python，要记住最重要的是 C 语言会是主体。也就是说，\nC 语言负责构造参数、调用 Python 函数、检查异常、检查类型、提取返回值等。\n作为第一步，你必须先有一个表示你将要调用的 Python 可调用对象。这可以是一\n个函数、类、方法、内置方法或其他任意实现了 "),n("strong",[e._v("call")]),e._v("() 操作的东西。为了确保是\n可调用的，可以像下面的代码这样利用 PyCallable_Check() 做检查：\ndouble call_func(PyObject "),n("em",[e._v("func, double x, double y) {\n...\n/")]),e._v(' Verify that func is a proper callable */\nif (!PyCallable_Check(func)) {\nfprintf(stderr,"call_func: expected a callable\\n");\ngoto fail;\n}\n...\n在 C 代码里处理错误你需要格外的小心。一般来讲，你不能仅仅抛出一个 Python\n异常。错误应该使用 C 代码方式来被处理。在这里，我们打算将对错误的控制传给一\n个叫 abort() 的错误处理器。它会结束掉整个程序，在真实环境下面你应该要处理的\n更加优雅些（返回一个状态码）。你要记住的是在这里 C 是主角，因此并没有跟抛出异\n常相对应的操作。错误处理是你在编程时必须要考虑的事情。\n调用一个函数相对来讲很简单——只需要使用 PyObject_Call() ，传一个可调用\n对象给它、一个参数元组和一个可选的关键字字典。要构建参数元组或字典，你可以使\n用 Py_BuildValue() , 如下：\ndouble call_func(PyObject *func, double x, double y) {\nPyObject *args;\nPyObject '),n("em",[e._v("kwargs;\n... /")]),e._v(" Build arguments "),n("em",[e._v('/\nargs = Py_BuildValue("(dd)", x, y);\nkwargs = NULL;\n/')]),e._v(" Call the function "),n("em",[e._v("/\nresult = PyObject_Call(func, args, kwargs);\nPy_DECREF(args);\nPy_XDECREF(kwargs);\n...\n如果没有关键字参数，你可以传递 NULL。当你要调用函数时，需要确保使用了\nPy_DECREF() 或者 Py_XDECREF() 清理参数。第二个函数相对安全点，因为它允许传递\nNULL 指针（直接忽略它），这也是为什么我们使用它来清理可选的关键字参数。\n调用万 Python 函数之后，你必须检查是否有异常发生。PyErr_Occurred() 函数\n可被用来做这件事。对对于异常的处理就有点麻烦了，由于是用 C 语言写的，你没有\n像 Python 那么的异常机制。因此，你必须要设置一个异常状态码，打印异常信息或其\n他相应处理。在这里，我们选择了简单的 abort() 来处理。另外，传统 C 程序员可能\n会直接让程序奔溃。\n... /")]),e._v(" Check for Python exceptions (if any) */\nif (PyErr_Occurred()) {\nPyErr_Print();\ngoto fail;\n}...\nfail:\nPyGILState_Release(state);\nabort();\n从调用 Python 函数的返回值中提取信息通常要进行类型检查和提取值。要这样做\n的话，你必须使用 Python 对象层中的函数。在这里我们使用了 PyFloat_Check() 和\nPyFloat_AsDouble() 来检查和提取 Python 浮点数。\n最后一个问题是对于 Python 全局锁的管理。在 C 语言中访问 Python 的时候，你\n需要确保 GIL 被正确的获取和释放了。不然的话，可能会导致解释器返回错误数据或\n者直接奔溃。调用 PyGILState_Ensure() 和 PyGILState_Release() 可以确保一切都\n能正常。\ndouble call_func(PyObject "),n("em",[e._v("func, double x, double y) {\n...\ndouble retval;\n/")]),e._v(" Make sure we own the GIL "),n("em",[e._v("/\nPyGILState_STATE state = PyGILState_Ensure();\n... /")]),e._v(" Code that uses Python C API functions "),n("em",[e._v("/ ... /")]),e._v(' Restore previous GIL state and return */\nPyGILState_Release(state);\nreturn retval;\nfail:\nPyGILState_Release(state);\nabort();\n}\n一旦返回，PyGILState_Ensure() 可以确保调用线程独占 Python 解释器。就算 C\n代码运行于另外一个解释器不知道的线程也没事。这时候，C 代码可以自由的使用任何\n它想要的 Python C-API 函数。调用成功后，PyGILState_Release() 被用来讲解释器恢\n复到原始状态。\n要 注 意 的 是 每 一 个 PyGILState_Ensure() 调 用 必 须 跟 着 一 个 匹 配 的\nPyGILState_Release() 调用——即便有错误发生。在这里，我们使用一个 goto 语\n句看上去是个可怕的设计，但是实际上我们使用它来讲控制权转移给一个普通的 exit\n块来执行相应的操作。在 fail: 标签后面的代码和 Python 的 fianl: 块的用途是一样\n的。\n如果你使用所有这些约定来编写 C 代码，包括对 GIL 的管理、异常检查和错误检\n查，你会发现从 C 语言中调用 Python 解释器是可靠的——就算再复杂的程序，用到了\n高级编程技巧比如多线程都没问题。\n15.7 从 C 扩展中释放全局锁\n问题\n你想让 C 扩展代码和 Python 解释器中的其他进程一起正确的执行，那么你就需\n要去释放并重新获取全局解释器锁（GIL）。\n解决方案\n在 C 扩展代码中，GIL 可以通过在代码中插入下面这样的宏来释放和重新获取：\n#include "Python.h"\n...\nPyObject *pyfunc(PyObject *self, PyObject '),n("em",[e._v("args) {\n...\nPy_BEGIN_ALLOW_THREADS\n// Threaded C code. Must not use Python API functions\n...\nPy_END_ALLOW_THREADS\n...\nreturn result;\n}\n讨论\n只有当你确保没有 Python C API 函数在 C 中执行的时候你才能安全的释放 GIL。\nGIL 需要被释放的常见的场景是在计算密集型代码中需要在 C 数组上执行计算（比如\n在 numpy 中）或者是要执行阻塞的 I/O 操作时（比如在一个文件描述符上读取或写入\n时）。\n当 GIL 被 释 放 后， 其 他 Python 线 程 才 被 允 许 在 解 释 器 中 执 行。\nPy_END_ALLOW_THREADS 宏会阻塞执行直到调用线程重新获取了 GIL。\n15.8 C 和 Python 中的线程混用\n问题\n你有一个程序需要混合使用 C、Python 和线程，有些线程是在 C 中创建的，超出\n了 Python 解释器的控制范围。并且一些线程还使用了 Python C API 中的函数。\n解决方案\n如果你想将 C、Python 和线程混合在一起，你需要确保正确的初始化和管理 Python\n的全局解释器锁（GIL）。要想这样做，可以将下列代码放到你的 C 代码中并确保它在\n任何线程被创建之前被调用。\n#include <Python.h>\n...\nif (!PyEval_ThreadsInitialized()) {\nPyEval_InitThreads();\n}\n...\n对于任何调用 Python 对象或 Python C API 的 C 代码，确保你首先已经正确地获\n取和释放了 GIL。这可以用 PyGILState_Ensure() 和 PyGILState_Release() 来做到，\n如下所示：\n... /")]),e._v(" Make sure we own the GIL "),n("em",[e._v("/\nPyGILState_STATE state = PyGILState_Ensure();\n/")]),e._v(" Use functions in the interpreter "),n("em",[e._v("/ ... /")]),e._v(" Restore previous GIL state and return "),n("em",[e._v("/\nPyGILState_Release(state);\n...\n每次调用 PyGILState_Ensure() 都要相应的调用 PyGILState_Release() .\n讨论\n在涉及到 C 和 Python 的高级程序中，很多事情一起做是很常见的——可能是对\nC、Python、C 线程、Python 线程的混合使用。只要你确保解释器被正确的初始化，并\n且涉及到解释器的 C 代码执行了正确的 GIL 管理，应该没什么问题。\n要注意的是调用 PyGILState_Ensure() 并不会立刻抢占或中断解释器。如果有其\n他代码正在执行，这个函数被中断知道那个执行代码释放掉 GIL。在内部，解释器会执\n行周期性的线程切换，因此如果其他线程在执行，调用者最终还是可以运行的（尽管可\n能要先等一会）。\n15.9 用 WSIG 包装 C 代码\n问题\n你想让你写的 C 代码作为一个 C 扩展模块来访问，想通过使用 Swig 包装生成器\n来完成。\n解决方案\nSwig 通过解析 C 头文件并自动创建扩展代码来操作。要使用它，你先要有一个 C\n头文件。例如，我们示例的头文件如下：\n/")]),e._v(" sample.h */\n#include <math.h>\nextern int gcd(int, int);\nextern int in_mandel(double x0, double y0, int n);\nextern int divide(int a, int b, int *remainder);\nextern double avg(double *a, int n);\ntypedef struct Point {\ndouble x,y;\n} Point;\nextern double distance(Point *p1, Point "),n("em",[e._v('p2);\n一旦你有了这个头文件，下一步就是编写一个 Swig”接口”文件。按照约定，这\n些文件以”.i”后缀并且类似下面这样：\n// sample.i - Swig interface\n%module sample\n%{\n#include "sample.h"\n%}\n/')]),e._v(" Customizations "),n("em",[e._v("/\n%extend Point {\n/")]),e._v(" Constructor for Point objects */\nPoint(double x, double y) {\nPoint *p = (Point "),n("em",[e._v(") malloc(sizeof(Point));\np->x = x;\np->y = y;\nreturn p;\n};\n};\n/")]),e._v(" Map int *remainder as an output argument */\n%include typemaps.i\n%apply int "),n("em",[e._v("OUTPUT { int * remainder };\n/")]),e._v(' Map the argument pattern (double *a, int n) to arrays */\n%typemap(in) (double *a, int n)(Py_buffer view) {\nview.obj = NULL;\nif (PyObject_GetBuffer($input, &view, PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT)␣ , →== -1) {\nSWIG_fail;\n}\nif (strcmp(view.format,"d") != 0) {\nPyErr_SetString(PyExc_TypeError, "Expected an array of doubles");\nSWIG_fail;\n}\n$1 = (double *) view.buf;\n$2 = view.len / sizeof(double);\n}\n%typemap(freearg) (double '),n("em",[e._v("a, int n) {\nif (view$argnum.obj) {\nPyBuffer_Release(&view$argnum);\n} }\n/")]),e._v(" C declarations to be included in the extension module */\nextern int gcd(int, int);\nextern int in_mandel(double x0, double y0, int n);\nextern int divide(int a, int b, int *remainder);\nextern double avg(double *a, int n);\ntypedef struct Point {\ndouble x,y;\n} Point;\nextern double distance(Point *p1, Point *p2);\n一旦你写好了接口文件，就可以在命令行工具中调用 Swig 了：\nbash % swig -python -py3 sample.i\nbash %\nswig 的输出就是两个文件，sample_wrap.c 和 sample.py。后面的文件就是用户需\n要导入的。而 sample_wrap.c 文件是需要被编译到名叫 _sample 的支持模块的 C 代\n码。这个可以通过跟普通扩展模块一样的技术来完成。例如，你创建了一个如下所示的\nsetup.py 文件：")]),e._v(" "),n("h1",{attrs:{id:"setup-py-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setup-py-4"}},[e._v("#")]),e._v(" setup.py")]),e._v(" "),n("p",[e._v("from distutils.core import setup, Extension\nsetup(name='sample',\npy_modules=['sample.py'],\next_modules=[\nExtension('_sample', ['sample_wrap.c'],\ninclude_dirs = [],\ndefine_macros = [],\nundef_macros = [],\nlibrary_dirs = [],\nlibraries = ['sample'] ) ] )\n要编译和测试，在 setup.py 上执行 python3，如下：\nbash % python3 setup.py build_ext --inplace\nrunning build_ext\nbuilding '_sample' extension\ngcc -fno-strict-aliasing -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes\n-I/usr/local/include/python3.3m -c sample_wrap.c\n-o build/temp.macosx-10.6-x86_64-3.3/sample_wrap.o\nsample_wrap.c: In function ‘SWIG_InitializeModule’:\nsample_wrap.c:3589: warning: statement with no effect\ngcc -bundle -undefined dynamic_lookup build/temp.macosx-10.6-x86_64-3.3/\n,\n→sample.o\nbuild/temp.macosx-10.6-x86_64-3.3/sample_wrap.o -o _sample.so -lsample\nbash %\n如果一切正常的话，你会发现你就可以很方便的使用生成的 C 扩展模块了。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sample\nsample.gcd(42,8) 2\nsample.divide(42,8)\n[5, 2]")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p1 = sample.Point(2,3)\np2 = sample.Point(4,5)\nsample.distance(p1,p2)\n2.8284271247461903")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p1.x\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p1.y\n3.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import array\na = array.array('d',[1,2,3])\nsample.avg(a)\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('讨论\nSwig 是 Python 历史中构建扩展模块的最古老的工具之一。Swig 能自动化很多包\n装生成器的处理。\n所有 Swig 接口都以类似下面这样的为开头：\n%module sample\n%{\n#include "sample.h"\n%}\n这个仅仅只是声明了扩展模块的名称并指定了 C 头文件，为了能让编译通过必须\n要包含这些头文件（位于%{ 和%} 的代码），将它们之间复制粘贴到输出代码中，这也\n是你要放置所有包含文件和其他编译需要的定义的地方。\nSwig 接口的底下部分是一个 C 声明列表，你需要在扩展中包含它。这通常从头文\n件中被复制。在我们的例子中，我们仅仅像下面这样直接粘贴在头文件中：\n%module sample\n%{\n#include "sample.h"\n%}...\nextern int gcd(int, int);\nextern int in_mandel(double x0, double y0, int n);\nextern int divide(int a, int b, int *remainder);\nextern double avg(double *a, int n);\ntypedef struct Point {\ndouble x,y;\n} Point;\nextern double distance(Point *p1, Point *p2);\n有一点需要强调的是这些声明会告诉 Swig 你想要在 Python 模块中包含哪些东西。\n通常你需要编辑这个声明列表或相应的修改下它。例如，如果你不想某些声明被包含进\n来，你要将它从声明列表中移除掉。\n使用 Swig 最复杂的地方是它能给 C 代码提供大量的自定义操作。这个主题太大，\n这里无法展开，但是我们在本节还剩展示了一些自定义的东西。\n第一个自定义是 %extend 指令允许方法被附加到已存在的结构体和类定义上。我\n例子中，这个被用来添加一个 Point 结构体的构造器方法。它可以让你像下面这样使用\n这个结构体：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("p1 = sample.Point(2,3)")])])])]),e._v(" "),n("p",[e._v("如果略过的话，Point 对象就必须以更加复杂的方式来被创建：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"usage-if-extend-point-is-omitted"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usage-if-extend-point-is-omitted"}},[e._v("#")]),e._v(" Usage if %extend Point is omitted")]),e._v(" "),n("p",[e._v("p1 = sample.Point()\np1.x = 2.0\np1.y = 3\n第二个自定义涉及到对 typemaps.i 库的引入和 %apply 指令，它会指示 Swig 参\n数签名 int *remainder 要被当做是输出值。这个实际上是一个模式匹配规则。在接下\n来的所有声明中，任何时候只要碰上 int *remainder ，他就会被作为输出。这个自定\n义方法可以让 divide() 函数返回两个值。")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.divide(42,8)\n[5, 2]")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("最后一个涉及到 %typemap 指令的自定义可能是这里展示的最高级的特性了。一\n个 typemap 就是一个在输入中特定参数模式的规则。在本节中，一个 typemap 被定义\n为匹配参数模式 (double *a, int n) . 在 typemap 内部是一个 C 代码片段，它告诉\nSwig 怎样将一个 Python 对象转换为相应的 C 参数。本节代码使用了 Python 的缓存\n协议去匹配任何看上去类似双精度数组的输入参数（比如 NumPy 数组、array 模块创\n建的数组等），更多请参考 15.3 小节。\n在 typemap 代码内部，$1 和 $2 这样的变量替换会获取 typemap 模式的 C 参数\n值（比如 $1 映射为 double *a ）。$input 指向一个作为输入的 PyObject * 参数，而\n$argnum 就代表参数的个数。\n编写和理解 typemaps 是使用 Swig 最基本的前提。不仅是说代码更神秘，而且你\n需要理解 Python C API 和 Swig 和它交互的方式。Swig 文档有更多这方面的细节，可\n以参考下。\n不过，如果你有大量的 C 代码需要被暴露为扩展模块。Swig 是一个非常强大的工\n具。关键点在于 Swig 是一个处理 C 声明的编译器，通过强大的模式匹配和自定义组\n件，可以让你更改声明指定和类型处理方式。更多信息请去查阅 Swig 网站 ，还有 特\n定于 Python 的相关文档\n15.10 用 Cython 包装 C 代码\n问题\n你想使用 Cython 来创建一个 Python 扩展模块，用来包装某个已存在的 C 函数\n库。\n解决方案\n使用 Cython 构建一个扩展模块看上去很手写扩展有些类似，因为你需要创建很多\n包装函数。不过，跟前面不同的是，你不需要在 C 语言中做这些——代码看上去更像\n是 Python。\n作为准备，假设本章介绍部分的示例代码已经被编译到某个叫 libsample 的 C 函\n数库中了。首先创建一个名叫 csample.pxd 的文件，如下所示：")]),e._v(" "),n("h1",{attrs:{id:"csample-pxd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#csample-pxd"}},[e._v("#")]),e._v(" csample.pxd")]),e._v(" "),n("h1",{attrs:{id:"-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[e._v("#")])]),e._v(" "),n("h1",{attrs:{id:"declarations-of-external-c-functions-and-structures"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#declarations-of-external-c-functions-and-structures"}},[e._v("#")]),e._v(' Declarations of "external" C functions and structures')]),e._v(" "),n("p",[e._v('cdef extern from "sample.h":\nint gcd(int, int)\nbint in_mandel(double, double, int)\nint divide(int, int, int *)\ndouble avg(double *, int) nogil\nctypedef struct Point:\ndouble x\ndouble y\ndouble distance(Point *, Point *)\n这个文件在 Cython 中的作用就跟 C 的头文件一样。初始声明 cdef extern from\n"sample.h" 指定了所学的 C 头文件。接下来的声明都是来自于那个头文件。文件名是\ncsample.pxd ，而不是 sample.pxd ——这点很重要。\n下一步，创建一个名为 sample.pyx 的问题。该文件会定义包装器，用来桥接 Python\n解释器到 csample.pxd 中声明的 C 代码。')]),e._v(" "),n("h1",{attrs:{id:"sample-pyx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sample-pyx"}},[e._v("#")]),e._v(" sample.pyx")]),e._v(" "),n("h1",{attrs:{id:"import-the-low-level-c-declarations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#import-the-low-level-c-declarations"}},[e._v("#")]),e._v(" Import the low-level C declarations")]),e._v(" "),n("p",[e._v("cimport csample")]),e._v(" "),n("h1",{attrs:{id:"import-some-functionality-from-python-and-the-c-stdlib"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#import-some-functionality-from-python-and-the-c-stdlib"}},[e._v("#")]),e._v(" Import some functionality from Python and the C stdlib")]),e._v(" "),n("p",[e._v("from cpython.pycapsule cimport *\nfrom libc.stdlib cimport malloc, free")]),e._v(" "),n("h1",{attrs:{id:"wrappers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wrappers"}},[e._v("#")]),e._v(" Wrappers")]),e._v(" "),n("p",[e._v("def gcd(unsigned int x, unsigned int y):\nreturn csample.gcd(x, y)\ndef in_mandel(x, y, unsigned int n):\nreturn csample.in_mandel(x, y, n)\ndef divide(x, y):\ncdef int rem\nquot = csample.divide(x, y, &rem)\nreturn quot, rem\ndef avg(double[:] a):\ncdef:\nint sz\ndouble result\nsz = a.size\nwith nogil:\nresult = csample.avg(<double *> &a[0], sz)\nreturn result")]),e._v(" "),n("h1",{attrs:{id:"destructor-for-cleaning-up-point-objects"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#destructor-for-cleaning-up-point-objects"}},[e._v("#")]),e._v(" Destructor for cleaning up Point objects")]),e._v(" "),n("p",[e._v('cdef del_Point(object obj):\npt = <csample.Point *> PyCapsule_GetPointer(obj,"Point")\nfree(<void *> pt)')]),e._v(" "),n("h1",{attrs:{id:"create-a-point-object-and-return-as-a-capsule"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-point-object-and-return-as-a-capsule"}},[e._v("#")]),e._v(" Create a Point object and return as a capsule")]),e._v(" "),n("p",[e._v("def Point(double x,double y):\ncdef csample.Point *p p = <csample.Point *> malloc(sizeof(csample.Point))\nif p == NULL:\nraise MemoryError(\"No memory to make a Point\") p.x = x p.y = y\nreturn PyCapsule_New(<void *>p,\"Point\",<PyCapsule_Destructor>del_Point)\ndef distance(p1, p2):\npt1 = <csample.Point *> PyCapsule_GetPointer(p1,\"Point\")\npt2 = <csample.Point *> PyCapsule_GetPointer(p2,\"Point\")\nreturn csample.distance(pt1,pt2)\n该文件更多的细节部分会在讨论部分详细展开。最后，为了构建扩展模块，像下面\n这样创建一个 setup.py 文件：\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\next_modules = [\nExtension('sample', ['sample.pyx'],\nlibraries=['sample'],\nlibrary_dirs=['.'])]\nsetup(\nname = 'Sample extension module',\ncmdclass = {'build_ext': build_ext},\next_modules = ext_modules\n)\n要构建我们测试的目标模块，像下面这样做：\nbash % python3 setup.py build_ext --inplace\nrunning build_ext\ncythoning sample.pyx to sample.c\nbuilding 'sample' extension\ngcc -fno-strict-aliasing -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes\n-I/usr/local/include/python3.3m -c sample.c -o build/temp.macosx-10.6-x86_64-3.3/sample.o\ngcc -bundle -undefined dynamic_lookup build/temp.macosx-10.6-x86_64-3.3/ , →sample.o -L. -lsample -o sample.so\nbash %\n如果一切顺利的话，你应该有了一个扩展模块 sample.so ，可在下面例子中使用：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sample\nsample.gcd(42,10) 2\nsample.in_mandel(1,1,400)\nFalse")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.in_mandel(0,0,400)\nTrue")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.divide(42,10)\n(4, 2)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("import array\na = array.array('d',[1,2,3])\nsample.avg(a)\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('p1 = sample.Point(2,3)\np2 = sample.Point(4,5)\np1\n<capsule object "Point" at 0x1005d1e70>')])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v('p2\n<capsule object "Point" at 0x1005d1ea0>')])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.distance(p1,p2)\n2.8284271247461903")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n本节包含了很多前面所讲的高级特性，包括数组操作、包装隐形指针和释放 GIL。\n每一部分都会逐个被讲述到，但是我们最好能复习一下前面几小节。在顶层，使用\nCython 是基于 C 之上。.pxd 文件仅仅只包含 C 定义（类似.h 文件），.pyx 文件包含\n了实现（类似.c 文件）。cimport 语句被 Cython 用来导入.pxd 文件中的定义。它跟使\n用普通的加载 Python 模块的导入语句是不同的。\n尽管 .pxd 文件包含了定义，但它们并不是用来自动创建扩展代码的。因此，你还\n是要写包装函数。例如，就算 csample.pxd 文件声明了 int gcd(int, int) 函数，你\n仍然需要在 sample.pyx 中为它写一个包装函数。例如：\ncimport csample\ndef gcd(unsigned int x, unsigned int y):\nreturn csample.gcd(x,y)\n对于简单的函数，你并不需要去做太多的时。Cython 会生成包装代码来正确的转\n换参数和返回值。绑定到属性上的 C 数据类型是可选的。不过，如果你包含了它们，你\n可以另外做一些错误检查。例如，如果有人使用负数来调用这个函数，会抛出一个异常：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v('sample.gcd(-10,2)\nTraceback (most recent call last):\nFile "'),n("stdin",[e._v('", line 1, in '),n("module",[e._v('\nFile "sample.pyx", line 7, in sample.gcd (sample.c:1284)\ndef gcd(unsigned int x,unsigned int y):\nOverflowError: can\'t convert negative value to unsigned int')])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('如果你想对包装函数做另外的检查，只需要使用另外的包装代码。例如：\ndef gcd(unsigned int x, unsigned int y):\nif x <= 0:\nraise ValueError("x must be > 0")\nif y <= 0:\nraise ValueError("y must be > 0")\nreturn csample.gcd(x,y)\n在 csample.pxd 文件中的 ‘‘in_mandel()‘‘ 声明有个很有趣但是比较难理解的定义。\n在这个文件中，函数被声明为然后一个 bint 而不是一个 int。它会让函数创建一个正确\n的 Boolean 值而不是简单的整数。因此，返回值 0 表示 False 而 1 表示 True。 在 Cython 包装器中，你可以选择声明 C 数据类型，也可以使用所有的常见 Python\n对象。对于 divide() 的包装器展示了这样一个例子，同时还有如何去处理一个指针参\n数。\ndef divide(x,y):\ncdef int rem\nquot = csample.divide(x,y,&rem)\nreturn quot, rem\n在这里，rem 变量被显示的声明为一个 C 整型变量。当它被传入 divide() 函数的\n时候，&rem 创建一个跟 C 一样的指向它的指针。avg() 函数的代码演示了 Cython 更\n高级的特性。首先 def avg(double[:] a) 声明了 avg() 接受一个一维的双精度内存\n视图。最惊奇的部分是返回的结果函数可以接受任何兼容的数组对象，包括被 numpy\n创建的。例如：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import array\na = array.array('d',[1,2,3])\nimport numpy\nb = numpy.array([1., 2., 3.])\nimport sample\nsample.avg(a)\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.avg(b)\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("在此包装器中，a.size0 和 &a[0] 分别引用数组元素个数和底层指针。语法 <double\n*> &a[0] 教你怎样将指针转换为不同的类型。前提是 C 中的 avg() 接受一个正确类型\n的指针。参考下一节关于 Cython 内存视图的更高级讲述。\n除了处理通常的数组外，avg() 的这个例子还展示了如何处理全局解释器锁。语句\nwith nogil: 声明了一个不需要 GIL 就能执行的代码块。在这个块中，不能有任何的\n普通 Python 对象——只能使用被声明为 cdef 的对象和函数。另外，外部函数必须现\n实的声明它们能不依赖 GIL 就能执行。因此，在 csample.pxd 文件中，avg() 被声明为\ndouble avg(double *, int) nogil . 对 Point 结构体的处理是一个挑战。本节使用胶囊对象将 Point 对象当做隐形指针\n来处理，这个在 15.4 小节介绍过。要这样做的话，底层 Cython 代码稍微有点复杂。首\n先，下面的导入被用来引入 C 函数库和 Python C API 中定义的函数：\nfrom cpython.pycapsule cimport *\nfrom libc.stdlib cimport malloc, free\n函数 del_Point() 和 Point() 使用这个功能来创建一个胶囊对象，它会包装\n一个 Point * 指针。cdef del_Point() 将 del_Point() 声明为一个函数，只能通过\nCython 访问，而不能从 Python 中访问。因此，这个函数对外部是不可见的——它\n被用来当做一个回调函数来清理胶囊分配的内存。函数调用比如 PyCapsule_New() 、\nPyCapsule_GetPointer() 直接来自 Python C API 并且以同样的方式被使用。\ndistance 函数从 Point() 创建的胶囊对象中提取指针。这里要注意的是你不需要\n担心异常处理。如果一个错误的对象被传进来，PyCapsule_GetPointer() 会抛出一个\n异常，但是 Cython 已经知道怎么查找到它，并将它从 distance() 传递出去。\n处理 Point 结构体一个缺点是它的实现是不可见的。你不能访问任何属性来查看它\n的内部。这里有另外一种方法去包装它，就是定义一个扩展类型，如下所示：")]),e._v(" "),n("h1",{attrs:{id:"sample-pyx-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sample-pyx-2"}},[e._v("#")]),e._v(" sample.pyx")]),e._v(" "),n("p",[e._v("cimport csample\nfrom libc.stdlib cimport malloc, free\n...\ncdef class Point:\ncdef csample.Point *_c_point\ndef "),n("strong",[e._v("cinit")]),e._v("(self, double x, double y):\nself._c_point = <csample.Point *> malloc(sizeof(csample.Point))\nself._c_point.x = x\nself._c_point.y = y\ndef "),n("strong",[e._v("dealloc")]),e._v("(self):\nfree(self._c_point)\nproperty x:\ndef "),n("strong",[e._v("get")]),e._v("(self):\nreturn self._c_point.x\ndef "),n("strong",[e._v("set")]),e._v("(self, value):\nself._c_point.x = value\nproperty y:\ndef "),n("strong",[e._v("get")]),e._v("(self):\nreturn self._c_point.y\ndef "),n("strong",[e._v("set")]),e._v("(self, value):\nself._c_point.y = value\ndef distance(Point p1, Point p2):\nreturn csample.distance(p1._c_point, p2._c_point)\n在这里，cdif 类 Point 将 Point 声明为一个扩展类型。类属性 cdef csample.Point\n*_c_point 声明了一个实例变量，拥有一个指向底层 Point 结构体的指针。"),n("strong",[e._v("cinit")]),e._v("()\n和 "),n("strong",[e._v("dealloc")]),e._v("() 方法通过 malloc() 和 free() 创建并销毁底层 C 结构体。x 和 y\n属性的声明让你获取和设置底层结构体的属性值。distance() 的包装器还可以被修改，\n使得它能接受 Point 扩展类型实例作为参数，而传递底层指针给 C 函数。\n做了这个改变后，你会发现操作 Point 对象就显得更加自然了：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sample\np1 = sample.Point(2,3)\np2 = sample.Point(4,5)\np1\n<sample.Point object at 0x100447288>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p2\n<sample.Point object at 0x1004472a0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p1.x\n2.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("p1.y\n3.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.distance(p1,p2)\n2.8284271247461903")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("本节已经演示了很多 Cython 的核心特性，你可以以此为基准来构建更多更高级的\n包装。不过，你最好先去阅读下官方文档来了解更多信息。\n接下来几节还会继续演示一些 Cython 的其他特性。\n15.11 用 Cython 写高性能的数组操作\n问题\n你要写高性能的操作来自 NumPy 之类的数组计算函数。你已经知道了 Cython 这\n样的工具会让它变得简单，但是并不确定该怎样去做。\n解决方案\n作为一个例子，下面的代码演示了一个 Cython 函数，用来修整一个简单的一维双\n精度浮点数数组中元素的值。")]),e._v(" "),n("h1",{attrs:{id:"sample-pyx-cython"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sample-pyx-cython"}},[e._v("#")]),e._v(" sample.pyx (Cython)")]),e._v(" "),n("p",[e._v("cimport cython\n@cython.boundscheck(False)\n@cython.wraparound(False)\ncpdef clip(double[:] a, double min, double max, double[:] out):\n'''\nClip the values in a to be between min and max. Result in out\n'''\nif min > max:\nraise ValueError(\"min must be <= max\")\nif a.shape[0] != out.shape[0]:\nraise ValueError(\"input and output arrays must be the same size\")\nfor i in range(a.shape[0]):\nif a[i] < min:\nout[i] = min\nelif a[i] > max:\nout[i] = max\nelse:\nout[i] = a[i]\n要编译和构建这个扩展，你需要一个像下面这样的 setup.py 文件（使用 python3\nsetup.py build_ext --inplace 来构建它）：\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\next_modules = [\nExtension('sample', ['sample.pyx'])\n]\nsetup(\nname = 'Sample app',\ncmdclass = {'build_ext': build_ext},\next_modules = ext_modules\n)\n你会发现结果函数确实对数组进行的修正，并且可以适用于多种类型的数组对象。\n例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"array-module-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-module-example"}},[e._v("#")]),e._v(" array module example")]),e._v(" "),n("p",[e._v("import sample\nimport array\na = array.array('d',[1,-3,4,7,2,0])\na\narray('d', [1.0, -3.0, 4.0, 7.0, 2.0, 0.0])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.clip(a,1,4,a)\na\narray('d', [1.0, 1.0, 4.0, 4.0, 2.0, 1.0])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"numpy-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#numpy-example"}},[e._v("#")]),e._v(" numpy example")]),e._v(" "),n("p",[e._v("import numpy\nb = numpy.random.uniform(-10,10,size=1000000)\nb\narray([-9.55546017, 7.45599334, 0.69248932, ..., 0.69583148,\n-3.86290931, 2.37266888])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("c = numpy.zeros_like(b)\nc\narray([ 0., 0., 0., ..., 0., 0., 0.])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sample.clip(b,-5,5,c)\nc\narray([-5. , 5. , 0.69248932, ..., 0.69583148,\n-3.86290931, 2.37266888])")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("min(c)\n-5.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("max(c)\n5.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("你还会发现运行生成结果非常的快。下面我们将本例和 numpy 中的已存在的\nclip() 函数做一个性能对比：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("timeit('numpy.clip(b,-5,5,c)','from "),n("strong",[e._v("main")]),e._v(" import b,c,numpy', , →number=1000)\n8.093049556000551")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("timeit('sample.clip(b,-5,5,c)','from "),n("strong",[e._v("main")]),e._v(" import b,c,sample',\n... number=1000)\n3.760528204000366")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('正如你看到的，它要快很多——这是一个很有趣的结果，因为 NumPy 版本的核心\n代码还是用 C 语言写的。\n讨论\n本节利用了 Cython 类型的内存视图，极大的简化了数组的操作。cpdef clip()\n声明了 clip() 同时为 C 级别函数以及 Python 级别函数。在 Cython 中，这个是很重\n要的，因为它表示此函数调用要比其他 Cython 函数更加高效（比如你想在另外一个不\n同的 Cython 函数中调用 clip()）。\n类型参数 double[:] a 和 double[:] out 声明这些参数为一维的双精度数组。作\n为输入，它们会访问任何实现了内存视图接口的数组对象，这个在 PEP 3118 有详细定\n义。包括了 NumPy 中的数组和内置的 array 库。\n当你编写生成结果为数组的代码时，你应该遵循上面示例那样设置一个输出参\n数。它会将创建输出数组的责任给调用者，不需要知道你操作的数组的具体细节（它\n仅仅假设数组已经准备好了，只需要做一些小的检查比如确保数组大小是正确的）。\n在像 NumPy 之类的库中，使用 numpy.zeros() 或 numpy.zeros_like() 创建输出数\n组相对而言比较容易。另外，要创建未初始化数组，你可以使用 numpy.empty() 或\nnumpy.empty_like() . 如果你想覆盖数组内容作为结果的话选择这两个会比较快点。\n你你的函数实现中，你只需要简单的通过下标运算和数组查找（比如 a[i],out[i] 等）\n来编写代码操作数组。Cython 会负责为你生成高效的代码。\nclip() 定义之前的两个装饰器可以优化下性能。@cython.boundscheck(False) 省\n去了所有的数组越界检查，当你知道下标访问不会越界的时候可以使用它。@cython.\nwraparound(False) 消除了相对数组尾部的负数下标的处理（类似 Python 列表）。引\n入这两个装饰器可以极大的提升性能（测试这个例子的时候大概快了 2.5 倍）。\n任何时候处理数组时，研究并改善底层算法同样可以极大的提示性能。例如，考虑\n对 clip() 函数的如下修正，使用条件表达式：\n@cython.boundscheck(False)\n@cython.wraparound(False)\ncpdef clip(double[:] a, double min, double max, double[:] out):\nif min > max:\nraise ValueError("min must be <= max")\nif a.shape[0] != out.shape[0]:\nraise ValueError("input and output arrays must be the same size")\nfor i in range(a.shape[0]):\nout[i] = (a[i] if a[i] < max else max) if a[i] > min else min\n实际测试结果是，这个版本的代码运行速度要快 50% 以上（2.44 秒对比之前使用\ntimeit() 测试的 3.76 秒）。\n到这里为止，你可能想知道这种代码怎么能跟手写 C 语言 PK 呢？例如，你可能\n写了如下的 C 函数并使用前面几节的技术来手写扩展：\nvoid clip(double *a, int n, double min, double max, double *out) {\ndouble x;\nfor (; n >= 0; n--, a++, out++) {\nx = *a;\n*out = x > max ? max : (x < min ? min : x);\n}\n}\n我们没有展示这个的扩展代码，但是试验之后，我们发现一个手写 C 扩展要比使\n用 Cython 版本的慢了大概 10%。最底下的一行比你想象的运行的快很多。\n你可以对实例代码构建多个扩展。对于某些数组操作，最好要释放 GIL，这样多个\n线程能并行运行。要这样做的话，需要修改代码，使用 with nogil: 语句：\n@cython.boundscheck(False)\n@cython.wraparound(False)\ncpdef clip(double[:] a, double min, double max, double[:] out):\nif min > max:\nraise ValueError("min must be <= max")\nif a.shape[0] != out.shape[0]:\nraise ValueError("input and output arrays must be the same size")\nwith nogil:\nfor i in range(a.shape[0]):\nout[i] = (a[i] if a[i] < max else max) if a[i] > min else min\n如果你想写一个操作二维数组的版本，下面是可以参考下：\n@cython.boundscheck(False)\n@cython.wraparound(False)\ncpdef clip2d(double[:,:] a, double min, double max, double[:,:] out):\nif min > max:\nraise ValueError("min must be <= max")\nfor n in range(a.ndim):\nif a.shape[n] != out.shape[n]:\nraise TypeError("a and out have different shapes")\nfor i in range(a.shape[0]):\nfor j in range(a.shape[1]):\nif a[i,j] < min:\nout[i,j] = min\nelif a[i,j] > max:\nout[i,j] = max\nelse:\nout[i,j] = a[i,j]\n希望读者不要忘了本节所有代码都不会绑定到某个特定数组库（比如 NumPy）上\n面。这样代码就更有灵活性。不过，要注意的是如果处理数组要涉及到多维数组、切片、\n偏移和其他因素的时候情况会变得复杂起来。这些内容已经超出本节范围，更多信息请\n参考 PEP 3118 ，同时 Cython 文档中关于“类型内存视图” 篇也值得一读。\n15.12 将函数指针转换为可调用对象\n问题\n你已经获得了一个被编译函数的内存地址，想将它转换成一个 Python 可调用对\n象，这样的话你就可以将它作为一个扩展函数使用了。\n解决方案\nctypes 模块可被用来创建包装任意内存地址的 Python 可调用对象。下面的例子\n演示了怎样获取 C 函数的原始、底层地址，以及如何将其转换为一个可调用对象：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import ctypes\nlib = ctypes.cdll.LoadLibrary(None)")]),e._v(" "),n("h1",{attrs:{id:"get-the-address-of-sin-from-the-c-math-library"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-the-address-of-sin-from-the-c-math-library"}},[e._v("#")]),e._v(" Get the address of sin() from the C math library")]),e._v(" "),n("p",[e._v("addr = ctypes.cast(lib.sin, ctypes.c_void_p).value\naddr\n140735505915760")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"turn-the-address-into-a-callable-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#turn-the-address-into-a-callable-function"}},[e._v("#")]),e._v(" Turn the address into a callable function")]),e._v(" "),n("p",[e._v("functype = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)\nfunc = functype(addr)\nfunc\n<CFunctionType object at 0x1006816d0>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"call-the-resulting-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call-the-resulting-function"}},[e._v("#")]),e._v(" Call the resulting function")]),e._v(" "),n("p",[e._v("func(2)\n0.9092974268256817")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("func(0)\n0.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n要构建一个可调用对象，你首先需要创建一个 CFUNCTYPE 实例。CFUNCTYPE() 的\n第一个参数是返回类型。接下来的参数是参数类型。一旦你定义了函数类型，你就能将\n它包装在一个整型内存地址上来创建一个可调用对象了。生成的对象被当做普通的可\n通过 ctypes 访问的函数来使用。\n本节看上去可能有点神秘，偏底层一点。但是，但是它被广泛使用于各种高级代码\n生成技术比如即时编译，在 LLVM 函数库中可以看到。\n例如，下面是一个使用 llvmpy 扩展的简单例子，用来构建一个小的聚集函数，获\n取它的函数指针，并将其转换为一个 Python 可调用对象。")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("from llvm.core import Module, Function, Type, Builder\nmod = Module.new('example')\nf = Function.new(mod,Type.function(Type.double(), "),n("br"),e._v("\n[Type.double(), Type.double()], False), 'foo')")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("block = f.append_basic_block('entry')\nbuilder = Builder.new(block)\nx2 = builder.fmul(f.args[0],f.args[0])\ny2 = builder.fmul(f.args[1],f.args[1])\nr = builder.fadd(x2,y2)\nbuilder.ret(r)\n<llvm.core.Instruction object at 0x10078e990>")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("from llvm.ee import ExecutionEngine\nengine = ExecutionEngine.new(mod)\nptr = engine.get_pointer_to_function(f)\nptr\n4325863440")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("foo = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_\n,\n→double)(ptr)")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("h1",{attrs:{id:"call-the-resulting-function-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call-the-resulting-function-2"}},[e._v("#")]),e._v(" Call the resulting function")]),e._v(" "),n("p",[e._v("foo(2,3)\n13.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("foo(4,5)\n41.0")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("foo(1,2)\n5.0")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('并不是说在这个层面犯了任何错误就会导致 Python 解释器挂掉。要记得的是你是\n在直接跟机器级别的内存地址和本地机器码打交道，而不是 Python 函数。\n15.13 传递 NULL 结尾的字符串给 C 函数库\n问题\n你要写一个扩展模块，需要传递一个 NULL 结尾的字符串给 C 函数库。不过，你\n不是很确定怎样使用 Python 的 Unicode 字符串去实现它。\n解决方案\n许多 C 函数库包含一些操作 NULL 结尾的字符串，被声明类型为 char * . 考虑\n如下的 C 函数，我们用来做演示和测试用的：\nvoid print_chars(char *s) {\nwhile (*s) {\nprintf("%2x ", (unsigned char) *s);\ns++; }\nprintf("\\n");\n}\n此函数会打印被传进来字符串的每个字符的十六进制表示，这样的话可以很容易\n的进行调试了。例如：\nprint_chars("Hello"); // Outputs: 48 65 6c 6c 6f\n对于在 Python 中调用这样的 C 函数，你有几种选择。首先，你可以通过调用\nPyArg_ParseTuple() 并指定”y“转换码来限制它只能操作字节，如下：\nstatic PyObject *py_print_chars(PyObject *self, PyObject *args) {\nchar *s;\nif (!PyArg_ParseTuple(args, "y", &s)) {\nreturn NULL;\n}\nprint_chars(s);\nPy_RETURN_NONE;\n}\n结果函数的使用方法如下。仔细观察嵌入了 NULL 字节的字符串以及 Unicode 支\n持是怎样被拒绝的：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("print_chars(b'Hello World')\n48 65 6c 6c 6f 20 57 6f 72 6c 64")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_chars(b'Hello\\x00World')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: must be bytes without null bytes, not bytes")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_chars('Hello World')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: 'str' does not support the buffer interface")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('如果你想传递 Unicode 字符串，在 PyArg_ParseTuple() 中使用”s“格式码，如\n下：\nstatic PyObject *py_print_chars(PyObject *self, PyObject *args) {\nchar *s;\nif (!PyArg_ParseTuple(args, "s", &s)) {\nreturn NULL;\n}\nprint_chars(s);\nPy_RETURN_NONE;\n}\n当被使用的时候，它会自动将所有字符串转换为以 NULL 结尾的 UTF-8 编码。例\n如：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("print_chars('Hello World')\n48 65 6c 6c 6f 20 57 6f 72 6c 64")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_chars('Spicy Jalape\\u00f1o') # Note: UTF-8 encoding\n53 70 69 63 79 20 4a 61 6c 61 70 65 c3 b1 6f")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_chars('Hello\\x00World')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: must be str without null characters, not str")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_chars(b'Hello World')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nTypeError: must be str, not bytes")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果因为某些原因，你要直接使用 PyObject * 而不能使用 PyArg_ParseTuple()\n，下面的例子向你展示了怎样从字节和字符串对象中检查和提取一个合适的 char * 引\n用：\n/* Some Python Object (obtained somehow) */\nPyObject "),n("em",[e._v("obj;\n/")]),e._v(" Conversion from bytes */\n{\nchar "),n("em",[e._v("s;\ns = PyBytes_AsString(o);\nif (!s) {\nreturn NULL; /")]),e._v(" TypeError already raised "),n("em",[e._v("/\n}\nprint_chars(s);\n}\n/")]),e._v(' Conversion to UTF-8 bytes from a string */\n{\nPyObject *bytes;\nchar *s;\nif (!PyUnicode_Check(obj)) {\nPyErr_SetString(PyExc_TypeError, "Expected string");\nreturn NULL;\n}\nbytes = PyUnicode_AsUTF8String(obj);\ns = PyBytes_AsString(bytes);\nprint_chars(s);\nPy_DECREF(bytes);\n}\n前面两种转换都可以确保是 NULL 结尾的数据，但是它们并不检查字符串中间是\n否嵌入了 NULL 字节。因此，如果这个很重要的话，那你需要自己去做检查了。\n讨论\n如果可能的话，你应该避免去写一些依赖于 NULL 结尾的字符串，因为 Python 并\n没有这个需要。最好结合使用一个指针和长度值来处理字符串。不过，有时候你必须去\n处理 C 语言遗留代码时就没得选择了。\n尽管很容易使用，但是很容易忽视的一个问题是在 PyArg_ParseTuple() 中使用\n“s”格式化码会有内存损耗。但你需要使用这种转换的时候，一个 UTF-8 字符串被创\n建并永久附加在原始字符串对象上面。如果原始字符串包含非 ASCII 字符的话，就会\n导致字符串的尺寸增到一直到被垃圾回收。例如：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sys\ns = 'Spicy Jalape\\u00f1o'\nsys.getsizeof(s)\n87")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_chars(s) # Passing string\n53 70 69 63 79 20 4a 61 6c 61 70 65 c3 b1 6f")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sys.getsizeof(s) # Notice increased size\n103")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('如 果 你 在 乎 这 个 内 存 的 损 耗， 你 最 好 重 写 你 的 C 扩 展 代 码， 让 它 使 用\nPyUnicode_AsUTF8String() 函数。如下：\nstatic PyObject *py_print_chars(PyObject *self, PyObject *args) {\nPyObject *o, *bytes;\nchar *s;\nif (!PyArg_ParseTuple(args, "U", &o)) {\nreturn NULL;\n}\nbytes = PyUnicode_AsUTF8String(o);\ns = PyBytes_AsString(bytes);\nprint_chars(s);\nPy_DECREF(bytes);\nPy_RETURN_NONE;\n}\n通过这个修改，一个 UTF-8 编码的字符串根据需要被创建，然后在使用过后被丢\n弃。下面是修订后的效果：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sys\ns = 'Spicy Jalape\\u00f1o'\nsys.getsizeof(s)\n87")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_chars(s)\n53 70 69 63 79 20 4a 61 6c 61 70 65 c3 b1 6f")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sys.getsizeof(s)\n87")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你试着传递 NULL 结尾字符串给 ctypes 包装过的函数，要注意的是 ctypes 只\n能允许传递字节，并且它不会检查中间嵌入的 NULL 字节。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import ctypes\nlib = ctypes.cdll.LoadLibrary(\"./libsample.so\")\nprint_chars = lib.print_chars\nprint_chars.argtypes = (ctypes.c_char_p,)\nprint_chars(b'Hello World')\n48 65 6c 6c 6f 20 57 6f 72 6c 64")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_chars(b'Hello\\x00World')\n48 65 6c 6c 6f")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_chars('Hello World')\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nctypes.ArgumentError: argument 1: <class 'TypeError'>: wrong type")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("如果你想传递字符串而不是字节，你需要先执行手动的 UTF-8 编码。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("print_chars('Hello World'.encode('utf-8'))\n48 65 6c 6c 6f 20 57 6f 72 6c 64")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('对于其他扩展工具（比如 Swig、Cython），在你使用它们传递字符串给 C 代码时\n要先好好学习相应的东西了。\n15.14 传递 Unicode 字符串给 C 函数库\n问题\n你要写一个扩展模块，需要将一个 Python 字符串传递给 C 的某个库函数，但是\n这个函数不知道该怎么处理 Unicode。\n解决方案\n这里我们需要考虑很多的问题，但是最主要的问题是现存的 C 函数库并不理解\nPython 的原生 Unicode 表示。因此，你的挑战是将 Python 字符串转换为一个能被 C\n理解的形式。\n为了演示的目的，下面有两个 C 函数，用来操作字符串数据并输出它来调试和测\n试。一个使用形式为 char *, int 形式的字节，而另一个使用形式为 wchar_t *, int\n的宽字符形式：\nvoid print_chars(char *s, int len) {\nint n = 0;\nwhile (n < len) {\nprintf("%2x ", (unsigned char) s[n]);\nn++; }\nprintf("\\n");\n}\nvoid print_wchars(wchar_t *s, int len) {\nint n = 0;\nwhile (n < len) {\nprintf("%x ", s[n]);\nn++; }\nprintf("\\n");\n}\n对于面向字节的函数 print_chars() ，你需要将 Python 字符串转换为一个合适\n的编码比如 UTF-8. 下面是一个这样的扩展函数例子：\nstatic PyObject *py_print_chars(PyObject *self, PyObject *args) {\nchar *s;\nPy_ssize_t len;\nif (!PyArg_ParseTuple(args, "s#", &s, &len)) {\nreturn NULL;\n}\nprint_chars(s, len);\nPy_RETURN_NONE;\n}\n对于那些需要处理机器本地 wchar_t 类型的库函数，你可以像下面这样编写扩展\n代码：\nstatic PyObject *py_print_wchars(PyObject *self, PyObject *args) {\nwchar_t *s;\nPy_ssize_t len;\nif (!PyArg_ParseTuple(args, "u#", &s, &len)) {\nreturn NULL;\n}\nprint_wchars(s,len);\nPy_RETURN_NONE;\n}\n下面是一个交互会话来演示这个函数是如何工作的：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = 'Spicy Jalape\\u00f1o'\nprint_chars(s)\n53 70 69 63 79 20 4a 61 6c 61 70 65 c3 b1 6f")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_wchars(s)\n53 70 69 63 79 20 4a 61 6c 61 70 65 f1 6f")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("仔细观察这个面向字节的函数 print_chars() 是怎样接受 UTF-8 编码数据的，以\n及 print_wchars() 是怎样接受 Unicode 编码值的\n讨论\n在继续本节之前，你应该首先学习你访问的 C 函数库的特征。对于很多 C 函数库，\n通常传递字节而不是字符串会比较好些。要这样做，请使用如下的转换代码：\nstatic PyObject *py_print_chars(PyObject *self, PyObject *args) {\nchar "),n("em",[e._v("s;\nPy_ssize_t len;\n/")]),e._v(' accepts bytes, bytearray, or other byte-like object */\nif (!PyArg_ParseTuple(args, "y#", &s, &len)) {\nreturn NULL;\n}\nprint_chars(s, len);\nPy_RETURN_NONE;\n}\n如果你仍然还是想要传递字符串，你需要知道 Python 3 可使用一个合适的字符\n串表示，它并不直接映射到使用标准类型 char * 或 wchar_t * （更多细节参考 PEP\n393）的 C 函数库。因此，要在 C 中表示这个字符串数据，一些转换还是必须要的。在\nPyArg_ParseTuple() 中使用”s#”和”u#”格式化码可以安全的执行这样的转换。\n不过这种转换有个缺点就是它可能会导致原始字符串对象的尺寸增大。一旦转换\n过后，会有一个转换数据的复制附加到原始字符串对象上面，之后可以被重用。你可以\n观察下这种效果：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import sys\ns = 'Spicy Jalape\\u00f1o'\nsys.getsizeof(s)\n87")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_chars(s)\n53 70 69 63 79 20 4a 61 6c 61 70 65 c3 b1 6f")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sys.getsizeof(s)\n103")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_wchars(s)\n53 70 69 63 79 20 4a 61 6c 61 70 65 f1 6f")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("sys.getsizeof(s)\n163")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v('对于少量的字符串对象，可能没什么影响，但是如果你需要在扩展中处理大量的文\n本，你可能想避免这个损耗了。下面是一个修订版本可以避免这种内存损耗：\nstatic PyObject *py_print_chars(PyObject *self, PyObject *args) {\nPyObject *obj, *bytes;\nchar *s;\nPy_ssize_t len;\nif (!PyArg_ParseTuple(args, "U", &obj)) {\nreturn NULL;\n}\nbytes = PyUnicode_AsUTF8String(obj);\nPyBytes_AsStringAndSize(bytes, &s, &len);\nprint_chars(s, len);\nPy_DECREF(bytes);\nPy_RETURN_NONE;\n}\n而对 wchar_t 的处理时想要避免内存损耗就更加难办了。在内部，Python 使用最\n高效的表示来存储字符串。例如，只包含 ASCII 的字符串被存储为字节数组，而包含\n范围从 U+0000 到 U+FFFF 的字符的字符串使用双字节表示。由于对于数据的表示形\n式不是单一的，你不能将内部数组转换为 wchar_t * 然后期望它能正确的工作。你应\n该创建一个 wchar_t 数组并向其中复制文本。PyArg_ParseTuple() 的”u#”格式码可\n以帮助你高效的完成它（它将复制结果附加到字符串对象上）。\n如果你想避免长时间内存损耗，你唯一的选择就是复制 Unicode 数据懂啊一个临\n时的数组，将它传递给 C 函数，然后回收这个数组的内存。下面是一个可能的实现：\nstatic PyObject *py_print_wchars(PyObject *self, PyObject *args) {\nPyObject *obj;\nwchar_t *s;\nPy_ssize_t len;\nif (!PyArg_ParseTuple(args, "U", &obj)) {\nreturn NULL;\n}\nif ((s = PyUnicode_AsWideCharString(obj, &len)) == NULL) {\nreturn NULL;\n}\nprint_wchars(s, len);\nPyMem_Free(s);\nPy_RETURN_NONE;\n}\n在这个实现中，PyUnicode_AsWideCharString() 创建一个临时的 wchar_t 缓冲并\n复制数据进去。这个缓冲被传递给 C 然后被释放掉。但是我写这本书的时候，这里可\n能有个 bug，后面的 Python 问题页有介绍。\n如果你知道 C 函数库需要的字节编码并不是 UTF-8，你可以强制 Python 使用扩\n展码来执行正确的转换，就像下面这样：\nstatic PyObject *py_print_chars(PyObject *self, PyObject *args) {\nchar *s = 0;\nint len;\nif (!PyArg_ParseTuple(args, "es#", "encoding-name", &s, &len)) {\nreturn NULL;\n}\nprint_chars(s, len);\nPyMem_Free(s);\nPy_RETURN_NONE;\n}\n最后，如果你想直接处理 Unicode 字符串，下面的是例子，演示了底层操作访问：\nstatic PyObject *py_print_wchars(PyObject *self, PyObject *args) {\nPyObject *obj;\nint n, len;\nint kind;\nvoid *data;\nif (!PyArg_ParseTuple(args, "U", &obj)) {\nreturn NULL;\n}\nif (PyUnicode_READY(obj) < 0) {\nreturn NULL;\n}\nlen = PyUnicode_GET_LENGTH(obj);\nkind = PyUnicode_KIND(obj);\ndata = PyUnicode_DATA(obj);\nfor (n = 0; n < len; n++) {\nPy_UCS4 ch = PyUnicode_READ(kind, data, n);\nprintf("%x ", ch);\n}\nprintf("\\n");\nPy_RETURN_NONE;\n}\n在这个代码中，PyUnicode_KIND() 和 PyUnicode_DATA() 这两个宏和 Unicode 的\n可变宽度存储有关，这个在 PEP 393 中有描述。kind 变量编码底层存储（8 位、16 位 或 32 位）以及指向缓存的数据指针相关的信息。在实际情况中，你并不需要知道任何\n跟这些值有关的东西，只需要在提取字符的时候将它们传给 PyUnicode_READ() 宏。\n还有最后几句：当从 Python 传递 Unicode 字符串给 C 的时候，你应该尽量简单\n点。如果有 UTF-8 和宽字符两种选择，请选择 UTF-8. 对 UTF-8 的支持更加普遍一些，\n也不容易犯错，解释器也能支持的更好些。最后，确保你仔细阅读了 关于处理 Unicode\n的相关文档\n15.15 C 字符串转换为 Python 字符串\n问题\n怎样将 C 中的字符串转换为 Python 字节或一个字符串对象？\n解决方案\nC 字符串使用一对 char * 和 int 来表示，你需要决定字符串到底是用一个\n原始字节字符串还是一个 Unicode 字符串来表示。字节对象可以像下面这样使用\nPy_BuildValue() 来构建：\nchar '),n("em",[e._v("s; /")]),e._v(" Pointer to C string data "),n("em",[e._v("/\nint len; /")]),e._v(" Length of data "),n("em",[e._v("/\n/")]),e._v(' Make a bytes object */\nPyObject *obj = Py_BuildValue("y#", s, len);\n如果你要创建一个 Unicode 字符串，并且你知道 s 指向了 UTF-8 编码的数据，可\n以使用下面的方式：\nPyObject '),n("em",[e._v('obj = Py_BuildValue("s#", s, len);\n如果 s 使用其他编码方式，那么可以像下面使用 PyUnicode_Decode() 来构建一\n个字符串：\nPyObject '),n("em",[e._v('obj = PyUnicode_Decode(s, len, "encoding", "errors");\n/')]),e._v(" Examples /")]),e._v('\nobj = PyUnicode_Decode(s, len, "latin-1", "strict");\nobj = PyUnicode_Decode(s, len, "ascii", "ignore");\n如果你恰好有一个用 wchar_t *, len 对表示的宽字符串，有几种选择性。首先你\n可以使用 Py_BuildValue() ：\nwchar_t '),n("em",[e._v("w; /")]),e._v(" Wide character string "),n("em",[e._v("/\nint len; /")]),e._v(' Length */\nPyObject *obj = Py_BuildValue("u#", w, len);\n另外，你还可以使用 PyUnicode_FromWideChar() :\nPyObject '),n("em",[e._v("obj = PyUnicode_FromWideChar(w, len);\n对于宽字符串，并没有对字符数据进行解析——它被假定是原始 Unicode 编码指\n针，可以被直接转换成 Python。\n讨论\n将 C 中的字符串转换为 Python 字符串遵循和 I/O 同样的原则。也就是说，来自 C\n中的数据必须根据一些解码器被显式的解码为一个字符串。通常编码格式包括 ASCII、\nLatin-1 和 UTF-8. 如果你并不确定编码方式或者数据是二进制的，你最好将字符串编\n码成字节。当构造一个对象的时候，Python 通常会复制你提供的字符串数据。如果有\n必要的话，你需要在后面去释放 C 字符串。同时，为了让程序更加健壮，你应该同时\n使用一个指针和一个大小值，而不是依赖 NULL 结尾数据来创建字符串。\n15.16 不确定编码格式的 C 字符串\n问题\n你要在 C 和 Python 直接来回转换字符串，但是 C 中的编码格式并不确定。例如，\n可能 C 中的数据期望是 UTF-8，但是并没有强制它必须是。你想编写代码来以一种优\n雅的方式处理这些不合格数据，这样就不会让 Python 奔溃或者破坏进程中的字符串数\n据。\n解决方案\n下面是一些 C 的数据和一个函数来演示这个问题：\n/")]),e._v(" Some dubious string data (malformed UTF-8) */\nconst char "),n("em",[e._v('sdata = "Spicy Jalape\\xc3\\xb1o\\xae";\nint slen = 16; /')]),e._v(" Output character data */\nvoid print_chars(char "),n("em",[e._v('s, int len) {\nint n = 0;\nwhile (n < len) {\nprintf("%2x ", (unsigned char) s[n]);\nn++; }\nprintf("\\n");\n}\n在这个代码中，字符串 sdata 包含了 UTF-8 和不合格数据。不过，如果用户在 C\n中调用 print_chars(sdata, slen) ，它缺能正常工作。现在假设你想将 sdata 的内\n容转换为一个 Python 字符串。进一步假设你在后面还想通过一个扩展将那个字符串传\n个 print_chars() 函数。下面是一种用来保护原始数据的方法，就算它编码有问题。\n/')]),e._v(" Return the C string back to Python */\nstatic PyObject *py_retstr(PyObject *self, PyObject "),n("em",[e._v('args) {\nif (!PyArg_ParseTuple(args, "")) {\nreturn NULL;\n}\nreturn PyUnicode_Decode(sdata, slen, "utf-8", "surrogateescape");\n}\n/')]),e._v(' Wrapper for the print_chars() function */\nstatic PyObject *py_print_chars(PyObject *self, PyObject *args) {\nPyObject *obj, *bytes;\nchar *s = 0;\nPy_ssize_t len;\nif (!PyArg_ParseTuple(args, "U", &obj)) {\nreturn NULL;\n}\nif ((bytes = PyUnicode_AsEncodedString(obj,"utf-8","surrogateescape"))\n== NULL) {\nreturn NULL;\n}\nPyBytes_AsStringAndSize(bytes, &s, &len);\nprint_chars(s, len);\nPy_DECREF(bytes);\nPy_RETURN_NONE;\n}\n如果你在 Python 中尝试这些函数，下面是运行效果：')]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = retstr()\ns\n'Spicy Jalapeño\\udcae'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("print_chars(s)\n53 70 69 63 79 20 4a 61 6c 61 70 65 c3 b1 6f ae")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("仔细观察结果你会发现，不合格字符串被编码到一个 Python 字符串中，并且并没\n有产生错误，并且当它被回传给 C 的时候，被转换为和之前原始 C 字符串一样的字节。\n讨论\n本节展示了在扩展模块中处理字符串时会配到的一个棘手又很恼火的问题。也就\n是说，在扩展中的 C 字符串可能不会严格遵循 Python 所期望的 Unicode 编码/解码规\n则。因此，很可能一些不合格 C 数据传递到 Python 中去。一个很好的例子就是涉及到\n底层系统调用比如文件名这样的字符串。例如，如果一个系统调用返回给解释器一个损\n坏的字符串，不能被正确解码的时候会怎样呢？\n一般来讲，可以通过制定一些错误策略比如严格、忽略、替代或其他类似的来处理\nUnicode 错误。不过，这些策略的一个缺点是它们永久性破坏了原始字符串的内容。例\n如，如果例子中的不合格数据使用这些策略之一解码，你会得到下面这样的结果：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("raw = b'Spicy Jalape\\xc3\\xb1o\\xae'\nraw.decode('utf-8','ignore')\n'Spicy Jalapeño'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("raw.decode('utf-8','replace')\n'Spicy Jalapeño?'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("surrogateescape 错误处理策略会将所有不可解码字节转化为一个代理对的低位\n字节（udcXX 中 XX 是原始字节值）。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("raw.decode('utf-8','surrogateescape')\n'Spicy Jalapeño\\udcae'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("单独的低位代理字符比如 \\udcae 在 Unicode 中是非法的。因此，这个字符串就是\n一个非法表示。实际上，如果你将它传个一个执行输出的函数，你会得到一个错误：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s = raw.decode('utf-8', 'surrogateescape')\nprint(s)\nTraceback (most recent call last):\nFile \""),n("stdin",[e._v('", line 1, in '),n("module",[e._v("\nUnicodeEncodeError: 'utf-8' codec can't encode character '\\udcae'\nin position 14: surrogates not allowed")])],1)],1)])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("然而，允许代理转换的关键点在于从 C 传给 Python 又回传给 C 的不合格字符串\n不会有任何数据丢失。当这个字符串再次使用 surrogateescape 编码时，代理字符会\n转换回原始字节。例如：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("s\n'Spicy Jalapeño\\udcae'")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("s.encode('utf-8','surrogateescape')\nb'Spicy Jalape\\xc3\\xb1o\\xae'")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("作为一般准则，最好避免代理编码——如果你正确的使用了编码，那么你的代码就\n值得信赖。不过，有时候确实会出现你并不能控制数据编码并且你又不能忽略或替换坏\n数据，因为其他函数可能会用到它。那么就可以使用本节的技术了。\n最后一点要注意的是，Python 中许多面向系统的函数，特别是和文件名、环境变\n量和命令行参数相关的都会使用代理编码。例如，如果你使用像 os.listdir() 这样的\n函数，传入一个包含了不可解码文件名的目录的话，它会返回一个代理转换后的字符\n串。参考 5.15 的相关章节。\nPEP 383 中有更多关于本机提到的以及和 surrogateescape 错误处理相关的信息。\n15.17 传递文件名给 C 扩展\n问题\n你需要向 C 库函数传递文件名，但是需要确保文件名根据系统期望的文件名编码\n方式编码过。\n解决方案\n写一个接受一个文件名为参数的扩展函数，如下这样：\nstatic PyObject *py_get_filename(PyObject *self, PyObject *args) {\nPyObject *bytes;\nchar "),n("em",[e._v('filename;\nPy_ssize_t len;\nif (!PyArg_ParseTuple(args,"O&", PyUnicode_FSConverter, &bytes)) {\nreturn NULL;\n}\nPyBytes_AsStringAndSize(bytes, &filename, &len);\n/')]),e._v(" Use filename "),n("em",[e._v("/\n...\n/")]),e._v(" Cleanup and return */\nPy_DECREF(bytes)\nPy_RETURN_NONE;\n}\n如果你已经有了一个 PyObject * ，希望将其转换成一个文件名，可以像下面这样\n做：\nPyObject "),n("em",[e._v("obj; /")]),e._v(" Object with the filename */\nPyObject *bytes;\nchar "),n("em",[e._v("filename;\nPy_ssize_t len;\nbytes = PyUnicode_EncodeFSDefault(obj);\nPyBytes_AsStringAndSize(bytes, &filename, &len);\n/")]),e._v(" Use filename "),n("em",[e._v("/ ... /")]),e._v(" Cleanup "),n("em",[e._v("/\nPy_DECREF(bytes);\nIf you need to return a filename back to Python, use the following code:\n/")]),e._v(" Turn a filename into a Python object */\nchar "),n("em",[e._v("filename; /")]),e._v(" Already set "),n("em",[e._v("/\nint filename_len; /")]),e._v(" Already set */\nPyObject *obj = PyUnicode_DecodeFSDefaultAndSize(filename, filename_len);\n讨论\n以可移植方式来处理文件名是一个很棘手的问题，最后交由 Python 来处理。如果\n你在扩展代码中使用本节的技术，文件名的处理方式和和 Python 中是一致的。包括编\n码/界面字节，处理坏字符，代理转换和其他复杂情况。\n15.18 传递已打开的文件给 C 扩展\n问题\n你在 Python 中有一个打开的文件对象，但是需要将它传给要使用这个文件的 C\n扩展。\n解决方案\n要将一个文件转换为一个整型的文件描述符，使用 PyFile_FromFd() ，如下：\nPyObject "),n("em",[e._v("fobj; /")]),e._v(" File object (already obtained somehow) "),n("em",[e._v("/\nint fd = PyObject_AsFileDescriptor(fobj);\nif (fd < 0) {\nreturn NULL;\n}\n结果文件描述符是通过调用 fobj 中的 fileno() 方法获得的。因此，任何以这种\n方式暴露给一个描述器的对象都适用（比如文件、套接字等）。一旦你有了这个描述器，\n它就能被传递给多个低级的可处理文件的 C 函数。\n如 果 你 需 要 转 换 一 个 整 型 文 件 描 述 符 为 一 个 Python 对 象， 适 用 下 面 的\nPyFile_FromFd() :\nint fd; /")]),e._v(" Existing file descriptor (already open) */\nPyObject "),n("em",[e._v('fobj = PyFile_FromFd(fd, "filename","r",-1,NULL,NULL,NULL,1);\nPyFile_FromFd() 的参数对应内置的 open() 函数。NULL 表示编码、错误和换行\n参数使用默认值。\n讨论\n如果将 Python 中的文件对象传给 C，有一些注意事项。首先，Python 通过 io 模\n块执行自己的 I/O 缓冲。在传递任何类型的文件描述符给 C 之前，你都要首先在相应\n文件对象上刷新 I/O 缓冲。不然的话，你会打乱文件系统上面的数据。\n其次，你需要特别注意文件的归属者以及关闭文件的职责。如果一个文件描述符\n被传给 C，但是在 Python 中还在被使用着，你需要确保 C 没有意外的关闭它。类似\n的，如果一个文件描述符被转换为一个 Python 文件对象，你需要清楚谁应该去关闭它。\nPyFile_FromFd() 的最后一个参数被设置成 1，用来指出 Python 应该关闭这个文件。\n如果你需要从 C 标准 I/O 库中使用如　 fdopen() 函数来创建不同类型的文件对\n象比如 FILE * 对象，你需要特别小心了。这样做会在 I/O 堆栈中产生两个完全不同的\nI/O 缓冲层（一个是来自 Python 的 io 模块，另一个来自 C 的 stdio ）。像 C 中的\nfclose() 会关闭 Python 要使用的文件。如果让你选的话，你应该会选择去构建一个\n扩展代码来处理底层的整型文件描述符，而不是使用来自 <stdio.h> 的高层抽象功能。\n15.19 从 C 语言中读取类文件对象\n问题\n你要写 C 扩展来读取来自任何 Python 类文件对象中的数据（比如普通文件、\nStringIO 对象等）。\n解决方案\n要读取一个类文件对象的数据，你需要重复调用 read() 方法，然后正确的解码获\n得的数据。\n下面是一个 C 扩展函数例子，仅仅只是读取一个类文件对象中的所有数据并将其\n输出到标准输出：\n#define CHUNK_SIZE 8192\n/')]),e._v(' Consume a "file-like" object and write bytes to stdout */\nstatic PyObject *py_consume_file(PyObject *self, PyObject *args) {\nPyObject *obj;\nPyObject *read_meth;\nPyObject *result = NULL;\nPyObject '),n("em",[e._v('read_args;\nif (!PyArg_ParseTuple(args,"O", &obj)) {\nreturn NULL;\n}\n/')]),e._v(" Get the read method of the passed object "),n("em",[e._v('/\nif ((read_meth = PyObject_GetAttrString(obj, "read")) == NULL) {\nreturn NULL;\n}\n/')]),e._v(' Build the argument list to read() */\nread_args = Py_BuildValue("(i)", CHUNK_SIZE);\nwhile (1) {\nPyObject *data;\nPyObject *enc_data;\nchar '),n("em",[e._v("buf;\nPy_ssize_t len;\n/")]),e._v(" Call read() "),n("em",[e._v("/\nif ((data = PyObject_Call(read_meth, read_args, NULL)) == NULL) {\ngoto final;\n}\n/")]),e._v(" Check for EOF "),n("em",[e._v("/\nif (PySequence_Length(data) == 0) {\nPy_DECREF(data);\nbreak;\n}\n/")]),e._v(" Encode Unicode as Bytes for C "),n("em",[e._v('/\nif ((enc_data=PyUnicode_AsEncodedString(data,"utf-8","strict"))==NULL) {\nPy_DECREF(data);\ngoto final;\n}\n/')]),e._v(" Extract underlying buffer data "),n("em",[e._v("/\nPyBytes_AsStringAndSize(enc_data, &buf, &len);\n/")]),e._v(" Write to stdout (replace with something more useful) "),n("em",[e._v("/\nwrite(1, buf, len);\n/")]),e._v(" Cleanup "),n("em",[e._v('/\nPy_DECREF(enc_data);\nPy_DECREF(data);\n}\nresult = Py_BuildValue("");\nfinal:\n/')]),e._v(" Cleanup */\nPy_DECREF(read_meth);\nPy_DECREF(read_args);\nreturn result;\n}\n要测试这个代码，先构造一个类文件对象比如一个 StringIO 实例，然后传递进来：")]),e._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[e._v("import io\nf = io.StringIO('Hello\\nWorld\\n')\nimport sample\nsample.consume_file(f)\nHello\nWorld")])])]),e._v(" "),n("blockquote",[n("blockquote")])]),e._v(" "),n("p",[e._v("讨论\n和普通系统文件不同的是，一个类文件对象并不需要使用低级文件描述符来构建。\n因此，你不能使用普通的 C 库函数来访问它。你需要使用 Python 的 C API 来像普通\n文件类似的那样操作类文件对象。\n在我们的解决方案中，read() 方法从被传递的对象中提取出来。一个参数列表被\n构建然后不断的被传给 PyObject_Call() 来调用这个方法。要检查文件末尾（EOF），\n使用了 PySequence_Length() 来查看是否返回对象长度为 0.\n对于所有的 I/O 操作，你需要关注底层的编码格式，还有字节和 Unicode 之前的\n区别。本节演示了如何以文本模式读取一个文件并将结果文本解码为一个字节编码，这\n样在 C 中就可以使用它了。如果你想以二进制模式读取文件，只需要修改一点点即可，\n例如：\n...\n/* Call read() "),n("em",[e._v("/\nif ((data = PyObject_Call(read_meth, read_args, NULL)) == NULL) {\ngoto final;\n}\n/")]),e._v(" Check for EOF "),n("em",[e._v('/\nif (PySequence_Length(data) == 0) {\nPy_DECREF(data);\nbreak;\n}\nif (!PyBytes_Check(data)) {\nPy_DECREF(data);\nPyErr_SetString(PyExc_IOError, "File must be in binary mode");\ngoto final;\n}\n/')]),e._v(" Extract underlying buffer data */\nPyBytes_AsStringAndSize(data, &buf, &len);\n...\n本节最难的地方在于如何进行正确的内存管理。当处理 PyObject * "),n("code",[e._v("变量的时 候，需要注意管理引用计数以及在不需要的变量的时候清理它们的值。对")]),e._v("Py_DECREF() 的\n调用就是来做这个的。\n本节代码以一种通用方式编写，因此他也能适用于其他的文件操作，比如写文件。\n例如，要写数据，只需要获取类文件对象的 write() 方法，将数据转换为合适的 Python\n对象（字节或 Unicode），然后调用该方法将输入写入到文件。\n最后，尽管类文件对象通常还提供其他方法（比如 readline(), read_info()），我们\n最好只使用基本的 read() 和 write() 方法。在写 C 扩展的时候，能简单就尽量简单。\n15.20 处理 C 语言中的可迭代对象\n问题\n你想写 C 扩展代码处理来自任何可迭代对象如列表、元组、文件或生成器中的元\n素。\n解决方案\n下面是一个 C 扩展函数例子，演示了怎样处理可迭代对象中的元素：\nstatic PyObject *py_consume_iterable(PyObject *self, PyObject *args) {\nPyObject *obj;\nPyObject *iter;\nPyObject "),n("em",[e._v('item;\nif (!PyArg_ParseTuple(args, "O", &obj)) {\nreturn NULL;\n}\nif ((iter = PyObject_GetIter(obj)) == NULL) {\nreturn NULL;\n}\nwhile ((item = PyIter_Next(iter)) != NULL) {\n/')]),e._v(' Use item */\n...\nPy_DECREF(item);\n}\nPy_DECREF(iter);\nreturn Py_BuildValue("");\n}\n讨论\n本节中的代码和 Python 中对应代码类似。PyObject_GetIter() 的调用和调用\niter() 一样可获得一个迭代器。PyIter_Next() 函数调用 next 方法返回下一个元素\n或 NULL(如果没有元素了)。要注意正确的内存管理——Py_DECREF() 需要同时在产生\n的元素和迭代器对象本身上同时被调用，以避免出现内存泄露。\n15.21 诊断分段错误\n问题\n解释器因为某个分段错误、总线错误、访问越界或其他致命错误而突然间奔溃。你\n想获得 Python 堆栈信息，从而找出在发生错误的时候你的程序运行点。\n解决方案\nfaulthandler 模块能被用来帮你解决这个问题。在你的程序中引入下列代码：\nimport faulthandler\nfaulthandler.enable()\n另外还可以像下面这样使用 -Xfaulthandler 来运行 Python：\nbash % python3 -Xfaulthandler program.py\n最后，你可以设置 PYTHONFAULTHANDLER 环境变量。开启 faulthandler 后，在 C 扩\n展中的致命错误会导致一个 Python 错误堆栈被打印出来。例如：\nFatal Python error: Segmentation fault\nCurrent thread 0x00007fff71106cc0:\nFile "example.py", line 6 in foo\nFile "example.py", line 10 in bar\nFile "example.py", line 14 in spam\nFile "example.py", line 19 in '),n("module",[e._v("\nSegmentation fault\n尽管这个并不能告诉你 C 代码中哪里出错了，但是至少能告诉你 Python 里面哪\n里有错。\n讨论\nfaulthandler 会在 Python 代码执行出错的时候向你展示跟踪信息。至少，它会告\n诉你出错时被调用的最顶级扩展函数是哪个。在 pdb 和其他 Python 调试器的帮助下，\n你就能追根溯源找到错误所在的位置了。\nfaulthandler 不会告诉你任何 C 语言中的错误信息。因此，你需要使用传统的 C 调\n试器，比如 gdb。不过，在 faulthandler 追踪信息可以让你去判断从哪里着手。还要注\n意的是在 C 中某些类型的错误可能不太容易恢复。例如，如果一个 C 扩展丢弃了程序\n堆栈信息，它会让 faulthandler 不可用，那么你也得不到任何输出（除了程序奔溃外）。")])],1)])}),[],!1,null,null,null);t.default=a.exports}}]);