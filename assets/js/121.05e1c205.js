(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{656:function(s,a,t){"use strict";t.r(a);var n=t(35),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#序列化和反序列化"}},[s._v("序列化和反序列化")])]),t("li",[t("a",{attrs:{href:"#攻击过程"}},[s._v("攻击过程")])]),t("li",[t("a",{attrs:{href:"#通过反序列化漏洞-黑客能做什么"}},[s._v("通过反序列化漏洞，黑客能做什么")])]),t("li",[t("a",{attrs:{href:"#如何进行反序列化漏洞防护"}},[s._v("如何进行反序列化漏洞防护")])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"序列化和反序列化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列化和反序列化"}},[s._v("#")]),s._v(" 序列化和反序列化")]),s._v(" "),t("ul",[t("li",[s._v("将对象转化成字符串或者字节流，这就是序列化操作")]),s._v(" "),t("li",[s._v("反序列化操作，就是应用将字符串或者字节流变成对象。")]),s._v(" "),t("li",[s._v("以python语言反序列化为例：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('pickle是python语言的一个标准模块，实现了基本的数据序列化和反序列化\n|dumps|对象反序列化为bytes对象|\n|dump|对象反序列化到文件对象，存入文件|\n|loads|从bytes对象反序列化|\n|load|对象反序列化，从文件中读取数据|\n\nimport pickle\nimport os\n\nclass TestDeserialize:\n    """\n    __reduce__ must return a string or tuple\n    __reduce__ 被定义之后，当对象被Pickle时就会被调用\n\t它要么返回一个代表全局名称的字符串，Pyhton会查找它并pickle\n\t要么返回一个元组，这个元组包含2到5个元素,其中包括：\n\t1. 一个可调用的对象，用于重建对象时调用；\n\t2. 一个参数元素，供那个可调用对象使用；被传递给 __setstate__ 的状态（可选）\n\t3. 一个产生被pickle的列表元素的迭代器（可选）\n\t4. 一个产生被pickle的字典元素的迭代器（可选）\n    """\n    def __reduce__(self):\n        return (os.system, (\'ls\',))  # 加逗号，避免混淆\n\nif __name__ == \'__main__\':\n    td = TestDeserialize()\n    serialize = pickle.dumps(td)\n    pickle.loads(serialize)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("h2",{attrs:{id:"攻击过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#攻击过程"}},[s._v("#")]),s._v(" 攻击过程")]),s._v(" "),t("ul",[t("li",[s._v("那反序列化漏洞到底是怎么产生的呢？")]),s._v(" "),t("li",[s._v("问题就出在把数据转化成对象的过程中。")]),s._v(" "),t("li",[s._v("在这个过程中，应用需要根据数据的内容，去调用特定的方法。")]),s._v(" "),t("li",[s._v("而黑客正是利用这个逻辑，在数据中嵌入自定义的代码（比如执行某个系统命令）。运行web服务时，使用最小权限！！")]),s._v(" "),t("li",[s._v("应用对数据进行反序列化的时候，会执行这段代码，从而使得黑客能够控制整个应用及服务器。")])]),s._v(" "),t("h2",{attrs:{id:"通过反序列化漏洞-黑客能做什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过反序列化漏洞-黑客能做什么"}},[s._v("#")]),s._v(" 通过反序列化漏洞，黑客能做什么")]),s._v(" "),t("ul",[t("li",[s._v("学习了前面的例子，我们已经知道，通过反序列化漏洞，黑客可以调用到系统方法来进行命令执行。")]),s._v(" "),t("li",[s._v("换一句话说，黑客已经能够在服务器上执行任意的命令，这就相当于间接掌控了你的服务器，能够干任何他想干的事情了。")])]),s._v(" "),t("h2",{attrs:{id:"如何进行反序列化漏洞防护"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何进行反序列化漏洞防护"}},[s._v("#")]),s._v(" 如何进行反序列化漏洞防护")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("认证和签名")]),s._v(" "),t("ul",[t("li",[s._v("首先，最简单的，我们可以通过认证，来避免应用接受黑客的异常输入。")]),s._v(" "),t("li",[s._v("要知道，很多序列化和反序列化的服务并不是提供给用户的，而是提供给服务自身的。")]),s._v(" "),t("li",[s._v("比如，存储一个对象到硬盘、发送一个对象到另外一个服务中去。")]),s._v(" "),t("li",[s._v("对于这些点对点的服务，我们可以通过加入签名的方式来进行防护。")]),s._v(" "),t("li",[s._v("比如，对存储的数据进行签名，以此对调用来源进行身份校验。")]),s._v(" "),t("li",[s._v("只要黑客获取不到密钥信息，它就无法向进行反序列化的服务接口发送数据，也就无从发起反序列化攻击了。")])])]),s._v(" "),t("li",[t("p",[s._v("黑白名单限制")]),s._v(" "),t("ul",[t("li",[s._v("在反序列化漏洞中，黑客需要构建调用链，而调用链是基于类的默认方法来构造的。")]),s._v(" "),t("li",[s._v("针对反序列化的类做一份白名单或黑名单的限制，首选白名单，避免一些遗漏问题被绕过。这种方法是当前很多主流框架的修复方案。")])])]),s._v(" "),t("li",[t("p",[s._v("RASP 检测")]),s._v(" "),t("ul",[t("li",[s._v("业内推出了 RASP（Runtime Application Self-Protection，实时程序自我保护）。")]),s._v(" "),t("li",[s._v("RASP 通过 hook 等方式，在这些关键函数的调用中，增加一道规则的检测。")]),s._v(" "),t("li",[s._v("这个规则会判断应用是否执行了非应用本身的逻辑，能够在不修改代码的情况下对反序列化漏洞攻击实现拦截。")]),s._v(" "),t("li",[s._v("比如针对Python语言做一些 Hook，如果发现一些敏感函数（比如pickle.dumps、pickle.loads）被执行就打印出栈回溯，方便追踪。")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);