(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{563:function(s,a,n){"use strict";n.r(a);var t=n(35),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"python实用技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#python实用技巧"}},[s._v("#")]),s._v(" Python实用技巧")]),s._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#all-or-any"}},[s._v("all() or any()")])]),n("li",[n("a",{attrs:{href:"#处理用户的多个输入"}},[s._v("处理用户的多个输入")])]),n("li",[n("a",{attrs:{href:"#回文字符串判断"}},[s._v("回文字符串判断")])]),n("li",[n("a",{attrs:{href:"#尽量使用-inline-if-statement"}},[s._v("尽量使用 Inline if statement")])]),n("li",[n("a",{attrs:{href:"#找到list中重复最多的元素"}},[s._v("找到list中重复最多的元素")])]),n("li",[n("a",{attrs:{href:"#bashplotlib"}},[s._v("bashplotlib")])]),n("li",[n("a",{attrs:{href:"#collections"}},[s._v("collections")])]),n("li",[n("a",{attrs:{href:"#dir"}},[s._v("dir")])]),n("li",[n("a",{attrs:{href:"#emoji"}},[s._v("emoji")])]),n("li",[n("a",{attrs:{href:"#from-future-import"}},[s._v("from  _future_  import")])]),n("li",[n("a",{attrs:{href:"#geogy"}},[s._v("geogy")])]),n("li",[n("a",{attrs:{href:"#howdoi"}},[s._v("howdoi")])]),n("li",[n("a",{attrs:{href:"#inspect"}},[s._v("inspect")])]),n("li",[n("a",{attrs:{href:"#jedi"}},[s._v("Jedi")])]),n("li",[n("a",{attrs:{href:"#kwargs"}},[s._v("**kwargs")])]),n("li",[n("a",{attrs:{href:"#列表-list-推导式"}},[s._v("列表(list)推导式")])]),n("li",[n("a",{attrs:{href:"#map"}},[s._v("map")])]),n("li",[n("a",{attrs:{href:"#newspaper3k"}},[s._v("newspaper3k")])]),n("li",[n("a",{attrs:{href:"#operator-overloading"}},[s._v("Operator overloading")])]),n("li",[n("a",{attrs:{href:"#pprint"}},[s._v("pprint")])]),n("li",[n("a",{attrs:{href:"#queue"}},[s._v("Queue")])]),n("li",[n("a",{attrs:{href:"#repr"}},[s._v("_repr_")])]),n("li",[n("a",{attrs:{href:"#sh"}},[s._v("sh")])]),n("li",[n("a",{attrs:{href:"#type-hints"}},[s._v("Type hints")])]),n("li",[n("a",{attrs:{href:"#uuid"}},[s._v("uuid")])]),n("li",[n("a",{attrs:{href:"#virtual-environments"}},[s._v("Virtual environments")])]),n("li",[n("a",{attrs:{href:"#wikipedia"}},[s._v("wikipedia")])]),n("li",[n("a",{attrs:{href:"#xkcd"}},[s._v("xkcd")])]),n("li",[n("a",{attrs:{href:"#yaml"}},[s._v("YAML")])]),n("li",[n("a",{attrs:{href:"#将两个字典进行合并"}},[s._v("将两个字典进行合并")])]),n("li",[n("a",{attrs:{href:"#zip"}},[s._v("zip")])]),n("li",[n("a",{attrs:{href:"#字典按照value进行排序"}},[s._v("字典按照value进行排序")])]),n("li",[n("a",{attrs:{href:"#demjson处理非标准json数据"}},[s._v("demjson处理非标准json数据")])]),n("li",[n("a",{attrs:{href:"#写在最后"}},[s._v("写在最后")])]),n("li",[n("a",{attrs:{href:"#参考资料"}},[s._v("参考资料")])])])]),n("p"),s._v(" "),n("h2",{attrs:{id:"all-or-any"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#all-or-any"}},[s._v("#")]),s._v(" all() or any()")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('一般来说, 当我们有多个 and 条件时使用 all()，当我们有多个 or 条件时使用 any()\nx = [True, True, False]\nif any(x):\n    print("至少有一个True")\nif all(x):\n    print("全是True")\nif any(x) and not all(x):\n    print("至少一个True和一个False")\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"处理用户的多个输入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理用户的多个输入"}},[s._v("#")]),s._v(" 处理用户的多个输入")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('一般写法\nn1 = input("enter a number : ")\nn2 = input("enter a number : ")\nn2 = input("enter a number : ")\nprint(n1, n2, n3)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('更好的处理\nn1, n2, n3 = input("enter a number : ").split()\nprint(n1, n2, n3)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"回文字符串判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回文字符串判断"}},[s._v("#")]),s._v(" 回文字符串判断")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('print("John Deo"[::-1])\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('v1 = "madam" \nv2 = "master" \nprint(v1.find(v1[::-1]) == 0) # True\nprint(v1.find(v2[::-1]) == 0) # False\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"尽量使用-inline-if-statement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#尽量使用-inline-if-statement"}},[s._v("#")]),s._v(" 尽量使用 Inline if statement")]),s._v(" "),n("ul",[n("li",[s._v("大多数情况下，我们在条件之后只有一个语句，因此使用Inline if statement 可以帮助我们编写更简洁的代码")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('一般写法\nif name:\n    print(name)\nif name and age > 18:\n    print("user is verified")\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('更好的处理\nage > 18 and name and print("user is verified")\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"找到list中重复最多的元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#找到list中重复最多的元素"}},[s._v("#")]),s._v(" 找到list中重复最多的元素")]),s._v(" "),n("ul",[n("li",[s._v("在Python中可以使用 max( ) 函数并传递 list.count 作为key，即可找出列表list中重复次数最多的元素")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\nlst = [1, 2, 3, 4, 3, 4, 4, 5, 6, 3, 1, 6, 7, 9, 4, 0]\nmost_repeated_item = max(lst, key=lst.count)\nprint(most_repeated_item)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"bashplotlib"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bashplotlib"}},[s._v("#")]),s._v(" bashplotlib")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("- Bashplotlib 是一个 Python 库，他能够帮助我们在命令行(粗旷的环境)中绘制数据。\n```\n# 模块安装\npip install bashplotlib\n# 绘制实例\nimport numpy as np\nfrom bashplotlib.histpgram import plot_hist\narr = np.ramdom.normal(size=1000, loc=0, scale=1)\nplot_hist(arr, bincount=50)\n```\n")])])]),n("h2",{attrs:{id:"collections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#collections"}},[s._v("#")]),s._v(" collections")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('from collections import OrderedDict, Counter\n# 记住键的添加顺序！\nx = OrderedDict(a=1, b=2, c=3)\n# 统计每个字符出现的频率\ny = Counter("Hello World!")\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import collections\nprint(collections.__all__)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("namedtuple\n我们知道tuple可以表示不变集合，例如，一个点的二维坐标就可以表示成p = (1, 2),但是，看到(1, 2)，很难看出这个tuple是用来表示一个坐标的,定义一个class又小题大做了\nfrom collections import namedtuple\nPoint = namedtuple('point', ['x', 'y'])\np = Point(1, 2)\nprint(p.x)\nnamedtuple是一个函数，它用来创建一个自定义的tuple对象，并且规定了tuple元素的个数，并可以用属性而不是索引来引用tuple的某个元素\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("namedtuple使用list存储数据时，按索引访问元素很快，但是插入和删除元素就很慢了，因为list是线性存储，数据量大的时候，插入和删除效率很低\ndeque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈\nfrom collections import deque\nq = deque(['b'])\nq.appendleft('a')\nq.append('c')\nprint(q)\ndeque除了实现list的append()和pop()外，还支持appendleft()和popleft()，这样就可以非常高效地往头部添加或删除元素\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("使用dict时，如果引用的Key不存在，就会抛出KeyError。如果希望key不存在时，返回一个默认值，就可以用defaultdict\nfrom collections import defaultdict\nd = defaultdict(lambda: 'default_value')\nd['key'] = 'value'\nprint(d['key'])\nprint(d['not_exist'])\n注意默认值是调用函数返回的，而函数在创建defaultdict对象时传入\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("python3.6之前使用dict时，Key是无序的。在对dict做迭代时，我们无法确定Key的顺序。如果要保持Key的顺序，可以用OrderedDict\nfrom collections import OrderedDict\nd = dict([('a', 1), ('b', 2), ('c', 3)])\nod = OrderedDict([('a', 1), ('b', 2), ('c', 3)])\nprint(d)\nprint(od)\nOrderedDict的Key会按照插入的顺序排列，不是Key本身排序\nOrderedDict可以实现一个FIFO（先进先出）的dict，当容量超出限制时，先删除最早添加的Key\n源码如下：\nfrom collections import OrderedDict\nclass LastUpdatedOrderedDict(OrderedDict):\n\n    def __init__(self, capacity):\n        super(LastUpdatedOrderedDict, self).__init__()\n        self._capacity = capacity\n\n    def __setitem__(self, key, value):\n        containsKey = 1 if key in self else 0\n        if len(self) - containsKey >= self._capacity:\n            last = self.popitem(last=False)\n            print 'remove:', last\n        if containsKey:\n            del self[key]\n            print 'set:', (key, value)\n        else:\n            print 'add:', (key, value)\n        OrderedDict.__setitem__(self, key, value)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Counter是一个简单的计数器，例如，统计字符出现的个数\nfrom collections import Counter\nc = Counter()\ntmp_str = 'fjdkasgkjqpejfkasfqjfkadsjgda'\nfor item in tmp_str:\n    c[item] += 1\nprint(c)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("合并2个字典\nfrom collections import ChainMap\ndict1 = {'name': 'jim', 'age': 21}\ndict2 = {'high': 175, 'gender': '男'}\nnew_dict = ChainMap(dict1, dict2)\nprint(new_dict)\nprint(new_dict['name'])\nprint(new_dict['age'])\nprint(new_dict['high'])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"dir"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dir"}},[s._v("#")]),s._v(" dir")]),s._v(" "),n("ul",[n("li",[s._v("有没有想过如何查看 Python 对象内部并查看它具有哪些属性？在命令行中输入：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('dir() \ndir("Hello World") \ndir(dir)\n当以交互方式运行 Python 以及动态探索你正在使用的对象和模块时，这可能是一个非常有用的功能\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"emoji"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#emoji"}},[s._v("#")]),s._v(" emoji")]),s._v(" "),n("ul",[n("li",[s._v("emoji[3] 是日本在无线通信中所使用的视觉情感符号，绘指图画，文字指的则是字符，可用来代表多种表情，如笑脸表示笑、蛋糕表示食物等。在中国大陆，emoji通常叫做“小黄脸”，或者直称emoji。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('# 安装模块\npip install emoji\n# 做个尝试\nfrom emoji import emojize\nprint(emojize(":thumbs_up:"))\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"from-future-import"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#from-future-import"}},[s._v("#")]),s._v(" from  "),n("strong",[s._v("future")]),s._v("  import")]),s._v(" "),n("ul",[n("li",[s._v("Python 流行的结果之一，总是有新版本正在开发中。新版本意味着新功能 —— 除非你的版本已过时。")]),s._v(" "),n("li",[s._v("不过不要担心。使用该__future__模块[4]可以帮助你用Python的未来版本导入功能。从字面上看，这就像时间旅行、魔法或其他东西。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('from __future__ import print_function\nprint("Hello World!")\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"geogy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#geogy"}},[s._v("#")]),s._v(" geogy")]),s._v(" "),n("ul",[n("li",[s._v("地理，对大多数程序员来说是一个具有挑战性的领域。在获取地理信息或者绘制地图时，也会遇到不少问题。这个geopy 模块[5]让地理相关内容变得非常容易。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('pip install geopy\n它通过抽象一系列不同地理编码服务的 API 来工作。通过它，你能够获得一个地方的完整街道地址、纬度、经度甚至海拔高度。\n还有一个有用的距离类。它以你偏好的测量单位计算两个位置之间的距离。\nfrom geopy import GoogleV3\nplace = "221b Baker Street, London"\nlocation = GoogleV3().geocode(place)\nprint(location.address)\nprint(location.location)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"howdoi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#howdoi"}},[s._v("#")]),s._v(" howdoi")]),s._v(" "),n("ul",[n("li",[s._v("当你使用terminal终端编程时，通过在遇到问题后会在StackOverflow上搜索答案，完后会回到终端继续编程，此时有时会不记得你之前查到的解决方案，此时需要重新查看StackOverflow，但又不想离开终端，那么此时你需要用到这个有用的命令行工具howdoi[6]。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("pip install howdoi\n无论你有什么问题，都可以问它，它会尽力回复。\nhowdoi vertical align css\nhowdoi for loop in java\nhowdoi undo commits in git\n但请注意——它会从 StackOverflow 的最佳答案中抓取代码。它可能并不总是提供最有用的信息......\nhowdoi exit vim\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"inspect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inspect"}},[s._v("#")]),s._v(" inspect")]),s._v(" "),n("ul",[n("li",[s._v("Python 的inspect模块[7]非常适合了解幕后发生的事情。你甚至可以调用它自己的方法！")]),s._v(" "),n("li",[s._v("下面的代码示例inspect.getsource() 用于打印自己的源代码。 inspect.getmodule() 还用于打印定义它的模块。")]),s._v(" "),n("li",[s._v("最后一行代码打印出它自己的行号。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import inspect\nprint(inspect.getsource(inspect.getsource))\nprint(inspect.getmodule(inspect.getmodule))\nprint(inspect.currentframe().f_lineno)\n当然，除了这些微不足道的用途，inspect 模块可以证明对理解你的代码在做什么很有用。你还可以使用它来编写自文档化代码。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"jedi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jedi"}},[s._v("#")]),s._v(" Jedi")]),s._v(" "),n("ul",[n("li",[s._v("Jedi 库是一个自动完成和代码分析库。它使编写代码更快、更高效。")]),s._v(" "),n("li",[s._v("除非你正在开发自己的 IDE，否则你可能对使用Jedi [8]作为编辑器插件比较感兴趣。幸运的是，这已经有可用的负载！")])]),s._v(" "),n("h2",{attrs:{id:"kwargs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#kwargs"}},[s._v("#")]),s._v(" **kwargs")]),s._v(" "),n("ul",[n("li",[s._v("在学习任何语言时，都会有许多里程碑。使用 Python 并理解神秘的**kwargs语法可能算作一个重要的里程碑。")]),s._v(" "),n("li",[s._v("字典对象前面的双星号**kwargs[9]允许你将该字典的内容作为命名参数传递给函数。")]),s._v(" "),n("li",[s._v("字典的键是参数名称，值是传递给函数的值。你甚至不需要调用它kwargs！")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('dictionary = {"a": 1, "b": 2}\ndef someFunction(a, b):\n    print(a + b)\n    return\n# 这些做同样的事情:\nsomeFunction(**dictionary)\nsomeFunction(a=1, b=2)\n当你想编写可以处理未预先定义的命名参数的函数时，这很有用。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"列表-list-推导式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#列表-list-推导式"}},[s._v("#")]),s._v(" 列表(list)推导式")]),s._v(" "),n("ul",[n("li",[s._v("关于 Python 编程，我最喜欢的事情之一是它的列表推导式[10]。")]),s._v(" "),n("li",[s._v("这些表达式可以很容易地编写非常顺畅的代码，几乎与自然语言一样。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("numbers = [1,2,3,4,5,6,7]\nevens = [x for x in numbers if x % 2 is 0]\nodds = [y for y in numbers if y not in evens]\ncities = ['London', 'Dublin', 'Oslo']\n\ndef visit(city):\n    print(\"Welcome to \"+city)\n    \nfor city in cities:\n    visit(city)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[s._v("#")]),s._v(" map")]),s._v(" "),n("ul",[n("li",[s._v("Python 通过许多内置功能支持函数式编程。最有用的map()功能之一是函数——尤其是与lambda 函数[11]结合使用时。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("x = [1, 2, 3] \ny = map(lambda x : x + 1, x)\n# 打印出 [2,3,4]\nprint(list(y))\n在上面的示例中，map()将一个简单的 lambda 函数应用于x. 它返回一个映射对象，该对象可以转换为一些可迭代对象，例如列表或元组。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"newspaper3k"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#newspaper3k"}},[s._v("#")]),s._v(" newspaper3k")]),s._v(" "),n("ul",[n("li",[s._v("如果你还没有看过它，那么准备好被Python newspaper module [12]模块震撼到。它使你可以从一系列领先的国际出版物中检索新闻文章和相关的元数据。你可以检索图像、文本和作者姓名。它甚至有一些内置的 NLP 功能[13]。")]),s._v(" "),n("li",[s._v("因此，如果你正在考虑在下一个项目中使用 BeautifulSoup 或其他一些 DIY 网页抓取库，使用本模块可以为你自己节省不少时间和精力。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("pip install newspaper3k\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"operator-overloading"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#operator-overloading"}},[s._v("#")]),s._v(" Operator overloading")]),s._v(" "),n("ul",[n("li",[s._v("Python 提供对运算符重载的[14]支持，这是让你听起来像一个合法的计算机科学家的术语之一。")]),s._v(" "),n("li",[s._v("这实际上是一个简单的概念。有没有想过为什么 Python 允许你使用+运算符来添加数字以及连接字符串？这就是操作符重载的作用。")]),s._v(" "),n("li",[s._v("你可以定义以自己的特定方式使用 Python 的标准运算符符号的对象。并且你可以在与你正在使用的对象相关的上下文中使用它们。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Thing:\n    def __init__(self, value):\n        self.__value = value\n    def __gt__(self, other):\n        return self.__value > other.__value\n    def __lt__(self, other):\n        return self.__value < other.__value\nsomething = Thing(100)\nnothing = Thing(0)\n# True\nsomething > nothing\n# False\nsomething < nothing\n# Error\nsomething + nothing\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h2",{attrs:{id:"pprint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pprint"}},[s._v("#")]),s._v(" pprint")]),s._v(" "),n("ul",[n("li",[s._v("Python 的默认print函数完成了它的工作。但是如果尝试使用print函数打印出任何大的嵌套对象，其结果相当难看。这个标准库的漂亮打印模块pprint[15]可以以易于阅读的格式打印出复杂的结构化对象。")]),s._v(" "),n("li",[s._v("这算是任何使用非平凡数据结构的 Python 开发人员的必备品。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import requests\nimport pprint\nurl = 'https://randomuser.me/api/?results=1'\nusers = requests.get(url).json()\npprint.pprint(users)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"queue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[s._v("#")]),s._v(" Queue")]),s._v(" "),n("ul",[n("li",[s._v("Python 标准库的 Queue 模块实现支持多线程。这个模块让你实现队列数据结构。这些是允许你根据特定规则添加和检索条目的数据结构。")]),s._v(" "),n("li",[s._v("“先进先出”（FIFO）队列让你可以按添加顺序检索对象。“后进先出”(LIFO) 队列让你可以首先访问最近添加的对象。")]),s._v(" "),n("li",[s._v("最后，优先队列让你可以根据对象的排序顺序检索对象。")]),s._v(" "),n("li",[s._v("这是一个如何在 Python 中使用队列Queue[16]进行多线程编程的示例。")])]),s._v(" "),n("h2",{attrs:{id:"repr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#repr"}},[s._v("#")]),s._v(" "),n("strong",[s._v("repr")])]),s._v(" "),n("ul",[n("li",[s._v("在 Python 中定义类或对象时，提供一种将该对象表示为字符串的“官方”方式很有用。例如：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("file = open('file.txt', 'r') \nprint(file) \n<open file 'file.txt', mode 'r' at 0x10d30aaf0>\n这使得调试代码更加容易。将其添加到你的类定义中，如下所示：\nclass someClass: \n    def __repr__(self): \n        return \"<some description here>\"\nsomeInstance = someClass()\n# 打印 <some description here>\nprint(someInstance)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"sh"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sh"}},[s._v("#")]),s._v(" sh")]),s._v(" "),n("ul",[n("li",[s._v("Python 是一种很棒的脚本语言。有时使用标准的 os 和 subprocess 库可能有点头疼。")]),s._v(" "),n("li",[s._v("该SH库[17]让你可以像调用普通函数一样调用任何程序——对于自动化工作流和任务非常有用。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import sh\nsh.pwd()\nsh.mkdir('new_folder')\nsh.touch('new_file.txt')\nsh.whoami()\nsh.echo('This is great!')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"type-hints"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#type-hints"}},[s._v("#")]),s._v(" Type hints")]),s._v(" "),n("ul",[n("li",[s._v("Python 是一种动态类型语言。定义变量、函数、类等时不需要指定数据类型。这允许快速的开发时间。但是，没有什么比由简单的输入问题引起的运行时错误更烦人的了。")]),s._v(" "),n("li",[s._v("从 Python 3.5[18] 开始，你可以选择在定义函数时提供类型提示。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def addTwo(x : Int) -> Int:\n    return x + 2\n你还可以定义类型别名。\n\nfrom typing import List\nVector = List[float]\nMatrix = List[Vector]\ndef addMatrix(a : Matrix, b : Matrix) -> Matrix:\n  result = []\n  for i,row in enumerate(a):\n    result_row =[]\n    for j, col in enumerate(row):\n      result_row += [a[i][j] + b[i][j]]\n    result += [result_row]\n  return result\nx = [[1.0, 0.0], [0.0, 1.0]]\ny = [[2.0, 1.0], [0.0, -2.0]]\nz = addMatrix(x, y)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("ul",[n("li",[s._v("尽管不是强制性的，但类型注释可以使你的代码更易于理解。")]),s._v(" "),n("li",[s._v("它们还允许你使用类型检查工具，在运行前捕获那些杂散的 TypeError。如果你正在处理大型、复杂的项目，这是很有用的！")])]),s._v(" "),n("h2",{attrs:{id:"uuid"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uuid"}},[s._v("#")]),s._v(" uuid")]),s._v(" "),n("ul",[n("li",[s._v("通过Python 标准库的 uuid 模块[19]生成通用唯一 ID（或“UUID”）的一种快速简便的方法。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import uuid\nuser_id = uuid.uuid4()\nprint(user_id)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("这将创建一个随机的 128 位数字，该数字几乎肯定是唯一的。事实上，可以生成超过 2¹²² 种可能的 UUID。这超过了五个十进制 （或 5,000,000,000,000,000,000,000,000,000,000,000,000）。")]),s._v(" "),n("li",[s._v("在给定的集合中发现重复的概率极低。即使有一万亿个 UUID，重复存在的可能性也远低于十亿分之一。")])]),s._v(" "),n("h2",{attrs:{id:"virtual-environments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#virtual-environments"}},[s._v("#")]),s._v(" Virtual environments")]),s._v(" "),n("ul",[n("li",[s._v("你可能同时在多个 Python 项目上工作。不幸的是，有时两个项目将依赖于相同依赖项的不同版本。你在你的系统上安装了什么?")]),s._v(" "),n("li",[s._v("幸运的是，Python支持对 虚拟环境[20] 的让你可以两全其美。从命令行：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("python -m venv my-project \nsource my-project/bin/activate \npip install all-the-modules\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("现在，你可以在同一台机器上运行 Python 的独立版本和安装。")])]),s._v(" "),n("h2",{attrs:{id:"wikipedia"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wikipedia"}},[s._v("#")]),s._v(" wikipedia")]),s._v(" "),n("ul",[n("li",[s._v("维基百科有一个很棒的 API，它允许用户以编程方式访问无与伦比的完全免费的知识和信息。在wikipedia模块[21]使访问该API非常方便。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import wikipedia\nresult = wikipedia.page('freeCodeCamp')\nprint(result.summary)\nfor link in result.links:\n    print(link)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("和真实站点一样，该模块提供了多语言支持、页面消歧、随机页面检索，甚至还有一个donate()方法。")])]),s._v(" "),n("h2",{attrs:{id:"xkcd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#xkcd"}},[s._v("#")]),s._v(" xkcd")]),s._v(" "),n("ul",[n("li",[s._v("幽默是 Python 语言的一个关键特征，它是以英国喜剧小品剧Python飞行马戏团[22]命名的。Python 的许多官方文档都引用了该节目最著名的草图。不过，Python 的幽默并不仅限于文档。试试运行下面的行：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import antigravity\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"yaml"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#yaml"}},[s._v("#")]),s._v(" YAML")]),s._v(" "),n("ul",[n("li",[s._v("YAML[23]指的是 “ 非标记语言” 。它是一种数据格式化语言，是 JSON 的超集。")]),s._v(" "),n("li",[s._v("与 JSON 不同，它可以存储更复杂的对象并引用它自己的元素。你还可以编写注释，使其特别适合编写配置文件。该PyYAML模块[24]可让你使用YAML使用Python。")]),s._v(" "),n("li",[s._v("安装并然后导入到你的项目中：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("pip install pyyaml\nimport yaml\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("PyYAML 允许你存储任何数据类型的 Python 对象，以及任何用户定义类的实例。")])]),s._v(" "),n("h2",{attrs:{id:"将两个字典进行合并"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#将两个字典进行合并"}},[s._v("#")]),s._v(" 将两个字典进行合并")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('d1 = {"v1": 22, "v2": 33}\nd2 = {"v2": 44, "v3": 55}\nd3 = {**d1, **d2}\nprint(d3)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"zip"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#zip"}},[s._v("#")]),s._v(" zip")]),s._v(" "),n("ul",[n("li",[s._v("你曾经遇到过需要从两个列表中形成字典吗？")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("keys = ['a', 'b', 'c']\nvals = [1, 2, 3]\nzipped = dict(zip(keys, vals))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("该zip()内置函数需要一系列可迭代的对象，并返回一个元组列表中。每个元组按位置索引对输入对象的元素进行分组。")]),s._v(" "),n("li",[s._v("你还可以通过调用对象来“解压缩”对象*zip()。")])]),s._v(" "),n("h2",{attrs:{id:"字典按照value进行排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字典按照value进行排序"}},[s._v("#")]),s._v(" 字典按照value进行排序")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('d = {\n    "v1": 80,\n    "v2": 20,\n    "v3": 40,\n    "v4": 20,\n    "v5": 10,\n}\nsorted_d = dict(sorted(d.items(), key=lambda item: item[1]))\nprint(sorted_d)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("当然我们也可以使用itemgetter( )来替代上述 lambda函数,代码如下\nfrom operator import itemgetter\nsorted_d = dict(sorted(d.items(), key=itemgetter(1)))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"demjson处理非标准json数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#demjson处理非标准json数据"}},[s._v("#")]),s._v(" demjson处理非标准json数据")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# javascript中的对象，json.loads(js_json)会报错\njs_json = \"{x:1, y:2, z:3}\"\n \n# python打印出来的字典，json.loads(js_json)会报错\npy_json = \"{'x':1, 'y':2, 'z':3}\"\n \n# 唯独这种格式，json.loads(py_json)不会报错，得到{'x': 1, 'y': 2, 'z': 3}\npy_json = '{\"x\":1, \"y\":2, \"z\":3}'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import demjson\n \njs_json = \"{x:1, y:2, z:3}\"\npy_json = \"{'x':1, 'y':2, 'z':3}\"\npy_json = '{\"x\":1, \"y\":2, \"z\":3}'\n \ndata = demjson.decode(js_json)\nprint(data)\n# {'y': 2, 'x': 1, 'z': 3}\n \ndata = demjson.decode(py_json1)\nprint(data)\n# {'y': 2, 'x': 1, 'z': 3}\n \ndata = demjson.decode(py_json2)\nprint(data)\n# {'y': 2, 'x': 1, 'z': 3}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("demjson.encode( ['one',42,True,None] )    # From Python to JSON\n'[\"one\",42,true,null]'\n\ndemjson.decode( '[\"one\",42,true,null]' )  # From JSON to Python\n['one', 42, True, None]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"写在最后"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[s._v("#")]),s._v(" 写在最后")]),s._v(" "),n("ul",[n("li",[s._v("Python 是一种非常多样化且发展良好的语言，如果你想了解更多的python模块，可以参考awesome-python[25]。")])]),s._v(" "),n("h2",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),n("ul",[n("li",[s._v("[1] collections 模块: https://docs.python.org/3/library/collections.html")]),s._v(" "),n("li",[s._v("[2] functions: https://docs.python.org/3/library/functions.html#dir")]),s._v(" "),n("li",[s._v("[3] emoji: https://pypi.org/project/emoji/")]),s._v(" "),n("li",[s._v("[4] __future__模块: https://docs.python.org/2/library/future.html")]),s._v(" "),n("li",[s._v("[5] geopy 模块: https://geopy.readthedocs.io/en/latest/")]),s._v(" "),n("li",[s._v("[6] howdoi: https://github.com/gleitz/howdoi")]),s._v(" "),n("li",[s._v("[7] inspect模块: https://docs.python.org/3/library/inspect.html")]),s._v(" "),n("li",[s._v("[8] Jedi : https://jedi.readthedocs.io/en/latest/docs/usage.html")]),s._v(" "),n("li",[s._v("[9] **kwargs: https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments")]),s._v(" "),n("li",[s._v("[10] 列表推导式: https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions")]),s._v(" "),n("li",[s._v("[11] lambda 函数: https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions")]),s._v(" "),n("li",[s._v("[12] Python newspaper module : https://pypi.org/project/newspaper3k/")]),s._v(" "),n("li",[s._v("[13] 内置的 NLP 功能: https://newspaper.readthedocs.io/en/latest/user_guide/quickstart.html#performing-nlp-on-an-article")]),s._v(" "),n("li",[s._v("[14] 运算符重载的: https://docs.python.org/3/reference/datamodel.html#special-method-names")]),s._v(" "),n("li",[s._v("[15] pprint: https://docs.python.org/3/library/pprint.html")]),s._v(" "),n("li",[s._v("[16] Queue: https://www.tutorialspoint.com/python3/python_multithreading.htm")]),s._v(" "),n("li",[s._v("[17] SH库: http://amoffat.github.io/sh/")]),s._v(" "),n("li",[s._v("[18] Python 3.5: https://docs.python.org/3/library/typing.html")]),s._v(" "),n("li",[s._v("[19] uuid 模块: https://docs.python.org/3/library/uuid.html")]),s._v(" "),n("li",[s._v("[20] 虚拟环境: https://docs.python.org/3/tutorial/venv.html")]),s._v(" "),n("li",[s._v("[21] wikipedia模块: https://wikipedia.readthedocs.io/en/latest/quickstart.html")]),s._v(" "),n("li",[s._v("[22] Python飞行马戏团: https://en.wikipedia.org/wiki/Monty_Python's_Flying_Circus")]),s._v(" "),n("li",[s._v("[23] YAML: http://yaml.org/")]),s._v(" "),n("li",[s._v("[24] PyYAML模块: https://pyyaml.org/wiki/PyYAMLDocumentation")]),s._v(" "),n("li",[s._v("[25] awesome-python: https://awesome-python.com/")])])])}),[],!1,null,null,null);a.default=e.exports}}]);