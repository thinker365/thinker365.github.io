(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{576:function(s,a,n){"use strict";n.r(a);var e=n(35),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#和数字相关"}},[s._v("和数字相关")])]),n("li",[n("a",{attrs:{href:"#和数据结构相关"}},[s._v("和数据结构相关")])]),n("li",[n("a",{attrs:{href:"#和作用域相关"}},[s._v("和作用域相关")])]),n("li",[n("a",{attrs:{href:"#和迭代器生成器相关"}},[s._v("和迭代器生成器相关")])]),n("li",[n("a",{attrs:{href:"#字符串类型代码的执行"}},[s._v("字符串类型代码的执行")])]),n("li",[n("a",{attrs:{href:"#输入输出"}},[s._v("输入输出")])]),n("li",[n("a",{attrs:{href:"#内存相关"}},[s._v("内存相关")])]),n("li",[n("a",{attrs:{href:"#文件操作相关"}},[s._v("文件操作相关")])]),n("li",[n("a",{attrs:{href:"#模块相关"}},[s._v("模块相关")])]),n("li",[n("a",{attrs:{href:"#帮-助"}},[s._v("帮 助")])]),n("li",[n("a",{attrs:{href:"#调用相关"}},[s._v("调用相关")])]),n("li",[n("a",{attrs:{href:"#查看内置属性"}},[s._v("查看内置属性")])]),n("li",[n("a",{attrs:{href:"#_6个神仙内置函数"}},[s._v("6个神仙内置函数")])])])]),n("p"),s._v(" "),n("h2",{attrs:{id:"和数字相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#和数字相关"}},[s._v("#")]),s._v(" 和数字相关")]),s._v(" "),n("ol",[n("li",[s._v("数据类型\n"),n("ul",[n("li",[s._v("bool : 布尔型(True,False)")]),s._v(" "),n("li",[s._v("int : 整型(整数)")]),s._v(" "),n("li",[s._v("float : 浮点型(小数)")]),s._v(" "),n("li",[s._v("complex : 复数")])])]),s._v(" "),n("li",[s._v("进制转换\n"),n("ul",[n("li",[s._v("bin() 将给的参数转换成二进制")]),s._v(" "),n("li",[s._v("otc() 将给的参数转换成八进制")]),s._v(" "),n("li",[s._v("hex() 将给的参数转换成十六进制")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("print(bin(10))  # 二进制:0b1010\nprint(hex(10))  # 十六进制:0xa\nprint(oct(10))  # 八进制:0o12\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])]),s._v(" "),n("li",[s._v("数学运算\n"),n("ul",[n("li",[s._v("abs() 返回绝对值")]),s._v(" "),n("li",[s._v("divmode() 返回商和余数")]),s._v(" "),n("li",[s._v("round() 四舍五入")]),s._v(" "),n("li",[s._v("pow(a, b) 求a的b次幂, 如果有三个参数. 则求完次幂后对第三个数取余")]),s._v(" "),n("li",[s._v("sum() 求和")]),s._v(" "),n("li",[s._v("min() 求最小值")]),s._v(" "),n("li",[s._v("max() 求最大值")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("print(abs(-2))  # 绝对值:2\nprint(divmod(20,3)) # 求商和余数:(6,2)\nprint(round(4.50))   # 五舍六入:4\nprint(round(4.51))   #5\nprint(pow(10,2,3))  # 如果给了第三个参数. 表示最后取余:1\nprint(sum([1,2,3,4,5,6,7,8,9,10]))  # 求和:55\nprint(min(5,3,9,12,7,2))  #求最小值:2\nprint(max(7,3,15,9,4,13))  #求最大值:15\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])])]),s._v(" "),n("h2",{attrs:{id:"和数据结构相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#和数据结构相关"}},[s._v("#")]),s._v(" 和数据结构相关")]),s._v(" "),n("ol",[n("li",[s._v("序列\n"),n("ul",[n("li",[s._v("列表和元组\n"),n("ul",[n("li",[s._v("list() 将一个可迭代对象转换成列表")]),s._v(" "),n("li",[s._v("tuple() 将一个可迭代对象转换成元组")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("print(list((1,2,3,4,5,6)))  #[1, 2, 3, 4, 5, 6]\nprint(tuple([1,2,3,4,5,6]))  #(1, 2, 3, 4, 5, 6)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[s._v("相关内置函数\n"),n("ul",[n("li",[s._v("reversed() 将一个序列翻转, 返回翻转序列的迭代器")]),s._v(" "),n("li",[s._v("slice() 列表的切片")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lst = \"你好啊\"\nit = reversed(lst)   # 不会改变原列表. 返回一个迭代器, 设计上的一个规则\nprint(list(it))  #['啊', '好', '你']\nlst = [1, 2, 3, 4, 5, 6, 7]\nprint(lst[1:3:1])  #[2,3]\ns = slice(1, 3, 1)  #  切片用的\nprint(lst[s])  #[2,3]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])])])]),s._v(" "),n("li",[s._v("字符串\n"),n("ul",[n("li",[s._v("str() 将数据转化成字符串"),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("print(str(123)+'456')  #123456\nformat()     与具体数据相关, 用于计算各种小数, 精算等.\ns = \"hello world!\"\nprint(format(s, \"^20\"))  #剧中\nprint(format(s, \"<20\"))  #左对齐\nprint(format(s, \">20\"))  #右对齐\n#     hello world!    \n# hello world!        \n#         hello world!\nprint(format(3, 'b' ))    # 二进制:11\nprint(format(97, 'c' ))   # 转换成unicode字符:a\nprint(format(11, 'd' ))   # ⼗进制:11\nprint(format(11, 'o' ))   # 八进制:13 \nprint(format(11, 'x' ))   # 十六进制(⼩写字母):b\nprint(format(11, 'X' ))   # 十六进制(大写字母):B\nprint(format(11, 'n' ))   # 和d⼀样:11\nprint(format(11))         # 和d⼀样:11\nprint(format(123456789, 'e' ))      # 科学计数法. 默认保留6位小数:1.234568e+08\nprint(format(123456789, '0.2e' ))   # 科学计数法. 保留2位小数(小写):1.23e+08\nprint(format(123456789, '0.2E' ))   # 科学计数法. 保留2位小数(大写):1.23E+08\nprint(format(1.23456789, 'f' ))     # 小数点计数法. 保留6位小数:1.234568\nprint(format(1.23456789, '0.2f' ))  # 小数点计数法. 保留2位小数:1.23\nprint(format(1.23456789, '0.10f'))  # 小数点计数法. 保留10位小数:1.2345678900\nprint(format(1.23456789e+3, 'F'))   # 小数点计数法. 很大的时候输出INF:1234.567890\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])])]),s._v(" "),n("li",[s._v("bytes() 把字符串转化成bytes类型"),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("bs = bytes(\"今天吃饭了吗\", encoding=\"utf-8\")\nprint(bs)  #b'\\xe4\\xbb\\x8a\\xe5\\xa4\\xa9\\xe5\\x90\\x83\\xe9\\xa5\\xad\\xe4\\xba\\x86\\xe5\\x90\\x97'\nbytearray()    返回一个新字节数组. 这个数字的元素是可变的, 并且每个元素的值得范围是[0,256)\nret = bytearray(\"alex\" ,encoding ='utf-8')\nprint(ret[0])  #97\nprint(ret)  #bytearray(b'alex')\nret[0] = 65  #把65的位置A赋值给ret[0]\nprint(str(ret))  #bytearray(b'Alex')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])]),s._v(" "),n("li",[s._v("ord() 输入字符找带字符编码的位置")]),s._v(" "),n("li",[s._v("chr() 输入位置数字找出对应的字符")]),s._v(" "),n("li",[s._v("ascii() 是ascii码中的返回该值 不是就返回u"),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("print(ord('a'))  # 字母a在编码表中的码位:97\nprint(ord('中'))  # '中'字在编码表中的位置:20013\n\nprint(chr(65))  # 已知码位,求字符是什么:A\nprint(chr(19999))  #丟\n\nfor i in range(65536):  #打印出0到65535的字符\n\tprint(chr(i), end=\" \")\nprint(ascii(\"@\"))  #'@'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])]),s._v(" "),n("li",[s._v("repr() 返回一个对象的string形式"),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s = \"今天\\n吃了%s顿\\t饭\" % 3\nprint(s)#今天# 吃了3顿    饭\nprint(repr(s))   # 原样输出,过滤掉转义字符 \\n \\t \\r 不管百分号%\n#'今天\\n吃了3顿\\t饭'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])])])])]),s._v(" "),n("li",[s._v("数据集合\n"),n("ul",[n("li",[s._v("字典：dict 创建一个字典")]),s._v(" "),n("li",[s._v("集合：set 创建一个集合\n"),n("ul",[n("li",[s._v("frozenset() 创建一个冻结的集合，冻结的集合不能进行添加和删除操作。")])])]),s._v(" "),n("li",[s._v("相关内置函数\n"),n("ul",[n("li",[s._v("len() 返回一个对象中的元素的个数")]),s._v(" "),n("li",[s._v("sorted() 对可迭代对象进行排序操作 (lamda)\n"),n("ul",[n("li",[s._v("语法：sorted(Iterable, key=函数(排序规则), reverse=False)")])])]),s._v(" "),n("li",[s._v("Iterable: 可迭代对象")]),s._v(" "),n("li",[s._v("key: 排序规则(排序函数), 在sorted内部会将可迭代对象中的每一个元素传递给这个函数的参数. 根据函数运算的结果进行排序")]),s._v(" "),n("li",[s._v("reverse: 是否是倒叙. True: 倒叙, False: 正序")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lst = [5,7,6,12,1,13,9,18,5]\nlst.sort()  # sort是list里面的一个方法\nprint(lst)  #[1, 5, 5, 6, 7, 9, 12, 13, 18]\n\nll = sorted(lst) # 内置函数. 返回给你一个新列表  新列表是被排序的\nprint(ll)  #[1, 5, 5, 6, 7, 9, 12, 13, 18]\n\nl2 = sorted(lst,reverse=True)  #倒序\nprint(l2)  #[18, 13, 12, 9, 7, 6, 5, 5, 1]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#根据字符串长度给列表排序\nlst = ['one', 'two', 'three', 'four', 'five', 'six']\ndef f(s):\n\treturn len(s)\nl1 = sorted(lst, key=f, )\nprint(l1)  #['one', 'two', 'six', 'four', 'five', 'three']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("enumerate() 获取集合的枚举对象")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lst = ['one','two','three','four','five']\nfor index, el in enumerate(lst,1):    # 把索引和元素一起获取,索引默认从0开始. 可以更改\n\tprint(index)\n\tprint(el)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("all() 可迭代对象中全部是True, 结果才是True")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("print(all([1,'hello',True,9]))  #True\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("any() 可迭代对象中有一个是True, 结果就是True")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("print(any([0,0,0,False,1,'good']))  #True\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("zip() 函数用于将可迭代的对象作为参数, 将对象中对应的元素打包成一个元组, 然后返回由这些元组组成的列表. 如果各个迭代器的元素个数不一致, 则返回列表长度与最短的对象相同"),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lst1 = [1, 2, 3, 4, 5, 6]\nlst2 = ['醉乡民谣', '驴得水', '放牛班的春天', '美丽人生', '辩护人', '被嫌弃的松子的一生']\nlst3 = ['美国', '中国', '法国', '意大利', '韩国', '日本']\nprint(zip(lst1, lst1, lst3))  #<zip object at 0x00000256CA6C7A88>\nfor el in zip(lst1, lst2, lst3):\n\tprint(el)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])]),s._v(" "),n("li",[s._v("fiter() 过滤 (lamda)\n"),n("ul",[n("li",[s._v("语法：fiter(function. Iterable)")]),s._v(" "),n("li",[s._v("function: 用来筛选的函数. 在ﬁlter中会自动的把iterable中的元素传递给function. 然后根据function返回的True或者False来判断是否保留留此项数据 , Iterable: 可迭代对象")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def func(i):    # 判断奇数\n\treturn i % 2 == 1\n\tlst = [1,2,3,4,5,6,7,8,9]\nl1 = filter(func, lst)  #l1是迭代器\nprint(l1)  #<filter object at 0x000001CE3CA98AC8>\nprint(list(l1))  #[1, 3, 5, 7, 9]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])]),s._v(" "),n("li",[s._v("map() 会根据提供的函数对指定序列列做映射(lamda)\n"),n("ul",[n("li",[s._v("语法 : map(function, iterable)")]),s._v(" "),n("li",[s._v("可以对可迭代对象中的每一个元素进行映射. 分别去执行 function")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def f(i):    return i\nlst = [1,2,3,4,5,6,7,]\nit = map(f, lst) # 把可迭代对象中的每一个元素传递给前面的函数进行处理. 处理的结果会返回成迭代器print(list(it))  #[1, 2, 3, 4, 5, 6, 7]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])])])])])])]),s._v(" "),n("h2",{attrs:{id:"和作用域相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#和作用域相关"}},[s._v("#")]),s._v(" 和作用域相关")]),s._v(" "),n("ol",[n("li",[s._v("locals() 返回当前作用域中的名字")]),s._v(" "),n("li",[s._v("globals() 返回全局作用域中的名字")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('def func():\n\ta = 10\n\tprint(locals())  # 当前作用域中的内容\n\tprint(globals())  # 全局作用域中的内容\n\tprint("今天内容很多")\nfunc()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"和迭代器生成器相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#和迭代器生成器相关"}},[s._v("#")]),s._v(" 和迭代器生成器相关")]),s._v(" "),n("ol",[n("li",[s._v("range() 生成数据")]),s._v(" "),n("li",[s._v("next() 迭代器向下执行一次, 内部实际使⽤用了__ next__()⽅方法返回迭代器的下一个项目")]),s._v(" "),n("li",[s._v("iter() 获取迭代器, 内部实际使用的是__ iter__()⽅方法来获取迭代器")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for i in range(15,-1,-5):\n\tprint(i)\n# 15\n# 10\n# 5\n# 0\nlst = [1,2,3,4,5]\nit = iter(lst)  #  __iter__()获得迭代器\nprint(it.__next__())  #1\nprint(next(it)) #2  __next__()  \nprint(next(it))  #3\nprint(next(it))  #4\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h2",{attrs:{id:"字符串类型代码的执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型代码的执行"}},[s._v("#")]),s._v(" 字符串类型代码的执行")]),s._v(" "),n("ol",[n("li",[s._v("eval() 执行字符串类型的代码. 并返回最终结果")]),s._v(" "),n("li",[s._v("exec() 执行字符串类型的代码")]),s._v(" "),n("li",[s._v("compile() 将字符串类型的代码编码. 代码对象能够通过exec语句来执行或者eval()进行求值")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('s1 = input("请输入a+b:")  #输入:8+9\nprint(eval(s1))  # 17 可以动态的执行代码. 代码必须有返回值\ns2 = "for i in range(5): print(i)"\na = exec(s2) # exec 执行代码不返回任何内容\n\n# 0\n# 1\n# 2\n# 3\n# 4\nprint(a)  #None\n\n# 动态执行代码\nexec("""\ndef func():\n\tprint(" 我是周杰伦")\n""" )\nfunc()  #我是周杰伦\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('code1 = "for i in range(3): print(i)"\ncom = compile(code1, "", mode="exec")   # compile并不会执行你的代码.只是编译\nexec(com)   # 执行编译的结果\n# 0\n# 1\n# 2\n\ncode2 = "5+6+7"\ncom2 = compile(code2, "", mode="eval")\nprint(eval(com2))  # 18\n\ncode3 = "name = input(\'请输入你的名字:\')"  #输入:hello\ncom3 = compile(code3, "", mode="single")\nexec(com3)\nprint(name)  #hello\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h2",{attrs:{id:"输入输出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#输入输出"}},[s._v("#")]),s._v(" 输入输出")]),s._v(" "),n("ol",[n("li",[s._v("print() : 打印输出")]),s._v(" "),n("li",[s._v("input() : 获取用户输出的内容")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('print("hello", "world", sep="*", end="@") # sep:打印出的内容用什么连接,end:以什么为结尾\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"内存相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存相关"}},[s._v("#")]),s._v(" 内存相关")]),s._v(" "),n("ol",[n("li",[s._v("hash() : 获取到对象的哈希值(int, str, bool, tuple).")]),s._v(" "),n("li",[s._v("hash算法:(1) 目的是唯一性 (2) dict 查找效率非常高, hash表用空间换的时间 比较耗费内存")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s = 'alex'print(hash(s))  #-168324845050430382lst = [1, 2, 3, 4, 5]print(hash(lst))  #报错,列表是不可哈希的  id() :  获取到对象的内存地址s = 'alex'print(id(s))  #2278345368944\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"文件操作相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文件操作相关"}},[s._v("#")]),s._v(" 文件操作相关")]),s._v(" "),n("ol",[n("li",[s._v("open() : 用于打开一个文件, 创建一个文件句柄")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("f = open('file',mode='r',encoding='utf-8')\nf.read()\nf.close()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"模块相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模块相关"}},[s._v("#")]),s._v(" 模块相关")]),s._v(" "),n("ol",[n("li",[s._v("__ import__() : 用于动态加载类和函数")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('# 让用户输入一个要导入的模块\nimport os\nname = input("请输入你要导入的模块:")\n__import__(name)    # 可以动态导入模块\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"帮-助"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#帮-助"}},[s._v("#")]),s._v(" 帮 助")]),s._v(" "),n("ol",[n("li",[s._v("help() : 函数用于查看函数或模块用途的详细说明")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("print(help(str))  #查看字符串的用途\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"调用相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用相关"}},[s._v("#")]),s._v(" 调用相关")]),s._v(" "),n("ol",[n("li",[s._v("callable() : 用于检查一个对象是否是可调用的. 如果返回True, object有可能调用失败, 但如果返回False. 那调用绝对不会成功")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('a = 10\nprint(callable(a))  #False  变量a不能被调用\n#\ndef f():\n\tprint("hello")\n\tprint(callable(f))   # True 函数是可以被调用的\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"查看内置属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查看内置属性"}},[s._v("#")]),s._v(" 查看内置属性")]),s._v(" "),n("ol",[n("li",[s._v("dir() : 查看对象的内置属性, 访问的是对象中的__dir__()方法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("print(dir(tuple))  #查看元组的方法\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_6个神仙内置函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6个神仙内置函数"}},[s._v("#")]),s._v(" 6个神仙内置函数")]),s._v(" "),n("ol",[n("li",[s._v("Lambda 函数"),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("lambda [arg1 [,arg2,.....argn]]:expression\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("lambda的主体是一个表达式，而不是一个代码块，仅仅能在lambda表达式中封装有限的逻辑进去")]),s._v(" "),n("li",[s._v("一般用来给 filter， map 这样的函数式编程服务")])])]),s._v(" "),n("li",[s._v("Map函数\n"),n("ul",[n("li",[s._v("map()函数会将一个函数映射到一个输入可迭代对象（列表、元组、字符串等）的每个元素，每个元素都是独自被函数“作用”一次")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("map(function,iterable)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("还可以使用匿名函数lambda来配合map函数，这样可以更加精简")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("colors=['red','yellow','green','black']\ncolors_uppercase=list(map(lambda x: x.upper(),colors))\nprint(colors_uppercase)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("实际使用中Map函数会比for循环依次列表元素的方法快！！！")])])]),s._v(" "),n("li",[s._v("Reduce函数\n"),n("ul",[n("li",[s._v("是将传入的函数作用在序列的第一个元素得到结果后，把这个结果继续与下一个元素作用")]),s._v(" "),n("li",[s._v("它与Map函数的最大的区别就是，reduce()里的映射函数（function）必须接收"),n("strong",[s._v("两个参数")]),s._v("，而map里的映射函数（function）可以接收一个或多个参数。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from functools import reduce\n\ndef add(x, y):\n\treturn x + y\n\n# numbers = [1, 2, 3, 4, 5]\nnumbers = (1, 2, 3, 4, 5)\nprint(reduce(add, numbers))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from functools import reduce\n\nnumbers = [1, 2, 3, 4, 5]\nprint(reduce(lambda x, y: x + y, numbers))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("Python3.x开始reduce()已经被移到functools模块里，如果我们要使用，需要用from functools import reduce导入")])])]),s._v(" "),n("li",[s._v("enumerate函数\n"),n("ul",[n("li",[s._v("enumerate()函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标")])])]),s._v(" "),n("li",[s._v("Zip函数\n"),n("ul",[n("li",[s._v("zip()函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表")]),s._v(" "),n("li",[s._v("当我们使用zip()函数时，如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("a = [1, 2, 3]\nb = ('x', 'y', 'z')\nc = ('m', 'n')\nprint(list(zip(a, b, c)))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])])]),s._v(" "),n("li",[s._v("Filter函数\n"),n("ul",[n("li",[s._v("filter()函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("filter(function, iterable)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("def is_odd(n):\n\treturn n % 2 == 1\n\nold_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(list(filter(is_odd, old_list)))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])])])])}),[],!1,null,null,null);a.default=t.exports}}]);