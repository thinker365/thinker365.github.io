(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{570:function(s,n,t){"use strict";t.r(n);var a=t(35),_=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#new"}},[s._v("_new_")])]),t("li",[t("a",{attrs:{href:"#init"}},[s._v("_init_")])]),t("li",[t("a",{attrs:{href:"#del"}},[s._v("_del_")])]),t("li",[t("a",{attrs:{href:"#call"}},[s._v("_call_")])]),t("li",[t("a",{attrs:{href:"#str"}},[s._v("_str_")])]),t("li",[t("a",{attrs:{href:"#python-代码"}},[s._v("Python 代码")])])])]),t("p"),s._v(" "),t("ul",[t("li",[s._v("Python 中，以双下划线__包起来的方法，统称为：魔术方法（Magic Method）")]),s._v(" "),t("li",[s._v("魔术方法是一个类或对象中的特殊方法，和普通方法的区别在于，普通方法需要手动调用，而魔术方法是在特定时刻自动触发执行的")]),s._v(" "),t("li",[s._v("如果希望根据自己的程序定制自己特殊功能的类，那么就需要对这些魔术方法进行重写")])]),s._v(" "),t("h2",{attrs:{id:"new"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new"}},[s._v("#")]),s._v(" "),t("strong",[s._v("new")])]),s._v(" "),t("ol",[t("li",[s._v("说明：实例化对象方法")]),s._v(" "),t("li",[s._v("触发时机：在实例化时触发")]),s._v(" "),t("li",[s._v("参数：至少得有一个cls接收当前类，写法为__new__(cls, *args, **kwargs)")]),s._v(" "),t("li",[s._v("返回值：必须使用return关键字返回一个对象实例")]),s._v(" "),t("li",[s._v("作用：实例化(创建)对象，开辟内存地址空间对象并返回")]),s._v(" "),t("li",[s._v("注意：实例化对象是Object类底层实现，其他类继承了Object的__new__才能够实现实例化对象")])]),s._v(" "),t("h2",{attrs:{id:"init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#init"}},[s._v("#")]),s._v(" "),t("strong",[s._v("init")])]),s._v(" "),t("ol",[t("li",[s._v("说明：初始化方法，相当于java中的构造方法，在__new__执行后被调用")]),s._v(" "),t("li",[s._v("触发时机：初始化对象时触发（区别于__new__实例化时的触发）")]),s._v(" "),t("li",[s._v("参数：至少得有一个self接收__new__方法返回的对象，写法为__init__(self, name, age)")]),s._v(" "),t("li",[s._v("返回值：无")]),s._v(" "),t("li",[s._v("作用：初始化对象的成员")]),s._v(" "),t("li",[s._v("注意：使用该方式初始化的成员都是直接写入对象当中，类中无法具有")])]),s._v(" "),t("h2",{attrs:{id:"del"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#del"}},[s._v("#")]),s._v(" "),t("strong",[s._v("del")])]),s._v(" "),t("ol",[t("li",[s._v("说明：析构魔术方法")]),s._v(" "),t("li",[s._v("触发时机：当一块地址空间没有任何指针引用的时候被触发\n"),t("ul",[t("li",[s._v("在 Python 解释器中，当所有代码程序执行完成则会进行垃圾回收，也叫内存释放，这时就会触发__del__方法")]),s._v(" "),t("li",[s._v("使用del 对象名显示删除引用关系时，如果此操作将某块地址空间的最后一个引用关系给删除，则会触发__del__方法")])])]),s._v(" "),t("li",[s._v("参数：仅只一个self参数接收对象")]),s._v(" "),t("li",[s._v("返回值：无")]),s._v(" "),t("li",[s._v("作用：使用完对象时回收资源，没有指针引用的时候会调用，绝大多数时候不需要重写")]),s._v(" "),t("li",[s._v("注意：del 对象名不一定会触发当前方法，只有某块地址空间无任何引用时才会触发")])]),s._v(" "),t("h2",{attrs:{id:"call"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#call"}},[s._v("#")]),s._v(" "),t("strong",[s._v("call")])]),s._v(" "),t("ol",[t("li",[s._v("说明：调用对象函数的魔术方法")]),s._v(" "),t("li",[s._v("触发时机：将对象当作函数调用时触发，使用形式为对象名称()，会默认调用__call__函数里的内容")]),s._v(" "),t("li",[s._v("参数：至少得有一个self接收对象，剩余参数根据调用时传入的参数决定，写法为__call__(self, args)")]),s._v(" "),t("li",[s._v("返回值：根据具体重写逻辑而定")]),s._v(" "),t("li",[s._v("作用：将复杂的步骤统一放在该函数内实现，减少调用的步骤，比较方便")]),s._v(" "),t("li",[s._v("注意：无")])]),s._v(" "),t("h2",{attrs:{id:"str"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#str"}},[s._v("#")]),s._v(" "),t("strong",[s._v("str")])]),s._v(" "),t("ol",[t("li",[s._v("说明：当print(对象名)时想看到更多的信息时，可以重写__str__方法，将想要输出的信息放在__str__函数中返回")]),s._v(" "),t("li",[s._v("触发时机：使用print(对象名)或者str(对象名)的时候触发")]),s._v(" "),t("li",[s._v("参数：一个self参数接收对象")]),s._v(" "),t("li",[s._v("返回值：必须是字符串类型")]),s._v(" "),t("li",[s._v("作用：print(对象名)时可以自定义输出更多有用信息")]),s._v(" "),t("li",[s._v("注意：无")])]),s._v(" "),t("h2",{attrs:{id:"python-代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python-代码"}},[s._v("#")]),s._v(" Python 代码")]),s._v(" "),t("ol",[t("li",[s._v("代码实例"),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('"""\n作者: liulinyuan\n时间: 2022/7/27/0027 22:00\n文件: tmp.py\n"""\n\n\nclass People:\n\t"""\n\tpython魔术方法\n\t"""\n\n\tdef __new__(cls, *args, **kwargs):\n\t\t"""\n\t\t创建对象\n\t\t:param args:\n\t\t:param kwargs:\n\t\t"""\n\t\tprint(\'调用父类的__new__()方法创建对象，开辟内存空间\')\n\t\tinstance = super().__new__(cls)\n\t\tprint(\'将创建的地址空间对象返回，交给__init__方法接收\')\n\t\treturn instance\n\n\tdef __init__(self, name):\n\t\t"""\n\t\t实例化对象\n\t\t"""\n\t\tprint(\'在__new__方法返回的内存空间地址中放置name属性\')\n\t\tself.name = name\n\n\tdef __call__(self, *args, **kwargs):\n\t\t"""\n\t\t对象作为函数调用时的逻辑\n\t\t:param args:\n\t\t:param kwargs:\n\t\t:return:\n\t\t"""\n\t\tprint(f\'__call__方法，接受到的参数：{args, kwargs}\')\n\n\tdef __del__(self):\n\t\t"""\n\t\t删除对象\n\t\t:return:\n\t\t"""\n\t\tprint(\'__del__析构方法，删除对象，释放内存空间\')\n\n\tdef __str__(self):\n\t\t"""\n\t\t自定义print(对象名)时的输出内容\n\t\t:return:\n\t\t"""\n\t\treturn f\'对象的name是：{self.name}\'\n\n\nif __name__ == \'__main__\':\n\tp = People(\'thinker365\')\n\tp(\'a\', b=1)\n\tprint(p)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br")])])]),s._v(" "),t("li",[s._v("结果输出"),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("调用父类的__new__()方法创建对象，开辟内存空间\n将创建的地址空间对象返回，交给__init__方法接收\n在__new__方法返回的内存空间地址中放置name属性\n__call__方法，接受到的参数：(('a',), {'b': 1})\n对象的name是：thinker365\n__del__析构方法，删除对象，释放内存空间\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])])])])])}),[],!1,null,null,null);n.default=_.exports}}]);