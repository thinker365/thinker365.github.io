(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{495:function(s,a,t){s.exports=t.p+"assets/img/git.94389b56.jpg"},608:function(s,a,t){"use strict";t.r(a);var n=t(35),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#git简介"}},[s._v("Git简介")])]),n("li",[n("a",{attrs:{href:"#准备阶段"}},[s._v("准备阶段")])]),n("li",[n("a",{attrs:{href:"#常用操作"}},[s._v("常用操作")]),n("ul",[n("li",[n("a",{attrs:{href:"#git-clone"}},[s._v("git clone")])]),n("li",[n("a",{attrs:{href:"#git-config"}},[s._v("git config")])]),n("li",[n("a",{attrs:{href:"#git-branch"}},[s._v("git branch")])]),n("li",[n("a",{attrs:{href:"#git-checkout"}},[s._v("git checkout")])]),n("li",[n("a",{attrs:{href:"#git-status"}},[s._v("git status")])]),n("li",[n("a",{attrs:{href:"#git-add"}},[s._v("git add")])]),n("li",[n("a",{attrs:{href:"#git-commit"}},[s._v("git commit")])]),n("li",[n("a",{attrs:{href:"#git-push"}},[s._v("git push")])]),n("li",[n("a",{attrs:{href:"#git-pull"}},[s._v("git pull")])]),n("li",[n("a",{attrs:{href:"#git-log"}},[s._v("git log")])]),n("li",[n("a",{attrs:{href:"#git-tag"}},[s._v("git tag")])]),n("li",[n("a",{attrs:{href:"#gitignore"}},[s._v(".gitignore")])])])]),n("li",[n("a",{attrs:{href:"#深入探索"}},[s._v("深入探索")]),n("ul",[n("li",[n("a",{attrs:{href:"#基本概念"}},[s._v("基本概念")])]),n("li",[n("a",{attrs:{href:"#操作文件"}},[s._v("操作文件")])]),n("li",[n("a",{attrs:{href:"#操作分支"}},[s._v("操作分支")])]),n("li",[n("a",{attrs:{href:"#操作历史"}},[s._v("操作历史")])]),n("li",[n("a",{attrs:{href:"#远程版本库连接"}},[s._v("远程版本库连接")])]),n("li",[n("a",{attrs:{href:"#问题排查"}},[s._v("问题排查")])]),n("li",[n("a",{attrs:{href:"#更多操作"}},[s._v("更多操作")])])])])])]),n("p"),s._v(" "),n("h2",{attrs:{id:"git简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git简介"}},[s._v("#")]),s._v(" Git简介")]),s._v(" "),n("ul",[n("li",[s._v("Git 是一种分布式版本控制系统，它可以不受网络连接的限制，加上其它众多优点，目前已经成为程序开发人员做项目版本管理时的首选，非开发人员也可以用 Git 来做自己的文档版本管理工具。")])]),s._v(" "),n("h2",{attrs:{id:"准备阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备阶段"}},[s._v("#")]),s._v(" 准备阶段")]),s._v(" "),n("ul",[n("li",[s._v("进入 Git官网 下载合适你的安装包，安装好 Git 后，打开命令行工具，进入工作文件夹（为了便于理解我们在系统桌面上演示），创建一个新的demo文件夹。")])]),s._v(" "),n("h2",{attrs:{id:"常用操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用操作"}},[s._v("#")]),s._v(" 常用操作")]),s._v(" "),n("h3",{attrs:{id:"git-clone"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-clone"}},[s._v("#")]),s._v(" git clone")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git clone https://github.com/gafish/gafish.github.com.git\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"git-config"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-config"}},[s._v("#")]),s._v(" git config")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("“配置开发者用户名和邮箱\ngit config user.name gafish\ngit config user.email gafish@qqqq.com\n每次代码提交的时候都会生成一条提交记录，其中会包含当前配置的用户名和邮箱。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"git-branch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[s._v("#")]),s._v(" git branch")]),s._v(" "),n("ul",[n("li",[s._v("创建、重命名、查看、删除项目分支，通过 Git 做项目开发时，一般都是在开发分支中进行，开发完成后合并分支到主干。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git branch daily/0.0.0\n创建一个名为 daily/0.0.0 的日常开发分支，分支名只要不包括特殊字符即可。\ngit branch -m daily/0.0.0 daily/0.0.1\n如果觉得之前的分支名不合适，可以为新建的分支重命名，重命名分支名为 daily/0.0.1\ngit branch\n通过不带参数的branch命令可以查看当前项目分支列表\ngit branch -d daily/0.0.1\n如果分支已经完成使命则可以通过 -d 参数将分支删除，这里为了继续下一步操作，暂不执行删除操作\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"git-checkout"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[s._v("#")]),s._v(" git checkout")]),s._v(" "),n("ul",[n("li",[s._v("切换分支")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git checkout daily/0.0.1\n切换到 daily/0.0.1 分支，后续的操作将在这个分支上进行\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"git-status"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-status"}},[s._v("#")]),s._v(" git status")]),s._v(" "),n("ul",[n("li",[s._v("查看文件变动状态")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git status\n通过 git status 命令可以看到文件当前状态 Changes not staged for commit:（改动文件未提交到暂存区）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"git-add"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-add"}},[s._v("#")]),s._v(" git add")]),s._v(" "),n("ul",[n("li",[s._v("添加文件变动到暂存区")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git add README.md\n通过指定文件名 README.md 可以将该文件添加到暂存区，如果想添加所有文件可用 git add . 命令，这时候可通过 git status 看到文件当前状态 Changes to be committed: （文件已提交到暂存区）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"git-commit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[s._v("#")]),s._v(" git commit")]),s._v(" "),n("ul",[n("li",[s._v("提交文件变动到版本库")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git commit -m '这里写提交原因'\n通过 -m 参数可直接在命令行里输入提交描述文本\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"git-push"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-push"}},[s._v("#")]),s._v(" git push")]),s._v(" "),n("ul",[n("li",[s._v("将本地的代码改动推送到服务器")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git push origin daily/0.0.1\norigin 指代的是当前的git服务器地址，这行命令的意思是把 daily/0.0.1 分支推送到服务器，当看到命令行返回如下字符表示推送成功了。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"git-pull"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-pull"}},[s._v("#")]),s._v(" git pull")]),s._v(" "),n("ul",[n("li",[s._v("将服务器上的最新代码拉取到本地")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git pull origin daily/0.0.1\n如果其它项目成员对项目做了改动并推送到服务器，我们需要将最新的改动更新到本地，这里我们来模拟一下这种情况。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"git-log"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[s._v("#")]),s._v(" git log")]),s._v(" "),n("ul",[n("li",[s._v("查看版本提交记录")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git log\n通过以上命令，我们可以查看整个项目的版本提交记录，它里面包含了提交人、日期、提交原因等信息\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"git-tag"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-tag"}},[s._v("#")]),s._v(" git tag")]),s._v(" "),n("ul",[n("li",[s._v("为项目标记里程碑")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git tag publish/0.0.1\ngit push origin publish/0.0.1\n当我们完成某个功能需求准备发布上线时，应该将此次完整的项目代码做个标记，并将这个标记好的版本发布到线上，这里我们以 publish/0.0.1 为标记名并发布\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"gitignore"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[s._v("#")]),s._v(" .gitignore")]),s._v(" "),n("ul",[n("li",[s._v("设置哪些内容不需要推送到服务器，这是一个配置文件")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("touch .gitignore\n.gitignore 不是 Git 命令，而在项目中的一个文件，通过设置 .gitignore 的内容告诉 Git 哪些文件应该被忽略不需要推送到服务器，通过以上命令可以创建一个 .gitignore 文件，并在编辑器中打开文件，每一行代表一个要忽略的文件或目录，如：\ndemo.html\nbuild/\n以上内容的意思是 Git 将忽略 demo.html 文件 和 build/ 目录，这些内容不会被推送到服务器上\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"深入探索"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深入探索"}},[s._v("#")]),s._v(" 深入探索")]),s._v(" "),n("h3",{attrs:{id:"基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[s._v("#")]),s._v(" 基本概念")]),s._v(" "),n("ol",[n("li",[s._v("工作区（Working Directory）\n"),n("ul",[n("li",[s._v("就是你在电脑里能看到的目录，比如上文中的 gafish.github.com 文件夹就是一个工作区图片")])])]),s._v(" "),n("li",[s._v("本地版本库（Local Repository）\n"),n("ul",[n("li",[s._v("工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。")])])]),s._v(" "),n("li",[s._v("暂存区（stage）\n"),n("ul",[n("li",[s._v("本地版本库里存了很多东西，其中最重要的就是称为 stage（或者叫index）的暂存区，还有 Git 为我们自动创建的第一个分支 master，以及指向 master 的一个指针叫 HEAD。")])])]),s._v(" "),n("li",[s._v("远程版本库（Remote Repository）\n"),n("ul",[n("li",[s._v("一般指的是 Git 服务器上所对应的仓库，本文的示例所在的github仓库就是一个远程版本库图片")])])]),s._v(" "),n("li",[s._v("工作区、暂存区、本地版本库、远程版本库之间几个常用的 Git 操作流程如下图所示：\n"),n("img",{attrs:{src:t(495),alt:""}})]),s._v(" "),n("li",[s._v("分支（Branch）\n"),n("ul",[n("li",[s._v("分支是为了将修改记录的整个流程分开存储，让分开的分支不受其它分支的影响，所以在同一个数据库里可以同时进行多个不同的修改")])])]),s._v(" "),n("li",[s._v("主分支（Master）\n"),n("ul",[n("li",[s._v("前面提到过 master 是 Git 为我们自动创建的第一个分支，也叫主分支，其它分支开发完成后都要合并到 master")])])]),s._v(" "),n("li",[s._v("标签（Tag）\n"),n("ul",[n("li",[s._v("标签是用于标记特定的点或提交的历史，通常会用来标记发布版本的名称或版本号（如：publish/0.0.1），虽然标签看起来有点像分支，但打上标签的提交是固定的，不能随意的改动，参见上图中的1.0 / 2.0 / 3.0")])])]),s._v(" "),n("li",[s._v("HEAD\n"),n("ul",[n("li",[s._v("HEAD 指向的就是当前分支的最新提交")])])])]),s._v(" "),n("h3",{attrs:{id:"操作文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#操作文件"}},[s._v("#")]),s._v(" 操作文件")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("git add")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("“添加文件到暂存区\ngit add -i\n通过此命令将打开交互式子命令系统，你将看到如下子命令\n***Commands***\n  1: status      2: update      3: revert      4: add untracked\n  5: patch      6: diff      7: quit      8: help\n通过输入序列号或首字母可以选择相应的功能，具体的功能解释如下：\nstatus：功能上和 git add -i 相似，没什么鸟用\nupdate：详见下方 git add -u\nrevert：把已经添加到暂存区的文件从暂存区剔除，其操作方式和 update类似\nadd untracked：可以把新增的文件添加到暂存区，其操作方式和 update 类似\npatch：详见下方 git add -p\ndiff：比较暂存区文件和本地版本库的差异，其操作方式和 update 类似\nquit：退出 git add -i 命令系统\nhelp：查看帮助信息\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git add -p\t\n直接进入交互命令中最有用的 patch 模式\n这是交互命令中最有用的模式，其操作方式和 update 类似，选择后 Git 会显示这些文件的当前内容与本地版本库中的差异，然后您可以自己决定是否添加这些修改到暂存区，在命令行 Stage deletion [y,n,q,a,d,/,?]? 后输入 y,n,q,a,d,/,? 其中一项选择操作方式，具体功能解释如下：\ny：接受修改\nn：忽略修改\nq：退出当前命令\na：添加修改\nd：放弃修改\n/：通过正则表达式匹配修改内容\n?：查看帮助信息\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git add -u\n直接进入交互命令中的 update 模式\n它会先列出工作区 修改 或 删除 的文件列表，新增 的文件不会被显示，在命令行 Update>> 后输入相应的列表序列号表示选中该项，回车继续选择，如果已选好，直接回车回到命令主界面\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git add --ignore-removal .\n添加工作区 修改 或 新增 的文件列表， 删除 的文件不会被添加\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git commit")]),s._v(" "),n("ul",[n("li",[s._v("把暂存区的文件提交到本地版本库")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git commit -m '第一行提交原因'  -m '第二行提交原因'\n不打开编辑器，直接在命令行中输入多行提交原因\ngit commit -am '提交原因'\n将工作区 修改 或 删除 的文件提交到本地版本库， 新增 的文件不会被提交\ngit commit --amend -m '提交原因'\n修改最新一条提交记录的提交原因\ngit commit -C HEAD\n将当前文件改动提交到 HEAD 或当前分支的历史ID\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git mv")]),s._v(" "),n("ul",[n("li",[s._v("移动或重命名文件、目录")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git mv a.md b.md -f\n将 a.md 重命名为 b.md ，同时添加变动到暂存区，加 -f 参数可以强制重命名，相比用 mv a.md b.md 命令省去了 git add 操作\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git rm")]),s._v(" "),n("ul",[n("li",[s._v("从工作区和暂存区移除文件")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git rm b.md\n从工作区和暂存区移除文件 b.md ，同时添加变动到暂存区，相比用 rm b.md 命令省去了 git add 操作\ngit rm src/ -r\n允许从工作区和暂存区移除目录\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git status")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git status -s\n以简短方式查看工作区和暂存区文件状态\ngit status --ignored\n查看工作区和暂存区文件状态，包括被忽略的文件\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])])])]),s._v(" "),n("h3",{attrs:{id:"操作分支"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#操作分支"}},[s._v("#")]),s._v(" 操作分支")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("git branch")]),s._v(" "),n("ul",[n("li",[s._v("查看、创建、删除分支")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git branch -a\n查看本地版本库和远程版本库上的分支列表\ngit branch -r\n查看远程版本库上的分支列表，加上 -d 参数可以删除远程版本库上的分支\ngit branch -D\n分支未提交到本地版本库前强制删除分支\ngit branch -vv\n查看带有最后提交id、最近提交原因等信息的本地版本库分支列表\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git merge")]),s._v(" "),n("ul",[n("li",[s._v("将其它分支合并到当前分支")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git merge --squash\n将待合并分支上的 commit 合并成一个新的 commit 放入当前分支，适用于待合并分支的提交记录不需要保留的情况图片\ngit merge --no-ff\n默认情况下，Git 执行\"快进式合并\"（fast-farward merge），会直接将 Master分支指向 Develop 分支，使用 --no-ff 参数后，会执行正常合并，在 Master分支上生成一个新节点，保证版本演进更清晰。\ngit merge --no-edit\n在没有冲突的情况下合并，不想手动编辑提交原因，而是用 Git 自动生成的类似 Merge branch 'test' 的文字直接提交\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git checkout")]),s._v(" "),n("ul",[n("li",[s._v("切换分支")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git checkout -b daily/0.0.1\n创建 daily/0.0.1 分支，同时切换到这个新创建的分支\ngit checkout HEAD demo.html\n从本地版本库的 HEAD（也可以是提交ID、分支名、Tag名） 历史中检出 demo.html 覆盖当前工作区的文件，如果省略 HEAD 则是从暂存区检出\ngit checkout --orphan new_branch\n这个命令会创建一个全新的，完全没有历史记录的新分支，但当前源分支上所有的最新文件都还在，真是强迫症患者的福音，但这个新分支必须做一次 git commit操作后才会真正成为一个新分支。\ngit checkout -p other_branch\n这个命令主要用来比较两个分支间的差异内容，并提供交互式的界面来选择进一步的操作，这个命令不仅可以比较两个分支间的差异，还可以比较单个文件的差异。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git stash")]),s._v(" "),n("ul",[n("li",[s._v("在 Git 的栈中保存当前修改或删除的工作进度，当你在一个分支里做某项功能开发时，接到通知把昨天已经测试完没问题的代码发布到线上，但这时你已经在这个分支里加入了其它未提交的代码，这个时候就可以把这些未提交的代码存到栈里。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('git stash\n将未提交的文件保存到Git栈中\ngit stash list\n查看栈中保存的列表\ngit stash show stash@{0}\n显示栈中其中一条记录\ngit stash drop stash@{0}\n移除栈中其中一条记录\ngit stash pop\n从Git栈中检出最新保存的一条记录，并将它从栈中移除\ngit stash apply stash@{0}\n从Git栈中检出其中一条记录，但不从栈中移除\ngit stash branch new_banch\n把当前栈中最近一次记录检出并创建一个新分支\ngit stash clear\n清空栈里的所有记录\ngit stash create\n为当前修改或删除的文件创建一个自定义的栈并返回一个ID，此时并未真正存储到栈里\ngit stash store xxxxxx\n将 create 方法里返回的ID放到 store 后面，此时在栈里真正创建了一个记录，但当前修改或删除的文件并未从工作区移除\n$ git stash create\n09eb9a97ad632d0825be1ece361936d1d0bdb5c7\n$ git stash store 09eb9a97ad632d0825be1ece361936d1d0bdb5c7\n$ git stash list\nstash@{0}: Created via "git stash store".\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])])])]),s._v(" "),n("h3",{attrs:{id:"操作历史"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#操作历史"}},[s._v("#")]),s._v(" 操作历史")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("git log")]),s._v(" "),n("ul",[n("li",[s._v("显示提交历史记录")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('git log -p\n显示带提交差异对比的历史记录\ngit log demo.html\n显示 demo.html 文件的历史记录\ngit log --since="2 weeks ago"\n显示2周前开始到现在的历史记录，其它时间可以类推\ngit log --before="2 weeks ago"\n显示截止到2周前的历史记录，其它时间可以类推\ngit log -10\n显示最近10条历史记录\ngit log f5f630a..HEAD\n显示从提交ID f5f630a 到 HEAD 之间的记录，HEAD 可以为空或其它提交ID\ngit log --pretty=oneline\n在一行中输出简短的历史记录\ngit log --pretty=format:"%h"\n格式化输出历史记录\n\nGit 用各种 placeholder 来决定各种显示内容，我挑几个常用的显示如下：\n\n%H: commit hash\n%h: 缩短的commit hash\n%T: tree hash\n%t: 缩短的 tree hash\n%P: parent hashes\n%p: 缩短的 parent hashes\n%an: 作者名字\n%aN: mailmap的作者名\n%ae: 作者邮箱\n%ad: 日期 (--date= 制定的格式)\n%ar: 日期, 相对格式(1 day ago)\n%cn: 提交者名字\n%ce: 提交者 email\n%cd: 提交日期 (--date= 制定的格式)\n%cr: 提交日期, 相对格式(1 day ago)\n%d: ref名称\n%s: commit信息标题\n%b: commit信息内容\n%n: 换行\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git cherry-pick")]),s._v(" "),n("ul",[n("li",[s._v("合并分支的一条或几条提交记录到当前分支末梢")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git cherry-pick 170a305\n合并提交ID 170a305 到当前分支末梢\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git reset")]),s._v(" "),n("ul",[n("li",[s._v("将当前的分支重设（reset）到指定的 "),n("commit",[s._v(" 或者 HEAD")])],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git reset --mixed <commit>\n--mixed 是不带参数时的默认参数，它退回到某个版本，保留文件内容，回退提交历史\ngit reset --soft <commit>\n暂存区和工作区中的内容不作任何改变，仅仅把 HEAD 指向 <commit>\ngit reset --hard <commit>\n自从 <commit> 以来在工作区中的任何改变都被丢弃，并把 HEAD 指向 <commit>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git rebase")]),s._v(" "),n("ul",[n("li",[s._v("重新定义分支的版本库状态")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git rebase branch_name\n合并分支，这跟 merge 很像，但还是有本质区别\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("合并过程中可能需要先解决冲突，然后执行 git rebase --continue\ngit rebase -i HEAD~~\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("打开文本编辑器，将看到从 HEAD 到 HEAD~~ 的提交如下")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('pick 9a54fd4 添加commit的说明\npick 0d4a808 添加pull的说明\n# Rebase 326fc9f..0d4a808 onto d286baa\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like "squash", but discard this commit\'s log message\n#  x, exec = run command (the rest of the line) using shell\n将第一行的 pick 改成 Commands 中所列出来的命令，然后保存并退出，所对应的修改将会生效。如果移动提交记录的顺序，将改变历史记录中的排序。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git revert")]),s._v(" "),n("ul",[n("li",[s._v("撤销某次操作，此次操作之前和之后的 commit 和 history 都会保留，并且把这次撤销作为一次最新的提交")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('git revert HEAD\n撤销前一次提交操作\ngit revert HEAD --no-edit\n撤销前一次提交操作，并以默认的 Revert "xxx" 为提交原因\ngit revert -n HEAD\n需要撤销多次操作的时候加 -n 参数，这样不会每次撤销操作都提交，而是等所有撤销都完成后一起提交\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git diff")]),s._v(" "),n("ul",[n("li",[s._v("查看工作区、暂存区、本地版本库之间的文件差异，用一张图来解释")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git diff --stat\n通过 --stat 参数可以查看变更统计数据\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("git reflog")]),s._v(" "),n("ul",[n("li",[s._v("reflog 可以查看所有分支的所有操作记录（包括commit和reset的操作、已经被删除的commit记录，跟 git log 的区别在于它不能查看已经删除了的commit记录")])])])]),s._v(" "),n("h3",{attrs:{id:"远程版本库连接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#远程版本库连接"}},[s._v("#")]),s._v(" 远程版本库连接")]),s._v(" "),n("p",[s._v("如果在GitHub项目初始化之前，文件已经存在于本地目录中，那可以在本地初始化本地版本库，再将本地版本库跟远程版本库连接起来")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git init\n在本地目录内部会生成.git文件夹\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git remote\ngit remote -v\n不带参数，列出已经存在的远程分支，加上 -v 列出详细信息，在每一个名字后面列出其远程url\ngit remote add origin https://github.com/gafish/gafish.github.com.git\n添加一个新的远程仓库，指定一个名字，以便引用后面带的URL\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git fetch\n将远程版本库的更新取回到本地版本库\ngit fetch origin daily/0.0.1\n默认情况下，git fetch 取回所有分支的更新。如果只想取回特定分支的更新，可以指定分支名。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"问题排查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题排查"}},[s._v("#")]),s._v(" 问题排查")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git blame\n查看文件每行代码块的历史信息\ngit blame -L 1,10 demo.html\n截取 demo.html 文件1-10行历史信息\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git bisect\n二分查找历史记录，排查BUG\ngit bisect start\n开始二分查找\ngit bisect bad\n标记当前二分提交ID为有问题的点\ngit bisect good\n标记当前二分提交ID为没问题的点\ngit bisect reset\n查到有问题的提交ID后回到原分支\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"更多操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更多操作"}},[s._v("#")]),s._v(" 更多操作")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git submodule\n通过 Git 子模块可以跟踪外部版本库，它允许在某一版本库中再存储另一版本库，并且能够保持2个版本库完全独立\ngit submodule add https://github.com/gafish/demo.git demo\n将 demo 仓库添加为子模块\n\ngit submodule update demo\n更新子模块 demo\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git gc\n运行Git的垃圾回收功能，清理冗余的历史快照\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("git archive\n将加了tag的某个版本打包提取\ngit archive -v --format=zip v0.1 > v0.1.zip\n--format 表示打包的格式，如 zip，-v 表示对应的tag名，后面跟的是tag名，如 v0.1。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("参考资料")]),s._v(" "),n("li",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/dYMaQSS25QsK07UmSbTt3A",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://mp.weixin.qq.com/s/dYMaQSS25QsK07UmSbTt3A"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);