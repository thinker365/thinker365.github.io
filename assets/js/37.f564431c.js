(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{551:function(a,t,s){"use strict";s.r(t);var e=s(35),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#简介"}},[a._v("简介")])]),s("li",[s("a",{attrs:{href:"#代码覆盖率"}},[a._v("代码覆盖率")]),s("ul",[s("li",[s("a",{attrs:{href:"#行覆盖"}},[a._v("行覆盖")])]),s("li",[s("a",{attrs:{href:"#类覆盖"}},[a._v("类覆盖")])]),s("li",[s("a",{attrs:{href:"#方法覆盖"}},[a._v("方法覆盖")])]),s("li",[s("a",{attrs:{href:"#分支覆盖"}},[a._v("分支覆盖")])]),s("li",[s("a",{attrs:{href:"#指令覆盖"}},[a._v("指令覆盖")])]),s("li",[s("a",{attrs:{href:"#圈复杂度"}},[a._v("圈复杂度")])])])]),s("li",[s("a",{attrs:{href:"#代码覆盖率意义"}},[a._v("代码覆盖率意义")])]),s("li",[s("a",{attrs:{href:"#覆盖率的误区"}},[a._v("覆盖率的误区")])]),s("li",[s("a",{attrs:{href:"#jacoco原理"}},[a._v("JaCoCo原理")]),s("ul",[s("li",[s("a",{attrs:{href:"#on-the-fly-模式"}},[a._v("on-the-fly 模式")])]),s("li",[s("a",{attrs:{href:"#offline-模式"}},[a._v("offline 模式")])]),s("li",[s("a",{attrs:{href:"#on-the-fly-和-offline-对比"}},[a._v("on-the-fly 和 offline 对比")])]),s("li",[s("a",{attrs:{href:"#不适合使用-on-the-fly-模式"}},[a._v("不适合使用 on-the-fly 模式")])])])]),s("li",[s("a",{attrs:{href:"#ide集成"}},[a._v("IDE集成")]),s("ul",[s("li",[s("a",{attrs:{href:"#配置code-coverage"}},[a._v("配置Code Coverage")])]),s("li",[s("a",{attrs:{href:"#查看报表"}},[a._v("查看报表")])])])]),s("li",[s("a",{attrs:{href:"#命令行执行"}},[a._v("命令行执行")])]),s("li",[s("a",{attrs:{href:"#参考"}},[a._v("参考")])])])]),s("p"),a._v(" "),s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[a._v("#")]),a._v(" 简介")]),a._v(" "),s("p",[a._v("JaCoCo是一个免费、开源Java代码覆盖率工具")]),a._v(" "),s("h2",{attrs:{id:"代码覆盖率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码覆盖率"}},[a._v("#")]),a._v(" 代码覆盖率")]),a._v(" "),s("ol",[s("li",[a._v("覆盖率是用来衡量测试代码对功能代码的测试情况，通过统计测试代中对功能代码中行、分支、类等模拟场景数量，来量化说明测试的充分度。代码覆盖率 = 代码的覆盖程度，一种度量方式。")]),a._v(" "),s("li",[a._v("覆盖率简单说：跑了一个测试用例，项目代码中哪些模块、文件、类、方法、行执行了。")]),a._v(" "),s("li",[a._v("其中行覆盖率是最细粒度，其他覆盖率都可从行覆盖情况计算出来。")])]),a._v(" "),s("h3",{attrs:{id:"行覆盖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行覆盖"}},[a._v("#")]),a._v(" 行覆盖")]),a._v(" "),s("p",[a._v("当至少一个指令被指定源码行执行时，该源码行被认为已执行。")]),a._v(" "),s("h3",{attrs:{id:"类覆盖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类覆盖"}},[a._v("#")]),a._v(" 类覆盖")]),a._v(" "),s("p",[a._v("当一个类至少有一个方法已执行，则该类被认为已执行，包括构造函数和静态初始化方法。")]),a._v(" "),s("h3",{attrs:{id:"方法覆盖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法覆盖"}},[a._v("#")]),a._v(" 方法覆盖")]),a._v(" "),s("p",[a._v("当方法中至少有一个指令被执行，该方法被认为已执行，包括构造函数和静态初始化方法。")]),a._v(" "),s("h3",{attrs:{id:"分支覆盖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支覆盖"}},[a._v("#")]),a._v(" 分支覆盖")]),a._v(" "),s("p",[a._v("if 和 switch 语句算作分支覆盖率，这个指标计算一个方法中的分支总数，并决定已执行和未执行的分支的数量。全部未覆盖：所有分支均未执行，红色标志部分覆盖：部分分支被执行，黄色标志全覆盖：所有分支均已执行，绿色标志")]),a._v(" "),s("h3",{attrs:{id:"指令覆盖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指令覆盖"}},[a._v("#")]),a._v(" 指令覆盖")]),a._v(" "),s("p",[a._v("指令覆盖最小单元是 Java 字节码指令，指令覆盖率提供了代码是否被执行的信息，它为执行/未执行代码提供了大量的信息。")]),a._v(" "),s("h3",{attrs:{id:"圈复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#圈复杂度"}},[a._v("#")]),a._v(" 圈复杂度")]),a._v(" "),s("p",[a._v("在（线性）组合中，计算在一个方法里面所有可能路径的最小数目。可以作为度量单元测试是否完全覆盖所有场景的一个依据。")]),a._v(" "),s("h2",{attrs:{id:"代码覆盖率意义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码覆盖率意义"}},[a._v("#")]),a._v(" 代码覆盖率意义")]),a._v(" "),s("p",[a._v("分析未覆盖部分的代码，反推测试设计是否充分，没有覆盖到的代码是否存在测试设计盲点。")]),a._v(" "),s("h2",{attrs:{id:"覆盖率的误区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#覆盖率的误区"}},[a._v("#")]),a._v(" 覆盖率的误区")]),a._v(" "),s("p",[a._v("代码如下：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\tj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" i          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 没有除零错误")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v("\n\tj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// i==-2除零错误")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("覆盖两个分支只需 i == 101 和 i == 1 ，但对于找到 i == -2 没有作用。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1. 不要简单的追求高的代码覆盖率\n2. 高覆盖测试用例不等于测试用例有用\n3. 没覆盖的分支相当于该分支上的任何错误肯定都测不到\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h2",{attrs:{id:"jacoco原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jacoco原理"}},[a._v("#")]),a._v(" JaCoCo原理")]),a._v(" "),s("p",[a._v("JaCoCo 使用插桩的方式来记录覆盖率数据，是通过一个 probe 探针来注入，插桩模式有两种：")]),a._v(" "),s("h3",{attrs:{id:"on-the-fly-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#on-the-fly-模式"}},[a._v("#")]),a._v(" on-the-fly 模式")]),a._v(" "),s("p",[a._v("JVM 中通过-javaagent 参数指定特定的 jar 文件启动 Instrumentation 的代理程序，代理程序在通过 Class Loader 装载一个 class 前判断是否转换修改 class 文件，将统计代码插入 class，测试覆盖率分析可以在 JVM 执行测试代码的过程中完成。")]),a._v(" "),s("h3",{attrs:{id:"offline-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#offline-模式"}},[a._v("#")]),a._v(" offline 模式")]),a._v(" "),s("p",[a._v("在测试之前先对文件进行插桩，生成插过桩的 class 或 jar 包，测试插过桩的 class 和 jar 包，生成覆盖率信息到文件，最后统一处理，生成报告。")]),a._v(" "),s("h3",{attrs:{id:"on-the-fly-和-offline-对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#on-the-fly-和-offline-对比"}},[a._v("#")]),a._v(" on-the-fly 和 offline 对比")]),a._v(" "),s("p",[a._v("on-the-fly 更方便简单，无需提前插桩，无需考虑 classpath 设置问题。")]),a._v(" "),s("h3",{attrs:{id:"不适合使用-on-the-fly-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不适合使用-on-the-fly-模式"}},[a._v("#")]),a._v(" 不适合使用 on-the-fly 模式")]),a._v(" "),s("ol",[s("li",[a._v("不支持 javaagent")]),a._v(" "),s("li",[a._v("无法设置 JVM 参数")]),a._v(" "),s("li",[a._v("字节码需要被转换成其他虚拟机")]),a._v(" "),s("li",[a._v("动态修改字节码过程和其他 agent 冲突")]),a._v(" "),s("li",[a._v("无法自定义用户加载类")])]),a._v(" "),s("h2",{attrs:{id:"ide集成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ide集成"}},[a._v("#")]),a._v(" IDE集成")]),a._v(" "),s("h3",{attrs:{id:"配置code-coverage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置code-coverage"}},[a._v("#")]),a._v(" 配置Code Coverage")]),a._v(" "),s("ol",[s("li",[a._v("选择 Edit Configurations")]),a._v(" "),s("li",[a._v("选择 Code Coverage，再选择 JaCoCo")]),a._v(" "),s("li",[a._v("选择 Run with Coverage")])]),a._v(" "),s("h3",{attrs:{id:"查看报表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看报表"}},[a._v("#")]),a._v(" 查看报表")]),a._v(" "),s("p",[a._v("Class表示类覆盖率，Method表示方法覆盖率，Line表示行覆盖率")]),a._v(" "),s("h2",{attrs:{id:"命令行执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令行执行"}},[a._v("#")]),a._v(" 命令行执行")]),a._v(" "),s("ol",[s("li",[a._v("下载Jacoco包，解压缩")]),a._v(" "),s("li",[a._v("启动"),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("java -javaagent:jacocoagent.jar=includes=*,output=tcpserver,port=6300,address=localhost,append=true -jar demo-0.0.1.jar\n#demo-0.0.1.jar为被测项目jar包\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])])]),a._v(" "),s("li",[a._v("测试完毕后，使用cli包dump生成exec文件"),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("java -jar cli-0.8.7.jar dump --address 127.0.0.1 --port 6300 --destfile jacoco-demo.exec\n# --address 127.0.0.1 --port 6300 指向jacocoagent启动IP和端口\n# jacoco-demo.exec 为生成exec文件名\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])])]),a._v(" "),s("li",[a._v("cli包将exec文件生成report报表"),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("java -jar cli-0.8.7.jar report jacoco-demo.exec --classfiles D:\\code\\devops\\SBD\\target\\classes --sourcefiles D:\\code\\devops\\SBD\\src\\main\\java --html html-report --xml report.xml --encoding=utf-8\n#--sourcefiles 和 --classfiles 为本地被测项目源码和字节码路径\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])])]),a._v(" "),s("li",[a._v("打开report文件下index.html，查看报告，Cov表示覆盖率；表格列依次是：元素、未覆盖字节码行数、未覆盖的分支数；圈复杂度、行、方法、类")]),a._v(" "),s("li",[a._v("覆盖率标识\n"),s("ul",[s("li",[a._v("条件覆盖：红钻：表示未覆盖；黄钻：表示部分覆盖；绿钻：表示全部覆盖；")]),a._v(" "),s("li",[a._v("行覆盖：全覆盖（绿色），未覆盖（红色），半覆盖（黄色），无视（白色）")])])])]),a._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://www.jacoco.org/jacoco/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.jacoco.org/jacoco/"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);